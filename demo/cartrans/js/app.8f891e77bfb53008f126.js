!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="/dist/",n(n.s=170)}([function(e,t,n){(function(t){var n;n=function(){"use strict";var e=function(e){var t=e.id,n=e.viewBox,r=e.content;this.id=t,this.viewBox=n,this.content=r};function n(e,t){return e(t={exports:{}},t.exports),t.exports}e.prototype.stringify=function(){return this.content},e.prototype.toString=function(){return this.stringify()},e.prototype.destroy=function(){var e=this;["id","viewBox","content"].forEach((function(t){return delete e[t]}))},"undefined"!=typeof window?window:void 0!==t||"undefined"!=typeof self&&self;var r=n((function(e,t){e.exports=function(){function e(e){return e&&"object"==typeof e&&"[object RegExp]"!==Object.prototype.toString.call(e)&&"[object Date]"!==Object.prototype.toString.call(e)}function t(t,n){var i;return n&&!0===n.clone&&e(t)?r((i=t,Array.isArray(i)?[]:{}),t,n):t}function n(n,i,o){var s=n.slice();return i.forEach((function(i,a){void 0===s[a]?s[a]=t(i,o):e(i)?s[a]=r(n[a],i,o):-1===n.indexOf(i)&&s.push(t(i,o))})),s}function r(i,o,s){var a=Array.isArray(o),l=(s||{arrayMerge:n}).arrayMerge||n;return a?Array.isArray(i)?l(i,o,s):t(o,s):function(n,i,o){var s={};return e(n)&&Object.keys(n).forEach((function(e){s[e]=t(n[e],o)})),Object.keys(i).forEach((function(a){e(i[a])&&n[a]?s[a]=r(n[a],i[a],o):s[a]=t(i[a],o)})),s}(i,o,s)}return r.all=function(e,t){if(!Array.isArray(e)||e.length<2)throw new Error("first argument should be an array with at least two elements");return e.reduce((function(e,n){return r(e,n,t)}))},r}()})),i=n((function(e,t){t.default={svg:{name:"xmlns",uri:"http://www.w3.org/2000/svg"},xlink:{name:"xmlns:xlink",uri:"http://www.w3.org/1999/xlink"}},e.exports=t.default})),o=i.svg,s=i.xlink,a={};a[o.name]=o.uri,a[s.name]=s.uri;var l=function(e,t){return void 0===e&&(e=""),"<svg "+function(e){return Object.keys(e).map((function(t){return t+'="'+e[t].toString().replace(/"/g,"&quot;")+'"'})).join(" ")}(r(a,t||{}))+">"+e+"</svg>"};return function(e){function t(){e.apply(this,arguments)}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var n={isMounted:{}};return n.isMounted.get=function(){return!!this.node},t.createFromExistingNode=function(e){return new t({id:e.getAttribute("id"),viewBox:e.getAttribute("viewBox"),content:e.outerHTML})},t.prototype.destroy=function(){this.isMounted&&this.unmount(),e.prototype.destroy.call(this)},t.prototype.mount=function(e){if(this.isMounted)return this.node;var t="string"==typeof e?document.querySelector(e):e,n=this.render();return this.node=n,t.appendChild(n),n},t.prototype.render=function(){var e=this.stringify();return function(e){var t=!!document.importNode,n=(new DOMParser).parseFromString(e,"image/svg+xml").documentElement;return t?document.importNode(n,!0):n}(l(e)).childNodes[0]},t.prototype.unmount=function(){this.node.parentNode.removeChild(this.node)},Object.defineProperties(t.prototype,n),t}(e)},e.exports=n()}).call(this,n(28))},function(e,t,n){(function(t){var n;n=function(){"use strict";function e(e,t){return e(t={exports:{}},t.exports),t.exports}"undefined"!=typeof window?window:void 0!==t||"undefined"!=typeof self&&self;var n=e((function(e,t){e.exports=function(){function e(e){return e&&"object"==typeof e&&"[object RegExp]"!==Object.prototype.toString.call(e)&&"[object Date]"!==Object.prototype.toString.call(e)}function t(t,n){var i;return n&&!0===n.clone&&e(t)?r((i=t,Array.isArray(i)?[]:{}),t,n):t}function n(n,i,o){var s=n.slice();return i.forEach((function(i,a){void 0===s[a]?s[a]=t(i,o):e(i)?s[a]=r(n[a],i,o):-1===n.indexOf(i)&&s.push(t(i,o))})),s}function r(i,o,s){var a=Array.isArray(o),l=(s||{arrayMerge:n}).arrayMerge||n;return a?Array.isArray(i)?l(i,o,s):t(o,s):function(n,i,o){var s={};return e(n)&&Object.keys(n).forEach((function(e){s[e]=t(n[e],o)})),Object.keys(i).forEach((function(a){e(i[a])&&n[a]?s[a]=r(n[a],i[a],o):s[a]=t(i[a],o)})),s}(i,o,s)}return r.all=function(e,t){if(!Array.isArray(e)||e.length<2)throw new Error("first argument should be an array with at least two elements");return e.reduce((function(e,n){return r(e,n,t)}))},r}()})),r=e((function(e,t){t.default={svg:{name:"xmlns",uri:"http://www.w3.org/2000/svg"},xlink:{name:"xmlns:xlink",uri:"http://www.w3.org/1999/xlink"}},e.exports=t.default})),i=r.svg,o=r.xlink,s={};s[i.name]=i.uri,s[o.name]=o.uri;var a,l=function(e,t){return void 0===e&&(e=""),"<svg "+function(e){return Object.keys(e).map((function(t){return t+'="'+e[t].toString().replace(/"/g,"&quot;")+'"'})).join(" ")}(n(s,t||{}))+">"+e+"</svg>"},c=r.svg,u=r.xlink,d={attrs:(a={style:["position: absolute","width: 0","height: 0"].join("; ")},a[c.name]=c.uri,a[u.name]=u.uri,a)},p=function(e){this.config=n(d,e||{}),this.symbols=[]};p.prototype.add=function(e){var t=this.symbols,n=this.find(e.id);return n?(t[t.indexOf(n)]=e,!1):(t.push(e),!0)},p.prototype.remove=function(e){var t=this.symbols,n=this.find(e);return!!n&&(t.splice(t.indexOf(n),1),n.destroy(),!0)},p.prototype.find=function(e){return this.symbols.filter((function(t){return t.id===e}))[0]||null},p.prototype.has=function(e){return null!==this.find(e)},p.prototype.stringify=function(){var e=this.config.attrs,t=this.symbols.map((function(e){return e.stringify()})).join("");return l(t,e)},p.prototype.toString=function(){return this.stringify()},p.prototype.destroy=function(){this.symbols.forEach((function(e){return e.destroy()}))};var f=function(e){var t=e.id,n=e.viewBox,r=e.content;this.id=t,this.viewBox=n,this.content=r};f.prototype.stringify=function(){return this.content},f.prototype.toString=function(){return this.stringify()},f.prototype.destroy=function(){var e=this;["id","viewBox","content"].forEach((function(t){return delete e[t]}))};var h=function(e){var t=!!document.importNode,n=(new DOMParser).parseFromString(e,"image/svg+xml").documentElement;return t?document.importNode(n,!0):n},v=function(e){function t(){e.apply(this,arguments)}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var n={isMounted:{}};return n.isMounted.get=function(){return!!this.node},t.createFromExistingNode=function(e){return new t({id:e.getAttribute("id"),viewBox:e.getAttribute("viewBox"),content:e.outerHTML})},t.prototype.destroy=function(){this.isMounted&&this.unmount(),e.prototype.destroy.call(this)},t.prototype.mount=function(e){if(this.isMounted)return this.node;var t="string"==typeof e?document.querySelector(e):e,n=this.render();return this.node=n,t.appendChild(n),n},t.prototype.render=function(){var e=this.stringify();return h(l(e)).childNodes[0]},t.prototype.unmount=function(){this.node.parentNode.removeChild(this.node)},Object.defineProperties(t.prototype,n),t}(f),m={autoConfigure:!0,mountTo:"body",syncUrlsWithBaseTag:!1,listenLocationChangeEvent:!0,locationChangeEvent:"locationChange",locationChangeAngularEmitter:!1,usagesToUpdate:"use[*|href]",moveGradientsOutsideSymbol:!1},g=function(e){return Array.prototype.slice.call(e,0)},y=navigator.userAgent,w={isChrome:/chrome/i.test(y),isFirefox:/firefox/i.test(y),isIE:/msie/i.test(y)||/trident/i.test(y),isEdge:/edge/i.test(y)},x=function(e){return(e||window.location.href).split("#")[0]},b=function(e){angular.module("ng").run(["$rootScope",function(t){t.$on("$locationChangeSuccess",(function(t,n,r){var i,o,s;i=e,o={oldUrl:r,newUrl:n},(s=document.createEvent("CustomEvent")).initCustomEvent(i,!1,!1,o),window.dispatchEvent(s)}))}])},C=function(e,t){return void 0===t&&(t="linearGradient, radialGradient, pattern"),g(e.querySelectorAll("symbol")).forEach((function(e){g(e.querySelectorAll(t)).forEach((function(t){e.parentNode.insertBefore(t,e)}))})),e},T=r.xlink.uri,S=/[{}|\\\^\[\]`"<>]/g;function E(e){return e.replace(S,(function(e){return"%"+e[0].charCodeAt(0).toString(16).toUpperCase()}))}var z,M=["clipPath","colorProfile","src","cursor","fill","filter","marker","markerStart","markerMid","markerEnd","mask","stroke","style"],k=M.map((function(e){return"["+e+"]"})).join(","),A=function(e,t,n,r){var i=E(n),o=E(r);(function(e,t){return g(e).reduce((function(e,n){if(!n.attributes)return e;var r=g(n.attributes),i=t?r.filter(t):r;return e.concat(i)}),[])})(e.querySelectorAll(k),(function(e){var t=e.localName,n=e.value;return-1!==M.indexOf(t)&&-1!==n.indexOf("url("+i)})).forEach((function(e){return e.value=e.value.replace(i,o)})),function(e,t,n){g(e).forEach((function(e){var r=e.getAttribute("xlink:href");if(r&&0===r.indexOf(t)){var i=r.replace(t,n);e.setAttributeNS(T,"xlink:href",i)}}))}(t,i,o)},P="mount",L="symbol_mount",O=function(e){function t(t){var r=this;void 0===t&&(t={}),e.call(this,n(m,t));var i,o=(i=i||Object.create(null),{on:function(e,t){(i[e]||(i[e]=[])).push(t)},off:function(e,t){i[e]&&i[e].splice(i[e].indexOf(t)>>>0,1)},emit:function(e,t){(i[e]||[]).map((function(e){e(t)})),(i["*"]||[]).map((function(n){n(e,t)}))}});this._emitter=o,this.node=null;var s=this.config;if(s.autoConfigure&&this._autoConfigure(t),s.syncUrlsWithBaseTag){var a=document.getElementsByTagName("base")[0].getAttribute("href");o.on(P,(function(){return r.updateUrls("#",a)}))}var l=this._handleLocationChange.bind(this);this._handleLocationChange=l,s.listenLocationChangeEvent&&window.addEventListener(s.locationChangeEvent,l),s.locationChangeAngularEmitter&&b(s.locationChangeEvent),o.on(P,(function(e){s.moveGradientsOutsideSymbol&&C(e)})),o.on(L,(function(e){var t;s.moveGradientsOutsideSymbol&&C(e.parentNode),(w.isIE||w.isEdge)&&(t=[],g(e.querySelectorAll("style")).forEach((function(e){e.textContent+="",t.push(e)})))}))}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var r={isMounted:{}};return r.isMounted.get=function(){return!!this.node},t.prototype._autoConfigure=function(e){var t=this.config;void 0===e.syncUrlsWithBaseTag&&(t.syncUrlsWithBaseTag=void 0!==document.getElementsByTagName("base")[0]),void 0===e.locationChangeAngularEmitter&&(t.locationChangeAngularEmitter="angular"in window),void 0===e.moveGradientsOutsideSymbol&&(t.moveGradientsOutsideSymbol=w.isFirefox)},t.prototype._handleLocationChange=function(e){var t=e.detail,n=t.oldUrl,r=t.newUrl;this.updateUrls(n,r)},t.prototype.add=function(t){var n=e.prototype.add.call(this,t);return this.isMounted&&n&&(t.mount(this.node),this._emitter.emit(L,t.node)),n},t.prototype.attach=function(e){var t=this,n=this;if(n.isMounted)return n.node;var r="string"==typeof e?document.querySelector(e):e;return n.node=r,this.symbols.forEach((function(e){e.mount(n.node),t._emitter.emit(L,e.node)})),g(r.querySelectorAll("symbol")).forEach((function(e){var t=v.createFromExistingNode(e);t.node=e,n.add(t)})),this._emitter.emit(P,r),r},t.prototype.destroy=function(){var e=this.config,t=this.symbols,n=this._emitter;t.forEach((function(e){return e.destroy()})),n.off("*"),window.removeEventListener(e.locationChangeEvent,this._handleLocationChange),this.isMounted&&this.unmount()},t.prototype.mount=function(e,t){if(void 0===e&&(e=this.config.mountTo),void 0===t&&(t=!1),this.isMounted)return this.node;var n="string"==typeof e?document.querySelector(e):e,r=this.render();return this.node=r,t&&n.childNodes[0]?n.insertBefore(r,n.childNodes[0]):n.appendChild(r),this._emitter.emit(P,r),r},t.prototype.render=function(){return h(this.stringify())},t.prototype.unmount=function(){this.node.parentNode.removeChild(this.node)},t.prototype.updateUrls=function(e,t){if(!this.isMounted)return!1;var n=document.querySelectorAll(this.config.usagesToUpdate);return A(this.node,n,x(e)+"#",x(t)+"#"),!0},Object.defineProperties(t.prototype,r),t}(p),j=e((function(e){var t,n,r,i,o;e.exports=(n=[],r=document,i=r.documentElement.doScroll,(o=(i?/^loaded|^c/:/^loaded|^i|^c/).test(r.readyState))||r.addEventListener("DOMContentLoaded",t=function(){for(r.removeEventListener("DOMContentLoaded",t),o=1;t=n.shift();)t()}),function(e){o?setTimeout(e,0):n.push(e)})}));window.__SVG_SPRITE__?z=window.__SVG_SPRITE__:(z=new O({attrs:{id:"__SVG_SPRITE_NODE__"}}),window.__SVG_SPRITE__=z);var H=function(){var e=document.getElementById("__SVG_SPRITE_NODE__");e?z.attach(e):z.mount(document.body,!0)};return document.body?H():j(H),z},e.exports=n()}).call(this,n(28))},function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")()}).call(this,n(28))},function(e,t,n){var r=n(2),i=n(47),o=n(6),s=n(48),a=n(51),l=n(91),c=i("wks"),u=r.Symbol,d=l?u:u&&u.withoutSetter||s;e.exports=function(e){return o(c,e)||(a&&o(u,e)?c[e]=u[e]:c[e]=d("Symbol."+e)),c[e]}},function(e,t,n){"use strict";var r=n(68),i=Object.prototype.toString;function o(e){return"[object Array]"===i.call(e)}function s(e){return void 0===e}function a(e){return null!==e&&"object"==typeof e}function l(e){return"[object Function]"===i.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),o(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.call(null,e[i],i,e)}e.exports={isArray:o,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:function(e){return null!==e&&!s(e)&&null!==e.constructor&&!s(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:a,isUndefined:s,isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:l,isStream:function(e){return a(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,i=arguments.length;r<i;r++)c(arguments[r],n);return t},deepMerge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]="object"==typeof n?e({},n):n}for(var r=0,i=arguments.length;r<i;r++)c(arguments[r],n);return t},extend:function(e,t,n){return c(t,(function(t,i){e[i]=n&&"function"==typeof t?r(t,n):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(2),i=n(29).f,o=n(11),s=n(15),a=n(33),l=n(80),c=n(50);e.exports=function(e,t){var n,u,d,p,f,h=e.target,v=e.global,m=e.stat;if(n=v?r:m?r[h]||a(h,{}):(r[h]||{}).prototype)for(u in t){if(p=t[u],d=e.noTargetGet?(f=i(n,u))&&f.value:n[u],!c(v?u:h+(m?".":"#")+u,e.forced)&&void 0!==d){if(typeof p==typeof d)continue;l(p,d)}(e.sham||d&&d.sham)&&o(p,"sham",!0),s(n,u,p,e)}}},function(e,t,n){var r=n(10);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t,n){var r=n(5);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(9),i=n(12),o=n(17);e.exports=r?function(e,t,n){return i.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(9),i=n(45),o=n(8),s=n(31),a=Object.defineProperty;t.f=r?a:function(e,t,n){if(o(e),t=s(t,!0),o(n),i)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(82),i=n(2),o=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?o(r[e])||o(i[e]):r[e]&&r[e][t]||i[e]&&i[e][t]}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(2),i=n(11),o=n(6),s=n(33),a=n(34),l=n(18),c=l.get,u=l.enforce,d=String(String).split("String");(e.exports=function(e,t,n,a){var l=!!a&&!!a.unsafe,c=!!a&&!!a.enumerable,p=!!a&&!!a.noTargetGet;"function"==typeof n&&("string"!=typeof t||o(n,"name")||i(n,"name",t),u(n).source=d.join("string"==typeof t?t:"")),e!==r?(l?!p&&e[t]&&(c=!0):delete e[t],c?e[t]=n:i(e,t,n)):c?e[t]=n:s(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||a(this)}))},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r,i,o,s=n(79),a=n(2),l=n(10),c=n(11),u=n(6),d=n(35),p=n(36),f=a.WeakMap;if(s){var h=new f,v=h.get,m=h.has,g=h.set;r=function(e,t){return g.call(h,e,t),t},i=function(e){return v.call(h,e)||{}},o=function(e){return m.call(h,e)}}else{var y=d("state");p[y]=!0,r=function(e,t){return c(e,y,t),t},i=function(e){return u(e,y)?e[y]:{}},o=function(e){return u(e,y)}}e.exports={set:r,get:i,has:o,enforce:function(e){return o(e)?i(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!l(t)||(n=i(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t){e.exports=!1},function(e,t){e.exports={}},function(e,t,n){"use strict";var r=n(16),i=function(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)};e.exports.f=function(e){return new i(e)}},function(e,t,n){var r=n(44),i=n(30);e.exports=function(e){return r(i(e))}},function(e,t,n){var r=n(37),i=Math.min;e.exports=function(e){return e>0?i(r(e),9007199254740991):0}},function(e,t,n){var r=n(16);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(8),i=n(53),o=n(23),s=n(24),a=n(54),l=n(52),c=function(e,t){this.stopped=e,this.result=t};(e.exports=function(e,t,n,u,d){var p,f,h,v,m,g,y,w=s(t,n,u?2:1);if(d)p=e;else{if("function"!=typeof(f=a(e)))throw TypeError("Target is not iterable");if(i(f)){for(h=0,v=o(e.length);v>h;h++)if((m=u?w(r(y=e[h])[0],y[1]):w(e[h]))&&m instanceof c)return m;return new c(!1)}p=f.call(e)}for(g=p.next;!(y=g.call(p)).done;)if("object"==typeof(m=l(p,w,y.value,u))&&m&&m instanceof c)return m;return new c(!1)}).stop=function(e){return new c(!0,e)}},function(e,t){e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},function(e,t){var n=/^(?:submit|button|image|reset|file)$/i,r=/^(?:input|select|textarea|keygen)/i,i=/(\[[^\[\]]*\])/g;function o(e,t,n){if(t.match(i)){!function e(t,n,r){if(0===n.length)return t=r;var i=n.shift(),o=i.match(/^\[(.+?)\]$/);if("[]"===i)return t=t||[],Array.isArray(t)?t.push(e(null,n,r)):(t._values=t._values||[],t._values.push(e(null,n,r))),t;if(o){var s=o[1],a=+s;isNaN(a)?(t=t||{})[s]=e(t[s],n,r):(t=t||[])[a]=e(t[a],n,r)}else t[i]=e(t[i],n,r);return t}(e,function(e){var t=[],n=new RegExp(i),r=/^([^\[\]]*)/.exec(e);for(r[1]&&t.push(r[1]);null!==(r=n.exec(e));)t.push(r[1]);return t}(t),n)}else{var r=e[t];r?(Array.isArray(r)||(e[t]=[r]),e[t].push(n)):e[t]=n}return e}function s(e,t,n){return n=n.replace(/(\r)?\n/g,"\r\n"),n=(n=encodeURIComponent(n)).replace(/%20/g,"+"),e+(e?"&":"")+encodeURIComponent(t)+"="+n}e.exports=function(e,t){"object"!=typeof t?t={hash:!!t}:void 0===t.hash&&(t.hash=!0);for(var i=t.hash?{}:"",a=t.serializer||(t.hash?o:s),l=e&&e.elements?e.elements:[],c=Object.create(null),u=0;u<l.length;++u){var d=l[u];if((t.disabled||!d.disabled)&&d.name&&(r.test(d.nodeName)&&!n.test(d.type))){var p=d.name,f=d.value;if("checkbox"!==d.type&&"radio"!==d.type||d.checked||(f=void 0),t.empty){if("checkbox"!==d.type||d.checked||(f=""),"radio"===d.type&&(c[d.name]||d.checked?d.checked&&(c[d.name]=!0):c[d.name]=!1),null==f&&"radio"==d.type)continue}else if(!f)continue;if("select-multiple"!==d.type)i=a(i,p,f);else{f=[];for(var h=d.options,v=!1,m=0;m<h.length;++m){var g=h[m],y=t.empty&&!g.value,w=g.value||y;g.selected&&w&&(v=!0,i=t.hash&&"[]"!==p.slice(p.length-2)?a(i,p+"[]",g.value):a(i,p,g.value))}!v&&t.empty&&(i=a(i,p,""))}}}if(t.empty)for(var p in c)c[p]||(i=a(i,p,""));return i}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(9),i=n(78),o=n(17),s=n(22),a=n(31),l=n(6),c=n(45),u=Object.getOwnPropertyDescriptor;t.f=r?u:function(e,t){if(e=s(e),t=a(t,!0),c)try{return u(e,t)}catch(e){}if(l(e,t))return o(!i.f.call(e,t),e[t])}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(10);e.exports=function(e,t){if(!r(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!r(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")}},function(e,t,n){var r=n(2),i=n(10),o=r.document,s=i(o)&&i(o.createElement);e.exports=function(e){return s?o.createElement(e):{}}},function(e,t,n){var r=n(2),i=n(11);e.exports=function(e,t){try{i(r,e,t)}catch(n){r[e]=t}return t}},function(e,t,n){var r=n(46),i=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(e){return i.call(e)}),e.exports=r.inspectSource},function(e,t,n){var r=n(47),i=n(48),o=r("keys");e.exports=function(e){return o[e]||(o[e]=i(e))}},function(e,t){e.exports={}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,n){var r=n(30);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r={};r[n(3)("toStringTag")]="z",e.exports="[object z]"===String(r)},function(e,t,n){var r=n(12).f,i=n(6),o=n(3)("toStringTag");e.exports=function(e,t,n){e&&!i(e=n?e:e.prototype,o)&&r(e,o,{configurable:!0,value:t})}},function(e,t,n){var r=n(6),i=n(39),o=n(35),s=n(110),a=o("IE_PROTO"),l=Object.prototype;e.exports=s?Object.getPrototypeOf:function(e){return e=i(e),r(e,a)?e[a]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?l:null}},function(e,t,n){var r,i=n(8),o=n(111),s=n(38),a=n(36),l=n(60),c=n(32),u=n(35),d=u("IE_PROTO"),p=function(){},f=function(e){return"<script>"+e+"<\/script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=r?function(e){e.write(f("")),e.close();var t=e.parentWindow.Object;return e=null,t}(r):((t=c("iframe")).style.display="none",l.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(f("document.F=Object")),e.close(),e.F);for(var n=s.length;n--;)delete h.prototype[s[n]];return h()};a[d]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(p.prototype=i(e),n=new p,p.prototype=null,n[d]=e):n=h(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(5),i=n(14),o="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==i(e)?o.call(e,""):Object(e)}:Object},function(e,t,n){var r=n(9),i=n(5),o=n(32);e.exports=!r&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(2),i=n(33),o=r["__core-js_shared__"]||i("__core-js_shared__",{});e.exports=o},function(e,t,n){var r=n(19),i=n(46);(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.4",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t,n){var r=n(6),i=n(22),o=n(84).indexOf,s=n(36);e.exports=function(e,t){var n,a=i(e),l=0,c=[];for(n in a)!r(s,n)&&r(a,n)&&c.push(n);for(;t.length>l;)r(a,n=t[l++])&&(~o(c,n)||c.push(n));return c}},function(e,t,n){var r=n(5),i=/#|\.prototype\./,o=function(e,t){var n=a[s(e)];return n==c||n!=l&&("function"==typeof t?r(t):!!t)},s=o.normalize=function(e){return String(e).replace(i,".").toLowerCase()},a=o.data={},l=o.NATIVE="N",c=o.POLYFILL="P";e.exports=o},function(e,t,n){var r=n(5);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(e,t,n){var r=n(8);e.exports=function(e,t,n,i){try{return i?t(r(n)[0],n[1]):t(n)}catch(t){var o=e.return;throw void 0!==o&&r(o.call(e)),t}}},function(e,t,n){var r=n(3),i=n(20),o=r("iterator"),s=Array.prototype;e.exports=function(e){return void 0!==e&&(i.Array===e||s[o]===e)}},function(e,t,n){var r=n(55),i=n(20),o=n(3)("iterator");e.exports=function(e){if(null!=e)return e[o]||e["@@iterator"]||i[r(e)]}},function(e,t,n){var r=n(40),i=n(14),o=n(3)("toStringTag"),s="Arguments"==i(function(){return arguments}());e.exports=r?i:function(e){var t,n,r;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),o))?n:s?i(t):"Object"==(r=i(t))&&"function"==typeof t.callee?"Arguments":r}},function(e,t,n){var r=n(3)("iterator"),i=!1;try{var o=0,s={next:function(){return{done:!!o++}},return:function(){i=!0}};s[r]=function(){return this},Array.from(s,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!i)return!1;var n=!1;try{var o={};o[r]=function(){return{next:function(){return{done:n=!0}}}},e(o)}catch(e){}return n}},function(e,t,n){var r=n(2);e.exports=r.Promise},function(e,t,n){var r=n(8),i=n(16),o=n(3)("species");e.exports=function(e,t){var n,s=r(e).constructor;return void 0===s||null==(n=r(s)[o])?t:i(n)}},function(e,t,n){var r,i,o,s=n(2),a=n(5),l=n(14),c=n(24),u=n(60),d=n(32),p=n(61),f=s.location,h=s.setImmediate,v=s.clearImmediate,m=s.process,g=s.MessageChannel,y=s.Dispatch,w=0,x={},b=function(e){if(x.hasOwnProperty(e)){var t=x[e];delete x[e],t()}},C=function(e){return function(){b(e)}},T=function(e){b(e.data)},S=function(e){s.postMessage(e+"",f.protocol+"//"+f.host)};h&&v||(h=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return x[++w]=function(){("function"==typeof e?e:Function(e)).apply(void 0,t)},r(w),w},v=function(e){delete x[e]},"process"==l(m)?r=function(e){m.nextTick(C(e))}:y&&y.now?r=function(e){y.now(C(e))}:g&&!p?(o=(i=new g).port2,i.port1.onmessage=T,r=c(o.postMessage,o,1)):!s.addEventListener||"function"!=typeof postMessage||s.importScripts||a(S)?r="onreadystatechange"in d("script")?function(e){u.appendChild(d("script")).onreadystatechange=function(){u.removeChild(this),b(e)}}:function(e){setTimeout(C(e),0)}:(r=S,s.addEventListener("message",T,!1))),e.exports={set:h,clear:v}},function(e,t,n){var r=n(13);e.exports=r("document","documentElement")},function(e,t,n){var r=n(62);e.exports=/(iphone|ipod|ipad).*applewebkit/i.test(r)},function(e,t,n){var r=n(13);e.exports=r("navigator","userAgent")||""},function(e,t,n){var r=n(8),i=n(10),o=n(21);e.exports=function(e,t){if(r(e),i(t)&&t.constructor===e)return t;var n=o.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){"use strict";var r=n(7),i=n(109),o=n(42),s=n(66),a=n(41),l=n(11),c=n(15),u=n(3),d=n(19),p=n(20),f=n(65),h=f.IteratorPrototype,v=f.BUGGY_SAFARI_ITERATORS,m=u("iterator"),g=function(){return this};e.exports=function(e,t,n,u,f,y,w){i(n,t,u);var x,b,C,T=function(e){if(e===f&&k)return k;if(!v&&e in z)return z[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},S=t+" Iterator",E=!1,z=e.prototype,M=z[m]||z["@@iterator"]||f&&z[f],k=!v&&M||T(f),A="Array"==t&&z.entries||M;if(A&&(x=o(A.call(new e)),h!==Object.prototype&&x.next&&(d||o(x)===h||(s?s(x,h):"function"!=typeof x[m]&&l(x,m,g)),a(x,S,!0,!0),d&&(p[S]=g))),"values"==f&&M&&"values"!==M.name&&(E=!0,k=function(){return M.call(this)}),d&&!w||z[m]===k||l(z,m,k),p[t]=k,f)if(b={values:T("values"),keys:y?k:T("keys"),entries:T("entries")},w)for(C in b)!v&&!E&&C in z||c(z,C,b[C]);else r({target:t,proto:!0,forced:v||E},b);return b}},function(e,t,n){"use strict";var r,i,o,s=n(42),a=n(11),l=n(6),c=n(3),u=n(19),d=c("iterator"),p=!1;[].keys&&("next"in(o=[].keys())?(i=s(s(o)))!==Object.prototype&&(r=i):p=!0),null==r&&(r={}),u||l(r,d)||a(r,d,(function(){return this})),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:p}},function(e,t,n){var r=n(8),i=n(113);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),t=n instanceof Array}catch(e){}return function(n,o){return r(n),i(o),t?e.call(n,o):n.__proto__=o,n}}():void 0)},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */!function(t,n){"use strict";"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,(function(n,i){"use strict";var o=[],s=n.document,a=Object.getPrototypeOf,l=o.slice,c=o.concat,u=o.push,d=o.indexOf,p={},f=p.toString,h=p.hasOwnProperty,v=h.toString,m=v.call(Object),g={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},w=function(e){return null!=e&&e===e.window},x={type:!0,src:!0,nonce:!0,noModule:!0};function b(e,t,n){var r,i,o=(n=n||s).createElement("script");if(o.text=e,t)for(r in x)(i=t[r]||t.getAttribute&&t.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function C(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?p[f.call(e)]||"object":typeof e}var T=function(e,t){return new T.fn.init(e,t)},S=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function E(e){var t=!!e&&"length"in e&&e.length,n=C(e);return!y(e)&&!w(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}T.fn=T.prototype={jquery:"3.4.1",constructor:T,length:0,toArray:function(){return l.call(this)},get:function(e){return null==e?l.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=T.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return T.each(this,e)},map:function(e){return this.pushStack(T.map(this,(function(t,n){return e.call(t,n,t)})))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:u,sort:o.sort,splice:o.splice},T.extend=T.fn.extend=function(){var e,t,n,r,i,o,s=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof s&&(c=s,s=arguments[a]||{},a++),"object"==typeof s||y(s)||(s={}),a===l&&(s=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)r=e[t],"__proto__"!==t&&s!==r&&(c&&r&&(T.isPlainObject(r)||(i=Array.isArray(r)))?(n=s[t],o=i&&!Array.isArray(n)?[]:i||T.isPlainObject(n)?n:{},i=!1,s[t]=T.extend(c,o,r)):void 0!==r&&(s[t]=r));return s},T.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==f.call(e))&&(!(t=a(e))||"function"==typeof(n=h.call(t,"constructor")&&t.constructor)&&v.call(n)===m)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){b(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(E(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(S,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(E(Object(e))?T.merge(n,"string"==typeof e?[e]:e):u.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:d.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,i=e.length;r<n;r++)e[i++]=t[r];return e.length=i,e},grep:function(e,t,n){for(var r=[],i=0,o=e.length,s=!n;i<o;i++)!t(e[i],i)!==s&&r.push(e[i]);return r},map:function(e,t,n){var r,i,o=0,s=[];if(E(e))for(r=e.length;o<r;o++)null!=(i=t(e[o],o,n))&&s.push(i);else for(o in e)null!=(i=t(e[o],o,n))&&s.push(i);return c.apply([],s)},guid:1,support:g}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=o[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(e,t){p["[object "+t+"]"]=t.toLowerCase()}));var z=
/*!
   * Sizzle CSS Selector Engine v2.3.4
   * https://sizzlejs.com/
   *
   * Copyright JS Foundation and other contributors
   * Released under the MIT license
   * https://js.foundation/
   *
   * Date: 2019-04-08
   */
function(e){var t,n,r,i,o,s,a,l,c,u,d,p,f,h,v,m,g,y,w,x="sizzle"+1*new Date,b=e.document,C=0,T=0,S=le(),E=le(),z=le(),M=le(),k=function(e,t){return e===t&&(d=!0),0},A={}.hasOwnProperty,P=[],L=P.pop,O=P.push,j=P.push,H=P.slice,D=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},N="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",V="[\\x20\\t\\r\\n\\f]",I="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",B="\\["+V+"*("+I+")(?:"+V+"*([*^$|!~]?=)"+V+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+I+"))|)"+V+"*\\]",$=":("+I+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+B+")*)|.*)\\)|)",q=new RegExp(V+"+","g"),R=new RegExp("^"+V+"+|((?:^|[^\\\\])(?:\\\\.)*)"+V+"+$","g"),_=new RegExp("^"+V+"*,"+V+"*"),F=new RegExp("^"+V+"*([>+~]|"+V+")"+V+"*"),G=new RegExp(V+"|>"),W=new RegExp($),U=new RegExp("^"+I+"$"),X={ID:new RegExp("^#("+I+")"),CLASS:new RegExp("^\\.("+I+")"),TAG:new RegExp("^("+I+"|[*])"),ATTR:new RegExp("^"+B),PSEUDO:new RegExp("^"+$),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+V+"*(even|odd|(([+-]|)(\\d*)n|)"+V+"*(?:([+-]|)"+V+"*(\\d+)|))"+V+"*\\)|)","i"),bool:new RegExp("^(?:"+N+")$","i"),needsContext:new RegExp("^"+V+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+V+"*((?:-\\d)?\\d*)"+V+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,K=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,Q=/^[^{]+\{\s*\[native \w/,Z=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ee=/[+~]/,te=new RegExp("\\\\([\\da-f]{1,6}"+V+"?|("+V+")|.)","ig"),ne=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},re=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ie=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},oe=function(){p()},se=xe((function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{j.apply(P=H.call(b.childNodes),b.childNodes),P[b.childNodes.length].nodeType}catch(e){j={apply:P.length?function(e,t){O.apply(e,H.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}function ae(e,t,r,i){var o,a,c,u,d,h,g,y=t&&t.ownerDocument,C=t?t.nodeType:9;if(r=r||[],"string"!=typeof e||!e||1!==C&&9!==C&&11!==C)return r;if(!i&&((t?t.ownerDocument||t:b)!==f&&p(t),t=t||f,v)){if(11!==C&&(d=Z.exec(e)))if(o=d[1]){if(9===C){if(!(c=t.getElementById(o)))return r;if(c.id===o)return r.push(c),r}else if(y&&(c=y.getElementById(o))&&w(t,c)&&c.id===o)return r.push(c),r}else{if(d[2])return j.apply(r,t.getElementsByTagName(e)),r;if((o=d[3])&&n.getElementsByClassName&&t.getElementsByClassName)return j.apply(r,t.getElementsByClassName(o)),r}if(n.qsa&&!M[e+" "]&&(!m||!m.test(e))&&(1!==C||"object"!==t.nodeName.toLowerCase())){if(g=e,y=t,1===C&&G.test(e)){for((u=t.getAttribute("id"))?u=u.replace(re,ie):t.setAttribute("id",u=x),a=(h=s(e)).length;a--;)h[a]="#"+u+" "+we(h[a]);g=h.join(","),y=ee.test(e)&&ge(t.parentNode)||t}try{return j.apply(r,y.querySelectorAll(g)),r}catch(t){M(e,!0)}finally{u===x&&t.removeAttribute("id")}}}return l(e.replace(R,"$1"),t,r,i)}function le(){var e=[];return function t(n,i){return e.push(n+" ")>r.cacheLength&&delete t[e.shift()],t[n+" "]=i}}function ce(e){return e[x]=!0,e}function ue(e){var t=f.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function he(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function ve(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function me(e){return ce((function(t){return t=+t,ce((function(n,r){for(var i,o=e([],n.length,t),s=o.length;s--;)n[i=o[s]]&&(n[i]=!(r[i]=n[i]))}))}))}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=ae.support={},o=ae.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!Y.test(t||n&&n.nodeName||"HTML")},p=ae.setDocument=function(e){var t,i,s=e?e.ownerDocument||e:b;return s!==f&&9===s.nodeType&&s.documentElement?(h=(f=s).documentElement,v=!o(f),b!==f&&(i=f.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",oe,!1):i.attachEvent&&i.attachEvent("onunload",oe)),n.attributes=ue((function(e){return e.className="i",!e.getAttribute("className")})),n.getElementsByTagName=ue((function(e){return e.appendChild(f.createComment("")),!e.getElementsByTagName("*").length})),n.getElementsByClassName=Q.test(f.getElementsByClassName),n.getById=ue((function(e){return h.appendChild(e).id=x,!f.getElementsByName||!f.getElementsByName(x).length})),n.getById?(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){return e.getAttribute("id")===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n=t.getElementById(e);return n?[n]:[]}}):(r.filter.ID=function(e){var t=e.replace(te,ne);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},r.find.ID=function(e,t){if(void 0!==t.getElementById&&v){var n,r,i,o=t.getElementById(e);if(o){if((n=o.getAttributeNode("id"))&&n.value===e)return[o];for(i=t.getElementsByName(e),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===e)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],i=0,o=t.getElementsByTagName(e);if("*"===e){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&v)return t.getElementsByClassName(e)},g=[],m=[],(n.qsa=Q.test(f.querySelectorAll))&&(ue((function(e){h.appendChild(e).innerHTML="<a id='"+x+"'></a><select id='"+x+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&m.push("[*^$]="+V+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||m.push("\\["+V+"*(?:value|"+N+")"),e.querySelectorAll("[id~="+x+"-]").length||m.push("~="),e.querySelectorAll(":checked").length||m.push(":checked"),e.querySelectorAll("a#"+x+"+*").length||m.push(".#.+[+~]")})),ue((function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=f.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&m.push("name"+V+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&m.push(":enabled",":disabled"),h.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&m.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),m.push(",.*:")}))),(n.matchesSelector=Q.test(y=h.matches||h.webkitMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector||h.msMatchesSelector))&&ue((function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),g.push("!=",$)})),m=m.length&&new RegExp(m.join("|")),g=g.length&&new RegExp(g.join("|")),t=Q.test(h.compareDocumentPosition),w=t||Q.test(h.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},k=t?function(e,t){if(e===t)return d=!0,0;var r=!e.compareDocumentPosition-!t.compareDocumentPosition;return r||(1&(r=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===r?e===f||e.ownerDocument===b&&w(b,e)?-1:t===f||t.ownerDocument===b&&w(b,t)?1:u?D(u,e)-D(u,t):0:4&r?-1:1)}:function(e,t){if(e===t)return d=!0,0;var n,r=0,i=e.parentNode,o=t.parentNode,s=[e],a=[t];if(!i||!o)return e===f?-1:t===f?1:i?-1:o?1:u?D(u,e)-D(u,t):0;if(i===o)return pe(e,t);for(n=e;n=n.parentNode;)s.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;s[r]===a[r];)r++;return r?pe(s[r],a[r]):s[r]===b?-1:a[r]===b?1:0},f):f},ae.matches=function(e,t){return ae(e,null,null,t)},ae.matchesSelector=function(e,t){if((e.ownerDocument||e)!==f&&p(e),n.matchesSelector&&v&&!M[t+" "]&&(!g||!g.test(t))&&(!m||!m.test(t)))try{var r=y.call(e,t);if(r||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){M(t,!0)}return ae(t,f,null,[e]).length>0},ae.contains=function(e,t){return(e.ownerDocument||e)!==f&&p(e),w(e,t)},ae.attr=function(e,t){(e.ownerDocument||e)!==f&&p(e);var i=r.attrHandle[t.toLowerCase()],o=i&&A.call(r.attrHandle,t.toLowerCase())?i(e,t,!v):void 0;return void 0!==o?o:n.attributes||!v?e.getAttribute(t):(o=e.getAttributeNode(t))&&o.specified?o.value:null},ae.escape=function(e){return(e+"").replace(re,ie)},ae.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},ae.uniqueSort=function(e){var t,r=[],i=0,o=0;if(d=!n.detectDuplicates,u=!n.sortStable&&e.slice(0),e.sort(k),d){for(;t=e[o++];)t===e[o]&&(i=r.push(o));for(;i--;)e.splice(r[i],1)}return u=null,e},i=ae.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=i(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=i(t);return n},(r=ae.selectors={cacheLength:50,createPseudo:ce,match:X,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(te,ne),e[3]=(e[3]||e[4]||e[5]||"").replace(te,ne),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||ae.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&ae.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return X.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&W.test(n)&&(t=s(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(te,ne).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=S[e+" "];return t||(t=new RegExp("(^|"+V+")"+e+"("+V+"|$)"))&&S(e,(function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")}))},ATTR:function(e,t,n){return function(r){var i=ae.attr(r,e);return null==i?"!="===t:!t||(i+="","="===t?i===n:"!="===t?i!==n:"^="===t?n&&0===i.indexOf(n):"*="===t?n&&i.indexOf(n)>-1:"$="===t?n&&i.slice(-n.length)===n:"~="===t?(" "+i.replace(q," ")+" ").indexOf(n)>-1:"|="===t&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,r,i){var o="nth"!==e.slice(0,3),s="last"!==e.slice(-4),a="of-type"===t;return 1===r&&0===i?function(e){return!!e.parentNode}:function(t,n,l){var c,u,d,p,f,h,v=o!==s?"nextSibling":"previousSibling",m=t.parentNode,g=a&&t.nodeName.toLowerCase(),y=!l&&!a,w=!1;if(m){if(o){for(;v;){for(p=t;p=p[v];)if(a?p.nodeName.toLowerCase()===g:1===p.nodeType)return!1;h=v="only"===e&&!h&&"nextSibling"}return!0}if(h=[s?m.firstChild:m.lastChild],s&&y){for(w=(f=(c=(u=(d=(p=m)[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===C&&c[1])&&c[2],p=f&&m.childNodes[f];p=++f&&p&&p[v]||(w=f=0)||h.pop();)if(1===p.nodeType&&++w&&p===t){u[e]=[C,f,w];break}}else if(y&&(w=f=(c=(u=(d=(p=t)[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]||[])[0]===C&&c[1]),!1===w)for(;(p=++f&&p&&p[v]||(w=f=0)||h.pop())&&((a?p.nodeName.toLowerCase()!==g:1!==p.nodeType)||!++w||(y&&((u=(d=p[x]||(p[x]={}))[p.uniqueID]||(d[p.uniqueID]={}))[e]=[C,w]),p!==t)););return(w-=i)===r||w%r==0&&w/r>=0}}},PSEUDO:function(e,t){var n,i=r.pseudos[e]||r.setFilters[e.toLowerCase()]||ae.error("unsupported pseudo: "+e);return i[x]?i(t):i.length>1?(n=[e,e,"",t],r.setFilters.hasOwnProperty(e.toLowerCase())?ce((function(e,n){for(var r,o=i(e,t),s=o.length;s--;)e[r=D(e,o[s])]=!(n[r]=o[s])})):function(e){return i(e,0,n)}):i}},pseudos:{not:ce((function(e){var t=[],n=[],r=a(e.replace(R,"$1"));return r[x]?ce((function(e,t,n,i){for(var o,s=r(e,null,i,[]),a=e.length;a--;)(o=s[a])&&(e[a]=!(t[a]=o))})):function(e,i,o){return t[0]=e,r(t,null,o,n),t[0]=null,!n.pop()}})),has:ce((function(e){return function(t){return ae(e,t).length>0}})),contains:ce((function(e){return e=e.replace(te,ne),function(t){return(t.textContent||i(t)).indexOf(e)>-1}})),lang:ce((function(e){return U.test(e||"")||ae.error("unsupported lang: "+e),e=e.replace(te,ne).toLowerCase(),function(t){var n;do{if(n=v?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}})),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===h},focus:function(e){return e===f.activeElement&&(!f.hasFocus||f.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:ve(!1),disabled:ve(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!r.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return K.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:me((function(){return[0]})),last:me((function(e,t){return[t-1]})),eq:me((function(e,t,n){return[n<0?n+t:n]})),even:me((function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e})),odd:me((function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e})),lt:me((function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e})),gt:me((function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e}))}}).pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[t]=fe(t);for(t in{submit:!0,reset:!0})r.pseudos[t]=he(t);function ye(){}function we(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function xe(e,t,n){var r=t.dir,i=t.next,o=i||r,s=n&&"parentNode"===o,a=T++;return t.first?function(t,n,i){for(;t=t[r];)if(1===t.nodeType||s)return e(t,n,i);return!1}:function(t,n,l){var c,u,d,p=[C,a];if(l){for(;t=t[r];)if((1===t.nodeType||s)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||s)if(u=(d=t[x]||(t[x]={}))[t.uniqueID]||(d[t.uniqueID]={}),i&&i===t.nodeName.toLowerCase())t=t[r]||t;else{if((c=u[o])&&c[0]===C&&c[1]===a)return p[2]=c[2];if(u[o]=p,p[2]=e(t,n,l))return!0}return!1}}function be(e){return e.length>1?function(t,n,r){for(var i=e.length;i--;)if(!e[i](t,n,r))return!1;return!0}:e[0]}function Ce(e,t,n,r,i){for(var o,s=[],a=0,l=e.length,c=null!=t;a<l;a++)(o=e[a])&&(n&&!n(o,r,i)||(s.push(o),c&&t.push(a)));return s}function Te(e,t,n,r,i,o){return r&&!r[x]&&(r=Te(r)),i&&!i[x]&&(i=Te(i,o)),ce((function(o,s,a,l){var c,u,d,p=[],f=[],h=s.length,v=o||function(e,t,n){for(var r=0,i=t.length;r<i;r++)ae(e,t[r],n);return n}(t||"*",a.nodeType?[a]:a,[]),m=!e||!o&&t?v:Ce(v,p,e,a,l),g=n?i||(o?e:h||r)?[]:s:m;if(n&&n(m,g,a,l),r)for(c=Ce(g,f),r(c,[],a,l),u=c.length;u--;)(d=c[u])&&(g[f[u]]=!(m[f[u]]=d));if(o){if(i||e){if(i){for(c=[],u=g.length;u--;)(d=g[u])&&c.push(m[u]=d);i(null,g=[],c,l)}for(u=g.length;u--;)(d=g[u])&&(c=i?D(o,d):p[u])>-1&&(o[c]=!(s[c]=d))}}else g=Ce(g===s?g.splice(h,g.length):g),i?i(null,s,g,l):j.apply(s,g)}))}function Se(e){for(var t,n,i,o=e.length,s=r.relative[e[0].type],a=s||r.relative[" "],l=s?1:0,u=xe((function(e){return e===t}),a,!0),d=xe((function(e){return D(t,e)>-1}),a,!0),p=[function(e,n,r){var i=!s&&(r||n!==c)||((t=n).nodeType?u(e,n,r):d(e,n,r));return t=null,i}];l<o;l++)if(n=r.relative[e[l].type])p=[xe(be(p),n)];else{if((n=r.filter[e[l].type].apply(null,e[l].matches))[x]){for(i=++l;i<o&&!r.relative[e[i].type];i++);return Te(l>1&&be(p),l>1&&we(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(R,"$1"),n,l<i&&Se(e.slice(l,i)),i<o&&Se(e=e.slice(i)),i<o&&we(e))}p.push(n)}return be(p)}return ye.prototype=r.filters=r.pseudos,r.setFilters=new ye,s=ae.tokenize=function(e,t){var n,i,o,s,a,l,c,u=E[e+" "];if(u)return t?0:u.slice(0);for(a=e,l=[],c=r.preFilter;a;){for(s in n&&!(i=_.exec(a))||(i&&(a=a.slice(i[0].length)||a),l.push(o=[])),n=!1,(i=F.exec(a))&&(n=i.shift(),o.push({value:n,type:i[0].replace(R," ")}),a=a.slice(n.length)),r.filter)!(i=X[s].exec(a))||c[s]&&!(i=c[s](i))||(n=i.shift(),o.push({value:n,type:s,matches:i}),a=a.slice(n.length));if(!n)break}return t?a.length:a?ae.error(e):E(e,l).slice(0)},a=ae.compile=function(e,t){var n,i=[],o=[],a=z[e+" "];if(!a){for(t||(t=s(e)),n=t.length;n--;)(a=Se(t[n]))[x]?i.push(a):o.push(a);(a=z(e,function(e,t){var n=t.length>0,i=e.length>0,o=function(o,s,a,l,u){var d,h,m,g=0,y="0",w=o&&[],x=[],b=c,T=o||i&&r.find.TAG("*",u),S=C+=null==b?1:Math.random()||.1,E=T.length;for(u&&(c=s===f||s||u);y!==E&&null!=(d=T[y]);y++){if(i&&d){for(h=0,s||d.ownerDocument===f||(p(d),a=!v);m=e[h++];)if(m(d,s||f,a)){l.push(d);break}u&&(C=S)}n&&((d=!m&&d)&&g--,o&&w.push(d))}if(g+=y,n&&y!==g){for(h=0;m=t[h++];)m(w,x,s,a);if(o){if(g>0)for(;y--;)w[y]||x[y]||(x[y]=L.call(l));x=Ce(x)}j.apply(l,x),u&&!o&&x.length>0&&g+t.length>1&&ae.uniqueSort(l)}return u&&(C=S,c=b),w};return n?ce(o):o}(o,i))).selector=e}return a},l=ae.select=function(e,t,n,i){var o,l,c,u,d,p="function"==typeof e&&e,f=!i&&s(e=p.selector||e);if(n=n||[],1===f.length){if((l=f[0]=f[0].slice(0)).length>2&&"ID"===(c=l[0]).type&&9===t.nodeType&&v&&r.relative[l[1].type]){if(!(t=(r.find.ID(c.matches[0].replace(te,ne),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(o=X.needsContext.test(e)?0:l.length;o--&&(c=l[o],!r.relative[u=c.type]);)if((d=r.find[u])&&(i=d(c.matches[0].replace(te,ne),ee.test(l[0].type)&&ge(t.parentNode)||t))){if(l.splice(o,1),!(e=i.length&&we(l)))return j.apply(n,i),n;break}}return(p||a(e,f))(i,t,!v,n,!t||ee.test(e)&&ge(t.parentNode)||t),n},n.sortStable=x.split("").sort(k).join("")===x,n.detectDuplicates=!!d,p(),n.sortDetached=ue((function(e){return 1&e.compareDocumentPosition(f.createElement("fieldset"))})),ue((function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")}))||de("type|href|height|width",(function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)})),n.attributes&&ue((function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")}))||de("value",(function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue})),ue((function(e){return null==e.getAttribute("disabled")}))||de(N,(function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null})),ae}(n);T.find=z,T.expr=z.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=z.uniqueSort,T.text=z.getText,T.isXMLDoc=z.isXML,T.contains=z.contains,T.escapeSelector=z.escape;var M=function(e,t,n){for(var r=[],i=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(i&&T(e).is(n))break;r.push(e)}return r},k=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},A=T.expr.match.needsContext;function P(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var L=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function O(e,t,n){return y(t)?T.grep(e,(function(e,r){return!!t.call(e,r,e)!==n})):t.nodeType?T.grep(e,(function(e){return e===t!==n})):"string"!=typeof t?T.grep(e,(function(e){return d.call(t,e)>-1!==n})):T.filter(t,e,n)}T.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?T.find.matchesSelector(r,e)?[r]:[]:T.find.matches(e,T.grep(t,(function(e){return 1===e.nodeType})))},T.fn.extend({find:function(e){var t,n,r=this.length,i=this;if("string"!=typeof e)return this.pushStack(T(e).filter((function(){for(t=0;t<r;t++)if(T.contains(i[t],this))return!0})));for(n=this.pushStack([]),t=0;t<r;t++)T.find(e,i[t],n);return r>1?T.uniqueSort(n):n},filter:function(e){return this.pushStack(O(this,e||[],!1))},not:function(e){return this.pushStack(O(this,e||[],!0))},is:function(e){return!!O(this,"string"==typeof e&&A.test(e)?T(e):e||[],!1).length}});var j,H=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(e,t,n){var r,i;if(!e)return this;if(n=n||j,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:H.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:s,!0)),L.test(r[1])&&T.isPlainObject(t))for(r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(i=s.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(T):T.makeArray(e,this)}).prototype=T.fn,j=T(s);var D=/^(?:parents|prev(?:Until|All))/,N={children:!0,contents:!0,next:!0,prev:!0};function V(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t=T(e,this),n=t.length;return this.filter((function(){for(var e=0;e<n;e++)if(T.contains(this,t[e]))return!0}))},closest:function(e,t){var n,r=0,i=this.length,o=[],s="string"!=typeof e&&T(e);if(!A.test(e))for(;r<i;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(s?s.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,e))){o.push(n);break}return this.pushStack(o.length>1?T.uniqueSort(o):o)},index:function(e){return e?"string"==typeof e?d.call(T(e),this[0]):d.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return M(e,"parentNode")},parentsUntil:function(e,t,n){return M(e,"parentNode",n)},next:function(e){return V(e,"nextSibling")},prev:function(e){return V(e,"previousSibling")},nextAll:function(e){return M(e,"nextSibling")},prevAll:function(e){return M(e,"previousSibling")},nextUntil:function(e,t,n){return M(e,"nextSibling",n)},prevUntil:function(e,t,n){return M(e,"previousSibling",n)},siblings:function(e){return k((e.parentNode||{}).firstChild,e)},children:function(e){return k(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(P(e,"template")&&(e=e.content||e),T.merge([],e.childNodes))}},(function(e,t){T.fn[e]=function(n,r){var i=T.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=T.filter(r,i)),this.length>1&&(N[e]||T.uniqueSort(i),D.test(e)&&i.reverse()),this.pushStack(i)}}));var I=/[^\x20\t\r\n\f]+/g;function B(e){return e}function $(e){throw e}function q(e,t,n,r){var i;try{e&&y(i=e.promise)?i.call(e).done(t).fail(n):e&&y(i=e.then)?i.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}T.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return T.each(e.match(I)||[],(function(e,n){t[n]=!0})),t}(e):T.extend({},e);var t,n,r,i,o=[],s=[],a=-1,l=function(){for(i=i||e.once,r=t=!0;s.length;a=-1)for(n=s.shift();++a<o.length;)!1===o[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=o.length,n=!1);e.memory||(n=!1),t=!1,i&&(o=n?[]:"")},c={add:function(){return o&&(n&&!t&&(a=o.length-1,s.push(n)),function t(n){T.each(n,(function(n,r){y(r)?e.unique&&c.has(r)||o.push(r):r&&r.length&&"string"!==C(r)&&t(r)}))}(arguments),n&&!t&&l()),this},remove:function(){return T.each(arguments,(function(e,t){for(var n;(n=T.inArray(t,o,n))>-1;)o.splice(n,1),n<=a&&a--})),this},has:function(e){return e?T.inArray(e,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=s=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=s=[],n||t||(o=n=""),this},locked:function(){return!!i},fireWith:function(e,n){return i||(n=[e,(n=n||[]).slice?n.slice():n],s.push(n),t||l()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},T.extend({Deferred:function(e){var t=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],r="pending",i={state:function(){return r},always:function(){return o.done(arguments).fail(arguments),this},catch:function(e){return i.then(null,e)},pipe:function(){var e=arguments;return T.Deferred((function(n){T.each(t,(function(t,r){var i=y(e[r[4]])&&e[r[4]];o[r[1]]((function(){var e=i&&i.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[e]:arguments)}))})),e=null})).promise()},then:function(e,r,i){var o=0;function s(e,t,r,i){return function(){var a=this,l=arguments,c=function(){var n,c;if(!(e<o)){if((n=r.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");c=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(c)?i?c.call(n,s(o,t,B,i),s(o,t,$,i)):(o++,c.call(n,s(o,t,B,i),s(o,t,$,i),s(o,t,B,t.notifyWith))):(r!==B&&(a=void 0,l=[n]),(i||t.resolveWith)(a,l))}},u=i?c:function(){try{c()}catch(n){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(n,u.stackTrace),e+1>=o&&(r!==$&&(a=void 0,l=[n]),t.rejectWith(a,l))}};e?u():(T.Deferred.getStackHook&&(u.stackTrace=T.Deferred.getStackHook()),n.setTimeout(u))}}return T.Deferred((function(n){t[0][3].add(s(0,n,y(i)?i:B,n.notifyWith)),t[1][3].add(s(0,n,y(e)?e:B)),t[2][3].add(s(0,n,y(r)?r:$))})).promise()},promise:function(e){return null!=e?T.extend(e,i):i}},o={};return T.each(t,(function(e,n){var s=n[2],a=n[5];i[n[1]]=s.add,a&&s.add((function(){r=a}),t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),s.add(n[3].fire),o[n[0]]=function(){return o[n[0]+"With"](this===o?void 0:this,arguments),this},o[n[0]+"With"]=s.fireWith})),i.promise(o),e&&e.call(o,o),o},when:function(e){var t=arguments.length,n=t,r=Array(n),i=l.call(arguments),o=T.Deferred(),s=function(e){return function(n){r[e]=this,i[e]=arguments.length>1?l.call(arguments):n,--t||o.resolveWith(r,i)}};if(t<=1&&(q(e,o.done(s(n)).resolve,o.reject,!t),"pending"===o.state()||y(i[n]&&i[n].then)))return o.then();for(;n--;)q(i[n],s(n),o.reject);return o.promise()}});var R=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&R.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},T.readyException=function(e){n.setTimeout((function(){throw e}))};var _=T.Deferred();function F(){s.removeEventListener("DOMContentLoaded",F),n.removeEventListener("load",F),T.ready()}T.fn.ready=function(e){return _.then(e).catch((function(e){T.readyException(e)})),this},T.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==e&&--T.readyWait>0||_.resolveWith(s,[T]))}}),T.ready.then=_.then,"complete"===s.readyState||"loading"!==s.readyState&&!s.documentElement.doScroll?n.setTimeout(T.ready):(s.addEventListener("DOMContentLoaded",F),n.addEventListener("load",F));var G=function(e,t,n,r,i,o,s){var a=0,l=e.length,c=null==n;if("object"===C(n))for(a in i=!0,n)G(e,t,a,n[a],!0,o,s);else if(void 0!==r&&(i=!0,y(r)||(s=!0),c&&(s?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(T(e),n)})),t))for(;a<l;a++)t(e[a],n,s?r:r.call(e[a],a,t(e[a],n)));return i?e:c?t.call(e):l?t(e[0],n):o},W=/^-ms-/,U=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function Y(e){return e.replace(W,"ms-").replace(U,X)}var K=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function J(){this.expando=T.expando+J.uid++}J.uid=1,J.prototype={cache:function(e){var t=e[this.expando];return t||(t={},K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,i=this.cache(e);if("string"==typeof t)i[Y(t)]=n;else for(r in t)i[Y(r)]=t[r];return i},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in r?[t]:t.match(I)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||T.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var Q=new J,Z=new J,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}Z.set(e,t,n)}else n=void 0;return n}T.extend({hasData:function(e){return Z.hasData(e)||Q.hasData(e)},data:function(e,t,n){return Z.access(e,t,n)},removeData:function(e,t){Z.remove(e,t)},_data:function(e,t,n){return Q.access(e,t,n)},_removeData:function(e,t){Q.remove(e,t)}}),T.fn.extend({data:function(e,t){var n,r,i,o=this[0],s=o&&o.attributes;if(void 0===e){if(this.length&&(i=Z.get(o),1===o.nodeType&&!Q.get(o,"hasDataAttrs"))){for(n=s.length;n--;)s[n]&&0===(r=s[n].name).indexOf("data-")&&(r=Y(r.slice(5)),ne(o,r,i[r]));Q.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof e?this.each((function(){Z.set(this,e)})):G(this,(function(t){var n;if(o&&void 0===t)return void 0!==(n=Z.get(o,e))||void 0!==(n=ne(o,e))?n:void 0;this.each((function(){Z.set(this,e,t)}))}),null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each((function(){Z.remove(this,e)}))}}),T.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Q.get(e,t),n&&(!r||Array.isArray(n)?r=Q.access(e,t,T.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=T.queue(e,t),r=n.length,i=n.shift(),o=T._queueHooks(e,t);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===t&&n.unshift("inprogress"),delete o.stop,i.call(e,(function(){T.dequeue(e,t)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Q.get(e,n)||Q.access(e,n,{empty:T.Callbacks("once memory").add((function(){Q.remove(e,[t+"queue",n])}))})}}),T.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?T.queue(this[0],e):void 0===t?this:this.each((function(){var n=T.queue(this,e,t);T._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&T.dequeue(this,e)}))},dequeue:function(e){return this.each((function(){T.dequeue(this,e)}))},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,i=T.Deferred(),o=this,s=this.length,a=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(n=Q.get(o[s],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(a));return a(),i.promise(t)}});var re=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,ie=new RegExp("^(?:([+-])=|)("+re+")([a-z%]*)$","i"),oe=["Top","Right","Bottom","Left"],se=s.documentElement,ae=function(e){return T.contains(e.ownerDocument,e)},le={composed:!0};se.getRootNode&&(ae=function(e){return T.contains(e.ownerDocument,e)||e.getRootNode(le)===e.ownerDocument});var ce=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&ae(e)&&"none"===T.css(e,"display")},ue=function(e,t,n,r){var i,o,s={};for(o in t)s[o]=e.style[o],e.style[o]=t[o];for(o in i=n.apply(e,r||[]),t)e.style[o]=s[o];return i};function de(e,t,n,r){var i,o,s=20,a=r?function(){return r.cur()}:function(){return T.css(e,t,"")},l=a(),c=n&&n[3]||(T.cssNumber[t]?"":"px"),u=e.nodeType&&(T.cssNumber[t]||"px"!==c&&+l)&&ie.exec(T.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;s--;)T.style(e,t,u+c),(1-o)*(1-(o=a()/l||.5))<=0&&(s=0),u/=o;u*=2,T.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,i=n[1]?u+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=u,r.end=i)),i}var pe={};function fe(e){var t,n=e.ownerDocument,r=e.nodeName,i=pe[r];return i||(t=n.body.appendChild(n.createElement(r)),i=T.css(t,"display"),t.parentNode.removeChild(t),"none"===i&&(i="block"),pe[r]=i,i)}function he(e,t){for(var n,r,i=[],o=0,s=e.length;o<s;o++)(r=e[o]).style&&(n=r.style.display,t?("none"===n&&(i[o]=Q.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&ce(r)&&(i[o]=fe(r))):"none"!==n&&(i[o]="none",Q.set(r,"display",n)));for(o=0;o<s;o++)null!=i[o]&&(e[o].style.display=i[o]);return e}T.fn.extend({show:function(){return he(this,!0)},hide:function(){return he(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each((function(){ce(this)?T(this).show():T(this).hide()}))}});var ve=/^(?:checkbox|radio)$/i,me=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ge=/^$|^module$|\/(?:java|ecma)script/i,ye={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function we(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&P(e,t)?T.merge([e],n):n}function xe(e,t){for(var n=0,r=e.length;n<r;n++)Q.set(e[n],"globalEval",!t||Q.get(t[n],"globalEval"))}ye.optgroup=ye.option,ye.tbody=ye.tfoot=ye.colgroup=ye.caption=ye.thead,ye.th=ye.td;var be,Ce,Te=/<|&#?\w+;/;function Se(e,t,n,r,i){for(var o,s,a,l,c,u,d=t.createDocumentFragment(),p=[],f=0,h=e.length;f<h;f++)if((o=e[f])||0===o)if("object"===C(o))T.merge(p,o.nodeType?[o]:o);else if(Te.test(o)){for(s=s||d.appendChild(t.createElement("div")),a=(me.exec(o)||["",""])[1].toLowerCase(),l=ye[a]||ye._default,s.innerHTML=l[1]+T.htmlPrefilter(o)+l[2],u=l[0];u--;)s=s.lastChild;T.merge(p,s.childNodes),(s=d.firstChild).textContent=""}else p.push(t.createTextNode(o));for(d.textContent="",f=0;o=p[f++];)if(r&&T.inArray(o,r)>-1)i&&i.push(o);else if(c=ae(o),s=we(d.appendChild(o),"script"),c&&xe(s),n)for(u=0;o=s[u++];)ge.test(o.type||"")&&n.push(o);return d}be=s.createDocumentFragment().appendChild(s.createElement("div")),(Ce=s.createElement("input")).setAttribute("type","radio"),Ce.setAttribute("checked","checked"),Ce.setAttribute("name","t"),be.appendChild(Ce),g.checkClone=be.cloneNode(!0).cloneNode(!0).lastChild.checked,be.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!be.cloneNode(!0).lastChild.defaultValue;var Ee=/^key/,ze=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Me=/^([^.]*)(?:\.(.+)|)/;function ke(){return!0}function Ae(){return!1}function Pe(e,t){return e===function(){try{return s.activeElement}catch(e){}}()==("focus"===t)}function Le(e,t,n,r,i,o){var s,a;if("object"==typeof t){for(a in"string"!=typeof n&&(r=r||n,n=void 0),t)Le(e,a,n,r,t[a],o);return e}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Ae;else if(!i)return e;return 1===o&&(s=i,(i=function(e){return T().off(e),s.apply(this,arguments)}).guid=s.guid||(s.guid=T.guid++)),e.each((function(){T.event.add(this,t,i,r,n)}))}function Oe(e,t,n){n?(Q.set(e,t,!1),T.event.add(e,t,{namespace:!1,handler:function(e){var r,i,o=Q.get(this,t);if(1&e.isTrigger&&this[t]){if(o.length)(T.event.special[t]||{}).delegateType&&e.stopPropagation();else if(o=l.call(arguments),Q.set(this,t,o),r=n(this,t),this[t](),o!==(i=Q.get(this,t))||r?Q.set(this,t,!1):i={},o!==i)return e.stopImmediatePropagation(),e.preventDefault(),i.value}else o.length&&(Q.set(this,t,{value:T.event.trigger(T.extend(o[0],T.Event.prototype),o.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Q.get(e,t)&&T.event.add(e,t,ke)}T.event={global:{},add:function(e,t,n,r,i){var o,s,a,l,c,u,d,p,f,h,v,m=Q.get(e);if(m)for(n.handler&&(n=(o=n).handler,i=o.selector),i&&T.find.matchesSelector(se,i),n.guid||(n.guid=T.guid++),(l=m.events)||(l=m.events={}),(s=m.handle)||(s=m.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(I)||[""]).length;c--;)f=v=(a=Me.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f&&(d=T.event.special[f]||{},f=(i?d.delegateType:d.bindType)||f,d=T.event.special[f]||{},u=T.extend({type:f,origType:v,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&T.expr.match.needsContext.test(i),namespace:h.join(".")},o),(p=l[f])||((p=l[f]=[]).delegateCount=0,d.setup&&!1!==d.setup.call(e,r,h,s)||e.addEventListener&&e.addEventListener(f,s)),d.add&&(d.add.call(e,u),u.handler.guid||(u.handler.guid=n.guid)),i?p.splice(p.delegateCount++,0,u):p.push(u),T.event.global[f]=!0)},remove:function(e,t,n,r,i){var o,s,a,l,c,u,d,p,f,h,v,m=Q.hasData(e)&&Q.get(e);if(m&&(l=m.events)){for(c=(t=(t||"").match(I)||[""]).length;c--;)if(f=v=(a=Me.exec(t[c])||[])[1],h=(a[2]||"").split(".").sort(),f){for(d=T.event.special[f]||{},p=l[f=(r?d.delegateType:d.bindType)||f]||[],a=a[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),s=o=p.length;o--;)u=p[o],!i&&v!==u.origType||n&&n.guid!==u.guid||a&&!a.test(u.namespace)||r&&r!==u.selector&&("**"!==r||!u.selector)||(p.splice(o,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));s&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,m.handle)||T.removeEvent(e,f,m.handle),delete l[f])}else for(f in l)T.event.remove(e,f+t[c],n,r,!0);T.isEmptyObject(l)&&Q.remove(e,"handle events")}},dispatch:function(e){var t,n,r,i,o,s,a=T.event.fix(e),l=new Array(arguments.length),c=(Q.get(this,"events")||{})[a.type]||[],u=T.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!u.preDispatch||!1!==u.preDispatch.call(this,a)){for(s=T.event.handlers.call(this,a,c),t=0;(i=s[t++])&&!a.isPropagationStopped();)for(a.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==o.namespace&&!a.rnamespace.test(o.namespace)||(a.handleObj=o,a.data=o.data,void 0!==(r=((T.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,l))&&!1===(a.result=r)&&(a.preventDefault(),a.stopPropagation()));return u.postDispatch&&u.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,r,i,o,s,a=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(o=[],s={},n=0;n<l;n++)void 0===s[i=(r=t[n]).selector+" "]&&(s[i]=r.needsContext?T(i,this).index(c)>-1:T.find(i,this,null,[c]).length),s[i]&&o.push(r);o.length&&a.push({elem:c,handlers:o})}return c=this,l<t.length&&a.push({elem:c,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[T.expando]?e:new T.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return ve.test(t.type)&&t.click&&P(t,"input")&&Oe(t,"click",ke),!1},trigger:function(e){var t=this||e;return ve.test(t.type)&&t.click&&P(t,"input")&&Oe(t,"click"),!0},_default:function(e){var t=e.target;return ve.test(t.type)&&t.click&&P(t,"input")&&Q.get(t,"click")||P(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},T.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ke:Ae,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Ae,isPropagationStopped:Ae,isImmediatePropagationStopped:Ae,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ke,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ke,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ke,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ee.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&ze.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},(function(e,t){T.event.special[e]={setup:function(){return Oe(this,e,Pe),!1},trigger:function(){return Oe(this,e),!0},delegateType:t}})),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(e,t){T.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=this,i=e.relatedTarget,o=e.handleObj;return i&&(i===r||T.contains(r,i))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}})),T.fn.extend({on:function(e,t,n,r){return Le(this,e,t,n,r)},one:function(e,t,n,r){return Le(this,e,t,n,r,1)},off:function(e,t,n){var r,i;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,T(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(i in e)this.off(i,t,e[i]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ae),this.each((function(){T.event.remove(this,e,n,t)}))}});var je=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,He=/<script|<style|<link/i,De=/checked\s*(?:[^=]|=\s*.checked.)/i,Ne=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ve(e,t){return P(e,"table")&&P(11!==t.nodeType?t:t.firstChild,"tr")&&T(e).children("tbody")[0]||e}function Ie(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Be(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function $e(e,t){var n,r,i,o,s,a,l,c;if(1===t.nodeType){if(Q.hasData(e)&&(o=Q.access(e),s=Q.set(t,o),c=o.events))for(i in delete s.handle,s.events={},c)for(n=0,r=c[i].length;n<r;n++)T.event.add(t,i,c[i][n]);Z.hasData(e)&&(a=Z.access(e),l=T.extend({},a),Z.set(t,l))}}function qe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&ve.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function Re(e,t,n,r){t=c.apply([],t);var i,o,s,a,l,u,d=0,p=e.length,f=p-1,h=t[0],v=y(h);if(v||p>1&&"string"==typeof h&&!g.checkClone&&De.test(h))return e.each((function(i){var o=e.eq(i);v&&(t[0]=h.call(this,i,o.html())),Re(o,t,n,r)}));if(p&&(o=(i=Se(t,e[0].ownerDocument,!1,e,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(a=(s=T.map(we(i,"script"),Ie)).length;d<p;d++)l=i,d!==f&&(l=T.clone(l,!0,!0),a&&T.merge(s,we(l,"script"))),n.call(e[d],l,d);if(a)for(u=s[s.length-1].ownerDocument,T.map(s,Be),d=0;d<a;d++)l=s[d],ge.test(l.type||"")&&!Q.access(l,"globalEval")&&T.contains(u,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?T._evalUrl&&!l.noModule&&T._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):b(l.textContent.replace(Ne,""),l,u))}return e}function _e(e,t,n){for(var r,i=t?T.filter(t,e):e,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||T.cleanData(we(r)),r.parentNode&&(n&&ae(r)&&xe(we(r,"script")),r.parentNode.removeChild(r));return e}T.extend({htmlPrefilter:function(e){return e.replace(je,"<$1></$2>")},clone:function(e,t,n){var r,i,o,s,a=e.cloneNode(!0),l=ae(e);if(!(g.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(s=we(a),r=0,i=(o=we(e)).length;r<i;r++)qe(o[r],s[r]);if(t)if(n)for(o=o||we(e),s=s||we(a),r=0,i=o.length;r<i;r++)$e(o[r],s[r]);else $e(e,a);return(s=we(a,"script")).length>0&&xe(s,!l&&we(e,"script")),a},cleanData:function(e){for(var t,n,r,i=T.event.special,o=0;void 0!==(n=e[o]);o++)if(K(n)){if(t=n[Q.expando]){if(t.events)for(r in t.events)i[r]?T.event.remove(n,r):T.removeEvent(n,r,t.handle);n[Q.expando]=void 0}n[Z.expando]&&(n[Z.expando]=void 0)}}}),T.fn.extend({detach:function(e){return _e(this,e,!0)},remove:function(e){return _e(this,e)},text:function(e){return G(this,(function(e){return void 0===e?T.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)}))}),null,e,arguments.length)},append:function(){return Re(this,arguments,(function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ve(this,e).appendChild(e)}))},prepend:function(){return Re(this,arguments,(function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Ve(this,e);t.insertBefore(e,t.firstChild)}}))},before:function(){return Re(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this)}))},after:function(){return Re(this,arguments,(function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)}))},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(T.cleanData(we(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map((function(){return T.clone(this,e,t)}))},html:function(e){return G(this,(function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!He.test(e)&&!ye[(me.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(T.cleanData(we(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)}),null,e,arguments.length)},replaceWith:function(){var e=[];return Re(this,arguments,(function(t){var n=this.parentNode;T.inArray(this,e)<0&&(T.cleanData(we(this)),n&&n.replaceChild(t,this))}),e)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(e,t){T.fn[e]=function(e){for(var n,r=[],i=T(e),o=i.length-1,s=0;s<=o;s++)n=s===o?this:this.clone(!0),T(i[s])[t](n),u.apply(r,n.get());return this.pushStack(r)}}));var Fe=new RegExp("^("+re+")(?!px)[a-z%]+$","i"),Ge=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},We=new RegExp(oe.join("|"),"i");function Ue(e,t,n){var r,i,o,s,a=e.style;return(n=n||Ge(e))&&(""!==(s=n.getPropertyValue(t)||n[t])||ae(e)||(s=T.style(e,t)),!g.pixelBoxStyles()&&Fe.test(s)&&We.test(t)&&(r=a.width,i=a.minWidth,o=a.maxWidth,a.minWidth=a.maxWidth=a.width=s,s=n.width,a.width=r,a.minWidth=i,a.maxWidth=o)),void 0!==s?s+"":s}function Xe(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(u){c.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",u.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",se.appendChild(c).appendChild(u);var e=n.getComputedStyle(u);r="1%"!==e.top,l=12===t(e.marginLeft),u.style.right="60%",a=36===t(e.right),i=36===t(e.width),u.style.position="absolute",o=12===t(u.offsetWidth/3),se.removeChild(c),u=null}}function t(e){return Math.round(parseFloat(e))}var r,i,o,a,l,c=s.createElement("div"),u=s.createElement("div");u.style&&(u.style.backgroundClip="content-box",u.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===u.style.backgroundClip,T.extend(g,{boxSizingReliable:function(){return e(),i},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),o}}))}();var Ye=["Webkit","Moz","ms"],Ke=s.createElement("div").style,Je={};function Qe(e){var t=T.cssProps[e]||Je[e];return t||(e in Ke?e:Je[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ye.length;n--;)if((e=Ye[n]+t)in Ke)return e}(e)||e)}var Ze=/^(none|table(?!-c[ea]).+)/,et=/^--/,tt={position:"absolute",visibility:"hidden",display:"block"},nt={letterSpacing:"0",fontWeight:"400"};function rt(e,t,n){var r=ie.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function it(e,t,n,r,i,o){var s="width"===t?1:0,a=0,l=0;if(n===(r?"border":"content"))return 0;for(;s<4;s+=2)"margin"===n&&(l+=T.css(e,n+oe[s],!0,i)),r?("content"===n&&(l-=T.css(e,"padding"+oe[s],!0,i)),"margin"!==n&&(l-=T.css(e,"border"+oe[s]+"Width",!0,i))):(l+=T.css(e,"padding"+oe[s],!0,i),"padding"!==n?l+=T.css(e,"border"+oe[s]+"Width",!0,i):a+=T.css(e,"border"+oe[s]+"Width",!0,i));return!r&&o>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-o-l-a-.5))||0),l}function ot(e,t,n){var r=Ge(e),i=(!g.boxSizingReliable()||n)&&"border-box"===T.css(e,"boxSizing",!1,r),o=i,s=Ue(e,t,r),a="offset"+t[0].toUpperCase()+t.slice(1);if(Fe.test(s)){if(!n)return s;s="auto"}return(!g.boxSizingReliable()&&i||"auto"===s||!parseFloat(s)&&"inline"===T.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===T.css(e,"boxSizing",!1,r),(o=a in e)&&(s=e[a])),(s=parseFloat(s)||0)+it(e,t,n||(i?"border":"content"),o,r,s)+"px"}function st(e,t,n,r,i){return new st.prototype.init(e,t,n,r,i)}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ue(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var i,o,s,a=Y(t),l=et.test(t),c=e.style;if(l||(t=Qe(a)),s=T.cssHooks[t]||T.cssHooks[a],void 0===n)return s&&"get"in s&&void 0!==(i=s.get(e,!1,r))?i:c[t];"string"===(o=typeof n)&&(i=ie.exec(n))&&i[1]&&(n=de(e,t,i),o="number"),null!=n&&n==n&&("number"!==o||l||(n+=i&&i[3]||(T.cssNumber[a]?"":"px")),g.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),s&&"set"in s&&void 0===(n=s.set(e,n,r))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var i,o,s,a=Y(t);return et.test(t)||(t=Qe(a)),(s=T.cssHooks[t]||T.cssHooks[a])&&"get"in s&&(i=s.get(e,!0,n)),void 0===i&&(i=Ue(e,t,r)),"normal"===i&&t in nt&&(i=nt[t]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),T.each(["height","width"],(function(e,t){T.cssHooks[t]={get:function(e,n,r){if(n)return!Ze.test(T.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?ot(e,t,r):ue(e,tt,(function(){return ot(e,t,r)}))},set:function(e,n,r){var i,o=Ge(e),s=!g.scrollboxSize()&&"absolute"===o.position,a=(s||r)&&"border-box"===T.css(e,"boxSizing",!1,o),l=r?it(e,t,r,a,o):0;return a&&s&&(l-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(o[t])-it(e,t,"border",!1,o)-.5)),l&&(i=ie.exec(n))&&"px"!==(i[3]||"px")&&(e.style[t]=n,n=T.css(e,t)),rt(0,n,l)}}})),T.cssHooks.marginLeft=Xe(g.reliableMarginLeft,(function(e,t){if(t)return(parseFloat(Ue(e,"marginLeft"))||e.getBoundingClientRect().left-ue(e,{marginLeft:0},(function(){return e.getBoundingClientRect().left})))+"px"})),T.each({margin:"",padding:"",border:"Width"},(function(e,t){T.cssHooks[e+t]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[e+oe[r]+t]=o[r]||o[r-2]||o[0];return i}},"margin"!==e&&(T.cssHooks[e+t].set=rt)})),T.fn.extend({css:function(e,t){return G(this,(function(e,t,n){var r,i,o={},s=0;if(Array.isArray(t)){for(r=Ge(e),i=t.length;s<i;s++)o[t[s]]=T.css(e,t[s],!1,r);return o}return void 0!==n?T.style(e,t,n):T.css(e,t)}),e,t,arguments.length>1)}}),T.Tween=st,st.prototype={constructor:st,init:function(e,t,n,r,i,o){this.elem=e,this.prop=n,this.easing=i||T.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=o||(T.cssNumber[n]?"":"px")},cur:function(){var e=st.propHooks[this.prop];return e&&e.get?e.get(this):st.propHooks._default.get(this)},run:function(e){var t,n=st.propHooks[this.prop];return this.options.duration?this.pos=t=T.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):st.propHooks._default.set(this),this}},st.prototype.init.prototype=st.prototype,st.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=T.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){T.fx.step[e.prop]?T.fx.step[e.prop](e):1!==e.elem.nodeType||!T.cssHooks[e.prop]&&null==e.elem.style[Qe(e.prop)]?e.elem[e.prop]=e.now:T.style(e.elem,e.prop,e.now+e.unit)}}},st.propHooks.scrollTop=st.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},T.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},T.fx=st.prototype.init,T.fx.step={};var at,lt,ct=/^(?:toggle|show|hide)$/,ut=/queueHooks$/;function dt(){lt&&(!1===s.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(dt):n.setTimeout(dt,T.fx.interval),T.fx.tick())}function pt(){return n.setTimeout((function(){at=void 0})),at=Date.now()}function ft(e,t){var n,r=0,i={height:e};for(t=t?1:0;r<4;r+=2-t)i["margin"+(n=oe[r])]=i["padding"+n]=e;return t&&(i.opacity=i.width=e),i}function ht(e,t,n){for(var r,i=(vt.tweeners[t]||[]).concat(vt.tweeners["*"]),o=0,s=i.length;o<s;o++)if(r=i[o].call(n,t,e))return r}function vt(e,t,n){var r,i,o=0,s=vt.prefilters.length,a=T.Deferred().always((function(){delete l.elem})),l=function(){if(i)return!1;for(var t=at||pt(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),o=0,s=c.tweens.length;o<s;o++)c.tweens[o].run(r);return a.notifyWith(e,[c,r,n]),r<1&&s?n:(s||a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c]),!1)},c=a.promise({elem:e,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:t,originalOptions:n,startTime:at||pt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=T.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)c.tweens[n].run(1);return t?(a.notifyWith(e,[c,1,0]),a.resolveWith(e,[c,t])):a.rejectWith(e,[c,t]),this}}),u=c.props;for(!function(e,t){var n,r,i,o,s;for(n in e)if(i=t[r=Y(n)],o=e[n],Array.isArray(o)&&(i=o[1],o=e[n]=o[0]),n!==r&&(e[r]=o,delete e[n]),(s=T.cssHooks[r])&&"expand"in s)for(n in o=s.expand(o),delete e[r],o)n in e||(e[n]=o[n],t[n]=i);else t[r]=i}(u,c.opts.specialEasing);o<s;o++)if(r=vt.prefilters[o].call(c,e,u,c.opts))return y(r.stop)&&(T._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return T.map(u,ht,c),y(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),T.fx.timer(T.extend(l,{elem:e,anim:c,queue:c.opts.queue})),c}T.Animation=T.extend(vt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return de(n.elem,e,ie.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(I);for(var n,r=0,i=e.length;r<i;r++)n=e[r],vt.tweeners[n]=vt.tweeners[n]||[],vt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,i,o,s,a,l,c,u,d="width"in t||"height"in t,p=this,f={},h=e.style,v=e.nodeType&&ce(e),m=Q.get(e,"fxshow");for(r in n.queue||(null==(s=T._queueHooks(e,"fx")).unqueued&&(s.unqueued=0,a=s.empty.fire,s.empty.fire=function(){s.unqueued||a()}),s.unqueued++,p.always((function(){p.always((function(){s.unqueued--,T.queue(e,"fx").length||s.empty.fire()}))}))),t)if(i=t[r],ct.test(i)){if(delete t[r],o=o||"toggle"===i,i===(v?"hide":"show")){if("show"!==i||!m||void 0===m[r])continue;v=!0}f[r]=m&&m[r]||T.style(e,r)}if((l=!T.isEmptyObject(t))||!T.isEmptyObject(f))for(r in d&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=m&&m.display)&&(c=Q.get(e,"display")),"none"===(u=T.css(e,"display"))&&(c?u=c:(he([e],!0),c=e.style.display||c,u=T.css(e,"display"),he([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===T.css(e,"float")&&(l||(p.done((function(){h.display=c})),null==c&&(u=h.display,c="none"===u?"":u)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",p.always((function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]}))),l=!1,f)l||(m?"hidden"in m&&(v=m.hidden):m=Q.access(e,"fxshow",{display:c}),o&&(m.hidden=!v),v&&he([e],!0),p.done((function(){for(r in v||he([e]),Q.remove(e,"fxshow"),f)T.style(e,r,f[r])}))),l=ht(v?m[r]:0,r,p),r in m||(m[r]=l.start,v&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?vt.prefilters.unshift(e):vt.prefilters.push(e)}}),T.speed=function(e,t,n){var r=e&&"object"==typeof e?T.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return T.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in T.fx.speeds?r.duration=T.fx.speeds[r.duration]:r.duration=T.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&T.dequeue(this,r.queue)},r},T.fn.extend({fadeTo:function(e,t,n,r){return this.filter(ce).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var i=T.isEmptyObject(e),o=T.speed(t,n,r),s=function(){var t=vt(this,T.extend({},e),o);(i||Q.get(this,"finish"))&&t.stop(!0)};return s.finish=s,i||!1===o.queue?this.each(s):this.queue(o.queue,s)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each((function(){var t=!0,i=null!=e&&e+"queueHooks",o=T.timers,s=Q.get(this);if(i)s[i]&&s[i].stop&&r(s[i]);else for(i in s)s[i]&&s[i].stop&&ut.test(i)&&r(s[i]);for(i=o.length;i--;)o[i].elem!==this||null!=e&&o[i].queue!==e||(o[i].anim.stop(n),t=!1,o.splice(i,1));!t&&n||T.dequeue(this,e)}))},finish:function(e){return!1!==e&&(e=e||"fx"),this.each((function(){var t,n=Q.get(this),r=n[e+"queue"],i=n[e+"queueHooks"],o=T.timers,s=r?r.length:0;for(n.finish=!0,T.queue(this,e,[]),i&&i.stop&&i.stop.call(this,!0),t=o.length;t--;)o[t].elem===this&&o[t].queue===e&&(o[t].anim.stop(!0),o.splice(t,1));for(t=0;t<s;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish}))}}),T.each(["toggle","show","hide"],(function(e,t){var n=T.fn[t];T.fn[t]=function(e,r,i){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(ft(t,!0),e,r,i)}})),T.each({slideDown:ft("show"),slideUp:ft("hide"),slideToggle:ft("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(e,t){T.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}})),T.timers=[],T.fx.tick=function(){var e,t=0,n=T.timers;for(at=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||T.fx.stop(),at=void 0},T.fx.timer=function(e){T.timers.push(e),T.fx.start()},T.fx.interval=13,T.fx.start=function(){lt||(lt=!0,dt())},T.fx.stop=function(){lt=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(e,t){return e=T.fx&&T.fx.speeds[e]||e,t=t||"fx",this.queue(t,(function(t,r){var i=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(i)}}))},function(){var e=s.createElement("input"),t=s.createElement("select").appendChild(s.createElement("option"));e.type="checkbox",g.checkOn=""!==e.value,g.optSelected=t.selected,(e=s.createElement("input")).value="t",e.type="radio",g.radioValue="t"===e.value}();var mt,gt=T.expr.attrHandle;T.fn.extend({attr:function(e,t){return G(this,T.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each((function(){T.removeAttr(this,e)}))}}),T.extend({attr:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===e.getAttribute?T.prop(e,t,n):(1===o&&T.isXMLDoc(e)||(i=T.attrHooks[t.toLowerCase()]||(T.expr.match.bool.test(t)?mt:void 0)),void 0!==n?null===n?void T.removeAttr(e,t):i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:(e.setAttribute(t,n+""),n):i&&"get"in i&&null!==(r=i.get(e,t))?r:null==(r=T.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!g.radioValue&&"radio"===t&&P(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,i=t&&t.match(I);if(i&&1===e.nodeType)for(;n=i[r++];)e.removeAttribute(n)}}),mt={set:function(e,t,n){return!1===t?T.removeAttr(e,n):e.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),(function(e,t){var n=gt[t]||T.find.attr;gt[t]=function(e,t,r){var i,o,s=t.toLowerCase();return r||(o=gt[s],gt[s]=i,i=null!=n(e,t,r)?s:null,gt[s]=o),i}}));var yt=/^(?:input|select|textarea|button)$/i,wt=/^(?:a|area)$/i;function xt(e){return(e.match(I)||[]).join(" ")}function bt(e){return e.getAttribute&&e.getAttribute("class")||""}function Ct(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(I)||[]}T.fn.extend({prop:function(e,t){return G(this,T.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each((function(){delete this[T.propFix[e]||e]}))}}),T.extend({prop:function(e,t,n){var r,i,o=e.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&T.isXMLDoc(e)||(t=T.propFix[t]||t,i=T.propHooks[t]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(e,n,t))?r:e[t]=n:i&&"get"in i&&null!==(r=i.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):yt.test(e.nodeName)||wt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(T.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){T.propFix[this.toLowerCase()]=this})),T.fn.extend({addClass:function(e){var t,n,r,i,o,s,a,l=0;if(y(e))return this.each((function(t){T(this).addClass(e.call(this,t,bt(this)))}));if((t=Ct(e)).length)for(;n=this[l++];)if(i=bt(n),r=1===n.nodeType&&" "+xt(i)+" "){for(s=0;o=t[s++];)r.indexOf(" "+o+" ")<0&&(r+=o+" ");i!==(a=xt(r))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,r,i,o,s,a,l=0;if(y(e))return this.each((function(t){T(this).removeClass(e.call(this,t,bt(this)))}));if(!arguments.length)return this.attr("class","");if((t=Ct(e)).length)for(;n=this[l++];)if(i=bt(n),r=1===n.nodeType&&" "+xt(i)+" "){for(s=0;o=t[s++];)for(;r.indexOf(" "+o+" ")>-1;)r=r.replace(" "+o+" "," ");i!==(a=xt(r))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):y(e)?this.each((function(n){T(this).toggleClass(e.call(this,n,bt(this),t),t)})):this.each((function(){var t,i,o,s;if(r)for(i=0,o=T(this),s=Ct(e);t=s[i++];)o.hasClass(t)?o.removeClass(t):o.addClass(t);else void 0!==e&&"boolean"!==n||((t=bt(this))&&Q.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Q.get(this,"__className__")||""))}))},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+xt(bt(n))+" ").indexOf(t)>-1)return!0;return!1}});var Tt=/\r/g;T.fn.extend({val:function(e){var t,n,r,i=this[0];return arguments.length?(r=y(e),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?e.call(this,n,T(this).val()):e)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=T.map(i,(function(e){return null==e?"":e+""}))),(t=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,i,"value")||(this.value=i))}))):i?(t=T.valHooks[i.type]||T.valHooks[i.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Tt,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:xt(T.text(e))}},select:{get:function(e){var t,n,r,i=e.options,o=e.selectedIndex,s="select-one"===e.type,a=s?null:[],l=s?o+1:i.length;for(r=o<0?l:s?o:0;r<l;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!P(n.parentNode,"optgroup"))){if(t=T(n).val(),s)return t;a.push(t)}return a},set:function(e,t){for(var n,r,i=e.options,o=T.makeArray(t),s=i.length;s--;)((r=i[s]).selected=T.inArray(T.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(e.selectedIndex=-1),o}}}}),T.each(["radio","checkbox"],(function(){T.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=T.inArray(T(e).val(),t)>-1}},g.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})})),g.focusin="onfocusin"in n;var St=/^(?:focusinfocus|focusoutblur)$/,Et=function(e){e.stopPropagation()};T.extend(T.event,{trigger:function(e,t,r,i){var o,a,l,c,u,d,p,f,v=[r||s],m=h.call(e,"type")?e.type:e,g=h.call(e,"namespace")?e.namespace.split("."):[];if(a=f=l=r=r||s,3!==r.nodeType&&8!==r.nodeType&&!St.test(m+T.event.triggered)&&(m.indexOf(".")>-1&&(g=m.split("."),m=g.shift(),g.sort()),u=m.indexOf(":")<0&&"on"+m,(e=e[T.expando]?e:new T.Event(m,"object"==typeof e&&e)).isTrigger=i?2:3,e.namespace=g.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:T.makeArray(t,[e]),p=T.event.special[m]||{},i||!p.trigger||!1!==p.trigger.apply(r,t))){if(!i&&!p.noBubble&&!w(r)){for(c=p.delegateType||m,St.test(c+m)||(a=a.parentNode);a;a=a.parentNode)v.push(a),l=a;l===(r.ownerDocument||s)&&v.push(l.defaultView||l.parentWindow||n)}for(o=0;(a=v[o++])&&!e.isPropagationStopped();)f=a,e.type=o>1?c:p.bindType||m,(d=(Q.get(a,"events")||{})[e.type]&&Q.get(a,"handle"))&&d.apply(a,t),(d=u&&a[u])&&d.apply&&K(a)&&(e.result=d.apply(a,t),!1===e.result&&e.preventDefault());return e.type=m,i||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(v.pop(),t)||!K(r)||u&&y(r[m])&&!w(r)&&((l=r[u])&&(r[u]=null),T.event.triggered=m,e.isPropagationStopped()&&f.addEventListener(m,Et),r[m](),e.isPropagationStopped()&&f.removeEventListener(m,Et),T.event.triggered=void 0,l&&(r[u]=l)),e.result}},simulate:function(e,t,n){var r=T.extend(new T.Event,n,{type:e,isSimulated:!0});T.event.trigger(r,null,t)}}),T.fn.extend({trigger:function(e,t){return this.each((function(){T.event.trigger(e,t,this)}))},triggerHandler:function(e,t){var n=this[0];if(n)return T.event.trigger(e,t,n,!0)}}),g.focusin||T.each({focus:"focusin",blur:"focusout"},(function(e,t){var n=function(e){T.event.simulate(t,e.target,T.event.fix(e))};T.event.special[t]={setup:function(){var r=this.ownerDocument||this,i=Q.access(r,t);i||r.addEventListener(e,n,!0),Q.access(r,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this,i=Q.access(r,t)-1;i?Q.access(r,t,i):(r.removeEventListener(e,n,!0),Q.remove(r,t))}}}));var zt=n.location,Mt=Date.now(),kt=/\?/;T.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+e),t};var At=/\[\]$/,Pt=/\r?\n/g,Lt=/^(?:submit|button|image|reset|file)$/i,Ot=/^(?:input|select|textarea|keygen)/i;function jt(e,t,n,r){var i;if(Array.isArray(t))T.each(t,(function(t,i){n||At.test(e)?r(e,i):jt(e+"["+("object"==typeof i&&null!=i?t:"")+"]",i,n,r)}));else if(n||"object"!==C(t))r(e,t);else for(i in t)jt(e+"["+i+"]",t[i],n,r)}T.param=function(e,t){var n,r=[],i=function(e,t){var n=y(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,(function(){i(this.name,this.value)}));else for(n in e)jt(n,e[n],t,i);return r.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this})).filter((function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&Ot.test(this.nodeName)&&!Lt.test(e)&&(this.checked||!ve.test(e))})).map((function(e,t){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,(function(e){return{name:t.name,value:e.replace(Pt,"\r\n")}})):{name:t.name,value:n.replace(Pt,"\r\n")}})).get()}});var Ht=/%20/g,Dt=/#.*$/,Nt=/([?&])_=[^&]*/,Vt=/^(.*?):[ \t]*([^\r\n]*)$/gm,It=/^(?:GET|HEAD)$/,Bt=/^\/\//,$t={},qt={},Rt="*/".concat("*"),_t=s.createElement("a");function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,i=0,o=t.toLowerCase().match(I)||[];if(y(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Gt(e,t,n,r){var i={},o=e===qt;function s(a){var l;return i[a]=!0,T.each(e[a]||[],(function(e,a){var c=a(t,n,r);return"string"!=typeof c||o||i[c]?o?!(l=c):void 0:(t.dataTypes.unshift(c),s(c),!1)})),l}return s(t.dataTypes[0])||!i["*"]&&s("*")}function Wt(e,t){var n,r,i=T.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((i[n]?e:r||(r={}))[n]=t[n]);return r&&T.extend(!0,e,r),e}_t.href=zt.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:zt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(zt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Rt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Wt(Wt(e,T.ajaxSettings),t):Wt(T.ajaxSettings,e)},ajaxPrefilter:Ft($t),ajaxTransport:Ft(qt),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var r,i,o,a,l,c,u,d,p,f,h=T.ajaxSetup({},t),v=h.context||h,m=h.context&&(v.nodeType||v.jquery)?T(v):T.event,g=T.Deferred(),y=T.Callbacks("once memory"),w=h.statusCode||{},x={},b={},C="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(u){if(!a)for(a={};t=Vt.exec(o);)a[t[1].toLowerCase()+" "]=(a[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=a[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return u?o:null},setRequestHeader:function(e,t){return null==u&&(e=b[e.toLowerCase()]=b[e.toLowerCase()]||e,x[e]=t),this},overrideMimeType:function(e){return null==u&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(u)S.always(e[S.status]);else for(t in e)w[t]=[w[t],e[t]];return this},abort:function(e){var t=e||C;return r&&r.abort(t),E(0,t),this}};if(g.promise(S),h.url=((e||h.url||zt.href)+"").replace(Bt,zt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(I)||[""],null==h.crossDomain){c=s.createElement("a");try{c.href=h.url,c.href=c.href,h.crossDomain=_t.protocol+"//"+_t.host!=c.protocol+"//"+c.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=T.param(h.data,h.traditional)),Gt($t,h,t,S),u)return S;for(p in(d=T.event&&h.global)&&0==T.active++&&T.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!It.test(h.type),i=h.url.replace(Dt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Ht,"+")):(f=h.url.slice(i.length),h.data&&(h.processData||"string"==typeof h.data)&&(i+=(kt.test(i)?"&":"?")+h.data,delete h.data),!1===h.cache&&(i=i.replace(Nt,"$1"),f=(kt.test(i)?"&":"?")+"_="+Mt+++f),h.url=i+f),h.ifModified&&(T.lastModified[i]&&S.setRequestHeader("If-Modified-Since",T.lastModified[i]),T.etag[i]&&S.setRequestHeader("If-None-Match",T.etag[i])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&S.setRequestHeader("Content-Type",h.contentType),S.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Rt+"; q=0.01":""):h.accepts["*"]),h.headers)S.setRequestHeader(p,h.headers[p]);if(h.beforeSend&&(!1===h.beforeSend.call(v,S,h)||u))return S.abort();if(C="abort",y.add(h.complete),S.done(h.success),S.fail(h.error),r=Gt(qt,h,t,S)){if(S.readyState=1,d&&m.trigger("ajaxSend",[S,h]),u)return S;h.async&&h.timeout>0&&(l=n.setTimeout((function(){S.abort("timeout")}),h.timeout));try{u=!1,r.send(x,E)}catch(e){if(u)throw e;E(-1,e)}}else E(-1,"No Transport");function E(e,t,s,a){var c,p,f,x,b,C=t;u||(u=!0,l&&n.clearTimeout(l),r=void 0,o=a||"",S.readyState=e>0?4:0,c=e>=200&&e<300||304===e,s&&(x=function(e,t,n){for(var r,i,o,s,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(i in a)if(a[i]&&a[i].test(r)){l.unshift(i);break}if(l[0]in n)o=l[0];else{for(i in n){if(!l[0]||e.converters[i+" "+l[0]]){o=i;break}s||(s=i)}o=o||s}if(o)return o!==l[0]&&l.unshift(o),n[o]}(h,S,s)),x=function(e,t,n,r){var i,o,s,a,l,c={},u=e.dataTypes.slice();if(u[1])for(s in e.converters)c[s.toLowerCase()]=e.converters[s];for(o=u.shift();o;)if(e.responseFields[o]&&(n[e.responseFields[o]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=o,o=u.shift())if("*"===o)o=l;else if("*"!==l&&l!==o){if(!(s=c[l+" "+o]||c["* "+o]))for(i in c)if((a=i.split(" "))[1]===o&&(s=c[l+" "+a[0]]||c["* "+a[0]])){!0===s?s=c[i]:!0!==c[i]&&(o=a[0],u.unshift(a[1]));break}if(!0!==s)if(s&&e.throws)t=s(t);else try{t=s(t)}catch(e){return{state:"parsererror",error:s?e:"No conversion from "+l+" to "+o}}}return{state:"success",data:t}}(h,x,S,c),c?(h.ifModified&&((b=S.getResponseHeader("Last-Modified"))&&(T.lastModified[i]=b),(b=S.getResponseHeader("etag"))&&(T.etag[i]=b)),204===e||"HEAD"===h.type?C="nocontent":304===e?C="notmodified":(C=x.state,p=x.data,c=!(f=x.error))):(f=C,!e&&C||(C="error",e<0&&(e=0))),S.status=e,S.statusText=(t||C)+"",c?g.resolveWith(v,[p,C,S]):g.rejectWith(v,[S,C,f]),S.statusCode(w),w=void 0,d&&m.trigger(c?"ajaxSuccess":"ajaxError",[S,h,c?p:f]),y.fireWith(v,[S,C]),d&&(m.trigger("ajaxComplete",[S,h]),--T.active||T.event.trigger("ajaxStop")))}return S},getJSON:function(e,t,n){return T.get(e,t,n,"json")},getScript:function(e,t){return T.get(e,void 0,t,"script")}}),T.each(["get","post"],(function(e,t){T[t]=function(e,n,r,i){return y(n)&&(i=i||r,r=n,n=void 0),T.ajax(T.extend({url:e,type:t,dataType:i,data:n,success:r},T.isPlainObject(e)&&e))}})),T._evalUrl=function(e,t){return T.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){T.globalEval(e,t)}})},T.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=T(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map((function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e})).append(this)),this},wrapInner:function(e){return y(e)?this.each((function(t){T(this).wrapInner(e.call(this,t))})):this.each((function(){var t=T(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)}))},wrap:function(e){var t=y(e);return this.each((function(n){T(this).wrapAll(t?e.call(this,n):e)}))},unwrap:function(e){return this.parent(e).not("body").each((function(){T(this).replaceWith(this.childNodes)})),this}}),T.expr.pseudos.hidden=function(e){return!T.expr.pseudos.visible(e)},T.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Ut={0:200,1223:204},Xt=T.ajaxSettings.xhr();g.cors=!!Xt&&"withCredentials"in Xt,g.ajax=Xt=!!Xt,T.ajaxTransport((function(e){var t,r;if(g.cors||Xt&&!e.crossDomain)return{send:function(i,o){var s,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(s in e.xhrFields)a[s]=e.xhrFields[s];for(s in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)a.setRequestHeader(s,i[s]);t=function(e){return function(){t&&(t=r=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?o(0,"error"):o(a.status,a.statusText):o(Ut[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),r=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=r:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout((function(){t&&r()}))},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}})),T.ajaxPrefilter((function(e){e.crossDomain&&(e.contents.script=!1)})),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return T.globalEval(e),e}}}),T.ajaxPrefilter("script",(function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")})),T.ajaxTransport("script",(function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,i){t=T("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&i("error"===e.type?404:200,e.type)}),s.head.appendChild(t[0])},abort:function(){n&&n()}}}));var Yt,Kt=[],Jt=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Kt.pop()||T.expando+"_"+Mt++;return this[e]=!0,e}}),T.ajaxPrefilter("json jsonp",(function(e,t,r){var i,o,s,a=!1!==e.jsonp&&(Jt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Jt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Jt,"$1"+i):!1!==e.jsonp&&(e.url+=(kt.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return s||T.error(i+" was not called"),s[0]},e.dataTypes[0]="json",o=n[i],n[i]=function(){s=arguments},r.always((function(){void 0===o?T(n).removeProp(i):n[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Kt.push(i)),s&&y(o)&&o(s[0]),s=o=void 0})),"script"})),g.createHTMLDocument=((Yt=s.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Yt.childNodes.length),T.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(g.createHTMLDocument?((r=(t=s.implementation.createHTMLDocument("")).createElement("base")).href=s.location.href,t.head.appendChild(r)):t=s),o=!n&&[],(i=L.exec(e))?[t.createElement(i[1])]:(i=Se([e],t,o),o&&o.length&&T(o).remove(),T.merge([],i.childNodes)));var r,i,o},T.fn.load=function(e,t,n){var r,i,o,s=this,a=e.indexOf(" ");return a>-1&&(r=xt(e.slice(a)),e=e.slice(0,a)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(i="POST"),s.length>0&&T.ajax({url:e,type:i||"GET",dataType:"html",data:t}).done((function(e){o=arguments,s.html(r?T("<div>").append(T.parseHTML(e)).find(r):e)})).always(n&&function(e,t){s.each((function(){n.apply(this,o||[e.responseText,t,e])}))}),this},T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(e,t){T.fn[t]=function(e){return this.on(t,e)}})),T.expr.pseudos.animated=function(e){return T.grep(T.timers,(function(t){return e===t.elem})).length},T.offset={setOffset:function(e,t,n){var r,i,o,s,a,l,c=T.css(e,"position"),u=T(e),d={};"static"===c&&(e.style.position="relative"),a=u.offset(),o=T.css(e,"top"),l=T.css(e,"left"),("absolute"===c||"fixed"===c)&&(o+l).indexOf("auto")>-1?(s=(r=u.position()).top,i=r.left):(s=parseFloat(o)||0,i=parseFloat(l)||0),y(t)&&(t=t.call(e,n,T.extend({},a))),null!=t.top&&(d.top=t.top-a.top+s),null!=t.left&&(d.left=t.left-a.left+i),"using"in t?t.using.call(e,d):u.css(d)}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each((function(t){T.offset.setOffset(this,e,t)}));var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],i={top:0,left:0};if("fixed"===T.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===T.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((i=T(e).offset()).top+=T.css(e,"borderTopWidth",!0),i.left+=T.css(e,"borderLeftWidth",!0))}return{top:t.top-i.top-T.css(r,"marginTop",!0),left:t.left-i.left-T.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var e=this.offsetParent;e&&"static"===T.css(e,"position");)e=e.offsetParent;return e||se}))}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(e,t){var n="pageYOffset"===t;T.fn[e]=function(r){return G(this,(function(e,r,i){var o;if(w(e)?o=e:9===e.nodeType&&(o=e.defaultView),void 0===i)return o?o[t]:e[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):e[r]=i}),e,r,arguments.length)}})),T.each(["top","left"],(function(e,t){T.cssHooks[t]=Xe(g.pixelPosition,(function(e,n){if(n)return n=Ue(e,t),Fe.test(n)?T(e).position()[t]+"px":n}))})),T.each({Height:"height",Width:"width"},(function(e,t){T.each({padding:"inner"+e,content:t,"":"outer"+e},(function(n,r){T.fn[r]=function(i,o){var s=arguments.length&&(n||"boolean"!=typeof i),a=n||(!0===i||!0===o?"margin":"border");return G(this,(function(t,n,i){var o;return w(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+e],o["scroll"+e],t.body["offset"+e],o["offset"+e],o["client"+e])):void 0===i?T.css(t,n,a):T.style(t,n,i,a)}),t,s?i:void 0,s)}}))})),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(e,t){T.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}})),T.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),T.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),T.proxy=function(e,t){var n,r,i;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return r=l.call(arguments,2),(i=function(){return e.apply(t||this,r.concat(l.call(arguments)))}).guid=e.guid=e.guid||T.guid++,i},T.holdReady=function(e){e?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=P,T.isFunction=y,T.isWindow=w,T.camelCase=Y,T.type=C,T.now=Date.now,T.isNumeric=function(e){var t=T.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(r=function(){return T}.apply(t,[]))||(e.exports=r);var Qt=n.jQuery,Zt=n.$;return T.noConflict=function(e){return n.$===T&&(n.$=Zt),e&&n.jQuery===T&&(n.jQuery=Qt),T},i||(n.jQuery=n.$=T),T}))},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(4);function i(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var o;if(n)o=n(t);else if(r.isURLSearchParams(t))o=t.toString();else{var s=[];r.forEach(t,(function(e,t){null!=e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,(function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),s.push(i(t)+"="+i(e))})))})),o=s.join("&")}if(o){var a=e.indexOf("#");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf("?")?"?":"&")+o}return e}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";(function(t){var r=n(4),i=n(155),o={"Content-Type":"application/x-www-form-urlencoded"};function s(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var a,l={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(a=n(72)),a),transformRequest:[function(e,t){return i(t,"Accept"),i(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(s(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(s(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],(function(e){l.headers[e]={}})),r.forEach(["post","put","patch"],(function(e){l.headers[e]=r.merge(o)})),e.exports=l}).call(this,n(154))},function(e,t,n){"use strict";var r=n(4),i=n(156),o=n(69),s=n(158),a=n(161),l=n(162),c=n(73);e.exports=function(e){return new Promise((function(t,u){var d=e.data,p=e.headers;r.isFormData(d)&&delete p["Content-Type"];var f=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",v=e.auth.password||"";p.Authorization="Basic "+btoa(h+":"+v)}var m=s(e.baseURL,e.url);if(f.open(e.method.toUpperCase(),o(m,e.params,e.paramsSerializer),!0),f.timeout=e.timeout,f.onreadystatechange=function(){if(f&&4===f.readyState&&(0!==f.status||f.responseURL&&0===f.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in f?a(f.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?f.response:f.responseText,status:f.status,statusText:f.statusText,headers:n,config:e,request:f};i(t,u,r),f=null}},f.onabort=function(){f&&(u(c("Request aborted",e,"ECONNABORTED",f)),f=null)},f.onerror=function(){u(c("Network Error",e,null,f)),f=null},f.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),u(c(t,e,"ECONNABORTED",f)),f=null},r.isStandardBrowserEnv()){var g=n(163),y=(e.withCredentials||l(m))&&e.xsrfCookieName?g.read(e.xsrfCookieName):void 0;y&&(p[e.xsrfHeaderName]=y)}if("setRequestHeader"in f&&r.forEach(p,(function(e,t){void 0===d&&"content-type"===t.toLowerCase()?delete p[t]:f.setRequestHeader(t,e)})),r.isUndefined(e.withCredentials)||(f.withCredentials=!!e.withCredentials),e.responseType)try{f.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&f.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&f.upload&&f.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){f&&(f.abort(),u(e),f=null)})),void 0===d&&(d=null),f.send(d)}))}},function(e,t,n){"use strict";var r=n(157);e.exports=function(e,t,n,i,o){var s=new Error(e);return r(s,t,n,i,o)}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t){t=t||{};var n={},i=["url","method","params","data"],o=["headers","auth","proxy"],s=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];r.forEach(i,(function(e){void 0!==t[e]&&(n[e]=t[e])})),r.forEach(o,(function(i){r.isObject(t[i])?n[i]=r.deepMerge(e[i],t[i]):void 0!==t[i]?n[i]=t[i]:r.isObject(e[i])?n[i]=r.deepMerge(e[i]):void 0!==e[i]&&(n[i]=e[i])})),r.forEach(s,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])}));var a=i.concat(o).concat(s),l=Object.keys(t).filter((function(e){return-1===a.indexOf(e)}));return r.forEach(l,(function(r){void 0!==t[r]?n[r]=t[r]:void 0!==e[r]&&(n[r]=e[r])})),n}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){e.exports=n(149)},function(e,t,n){"use strict";var r=n(7),i=n(87);r({target:"Array",proto:!0,forced:[].forEach!=i},{forEach:i})},function(e,t,n){"use strict";var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!r.call({1:2},1);t.f=o?function(e){var t=i(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(2),i=n(34),o=r.WeakMap;e.exports="function"==typeof o&&/native code/.test(i(o))},function(e,t,n){var r=n(6),i=n(81),o=n(29),s=n(12);e.exports=function(e,t){for(var n=i(t),a=s.f,l=o.f,c=0;c<n.length;c++){var u=n[c];r(e,u)||a(e,u,l(t,u))}}},function(e,t,n){var r=n(13),i=n(83),o=n(86),s=n(8);e.exports=r("Reflect","ownKeys")||function(e){var t=i.f(s(e)),n=o.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(2);e.exports=r},function(e,t,n){var r=n(49),i=n(38).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,i)}},function(e,t,n){var r=n(22),i=n(23),o=n(85),s=function(e){return function(t,n,s){var a,l=r(t),c=i(l.length),u=o(s,c);if(e&&n!=n){for(;c>u;)if((a=l[u++])!=a)return!0}else for(;c>u;u++)if((e||u in l)&&l[u]===n)return e||u||0;return!e&&-1}};e.exports={includes:s(!0),indexOf:s(!1)}},function(e,t,n){var r=n(37),i=Math.max,o=Math.min;e.exports=function(e,t){var n=r(e);return n<0?i(n+t,0):o(n,t)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){"use strict";var r=n(88).forEach,i=n(92),o=n(93),s=i("forEach"),a=o("forEach");e.exports=s&&a?[].forEach:function(e){return r(this,e,arguments.length>1?arguments[1]:void 0)}},function(e,t,n){var r=n(24),i=n(44),o=n(39),s=n(23),a=n(89),l=[].push,c=function(e){var t=1==e,n=2==e,c=3==e,u=4==e,d=6==e,p=5==e||d;return function(f,h,v,m){for(var g,y,w=o(f),x=i(w),b=r(h,v,3),C=s(x.length),T=0,S=m||a,E=t?S(f,C):n?S(f,0):void 0;C>T;T++)if((p||T in x)&&(y=b(g=x[T],T,w),e))if(t)E[T]=y;else if(y)switch(e){case 3:return!0;case 5:return g;case 6:return T;case 2:l.call(E,g)}else if(u)return!1;return d?-1:c||u?u:E}};e.exports={forEach:c(0),map:c(1),filter:c(2),some:c(3),every:c(4),find:c(5),findIndex:c(6)}},function(e,t,n){var r=n(10),i=n(90),o=n(3)("species");e.exports=function(e,t){var n;return i(e)&&("function"!=typeof(n=e.constructor)||n!==Array&&!i(n.prototype)?r(n)&&null===(n=n[o])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===t?0:t)}},function(e,t,n){var r=n(14);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(51);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t){var n=[][e];return!!n&&r((function(){n.call(null,t||function(){throw 1},1)}))}},function(e,t,n){var r=n(9),i=n(5),o=n(6),s=Object.defineProperty,a={},l=function(e){throw e};e.exports=function(e,t){if(o(a,e))return a[e];t||(t={});var n=[][e],c=!!o(t,"ACCESSORS")&&t.ACCESSORS,u=o(t,0)?t[0]:l,d=o(t,1)?t[1]:void 0;return a[e]=!!n&&!i((function(){if(c&&!r)return!0;var e={length:-1};c?s(e,1,{enumerable:!0,get:l}):e[1]=1,n.call(e,u,d)}))}},function(e,t,n){var r=n(7),i=n(95);r({target:"Array",stat:!0,forced:!n(56)((function(e){Array.from(e)}))},{from:i})},function(e,t,n){"use strict";var r=n(24),i=n(39),o=n(52),s=n(53),a=n(23),l=n(96),c=n(54);e.exports=function(e){var t,n,u,d,p,f,h=i(e),v="function"==typeof this?this:Array,m=arguments.length,g=m>1?arguments[1]:void 0,y=void 0!==g,w=c(h),x=0;if(y&&(g=r(g,m>2?arguments[2]:void 0,2)),null==w||v==Array&&s(w))for(n=new v(t=a(h.length));t>x;x++)f=y?g(h[x],x):h[x],l(n,x,f);else for(p=(d=w.call(h)).next,n=new v;!(u=p.call(d)).done;x++)f=y?o(d,g,[u.value,x],!0):u.value,l(n,x,f);return n.length=x,n}},function(e,t,n){"use strict";var r=n(31),i=n(12),o=n(17);e.exports=function(e,t,n){var s=r(t);s in e?i.f(e,s,o(0,n)):e[s]=n}},function(e,t,n){var r=n(40),i=n(15),o=n(98);r||i(Object.prototype,"toString",o,{unsafe:!0})},function(e,t,n){"use strict";var r=n(40),i=n(55);e.exports=r?{}.toString:function(){return"[object "+i(this)+"]"}},function(e,t,n){"use strict";var r,i,o,s,a=n(7),l=n(19),c=n(2),u=n(13),d=n(57),p=n(15),f=n(100),h=n(41),v=n(101),m=n(10),g=n(16),y=n(102),w=n(14),x=n(34),b=n(25),C=n(56),T=n(58),S=n(59).set,E=n(103),z=n(63),M=n(104),k=n(21),A=n(26),P=n(18),L=n(50),O=n(3),j=n(105),H=O("species"),D="Promise",N=P.get,V=P.set,I=P.getterFor(D),B=d,$=c.TypeError,q=c.document,R=c.process,_=u("fetch"),F=k.f,G=F,W="process"==w(R),U=!!(q&&q.createEvent&&c.dispatchEvent),X=L(D,(function(){if(!(x(B)!==String(B))){if(66===j)return!0;if(!W&&"function"!=typeof PromiseRejectionEvent)return!0}if(l&&!B.prototype.finally)return!0;if(j>=51&&/native code/.test(B))return!1;var e=B.resolve(1),t=function(e){e((function(){}),(function(){}))};return(e.constructor={})[H]=t,!(e.then((function(){}))instanceof t)})),Y=X||!C((function(e){B.all(e).catch((function(){}))})),K=function(e){var t;return!(!m(e)||"function"!=typeof(t=e.then))&&t},J=function(e,t,n){if(!t.notified){t.notified=!0;var r=t.reactions;E((function(){for(var i=t.value,o=1==t.state,s=0;r.length>s;){var a,l,c,u=r[s++],d=o?u.ok:u.fail,p=u.resolve,f=u.reject,h=u.domain;try{d?(o||(2===t.rejection&&te(e,t),t.rejection=1),!0===d?a=i:(h&&h.enter(),a=d(i),h&&(h.exit(),c=!0)),a===u.promise?f($("Promise-chain cycle")):(l=K(a))?l.call(a,p,f):p(a)):f(i)}catch(e){h&&!c&&h.exit(),f(e)}}t.reactions=[],t.notified=!1,n&&!t.rejection&&Z(e,t)}))}},Q=function(e,t,n){var r,i;U?((r=q.createEvent("Event")).promise=t,r.reason=n,r.initEvent(e,!1,!0),c.dispatchEvent(r)):r={promise:t,reason:n},(i=c["on"+e])?i(r):"unhandledrejection"===e&&M("Unhandled promise rejection",n)},Z=function(e,t){S.call(c,(function(){var n,r=t.value;if(ee(t)&&(n=A((function(){W?R.emit("unhandledRejection",r,e):Q("unhandledrejection",e,r)})),t.rejection=W||ee(t)?2:1,n.error))throw n.value}))},ee=function(e){return 1!==e.rejection&&!e.parent},te=function(e,t){S.call(c,(function(){W?R.emit("rejectionHandled",e):Q("rejectionhandled",e,t.value)}))},ne=function(e,t,n,r){return function(i){e(t,n,i,r)}},re=function(e,t,n,r){t.done||(t.done=!0,r&&(t=r),t.value=n,t.state=2,J(e,t,!0))},ie=function(e,t,n,r){if(!t.done){t.done=!0,r&&(t=r);try{if(e===n)throw $("Promise can't be resolved itself");var i=K(n);i?E((function(){var r={done:!1};try{i.call(n,ne(ie,e,r,t),ne(re,e,r,t))}catch(n){re(e,r,n,t)}})):(t.value=n,t.state=1,J(e,t,!1))}catch(n){re(e,{done:!1},n,t)}}};X&&(B=function(e){y(this,B,D),g(e),r.call(this);var t=N(this);try{e(ne(ie,this,t),ne(re,this,t))}catch(e){re(this,t,e)}},(r=function(e){V(this,{type:D,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=f(B.prototype,{then:function(e,t){var n=I(this),r=F(T(this,B));return r.ok="function"!=typeof e||e,r.fail="function"==typeof t&&t,r.domain=W?R.domain:void 0,n.parent=!0,n.reactions.push(r),0!=n.state&&J(this,n,!1),r.promise},catch:function(e){return this.then(void 0,e)}}),i=function(){var e=new r,t=N(e);this.promise=e,this.resolve=ne(ie,e,t),this.reject=ne(re,e,t)},k.f=F=function(e){return e===B||e===o?new i(e):G(e)},l||"function"!=typeof d||(s=d.prototype.then,p(d.prototype,"then",(function(e,t){var n=this;return new B((function(e,t){s.call(n,e,t)})).then(e,t)}),{unsafe:!0}),"function"==typeof _&&a({global:!0,enumerable:!0,forced:!0},{fetch:function(e){return z(B,_.apply(c,arguments))}}))),a({global:!0,wrap:!0,forced:X},{Promise:B}),h(B,D,!1,!0),v(D),o=u(D),a({target:D,stat:!0,forced:X},{reject:function(e){var t=F(this);return t.reject.call(void 0,e),t.promise}}),a({target:D,stat:!0,forced:l||X},{resolve:function(e){return z(l&&this===o?B:this,e)}}),a({target:D,stat:!0,forced:Y},{all:function(e){var t=this,n=F(t),r=n.resolve,i=n.reject,o=A((function(){var n=g(t.resolve),o=[],s=0,a=1;b(e,(function(e){var l=s++,c=!1;o.push(void 0),a++,n.call(t,e).then((function(e){c||(c=!0,o[l]=e,--a||r(o))}),i)})),--a||r(o)}));return o.error&&i(o.value),n.promise},race:function(e){var t=this,n=F(t),r=n.reject,i=A((function(){var i=g(t.resolve);b(e,(function(e){i.call(t,e).then(n.resolve,r)}))}));return i.error&&r(i.value),n.promise}})},function(e,t,n){var r=n(15);e.exports=function(e,t,n){for(var i in t)r(e,i,t[i],n);return e}},function(e,t,n){"use strict";var r=n(13),i=n(12),o=n(3),s=n(9),a=o("species");e.exports=function(e){var t=r(e),n=i.f;s&&t&&!t[a]&&n(t,a,{configurable:!0,get:function(){return this}})}},function(e,t){e.exports=function(e,t,n){if(!(e instanceof t))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return e}},function(e,t,n){var r,i,o,s,a,l,c,u,d=n(2),p=n(29).f,f=n(14),h=n(59).set,v=n(61),m=d.MutationObserver||d.WebKitMutationObserver,g=d.process,y=d.Promise,w="process"==f(g),x=p(d,"queueMicrotask"),b=x&&x.value;b||(r=function(){var e,t;for(w&&(e=g.domain)&&e.exit();i;){t=i.fn,i=i.next;try{t()}catch(e){throw i?s():o=void 0,e}}o=void 0,e&&e.enter()},w?s=function(){g.nextTick(r)}:m&&!v?(a=!0,l=document.createTextNode(""),new m(r).observe(l,{characterData:!0}),s=function(){l.data=a=!a}):y&&y.resolve?(c=y.resolve(void 0),u=c.then,s=function(){u.call(c,r)}):s=function(){h.call(d,r)}),e.exports=b||function(e){var t={fn:e,next:void 0};o&&(o.next=t),i||(i=t,s()),o=t}},function(e,t,n){var r=n(2);e.exports=function(e,t){var n=r.console;n&&n.error&&(1===arguments.length?n.error(e):n.error(e,t))}},function(e,t,n){var r,i,o=n(2),s=n(62),a=o.process,l=a&&a.versions,c=l&&l.v8;c?i=(r=c.split("."))[0]+r[1]:s&&(!(r=s.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=s.match(/Chrome\/(\d+)/))&&(i=r[1]),e.exports=i&&+i},function(e,t,n){"use strict";var r=n(7),i=n(19),o=n(57),s=n(5),a=n(13),l=n(58),c=n(63),u=n(15);r({target:"Promise",proto:!0,real:!0,forced:!!o&&s((function(){o.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(e){var t=l(this,a("Promise")),n="function"==typeof e;return this.then(n?function(n){return c(t,e()).then((function(){return n}))}:e,n?function(n){return c(t,e()).then((function(){throw n}))}:e)}}),i||"function"!=typeof o||o.prototype.finally||u(o.prototype,"finally",a("Promise").prototype.finally)},function(e,t,n){"use strict";var r=n(108).charAt,i=n(18),o=n(64),s=i.set,a=i.getterFor("String Iterator");o(String,"String",(function(e){s(this,{type:"String Iterator",string:String(e),index:0})}),(function(){var e,t=a(this),n=t.string,i=t.index;return i>=n.length?{value:void 0,done:!0}:(e=r(n,i),t.index+=e.length,{value:e,done:!1})}))},function(e,t,n){var r=n(37),i=n(30),o=function(e){return function(t,n){var o,s,a=String(i(t)),l=r(n),c=a.length;return l<0||l>=c?e?"":void 0:(o=a.charCodeAt(l))<55296||o>56319||l+1===c||(s=a.charCodeAt(l+1))<56320||s>57343?e?a.charAt(l):o:e?a.slice(l,l+2):s-56320+(o-55296<<10)+65536}};e.exports={codeAt:o(!1),charAt:o(!0)}},function(e,t,n){"use strict";var r=n(65).IteratorPrototype,i=n(43),o=n(17),s=n(41),a=n(20),l=function(){return this};e.exports=function(e,t,n){var c=t+" Iterator";return e.prototype=i(r,{next:o(1,n)}),s(e,c,!1,!0),a[c]=l,e}},function(e,t,n){var r=n(5);e.exports=!r((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,t,n){var r=n(9),i=n(12),o=n(8),s=n(112);e.exports=r?Object.defineProperties:function(e,t){o(e);for(var n,r=s(t),a=r.length,l=0;a>l;)i.f(e,n=r[l++],t[n]);return e}},function(e,t,n){var r=n(49),i=n(38);e.exports=Object.keys||function(e){return r(e,i)}},function(e,t,n){var r=n(10);e.exports=function(e){if(!r(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype");return e}},function(e,t,n){"use strict";var r=n(7),i=n(9),o=n(42),s=n(66),a=n(43),l=n(12),c=n(17),u=n(25),d=n(11),p=n(18),f=p.set,h=p.getterFor("AggregateError"),v=function(e,t){var n=this;if(!(n instanceof v))return new v(e,t);s&&(n=s(new Error(t),o(n)));var r=[];return u(e,r.push,r),i?f(n,{errors:r,type:"AggregateError"}):n.errors=r,void 0!==t&&d(n,"message",String(t)),n};v.prototype=a(Error.prototype,{constructor:c(5,v),message:c(5,""),name:c(5,"AggregateError")}),i&&l.f(v.prototype,"errors",{get:function(){return h(this).errors},configurable:!0}),r({global:!0},{AggregateError:v})},function(e,t,n){n(116)},function(e,t,n){"use strict";var r=n(7),i=n(16),o=n(21),s=n(26),a=n(25);r({target:"Promise",stat:!0},{allSettled:function(e){var t=this,n=o.f(t),r=n.resolve,l=n.reject,c=s((function(){var n=i(t.resolve),o=[],s=0,l=1;a(e,(function(e){var i=s++,a=!1;o.push(void 0),l++,n.call(t,e).then((function(e){a||(a=!0,o[i]={status:"fulfilled",value:e},--l||r(o))}),(function(e){a||(a=!0,o[i]={status:"rejected",reason:e},--l||r(o))}))})),--l||r(o)}));return c.error&&l(c.value),n.promise}})},function(e,t,n){"use strict";var r=n(7),i=n(16),o=n(13),s=n(21),a=n(26),l=n(25);r({target:"Promise",stat:!0},{any:function(e){var t=this,n=s.f(t),r=n.resolve,c=n.reject,u=a((function(){var n=i(t.resolve),s=[],a=0,u=1,d=!1;l(e,(function(e){var i=a++,l=!1;s.push(void 0),u++,n.call(t,e).then((function(e){l||d||(d=!0,r(e))}),(function(e){l||d||(l=!0,s[i]=e,--u||c(new(o("AggregateError"))(s,"No one promise resolved")))}))})),--u||c(new(o("AggregateError"))(s,"No one promise resolved"))}));return u.error&&c(u.value),n.promise}})},function(e,t,n){"use strict";var r=n(7),i=n(21),o=n(26);r({target:"Promise",stat:!0},{try:function(e){var t=i.f(this),n=o(e);return(n.error?t.reject:t.resolve)(n.value),t.promise}})},function(e,t,n){var r=n(2),i=n(120),o=n(121),s=n(11),a=n(3),l=a("iterator"),c=a("toStringTag"),u=o.values;for(var d in i){var p=r[d],f=p&&p.prototype;if(f){if(f[l]!==u)try{s(f,l,u)}catch(e){f[l]=u}if(f[c]||s(f,c,d),i[d])for(var h in o)if(f[h]!==o[h])try{s(f,h,o[h])}catch(e){f[h]=o[h]}}}},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,n){"use strict";var r=n(22),i=n(122),o=n(20),s=n(18),a=n(64),l=s.set,c=s.getterFor("Array Iterator");e.exports=a(Array,"Array",(function(e,t){l(this,{type:"Array Iterator",target:r(e),index:0,kind:t})}),(function(){var e=c(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},function(e,t,n){var r=n(3),i=n(43),o=n(12),s=r("unscopables"),a=Array.prototype;null==a[s]&&o.f(a,s,{configurable:!0,value:i(null)}),e.exports=function(e){a[s][e]=!0}},function(e,t){try{var n=new window.CustomEvent("test");if(n.preventDefault(),!0!==n.defaultPrevented)throw new Error("Could not prevent default")}catch(e){var r=function(e,t){var n,r;return t=t||{bubbles:!1,cancelable:!1,detail:void 0},(n=document.createEvent("CustomEvent")).initCustomEvent(e,t.bubbles,t.cancelable,t.detail),r=n.preventDefault,n.preventDefault=function(){r.call(this);try{Object.defineProperty(this,"defaultPrevented",{get:function(){return!0}})}catch(e){this.defaultPrevented=!0}},n};r.prototype=window.Event.prototype,window.CustomEvent=r}},function(e,t){var n;"function"!=typeof(n=window.Element.prototype).matches&&(n.matches=n.msMatchesSelector||n.mozMatchesSelector||n.webkitMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=0;t[n]&&t[n]!==this;)++n;return Boolean(t[n])}),"function"!=typeof n.closest&&(n.closest=function(e){for(var t=this;t&&1===t.nodeType;){if(t.matches(e))return t;t=t.parentNode}return null})},function(e,t,n){var r,i=n(126);(r=i).keys().map(r)},function(e,t,n){var r={"./arrow-next-icon.svg":127,"./arrow-prev-icon.svg":128,"./calendar-icon.svg":129,"./car-icon.svg":130,"./checked-icon.svg":131,"./checklist-icon.svg":132,"./frame-icon.svg":133,"./id-card-icon.svg":134,"./logo-icon.svg":135,"./mail-icon.svg":136,"./map-icon.svg":137,"./passport-icon.svg":138,"./pin-icon.svg":139,"./smartphone-call-icon.svg":140,"./spare-icon.svg":141,"./stopwatch-icon.svg":142,"./support-icon.svg":143,"./trasser-icon.svg":144,"./truck-icon.svg":145,"./way-icon.svg":146,"./weighing-icon.svg":147};function i(e){var t=o(e);return n(t)}function o(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}i.keys=function(){return Object.keys(r)},i.resolve=o,e.exports=i,i.id=126},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"arrow-next-icon",use:"arrow-next-icon-usage",viewBox:"0 0 53 30",content:'<symbol fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 53 30" id="arrow-next-icon"><g clip-path="url(#arrow-next-icon_clip0)"><path d="M34.15 14.386c-.33 1.52-1.092 2.678-2.24 3.654l21.248-4.328.002-.083-21.227-4.326c1.135.98 1.885 2.138 2.212 3.626H0v1.457h34.152z" fill="#053E7C" /></g><defs><clipPath id="arrow-next-icon_clip0"><path fill="#fff" d="M0 0h53v30H0z" /></clipPath></defs></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"arrow-prev-icon",use:"arrow-prev-icon-usage",viewBox:"0 0 53 30",content:'<symbol fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 53 30" id="arrow-prev-icon"><g clip-path="url(#arrow-prev-icon_clip0)"><path d="M18.85 14.386c.33 1.52 1.092 2.678 2.24 3.654L-.159 13.712v-.083l21.226-4.326c-1.135.98-1.885 2.138-2.212 3.626H53v1.457H18.849z" fill="#053E7C" /></g><defs><clipPath id="arrow-prev-icon_clip0"><path transform="matrix(-1 0 0 1 53 0)" fill="#fff" d="M0 0h53v30H0z" /></clipPath></defs></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"calendar-icon",use:"calendar-icon-usage",viewBox:"0 0 43 43",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43 43" id="calendar-icon"><g clip-path="url(#calendar-icon_clip0)"><path d="M41.653 40.916l-3.36-32.922a.672.672 0 00-.668-.603h-1.344v-.672A5.373 5.373 0 0026.203 4.12a5.37 5.37 0 00-9.406 0 5.374 5.374 0 00-10.078 2.6v.672H5.375a.672.672 0 00-.668.603l-3.36 32.922a.672.672 0 00.669.74h38.968a.671.671 0 00.669-.74zm-1.508-1.536l-3.427-2.937a.671.671 0 00-.437-.162h-3.548l2.811-27.547h1.474l3.127 30.646zm-7.549-1.755h1.869l-2.048 1.755.18-1.755zm3.685.213l2.887 2.474h-5.774l2.887-2.474zm-5.375-35.15a4.036 4.036 0 014.032 4.03v.673h-1.344v-.672a2.687 2.687 0 10-5.375 0v2.687a2.693 2.693 0 002.015 2.603v1.373a4.039 4.039 0 01-3.359-3.976V6.72a4.036 4.036 0 014.031-4.032zM29.563 7.39v-.672a1.344 1.344 0 012.687 0v.672h-2.688zM21.5 2.687a4.036 4.036 0 014.031 4.032v.672h-1.343v-.672a2.688 2.688 0 00-5.375 0v2.687a2.693 2.693 0 002.015 2.603v1.373a4.038 4.038 0 01-3.36-3.976V6.72A4.036 4.036 0 0121.5 2.687zm-1.344 4.704v-.672a1.344 1.344 0 012.688 0v.672h-2.688zM8.062 6.719a4.031 4.031 0 118.063 0v.672h-1.344v-.672a2.687 2.687 0 10-5.375 0v2.687a2.693 2.693 0 002.016 2.603v1.373a4.038 4.038 0 01-3.36-3.976V6.72zm2.688.672v-.672a1.344 1.344 0 012.688 0v.672H10.75zM2.76 40.312L5.982 8.734h.737v.672a5.381 5.381 0 005.375 5.375.674.674 0 00.672-.672v-2.687a.673.673 0 00-.672-.672 1.345 1.345 0 01-1.344-1.344v-.672h5.375v.672a5.381 5.381 0 005.375 5.375.673.673 0 00.672-.672v-2.687a.671.671 0 00-.672-.672 1.345 1.345 0 01-1.344-1.344v-.672h5.375v.672a5.382 5.382 0 005.375 5.375.674.674 0 00.672-.672v-2.687a.673.673 0 00-.672-.672 1.345 1.345 0 01-1.343-1.344v-.672h4.63l-3.222 31.578H2.76z" /><path d="M21.5 16.125h-5.375a.673.673 0 00-.672.672v5.375a.671.671 0 00.672.672H21.5a.671.671 0 00.672-.672v-5.375a.67.67 0 00-.672-.672zm-.672 5.375h-4.031v-4.031h4.031V21.5zm8.735-5.375h-5.375a.673.673 0 00-.672.672v5.375a.671.671 0 00.672.672h5.375a.671.671 0 00.671-.672v-5.375a.67.67 0 00-.672-.672zM28.89 21.5h-4.032v-4.031h4.032V21.5zm-16.796 2.688H6.719a.673.673 0 00-.672.671v5.375a.672.672 0 00.672.672h5.375a.67.67 0 00.672-.672V24.86a.67.67 0 00-.672-.672zm-.672 5.375H7.39V25.53h4.03v4.032zm8.734-5.375h-5.375a.673.673 0 00-.672.671v5.375a.671.671 0 00.672.672h5.375a.67.67 0 00.672-.672V24.86a.67.67 0 00-.672-.672zm-.672 5.375h-4.03V25.53h4.03v4.032zm-8.062 2.687H6.047a.671.671 0 00-.672.672v5.375a.672.672 0 00.672.672h5.375a.671.671 0 00.672-.672v-5.375a.671.671 0 00-.672-.672zm-.672 5.375H6.719v-4.031h4.031v4.03zm8.734-5.375H14.11a.67.67 0 00-.671.672v5.375a.673.673 0 00.671.672h5.375a.671.671 0 00.672-.672v-5.375a.67.67 0 00-.672-.672zm-.672 5.375h-4.03v-4.031h4.03v4.03zm8.932-13.241l-2.213 2.213-2.212-2.213-.95.95 2.212 2.213-2.212 2.212.95.95 2.212-2.212 2.213 2.212.95-.95-2.213-2.212 2.213-2.213-.95-.95z" /></g><defs><clipPath id="calendar-icon_clip0"><path d="M0 0h43v43H0z" /></clipPath></defs></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"car-icon",use:"car-icon-usage",viewBox:"0 0 43 43",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43 43" id="car-icon"><g clip-path="url(#car-icon_clip0)"><path d="M38.586 24.72a.844.844 0 01-.825-1.004.86.86 0 01.23-.43.9.9 0 01.127-.104.908.908 0 01.303-.125.825.825 0 01.63.125.878.878 0 01.309.377.838.838 0 01-.774 1.162zm-3.052 0H14.537a.84.84 0 110-1.68h20.997a.84.84 0 110 1.68zm-3.885 4H14.537a.84.84 0 110-1.68h17.112a.84.84 0 010 1.68z" /><path d="M42.996 33.792c.003-.028 0-.056 0-.084V1.512a.84.84 0 00-.84-.84H11.51a.84.84 0 00-.84.84v39.92a.84.84 0 00.84.839H34.6a.84.84 0 00.594-.246l7.556-7.556a.844.844 0 00.246-.677zM33.97 16.813a3.256 3.256 0 00-3.14-2.41 3.256 3.256 0 00-3.025 2.06v-4.372h5.929c.533 0 .967.434.967.967v3.755h-.73zm-1.57.84c0 .866-.704 1.57-1.57 1.57-.866 0-1.57-.704-1.57-1.57 0-.866.704-1.57 1.57-1.57.866 0 1.57.704 1.57 1.57zm-4.595-7.242v-3.14h2.128c.788 0 1.478.505 1.716 1.258l.596 1.882h-4.44zM12.35 2.351h13.777v14.462H20.75a3.256 3.256 0 00-3.14-2.41 3.256 3.256 0 00-3.14 2.41h-2.12V2.352zm6.831 15.302a1.572 1.572 0 01-3.141 0 1.571 1.571 0 013.141 0zm-6.83.84h2.12a3.256 3.256 0 003.14 2.41 3.256 3.256 0 003.14-2.41h6.94a3.256 3.256 0 003.14 2.41 3.256 3.256 0 003.14-2.41h1.57a.84.84 0 00.84-.84v-4.595a2.65 2.65 0 00-2.37-2.632l-.76-2.404a3.466 3.466 0 00-3.317-2.43h-2.128v-3.24h13.511v30.684h-6.715a.84.84 0 00-.84.84v6.716H12.349V18.493zm23.09 20.911v-4.689h4.689l-4.689 4.69z" /><path d="M30 36.395H14.537a.84.84 0 01-.84-.84v-3.359a.84.84 0 01.84-.84H30a.84.84 0 01.84.84v3.36a.84.84 0 01-.84.839zm-14.623-1.68H29.16v-1.68H15.376v1.68zM6.692 1.714H5.043a2.61 2.61 0 00-2.608 2.608v2.205H.84a.84.84 0 00-.84.84v14.177a.84.84 0 001.68 0V8.207h.755v25.168c0 .664.085 1.328.252 1.974l.001.005.002.008a.84.84 0 00.047.129c.2.504.97 2.105 2.29 4.771v.968a.84.84 0 101.68 0v-.968c1.322-2.665 2.09-4.266 2.291-4.77a.872.872 0 00.049-.138 7.867 7.867 0 00.254-1.979V4.322a2.61 2.61 0 00-2.609-2.609zM4.114 33.375V10.689h3.507v22.686c0 .31-.023.62-.07.928H4.185a6.151 6.151 0 01-.07-.928zm0-29.053a.93.93 0 01.929-.93h1.65a.93.93 0 01.928.93V9.01H4.114V4.322zm1.754 33.846a268.99 268.99 0 01-1.063-2.185H6.93c-.284.595-.661 1.37-1.062 2.185z" /></g><defs><clipPath id="car-icon_clip0"><path d="M0 0h43v43H0z" /></clipPath></defs></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"checked-icon",use:"checked-icon-usage",viewBox:"0 0 20 20",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" id="checked-icon"><g clip-path="url(#checked-icon_clip0)"><path d="M0 10.638L6.849 17.5 20 4.362 18.112 2.5 6.849 13.75 1.862 8.763 0 10.638z" /></g><defs><clipPath id="checked-icon_clip0"><path d="M0 0h20v20H0z" /></clipPath></defs></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"checklist-icon",use:"checklist-icon-usage",viewBox:"0 0 43 43",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43 43" id="checklist-icon"><path d="M34.266 6.047h-9.8l-.65-.65a2.67 2.67 0 00.372-1.366 2.699 2.699 0 00-1.776-2.53 2.687 2.687 0 00-3.227 3.895l-.65.65h-9.8a.672.672 0 00-.672.673v34.265a.672.672 0 00.671.672h25.532a.672.672 0 00.672-.672V6.72a.672.672 0 00-.672-.672zM19.288 7.194l1.262-1.262a.672.672 0 000-.95 1.345 1.345 0 111.9 0 .672.672 0 000 .95l1.262 1.262a.672.672 0 00.476.197 3.365 3.365 0 013.291 2.687H15.521a3.365 3.365 0 013.291-2.687c.179 0 .35-.071.476-.197zm8.959 4.228a.671.671 0 00.64-.879 4.68 4.68 0 00-.045-.465h2.064v26.875H12.094V10.078h2.064a4.72 4.72 0 00-.049.672.672.672 0 00.672.672h13.466zm5.347 28.89H9.406V7.392h6.12a4.725 4.725 0 00-.961 1.343h-3.143a.672.672 0 00-.672.672v28.22a.672.672 0 00.672.67h20.156a.672.672 0 00.672-.67V9.405a.672.672 0 00-.672-.672h-3.143a4.723 4.723 0 00-.96-1.343h6.119v32.922z" /><path d="M18.14 23.516h-4.03a.672.672 0 00-.672.672v4.03a.672.672 0 00.671.673h4.032a.672.672 0 00.672-.672v-4.032a.672.672 0 00-.672-.671zm-.671 4.03H14.78V24.86h2.688v2.688zm.671 2.688h-4.03a.672.672 0 00-.672.672v4.032a.672.672 0 00.671.671h4.032a.672.672 0 00.672-.672v-4.03a.672.672 0 00-.672-.673zm-.671 4.032H14.78v-2.688h2.688v2.688zm.671-21.5h6.72v1.343h-6.72v-1.343zm3.36 4.703h4.031v1.343H21.5V17.47zm5.375 0h2.688v1.343h-2.688V17.47zm-6.719 2.687h2.688V21.5h-2.688v-1.344zm4.032 0h4.03V21.5h-4.03v-1.344zM21.5 24.188h4.031v1.343H21.5v-1.343zm5.375 0h2.688v1.343h-2.688v-1.343zm-6.719 2.687h2.688v1.344h-2.688v-1.344zm4.032 0h4.03v1.344h-4.03v-1.344zM21.5 30.906h4.031v1.344H21.5v-1.344zm5.375 0h2.688v1.344h-2.688v-1.344zm-6.719 2.688h2.688v1.343h-2.688v-1.343zm4.032 0h4.03v1.343h-4.03v-1.343zM19.01 15.65l-1.148 1.147H14.11a.672.672 0 00-.671.672V21.5a.672.672 0 00.671.672h4.032a.672.672 0 00.672-.672v-3.753L19.96 16.6l-.95-.95zm-1.541 5.178H14.78v-2.687h1.738l-.87.868.951.95.869-.868v1.737z" /></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"frame-icon",use:"frame-icon-usage",viewBox:"0 0 40 44",content:'<symbol fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 44" id="frame-icon"><path fill-rule="evenodd" clip-rule="evenodd" d="M40 0H0v44h40V0zM11 16a1 1 0 100 2h18a1 1 0 100-2H11zm0 6.667a1 1 0 100 2h18a1 1 0 100-2H11zm-1 7.666a1 1 0 011-1h18a1 1 0 110 2H11a1 1 0 01-1-1z" fill="#053E7C" /></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"id-card-icon",use:"id-card-icon-usage",viewBox:"0 0 43 44",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43 44" id="id-card-icon"><g clip-path="url(#id-card-icon_clip0)"><path d="M21.5 3.412a2.08 2.08 0 00-2.08 2.076 2.081 2.081 0 004.16 0 2.081 2.081 0 00-2.08-2.077zm0 2.768a.694.694 0 01-.694-.692.694.694 0 011.388 0 .693.693 0 01-.694.692z" /><path d="M39.532 11.718H26.355V.643h-9.71v11.075H3.468A3.468 3.468 0 000 15.18V40.1a3.468 3.468 0 003.468 3.462h36.064A3.468 3.468 0 0043 40.1V15.18a3.468 3.468 0 00-3.468-3.462zm-21.5-9.691h6.936v13.845h-6.936V2.027zM41.612 40.1a2.081 2.081 0 01-2.08 2.076H3.468a2.081 2.081 0 01-2.08-2.076V15.18a2.08 2.08 0 012.08-2.077h13.177v2.769h-3.468v1.384h16.646v-1.384h-3.468v-2.77h13.177c1.147 0 2.08.932 2.08 2.077V40.1z" /><path d="M2.774 40.792h18.033V18.64H2.774v22.15zm13.178-1.385H7.629V36.64a4.162 4.162 0 018.323 0v2.768zm-8.323-12.46a4.162 4.162 0 018.323 0 4.162 4.162 0 01-8.323 0zm-3.467-6.922H19.42v19.383h-2.081v-2.77a5.54 5.54 0 00-2.869-4.845 5.54 5.54 0 002.869-4.846c0-3.053-2.49-5.537-5.548-5.537-3.06 0-5.549 2.484-5.549 5.537a5.54 5.54 0 002.869 4.846 5.54 5.54 0 00-2.869 4.846v2.768h-2.08V20.025zm36.064 2.769H22.193v1.384h18.033v-1.384zm0 2.769H22.193v1.384h18.033v-1.384zm0 2.769H22.193v1.384h18.033v-1.384zm0 2.768H22.193v1.385h18.033v-1.384zm0 2.77h-1.387v1.384h1.387V33.87zm-2.774 0H33.29v1.384h4.16V33.87z" /></g><defs><clipPath id="id-card-icon_clip0"><path d="M0 .643h43v42.918H0z" /></clipPath></defs></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"logo-icon",use:"logo-icon-usage",viewBox:"0 0 262 45",content:'<symbol fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 262 45" id="logo-icon"><path d="M11.56 18.064H6.472L5.488 22H.88L5.416 6.616c.08-.352.256-.632.528-.84a1.56 1.56 0 01.984-.336h4.176c.368 0 .688.112.96.336.288.208.48.488.576.84L17.152 22h-4.608l-.984-3.936zm-.816-3.264l-1.08-4.248c-.176-.832-.28-1.408-.312-1.728h-.648a84.502 84.502 0 01-.336 1.728L7.288 14.8h3.456zm17.64-1.32c1.247.112 2.135.528 2.663 1.248.544.72.816 1.768.816 3.144 0 1.12-.2 1.992-.6 2.616-.4.624-1.016 1.064-1.848 1.32-.832.256-1.952.384-3.36.384-1.84 0-3.288-.016-4.344-.048A52.446 52.446 0 0118.543 22V5.44c.944-.08 1.896-.128 2.856-.144.96-.032 2.256-.048 3.888-.048 1.536 0 2.736.128 3.6.384.864.24 1.488.672 1.872 1.296.384.624.576 1.504.576 2.64 0 1.2-.232 2.104-.696 2.712-.464.608-1.216.96-2.256 1.056v.144zm-1.345-3.288c0-.72-.136-1.192-.408-1.416-.272-.24-.8-.36-1.584-.36h-2.112v3.624h2.232c.736 0 1.232-.12 1.488-.36.256-.256.384-.752.384-1.488zm-1.776 8.832c.576 0 1.008-.056 1.296-.168a1.01 1.01 0 00.624-.6c.128-.288.192-.712.192-1.272 0-.608-.064-1.064-.192-1.368a1.007 1.007 0 00-.624-.624c-.304-.128-.752-.192-1.344-.192h-2.28v4.224h2.328zM46.97 8.92h-4.776V22h-4.512V8.92H32.93V5.44h14.04v3.48zm8.554-3.816c1.888 0 3.36.256 4.416.768 1.056.496 1.824 1.368 2.304 2.616.48 1.232.72 2.976.72 5.232 0 2.256-.24 4.008-.72 5.256-.48 1.232-1.248 2.104-2.304 2.616-1.056.496-2.528.744-4.416.744-1.888 0-3.36-.248-4.416-.744-1.056-.512-1.824-1.384-2.304-2.616-.464-1.248-.696-3-.696-5.256 0-2.256.232-4 .696-5.232.48-1.248 1.248-2.12 2.304-2.616 1.056-.512 2.528-.768 4.416-.768zm0 3.456c-.72 0-1.272.152-1.656.456-.384.288-.656.8-.816 1.536-.144.72-.216 1.776-.216 3.168 0 1.392.072 2.456.216 3.192.16.72.432 1.232.816 1.536.384.288.936.432 1.656.432.72 0 1.272-.144 1.656-.432.384-.304.648-.816.792-1.536.16-.736.24-1.8.24-3.192 0-1.392-.08-2.448-.24-3.168-.144-.736-.408-1.248-.792-1.536-.384-.304-.936-.456-1.656-.456zM78.864 22H74.35V8.512h-1.51c-.864 0-1.32.408-1.368 1.224-.176 2.064-.36 3.776-.552 5.136-.176 1.344-.416 2.472-.72 3.384-.448 1.376-1.08 2.384-1.896 3.024-.8.624-1.784.936-2.952.936a8.85 8.85 0 01-1.344-.12l-.312-3.48c.64-.096 1.144-.248 1.512-.456.368-.224.648-.6.84-1.128.272-.752.496-1.728.672-2.928.176-1.216.328-2.8.456-4.752.192-2.608 1.576-3.912 4.152-3.912h7.536V22zm9.894-16.896c1.888 0 3.36.256 4.416.768 1.056.496 1.824 1.368 2.304 2.616.48 1.232.72 2.976.72 5.232 0 2.256-.24 4.008-.72 5.256-.48 1.232-1.248 2.104-2.304 2.616-1.056.496-2.528.744-4.416.744-1.888 0-3.36-.248-4.416-.744-1.056-.512-1.824-1.384-2.304-2.616-.464-1.248-.696-3-.696-5.256 0-2.256.232-4 .696-5.232.48-1.248 1.248-2.12 2.304-2.616 1.056-.512 2.528-.768 4.416-.768zm0 3.456c-.72 0-1.272.152-1.656.456-.384.288-.656.8-.816 1.536-.144.72-.216 1.776-.216 3.168 0 1.392.072 2.456.216 3.192.16.72.432 1.232.816 1.536.384.288.936.432 1.656.432.72 0 1.272-.144 1.656-.432.384-.304.648-.816.792-1.536.16-.736.24-1.8.24-3.192 0-1.392-.08-2.448-.24-3.168-.144-.736-.408-1.248-.792-1.536-.384-.304-.936-.456-1.656-.456zm13.543-3.192c1.776 0 3.256.016 4.44.048 1.2.032 2.288.112 3.264.24l-.192 3.216h-5.568c-.752 0-1.128.36-1.128 1.08V22h-4.512V9.016c0-1.072.344-1.944 1.032-2.616.688-.688 1.576-1.032 2.664-1.032zM126.035 22h-4.296v-8.64c0-.704.08-1.512.24-2.424h-.168c-.288.912-.616 1.704-.984 2.376L116.075 22h-4.344V5.44h4.272v8.424c0 .72-.08 1.56-.24 2.52h.168c.304-.912.64-1.704 1.008-2.376l4.752-8.568h4.344V22zm9.712-16.848c1.2 0 2.168.048 2.904.144.736.08 1.512.232 2.328.456l-.336 3.312a166.527 166.527 0 00-4.896-.072c-.672 0-1.192.136-1.56.408-.352.272-.6.744-.744 1.416-.144.672-.216 1.64-.216 2.904s.072 2.232.216 2.904c.144.672.392 1.144.744 1.416.368.272.888.408 1.56.408 1.264 0 2.272-.008 3.024-.024a32.508 32.508 0 002.208-.168l.36 3.288c-.8.272-1.624.464-2.472.576-.832.112-1.872.168-3.12.168-1.792 0-3.216-.272-4.272-.816-1.04-.56-1.8-1.456-2.28-2.688-.464-1.248-.696-2.936-.696-5.064s.232-3.808.696-5.04c.48-1.248 1.24-2.144 2.28-2.688 1.056-.56 2.48-.84 4.272-.84zm20.488 3.768h-4.776V22h-4.512V8.92h-4.752V5.44h14.04v3.48zM172.418 22h-4.296v-8.64c0-.704.08-1.512.24-2.424h-.168c-.288.912-.616 1.704-.984 2.376L162.458 22h-4.344V5.44h4.272v8.424c0 .72-.08 1.56-.24 2.52h.168c.304-.912.64-1.704 1.008-2.376l4.752-8.568h4.344V22zm11.463-8.568c1.088.16 1.904.448 2.448.864s.992 1.072 1.344 1.968c.368.88.896 2.464 1.584 4.752l.288.984h-4.704a6.606 6.606 0 00-.24-.816c-.576-2.016-1.008-3.408-1.296-4.176-.272-.784-.6-1.328-.984-1.632-.384-.304-.952-.456-1.704-.456h-.84a6.94 6.94 0 01.192 1.536V22h-4.488V5.44h4.488v4.392c0 .704-.072 1.392-.216 2.064h.816c.768 0 1.352-.184 1.752-.552.4-.384.728-.96.984-1.728.272-.768.672-2.16 1.2-4.176h4.584l-.504 1.656c-.528 1.776-.952 3.032-1.272 3.768-.304.736-.712 1.296-1.224 1.68-.496.368-1.232.616-2.208.744v.144z" fill="#D61622" /><path d="M7.885 32.395H5.143V40h-1.12v-7.605H1.287v-.926h6.598v.925zM13.69 36.9c0 .965-.22 1.743-.662 2.332-.441.59-1.039.885-1.793.885-.77 0-1.375-.244-1.816-.732v3.053H8.336V33.66h.99l.053.703c.441-.547 1.055-.82 1.84-.82.761 0 1.363.287 1.804.861.446.574.668 1.373.668 2.397v.1zm-1.084-.123c0-.715-.152-1.279-.457-1.693-.304-.414-.722-.621-1.254-.621-.656 0-1.148.29-1.476.873v3.03c.324.577.82.866 1.488.866.52 0 .932-.205 1.237-.615.308-.414.462-1.027.462-1.84zM18.988 40c-.062-.125-.113-.348-.152-.668-.504.523-1.105.785-1.805.785-.625 0-1.138-.176-1.54-.527a1.728 1.728 0 01-.598-1.348c0-.66.25-1.172.75-1.535.503-.367 1.21-.55 2.12-.55h1.055v-.499c0-.379-.113-.68-.34-.902-.226-.227-.56-.34-1.001-.34-.387 0-.711.098-.973.293-.262.195-.393.432-.393.709h-1.09c0-.316.112-.621.334-.914a2.32 2.32 0 01.915-.703c.386-.172.81-.258 1.271-.258.73 0 1.303.184 1.717.55.414.364.629.866.644 1.507v2.918c0 .582.075 1.044.223 1.388V40h-1.137zm-1.799-.826c.34 0 .663-.088.967-.264a1.59 1.59 0 00.662-.685v-1.301h-.85c-1.327 0-1.991.389-1.991 1.166 0 .34.113.605.34.797.226.191.517.287.872.287zm9.592.826h-1.084v-2.707h-2.912V40h-1.09v-6.34h1.09v2.748h2.912V33.66h1.084V40zm4.29-.768c.386 0 .724-.117 1.013-.351.289-.234.45-.528.48-.879h1.026c-.02.363-.145.709-.375 1.037-.23.328-.54.59-.926.785a2.637 2.637 0 01-1.219.293c-.863 0-1.55-.287-2.062-.861-.508-.578-.762-1.367-.762-2.367v-.182c0-.617.113-1.166.34-1.647.227-.48.55-.853.973-1.119.425-.265.927-.398 1.505-.398.711 0 1.301.213 1.77.639.473.425.725.978.756 1.658h-1.026a1.478 1.478 0 00-.468-1.008 1.433 1.433 0 00-1.031-.398c-.551 0-.98.199-1.284.597-.3.395-.45.967-.45 1.717v.205c0 .73.15 1.293.45 1.688.301.394.73.591 1.29.591zm8.923.768H38.91v-5.443h-2.918V40h-1.09v-6.34h5.092V40zm1.453-3.228c0-.622.121-1.18.363-1.676a2.758 2.758 0 011.02-1.149 2.79 2.79 0 011.494-.404c.864 0 1.56.299 2.092.897.535.597.803 1.392.803 2.384v.076c0 .618-.12 1.172-.358 1.665a2.67 2.67 0 01-1.013 1.142c-.438.273-.942.41-1.512.41-.86 0-1.557-.299-2.092-.896-.531-.598-.797-1.389-.797-2.373v-.076zm1.09.128c0 .703.162 1.268.486 1.694.329.425.766.638 1.313.638.55 0 .988-.214 1.312-.644.325-.434.487-1.04.487-1.816 0-.696-.166-1.258-.498-1.688a1.564 1.564 0 00-1.313-.65c-.535 0-.967.213-1.295.638-.328.426-.492 1.035-.492 1.828zm11.397 0c0 .965-.221 1.743-.662 2.332-.442.59-1.04.885-1.794.885-.769 0-1.375-.244-1.816-.732v3.053h-1.084V33.66h.99l.053.703c.441-.547 1.055-.82 1.84-.82.762 0 1.363.287 1.805.861.445.574.668 1.373.668 2.397v.1zm-1.084-.123c0-.715-.153-1.279-.457-1.693-.305-.414-.723-.621-1.254-.621-.657 0-1.149.29-1.477.873v3.03c.324.577.82.866 1.488.866.52 0 .932-.205 1.237-.615.308-.414.463-1.027.463-1.84zm6.709-2.238h-2.127V40h-1.084v-5.46h-2.086v-.88h5.297v.88zM65.793 40h-1.084v-2.707h-2.912V40h-1.09v-6.34h1.09v2.748h2.912V33.66h1.084V40zm2.93-4.154h1.646c.719.008 1.287.195 1.705.562.418.367.627.865.627 1.494 0 .633-.215 1.141-.644 1.524-.43.383-1.008.574-1.735.574H67.64v-6.34h1.084v2.186zM74.963 40h-1.09v-6.34h1.09V40zm-6.24-3.27v2.385h1.611c.406 0 .72-.103.943-.31.223-.211.334-.498.334-.862 0-.351-.109-.638-.328-.861-.215-.227-.517-.344-.908-.352h-1.652zm10.763 3.387c-.859 0-1.558-.281-2.097-.844-.54-.566-.809-1.322-.809-2.267v-.2c0-.628.12-1.189.358-1.681a2.815 2.815 0 011.007-1.16 2.536 2.536 0 011.407-.422c.824 0 1.464.272 1.921.814.458.543.686 1.32.686 2.333v.45h-4.295c.016.626.197 1.132.545 1.518.352.383.797.574 1.336.574.383 0 .707-.078.973-.234.265-.156.498-.363.697-.621l.662.516c-.531.816-1.328 1.224-2.39 1.224zm-.134-5.683c-.438 0-.805.16-1.102.48-.297.316-.48.762-.55 1.336h3.175v-.082c-.031-.55-.18-.977-.445-1.277-.266-.305-.625-.457-1.078-.457zm8.917 3.978l1.477-4.752h1.16l-2.549 7.319c-.394 1.054-1.021 1.581-1.88 1.581l-.206-.017-.404-.076v-.88l.293.024c.367 0 .653-.074.856-.222.207-.149.377-.42.51-.815l.24-.644-2.262-6.27h1.183l1.582 4.752zm6.07.82c.388 0 .725-.117 1.014-.351.29-.234.45-.528.481-.879h1.025c-.02.363-.144.709-.375 1.037-.23.328-.539.59-.925.785-.383.196-.79.293-1.22.293-.862 0-1.55-.287-2.062-.861-.508-.578-.761-1.367-.761-2.367v-.182c0-.617.113-1.166.34-1.647.226-.48.55-.853.972-1.119.426-.265.928-.398 1.506-.398.71 0 1.3.213 1.77.639.472.425.724.978.755 1.658h-1.025a1.478 1.478 0 00-.469-1.008 1.433 1.433 0 00-1.031-.398c-.55 0-.978.199-1.283.597-.301.395-.451.967-.451 1.717v.205c0 .73.15 1.293.45 1.688.302.394.731.591 1.29.591zm8.936-5.572V40h-1.089v-5.443h-2.157L99.9 36.93c-.07 1.09-.254 1.869-.55 2.338-.293.468-.76.712-1.4.732h-.434v-.955l.31-.023c.352-.04.604-.243.756-.61.152-.367.25-1.047.293-2.039l.117-2.713h4.283zm3.815 4.752l1.476-4.752h1.161l-2.549 7.319c-.395 1.054-1.022 1.581-1.881 1.581l-.205-.017-.404-.076v-.88l.292.024c.368 0 .653-.074.856-.222.207-.149.377-.42.51-.815l.24-.644-2.262-6.27h1.184l1.582 4.752zm7.705-3.855h-2.924V40h-1.09v-6.34h4.014v.897zm5.045-.897h1.084V40h-1.084v-4.623L116.916 40h-1.084v-6.34h1.084v4.63l2.924-4.63zm5.748 5.455l.375-.463c.422-.547.662-1.367.721-2.46l.099-2.532h4.084v5.455h.815v2.748h-1.084V40h-4.424v1.863h-1.084l.006-2.748h.492zm1.283 0h2.912v-4.453h-1.951l-.064 1.512c-.067 1.261-.366 2.242-.897 2.941zm11.209-5.455V40h-1.09v-5.443h-2.156l-.129 2.373c-.07 1.09-.254 1.869-.551 2.338-.293.468-.759.712-1.4.732h-.434v-.955l.311-.023c.351-.04.603-.243.756-.61.152-.367.25-1.047.293-2.039l.117-2.713h4.283zm6.586 0V40h-1.09v-2.467h-1.635L140.447 40h-1.172l1.594-2.63c-.406-.15-.719-.378-.937-.686a1.876 1.876 0 01-.323-1.09c0-.578.217-1.043.651-1.395.433-.355 1.013-.535 1.74-.539h2.666zm-3.967 1.946c0 .308.106.558.317.75.211.187.49.283.838.287h1.722v-2.104h-1.558c-.403 0-.723.1-.961.299a.943.943 0 00-.358.767zm11.467-1.583c.797 0 1.434.268 1.91.803.481.531.721 1.233.721 2.104v.1c0 .597-.115 1.132-.346 1.605a2.58 2.58 0 01-.996 1.096c-.43.257-.926.386-1.488.386-.852 0-1.537-.283-2.057-.85-.519-.57-.779-1.333-.779-2.29v-.528c0-1.332.246-2.39.738-3.176.496-.785 1.227-1.263 2.192-1.435.546-.098.916-.217 1.107-.358a.681.681 0 00.287-.58h.891c0 .489-.112.87-.334 1.143-.219.273-.571.467-1.055.58l-.809.182c-.644.152-1.128.41-1.453.773-.32.36-.529.84-.627 1.441.575-.663 1.274-.996 2.098-.996zm-.211.891c-.531 0-.953.18-1.266.54-.312.355-.468.849-.468 1.481v.094c0 .68.156 1.219.468 1.617.317.395.743.592 1.278.592.539 0 .965-.199 1.277-.597.313-.399.469-.98.469-1.746 0-.598-.158-1.077-.475-1.436-.312-.363-.74-.545-1.283-.545zm8.057-1.254h1.084V40h-1.084v-4.623L157.088 40h-1.084v-6.34h1.084v4.63l2.924-4.63zm6.31 1.735a.834.834 0 00-.34-.704c-.226-.175-.537-.263-.931-.263-.383 0-.703.1-.961.299-.254.199-.381.433-.381.703h-1.078c0-.551.23-1.002.691-1.354.461-.351 1.037-.527 1.729-.527.742 0 1.32.16 1.734.48.414.317.621.77.621 1.36 0 .285-.086.546-.258.785a1.752 1.752 0 01-.732.568c.738.25 1.107.742 1.107 1.477 0 .582-.224 1.043-.673 1.383-.45.34-1.049.51-1.799.51-.731 0-1.334-.178-1.811-.534-.472-.36-.709-.844-.709-1.453h1.078c0 .309.137.574.411.797.277.219.621.328 1.031.328.414 0 .748-.096 1.002-.287a.89.89 0 00.381-.744c0-.356-.108-.61-.323-.762-.211-.156-.541-.234-.99-.234h-1.084v-.914h1.178c.738-.02 1.107-.325 1.107-.914zM174.109 40h-1.084v-2.707h-2.912V40h-1.09v-6.34h1.09v2.748h2.912V33.66h1.084V40zm4.377.117c-.859 0-1.558-.281-2.097-.844-.539-.566-.809-1.322-.809-2.267v-.2c0-.628.119-1.189.358-1.681a2.817 2.817 0 011.007-1.16 2.539 2.539 0 011.407-.422c.824 0 1.464.272 1.921.814.457.543.686 1.32.686 2.333v.45h-4.295c.016.626.197 1.132.545 1.518.352.383.797.574 1.336.574.383 0 .707-.078.973-.234.265-.156.498-.363.697-.621l.662.516c-.531.816-1.328 1.224-2.391 1.224zm-.134-5.683c-.438 0-.805.16-1.102.48-.297.316-.48.762-.551 1.336h3.176v-.082c-.031-.55-.18-.977-.445-1.277-.266-.305-.625-.457-1.078-.457zm6.41 4.798c.386 0 .724-.117 1.013-.351.289-.234.45-.528.481-.879h1.025a1.957 1.957 0 01-.375 1.037 2.46 2.46 0 01-.926.785 2.642 2.642 0 01-1.218.293c-.864 0-1.551-.287-2.063-.861-.508-.578-.761-1.367-.761-2.367v-.182c0-.617.113-1.166.339-1.647.227-.48.551-.853.973-1.119.426-.265.928-.398 1.506-.398.711 0 1.301.213 1.769.639.473.425.725.978.756 1.658h-1.025a1.478 1.478 0 00-.469-1.008 1.432 1.432 0 00-1.031-.398c-.551 0-.979.199-1.283.597-.301.395-.452.967-.452 1.717v.205c0 .73.151 1.293.452 1.688.3.394.73.591 1.289.591zm7.652.768c-.062-.125-.113-.348-.152-.668-.504.523-1.106.785-1.805.785-.625 0-1.139-.176-1.541-.527a1.73 1.73 0 01-.598-1.348c0-.66.25-1.172.75-1.535.504-.367 1.211-.55 2.121-.55h1.055v-.499c0-.379-.113-.68-.34-.902-.226-.227-.56-.34-1.002-.34-.386 0-.711.098-.972.293-.262.195-.393.432-.393.709h-1.09c0-.316.112-.621.334-.914.227-.297.531-.531.914-.703a3.098 3.098 0 011.272-.258c.73 0 1.303.184 1.717.55.414.364.628.866.644 1.507v2.918c0 .582.074 1.044.223 1.388V40h-1.137zm-1.799-.826c.34 0 .662-.088.967-.264.305-.176.525-.404.662-.685v-1.301h-.849c-1.329 0-1.993.389-1.993 1.166 0 .34.114.605.34.797.227.191.518.287.873.287zm9.932.058c.387 0 .724-.117 1.014-.351.289-.234.449-.528.48-.879h1.025a1.957 1.957 0 01-.375 1.037c-.23.328-.539.59-.925.785a2.646 2.646 0 01-1.219.293c-.863 0-1.551-.287-2.063-.861-.507-.578-.761-1.367-.761-2.367v-.182c0-.617.113-1.166.339-1.647.227-.48.551-.853.973-1.119.426-.265.928-.398 1.506-.398.711 0 1.301.213 1.77.639.472.425.724.978.755 1.658h-1.025a1.474 1.474 0 00-.469-1.008 1.432 1.432 0 00-1.031-.398c-.551 0-.979.199-1.283.597-.301.395-.451.967-.451 1.717v.205c0 .73.15 1.293.451 1.688.301.394.73.591 1.289.591zM212.74 40h-5.59v-.78l2.954-3.28c.437-.497.738-.899.902-1.208.168-.312.252-.634.252-.966 0-.446-.135-.81-.404-1.096-.27-.285-.629-.428-1.079-.428-.539 0-.959.155-1.259.463-.297.305-.446.73-.446 1.277h-1.084c0-.785.252-1.42.756-1.904.508-.484 1.186-.726 2.033-.726.793 0 1.42.209 1.881.627.461.414.692.966.692 1.658 0 .84-.536 1.84-1.606 3l-2.285 2.478h4.283V40zm6.498-3.639c0 1.27-.217 2.213-.65 2.83-.434.618-1.111.926-2.033.926-.91 0-1.584-.3-2.022-.902-.437-.606-.664-1.508-.679-2.707V35.06c0-1.253.216-2.185.65-2.794.434-.61 1.113-.914 2.039-.914.918 0 1.594.294 2.027.884.434.586.657 1.492.668 2.72v1.405zm-1.084-1.482c0-.918-.129-1.586-.386-2.004-.258-.422-.666-.633-1.225-.633-.555 0-.959.21-1.213.627-.254.418-.385 1.06-.392 1.928v1.734c0 .922.132 1.604.398 2.045.269.438.676.656 1.219.656.535 0 .931-.207 1.189-.62.262-.415.399-1.067.41-1.958V34.88zm7.823 1.482c0 1.27-.217 2.213-.651 2.83-.433.618-1.111.926-2.033.926-.91 0-1.584-.3-2.022-.902-.437-.606-.664-1.508-.679-2.707V35.06c0-1.253.217-2.185.65-2.794.434-.61 1.113-.914 2.039-.914.918 0 1.594.294 2.028.884.433.586.656 1.492.668 2.72v1.405zm-1.084-1.482c0-.918-.129-1.586-.387-2.004-.258-.422-.666-.633-1.225-.633-.554 0-.959.21-1.213.627-.254.418-.384 1.06-.392 1.928v1.734c0 .922.133 1.604.398 2.045.27.438.676.656 1.219.656.535 0 .932-.207 1.189-.62.262-.415.399-1.067.411-1.958V34.88zm2.97.844l.434-4.254h4.371v1.002h-3.451l-.258 2.326c.418-.246.893-.37 1.424-.37.777 0 1.394.258 1.851.774.457.512.686 1.205.686 2.08 0 .88-.238 1.572-.715 2.08-.473.504-1.135.756-1.986.756-.754 0-1.369-.209-1.846-.627-.477-.418-.748-.996-.814-1.734h1.025c.066.488.24.857.521 1.107.282.246.653.37 1.114.37.504 0 .898-.172 1.183-.516.289-.344.434-.819.434-1.424 0-.57-.156-1.027-.469-1.371-.308-.348-.721-.522-1.236-.522-.473 0-.844.104-1.113.31l-.288.235-.867-.222zm13.424-1.166h-2.924V40h-1.09v-6.34h4.014v.897zm.539 2.215c0-.622.121-1.18.363-1.676a2.762 2.762 0 011.02-1.149 2.79 2.79 0 011.494-.404c.863 0 1.561.299 2.092.897.535.597.803 1.392.803 2.384v.076c0 .618-.119 1.172-.358 1.665a2.666 2.666 0 01-1.013 1.142c-.438.273-.942.41-1.512.41-.86 0-1.557-.299-2.092-.896-.531-.598-.797-1.389-.797-2.373v-.076zm1.09.128c0 .703.162 1.268.486 1.694.328.425.766.638 1.313.638.551 0 .988-.214 1.312-.644.325-.434.487-1.04.487-1.816 0-.696-.166-1.258-.498-1.688a1.564 1.564 0 00-1.313-.65c-.535 0-.967.213-1.295.638-.328.426-.492 1.035-.492 1.828zm5.566 2.215l.375-.463c.422-.547.663-1.367.721-2.46l.1-2.532h4.084v5.455h.814v2.748h-1.084V40h-4.424v1.863h-1.084l.006-2.748h.492zm1.284 0h2.912v-4.453h-1.951l-.065 1.512c-.066 1.261-.365 2.242-.896 2.941zm9.925.885c-.062-.125-.113-.348-.152-.668-.504.523-1.105.785-1.805.785-.625 0-1.138-.176-1.541-.527a1.729 1.729 0 01-.597-1.348c0-.66.25-1.172.75-1.535.504-.367 1.211-.55 2.121-.55h1.054v-.499c0-.379-.113-.68-.339-.902-.227-.227-.561-.34-1.002-.34-.387 0-.711.098-.973.293-.262.195-.393.432-.393.709h-1.089c0-.316.111-.621.334-.914a2.31 2.31 0 01.914-.703 3.09 3.09 0 011.271-.258c.731 0 1.303.184 1.717.55.414.364.629.866.644 1.507v2.918c0 .582.075 1.044.223 1.388V40h-1.137zm-1.798-.826a1.9 1.9 0 00.966-.264 1.59 1.59 0 00.662-.685v-1.301h-.849c-1.328 0-1.992.389-1.992 1.166 0 .34.113.605.34.797.226.191.517.287.873.287z" fill="#000" /></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"mail-icon",use:"mail-icon-usage",viewBox:"0 0 21 21",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 21 21" id="mail-icon"><path d="M19.154 2.643H1.846C.829 2.643 0 3.448 0 4.436v11.95c0 .984.826 1.792 1.846 1.792h17.308c1.014 0 1.846-.802 1.846-1.793V4.435c0-.984-.826-1.792-1.846-1.792zM18.9 3.838l-8.36 8.12-8.432-8.12H18.9zm-17.67 12.3V4.678l5.926 5.705-5.926 5.755zm.87.845l5.93-5.759 2.078 2c.24.232.628.231.868-.001l2.026-1.968 5.897 5.728H2.102zm17.67-.845l-5.898-5.728 5.898-5.727v11.455z" /></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"map-icon",use:"map-icon-usage",viewBox:"0 0 43 43",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43 43" id="map-icon"><g clip-path="url(#map-icon_clip0)"><path d="M24.866 3.955H42.37a.631.631 0 100-1.262H25.497V.63a.631.631 0 00-1.262 0v2.693c0 .348.283.631.631.631zM3.997 39.802H.631a.631.631 0 100 1.262h2.735v1.305a.631.631 0 101.262 0v-1.935a.631.631 0 00-.63-.632zm0-18.26H.631a.631.631 0 100 1.262h2.735V35.68H.63a.631.631 0 100 1.262h3.366a.631.631 0 00.631-.63v-14.14a.631.631 0 00-.63-.631zm11.659.23a.632.632 0 00-.487-.23H8.036a.631.631 0 00-.63.631V36.31a.63.63 0 00.63.631h12.791a.631.631 0 00.631-.63v-7.264a.63.63 0 00-.144-.401l-5.658-6.874zm4.54 13.907H8.668V22.804h6.203l5.325 6.47v6.405zm.631 4.039H8.037a.631.631 0 00-.632.631v2.02a.631.631 0 101.263 0V40.98h11.528v1.389a.631.631 0 001.262 0v-2.02a.631.631 0 00-.631-.631z" /><path d="M42.369 35.679H37.77c.135-.192.272-.39.409-.592 1.859-2.74 2.801-4.82 2.801-6.182a6.024 6.024 0 00-6.016-6.017 6.024 6.024 0 00-6.017 6.017c0 1.362.943 3.442 2.802 6.182.137.202.273.4.409.592h-6.66V16.423a.631.631 0 00-1.263 0V36.31a.63.63 0 00.63.631h8.164l.043-.002c.21.28.405.535.58.76H23.477v-9.467a.632.632 0 00-.147-.404L16.6 19.75a.631.631 0 00-.485-.228H6.649v-3.181c.155-.19.421-.522.757-.956v2.75c0 .348.283.63.631.63h8.725l3.577 4.372a.637.637 0 00.746.177c.225-.1.374-.33.374-.576V7.363a.631.631 0 00-.631-.631h-8.795l.001-.042c0-.985-.24-1.914-.66-2.735h9.454a.631.631 0 00.631-.631V.63a.631.631 0 00-1.262 0v2.062H10.56a.619.619 0 00-.05.002A6.003 6.003 0 006.017.673 6.023 6.023 0 000 6.69c0 1.362.943 3.442 2.802 6.182.19.28.379.551.564.812v3.819H.63a.631.631 0 100 1.262h3.366a.631.631 0 00.631-.63v-2.75c.336.434.603.766.758.956v3.813c0 .348.282.63.63.63h9.803l6.396 7.677v9.869c0 .348.283.63.631.63h12.118c.202 0 .348-.095.487-.23.052-.06.632-.76 1.403-1.789h5.515a.631.631 0 100-1.262zM20.196 7.994V20.97l-2.647-3.235a.63.63 0 00-.489-.232H8.667v-3.82c.186-.26.375-.532.565-.811 1.34-1.977 2.205-3.61 2.582-4.878h8.382zM1.262 6.69a4.76 4.76 0 014.755-4.754A4.76 4.76 0 0110.77 6.69c0 2.032-3.083 6.325-4.754 8.425-1.671-2.1-4.755-6.393-4.755-8.425zM30.21 28.905a4.76 4.76 0 014.755-4.754 4.76 4.76 0 014.754 4.754c0 1.618-1.953 4.667-3.594 6.904a.635.635 0 00-.21.284 48.3 48.3 0 01-.95 1.237c-1.671-2.1-4.755-6.393-4.755-8.425zm12.159 10.813H24.866a.631.631 0 00-.631.631v2.02a.631.631 0 001.262 0V40.98H42.37a.631.631 0 100-1.262z" /><path d="M42.369 6.732H24.866a.631.631 0 00-.631.631v6.087a.631.631 0 001.262 0V7.994H42.37a.631.631 0 100-1.262zM9.34 6.69a3.328 3.328 0 00-3.323-3.324A3.328 3.328 0 002.693 6.69a3.328 3.328 0 003.324 3.324A3.328 3.328 0 009.34 6.69zm-5.385 0c0-1.137.925-2.062 2.062-2.062 1.137 0 2.061.925 2.061 2.062a2.064 2.064 0 01-2.061 2.06 2.064 2.064 0 01-2.062-2.06zm34.333 22.215a3.328 3.328 0 00-3.324-3.324 3.328 3.328 0 00-3.324 3.324 3.328 3.328 0 003.324 3.324 3.328 3.328 0 003.324-3.324zm-5.386 0c0-1.137.925-2.062 2.062-2.062 1.136 0 2.061.925 2.061 2.062a2.064 2.064 0 01-2.061 2.062 2.064 2.064 0 01-2.062-2.062z" /></g><defs><clipPath id="map-icon_clip0"><path d="M0 0h43v43H0z" /></clipPath></defs></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"passport-icon",use:"passport-icon-usage",viewBox:"0 0 43 43",content:'<symbol fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43 43" id="passport-icon"><g clip-path="url(#passport-icon_clip0)"><circle cx="21.5" cy="23.5" r="8.75" stroke="#C4000C" stroke-width="1.5" /><path d="M30.817 7.882H12.184a.717.717 0 100 1.434h18.633a.717.717 0 100-1.434zm0 2.868H12.184a.717.717 0 100 1.433h18.633a.717.717 0 100-1.434zm0 27.233H12.184a.717.717 0 100 1.434h18.633a.717.717 0 000-1.434z" fill="#C4000C" /><path d="M34.096 3.582h-.412V2.246A2.293 2.293 0 0032.892.49a2.02 2.02 0 00-1.633-.465l-22 3.557h-.355A2.433 2.433 0 006.45 5.987v34.608A2.433 2.433 0 008.904 43h25.192a2.433 2.433 0 002.454-2.405V5.987a2.433 2.433 0 00-2.454-2.405zM31.488 1.44a.582.582 0 01.474.142.864.864 0 01.288.664v1.337H18.238l13.25-2.143zm3.629 39.155a.998.998 0 01-1.02.972H8.903a.998.998 0 01-1.02-.972V5.987a.998.998 0 011.02-.971h25.192a.998.998 0 011.021.971v34.608z" fill="#C4000C" /></g><defs><clipPath id="passport-icon_clip0"><path fill="#fff" d="M0 0h43v43H0z" /></clipPath></defs></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"pin-icon",use:"pin-icon-usage",viewBox:"0 0 21 21",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 21 21" id="pin-icon"><g clip-path="url(#pin-icon_clip0)"><path d="M10.5 0C6.43 0 3.117 3.216 3.117 7.17a7 7 0 001.102 3.77l5.86 9.17a.62.62 0 00.523.283h.005a.619.619 0 00.523-.29l5.711-9.26a7.006 7.006 0 001.042-3.674C17.883 3.216 14.57 0 10.5 0zm5.286 10.23l-5.193 8.418-5.328-8.338a5.84 5.84 0 01-.926-3.14c0-3.295 2.769-5.983 6.161-5.983 3.392 0 6.156 2.688 6.156 5.982a5.84 5.84 0 01-.87 3.06z" /><path d="M10.5 3.585c-2.035 0-3.691 1.608-3.691 3.585 0 1.964 1.629 3.585 3.691 3.585 2.088 0 3.691-1.643 3.691-3.585 0-1.977-1.656-3.585-3.691-3.585zm0 5.983c-1.364 0-2.47-1.077-2.47-2.398 0-1.318 1.113-2.398 2.47-2.398 1.357 0 2.465 1.08 2.465 2.398 0 1.302-1.08 2.398-2.465 2.398z" /></g><defs><clipPath id="pin-icon_clip0"><path d="M0 0h21v20.393H0z" /></clipPath></defs></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"smartphone-call-icon",use:"smartphone-call-icon-usage",viewBox:"0 0 21 21",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 21 21" id="smartphone-call-icon"><path d="M15.181 0H5.82C5.039 0 4.4.638 4.4 1.418v18.163c0 .78.64 1.419 1.42 1.419h9.362c.78 0 1.419-.637 1.419-1.418V1.418A1.425 1.425 0 0015.18 0zM9.002 1.022h2.996a.172.172 0 010 .344H9.002a.172.172 0 110-.344zM10.5 20.291a.71.71 0 110-1.419.71.71 0 010 1.419zm5.113-1.916H5.387V2.249h10.226v16.126z" /></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"spare-icon",use:"spare-icon-usage",viewBox:"0 0 43 43",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43 43" id="spare-icon"><path d="M10.75 21.5C4.823 21.5 0 16.677 0 10.75S4.823 0 10.75 0 21.5 4.823 21.5 10.75 16.677 21.5 10.75 21.5zm0-20.156c-5.187 0-9.406 4.22-9.406 9.406 0 5.187 4.22 9.406 9.406 9.406 5.187 0 9.406-4.22 9.406-9.406 0-5.187-4.22-9.406-9.406-9.406z" /><path d="M10.75 16.125a5.381 5.381 0 01-5.375-5.375 5.381 5.381 0 015.375-5.375 5.381 5.381 0 015.375 5.375 5.381 5.381 0 01-5.375 5.375zm0-9.406a4.035 4.035 0 00-4.031 4.031 4.035 4.035 0 004.031 4.031 4.035 4.035 0 004.031-4.031 4.035 4.035 0 00-4.031-4.031z" /><path d="M14.781 21.5a.672.672 0 110-1.344c5.187 0 9.406-4.22 9.406-9.406 0-5.187-4.219-9.406-9.406-9.406a.672.672 0 110-1.344c5.928 0 10.75 4.823 10.75 10.75S20.71 21.5 14.781 21.5z" /><path d="M14.781 1.344H10.75a.672.672 0 110-1.344h4.031a.672.672 0 110 1.344zm0 20.156H10.75a.672.672 0 110-1.344h4.031a.672.672 0 110 1.344zm-4.031-5.375a.672.672 0 01-.672-.672V6.047a.672.672 0 111.344 0v9.406c0 .371-.3.672-.672.672z" /><path d="M14.822 13.774a.666.666 0 01-.335-.09L6.34 8.98a.672.672 0 11.671-1.163l8.146 4.703a.67.67 0 01-.336 1.254z" /><path d="M6.677 13.774a.67.67 0 01-.336-1.254l8.146-4.703a.672.672 0 01.671 1.163l-8.145 4.703a.666.666 0 01-.336.09zM28.219 43c-5.928 0-10.75-4.823-10.75-10.75S22.29 21.5 28.219 21.5c5.927 0 10.75 4.823 10.75 10.75S34.146 43 28.219 43zm0-20.156c-5.187 0-9.407 4.22-9.407 9.406 0 5.187 4.22 9.406 9.407 9.406s9.406-4.22 9.406-9.406c0-5.187-4.22-9.406-9.406-9.406z" /><path d="M28.219 37.625a5.381 5.381 0 01-5.375-5.375 5.381 5.381 0 015.375-5.375 5.381 5.381 0 015.375 5.375 5.381 5.381 0 01-5.375 5.375zm0-9.406a4.035 4.035 0 00-4.032 4.031 4.035 4.035 0 004.032 4.031 4.035 4.035 0 004.031-4.031 4.035 4.035 0 00-4.031-4.031z" /><path d="M32.25 43a.671.671 0 110-1.344c5.187 0 9.406-4.22 9.406-9.406 0-5.187-4.22-9.406-9.406-9.406a.671.671 0 110-1.344C38.177 21.5 43 26.323 43 32.25S38.177 43 32.25 43z" /><path d="M32.25 22.844h-4.031a.671.671 0 110-1.344h4.031a.672.672 0 110 1.344zm0 20.156h-4.031a.671.671 0 110-1.344h4.031a.671.671 0 110 1.344zm-4.031-5.375a.671.671 0 01-.672-.672v-9.406a.671.671 0 111.344 0v9.406a.67.67 0 01-.672.672z" /><path d="M32.291 35.273a.667.667 0 01-.335-.09L23.81 30.48a.671.671 0 11.672-1.163l8.146 4.703a.671.671 0 01-.337 1.253z" /><path d="M24.146 35.273a.67.67 0 01-.336-1.253l8.145-4.703a.672.672 0 01.672 1.163l-8.146 4.703a.666.666 0 01-.335.09zm8.106-15.12a.672.672 0 01-.671-.671v-8.733a.672.672 0 111.343 0v8.732c0 .371-.3.672-.672.672z" /><path d="M32.252 11.421h-4.705a.672.672 0 110-1.344h4.705a.672.672 0 110 1.344z" /><path d="M28.89 12.765a.67.67 0 01-.474-.197l-1.344-1.344a.671.671 0 11.95-.95l1.344 1.344a.671.671 0 01-.475 1.147z" /><path d="M27.547 11.421a.671.671 0 01-.475-1.147l1.344-1.344a.671.671 0 11.95.95l-1.344 1.344a.67.67 0 01-.475.197zM10.75 32.922a.671.671 0 01-.672-.671v-8.733a.671.671 0 111.344 0v8.733a.67.67 0 01-.672.671z" /><path d="M15.455 32.922H10.75a.671.671 0 110-1.343h4.705a.671.671 0 110 1.343z" /><path d="M15.455 32.922a.67.67 0 01-.475-.197l-1.344-1.343a.671.671 0 11.95-.95l1.344 1.343a.671.671 0 01-.475 1.147z" /><path d="M14.111 34.266a.671.671 0 01-.475-1.147l1.344-1.344a.671.671 0 11.95.95l-1.344 1.344a.67.67 0 01-.475.197z" /></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"stopwatch-icon",use:"stopwatch-icon-usage",viewBox:"0 0 43 43",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43 43" id="stopwatch-icon"><g clip-path="url(#stopwatch-icon_clip0)"><path d="M38.19 13.11l.879-1.02.857.735a.635.635 0 00.894-.068l1.361-1.58a.632.632 0 00-.067-.893l-4.682-4.017a.632.632 0 00-.894.067l-1.362 1.58a.632.632 0 00.068.893l.857.735-.947 1.099a16.848 16.848 0 00-6.512-2.452V6.277h2.184a1.849 1.849 0 001.848-1.845V2.959c0-1.017-.83-1.844-1.848-1.844h-9.527a1.848 1.848 0 00-1.848 1.844v1.473c0 1.017.829 1.845 1.848 1.845h2.184v1.912c-2.413.37-4.66 1.25-6.626 2.526l-1.01-1.173.856-.735a.633.633 0 00.068-.893l-1.362-1.58a.635.635 0 00-.894-.067l-4.682 4.017a.633.633 0 00-.067.893l1.361 1.58a.633.633 0 00.894.067l.857-.735.963 1.118a17.021 17.021 0 00-2.21 2.85.637.637 0 00-.064-.003H7.563a.634.634 0 100 1.266h3.363a16.782 16.782 0 00-.871 2.055H3.648a.634.634 0 100 1.266H9.67a16.777 16.777 0 00-.473 2.708H.634a.633.633 0 100 1.266H9.13a16.938 16.938 0 00.171 2.708H3.056a.634.634 0 100 1.266h6.477c.157.702.358 1.388.6 2.055H6.97a.634.634 0 100 1.266h3.68c2.675 5.832 8.576 9.894 15.412 9.894a16.84 16.84 0 009.874-3.168.632.632 0 10-.74-1.028 15.578 15.578 0 01-9.135 2.93c-8.64 0-15.669-7.016-15.669-15.64 0-8.623 7.03-15.639 15.67-15.639a15.63 15.63 0 0110.8 4.319l.018.018c2.987 2.85 4.85 6.863 4.85 11.303a15.52 15.52 0 01-4.598 11.068.632.632 0 00-.001.895.635.635 0 00.897.001A16.778 16.778 0 0043 24.9c0-4.581-1.836-8.741-4.81-11.789zm-1.104-5.471l3.72 3.192-.534.621-3.72-3.193.534-.62zm-.024 2.728l1.045.897-.837.972a17.06 17.06 0 00-1.068-.87l.86-.999zM23.258 5.011v-2.63h1.024v2.63h-1.024zm2.293-2.63h1.023v2.63H25.55v-2.63zm2.292 2.63v-2.63h1.024v2.63h-1.024zm3.563-2.052v1.473c0 .32-.26.58-.58.58h-.691V2.38h.69c.32 0 .581.26.581.58zM20.719 4.432V2.959a.58.58 0 01.58-.579h.691v2.631h-.69a.58.58 0 01-.58-.58zm-9.044 7.02l-.534-.62 3.72-3.193.535.62-.857.736-2.007 1.722-.857.735zm2.184-.204l1.026-.88.93 1.08c-.365.278-.72.57-1.061.877l-.914-1.061.019-.016zM24.75 8.044V6.277h2.623v1.767a17.121 17.121 0 00-2.623 0z" /><path d="M20.752 13.369a.635.635 0 00-.856-.268 13.328 13.328 0 00-7.052 10.078c-.95 7.275 4.207 13.965 11.496 14.913.582.076 1.16.113 1.732.113 6.59-.001 12.335-4.893 13.209-11.587a13.2 13.2 0 00-2.654-9.833 13.25 13.25 0 00-8.842-5.08 13.281 13.281 0 00-5.107.32A.633.633 0 1023 13.25c.798-.21 1.61-.334 2.428-.376v1.663a.633.633 0 001.268 0v-1.662c.308.017.616.045.925.085 2.47.321 4.727 1.37 6.533 3.006l-1.149 1.146a.632.632 0 00.449 1.08.632.632 0 00.448-.185l1.145-1.143c.2.223.391.454.575.693a11.938 11.938 0 012.49 6.724h-1.574a.633.633 0 100 1.266h1.57a11.961 11.961 0 01-3.064 7.381l-1.086-1.085a.635.635 0 00-.897 0 .632.632 0 000 .895l1.088 1.086a12.079 12.079 0 01-7.373 3.093V35.37a.633.633 0 00-1.269 0v1.555a12.004 12.004 0 01-7.432-3.01l1.123-1.12a.632.632 0 000-.896.635.635 0 00-.896 0l-1.13 1.127a12.035 12.035 0 01-3.15-7.4h1.643a.634.634 0 100-1.266h-1.652a12.036 12.036 0 013.052-7.476l1.18 1.179a.632.632 0 00.897 0 .632.632 0 000-.895l-1.184-1.183a12.067 12.067 0 012.526-1.762.632.632 0 00.268-.854z" /><path d="M26.062 19.093a.633.633 0 00-.634.633v3.76a1.55 1.55 0 00-.918 1.413 1.553 1.553 0 002.209 1.402l4.23 4.222a.633.633 0 00.897-.895l-4.296-4.287a1.55 1.55 0 00-.853-1.855v-3.76a.634.634 0 00-.635-.633zm-.284 5.806a.285.285 0 11.569 0 .285.285 0 01-.57 0z" /></g><defs><clipPath id="stopwatch-icon_clip0"><path d="M0 0h43v42.918H0z" /></clipPath></defs></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"support-icon",use:"support-icon-usage",viewBox:"0 0 43 43",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43 43" id="support-icon"><g clip-path="url(#support-icon_clip0)"><path d="M34.896 37.452l-1.605-4.818a4.855 4.855 0 00-3.738-3.24l-4.635-.844v-.36a6.98 6.98 0 002.068-1.835h1.4c1.147 0 2.08-.934 2.08-2.08v-8.323c0-4.972-4.044-9.017-9.016-9.017-4.97 0-9.016 4.045-9.016 9.017v4.854c0 1.338.951 2.456 2.212 2.717a6.949 6.949 0 003.337 4.668v.359l-4.636.843a4.854 4.854 0 00-3.737 3.241l-.277.833-2.362-2.362a.695.695 0 010-.981l2.739-2.74-5.142-5.141-3.096 3.096A4.823 4.823 0 00.05 28.772a4.82 4.82 0 001.422 3.432l9.373 9.373A4.824 4.824 0 0014.278 43a4.802 4.802 0 003.411-1.402l3.379-3.095-1.054-1.051h14.882zM29.08 24.274a.694.694 0 01-.693.694h-.583c.2-.459.353-.942.452-1.445.297-.062.57-.18.825-.328v1.08zm-.693-2.273v-2.389c.413.24.694.683.694 1.195 0 .51-.281.953-.694 1.194zm-13.871 0a1.382 1.382 0 01-.694-1.195c0-.51.281-.953.694-1.194v2.389zm0-4.662v.792a2.748 2.748 0 00-.694.287v-2.466c0-4.207 3.423-7.63 7.63-7.63 4.206 0 7.628 3.423 7.628 7.63v2.466a2.727 2.727 0 00-.693-.287v-.792h-.694a7.63 7.63 0 01-5.43-2.25l-.812-.812-.812.813a7.63 7.63 0 01-5.43 2.249h-.693zm1.387 4.855V18.7a8.992 8.992 0 005.548-2.465A8.989 8.989 0 0027 18.7v3.494a5.506 5.506 0 01-.75 2.774h-4.8v1.387h3.658a5.519 5.519 0 01-3.658 1.387 5.555 5.555 0 01-5.548-5.548zm7.63 6.615v.033l-2.082 2.08-2.08-2.08v-.033a6.925 6.925 0 004.161 0zm-12.607 4.264a3.469 3.469 0 012.67-2.316l4.847-.881 3.008 3.008 3.008-3.007 4.847.88a3.468 3.468 0 012.67 2.316l.997 2.992H18.627l-2.701-2.702-3.002 2.715a.708.708 0 01-.98 0l-1.515-1.514.496-1.491zm-6.358-8.869l3.181 3.18-.753.754-3.18-3.18.752-.754zM16.73 40.598a3.45 3.45 0 01-2.452 1.015 3.449 3.449 0 01-2.452-1.016L2.45 31.224a3.445 3.445 0 01-1.015-2.451c0-.927.36-1.798 1.015-2.453l.382-.381 3.18 3.18-.025.025a2.084 2.084 0 000 2.943l4.974 4.973c.393.393.915.61 1.472.61.556 0 1.078-.216 1.446-.585l.052-.047 3.195 3.195-.398.365zm1.422-1.304l-3.189-3.188.917-.828 3.182 3.183-.91.833zM40.87 0h-9.71c-1.147 0-2.08.934-2.08 2.08v5.55c0 1.147.933 2.08 2.08 2.08h1.852l-.717 4.184 6.693-4.183h1.881A2.083 2.083 0 0042.95 7.63V2.081A2.083 2.083 0 0040.87 0zm.693 7.629a.695.695 0 01-.694.694h-2.28l-4.404 2.752.472-2.752H31.16a.695.695 0 01-.694-.694V2.081c0-.383.312-.694.694-.694h9.71c.382 0 .693.311.693.694v5.548z" /><path d="M40.176 2.774h-8.323v1.387h8.323V2.774zm-2.774 2.774h-5.549v1.388h5.549V5.548zm2.774 0H38.79v1.388h1.387V5.548zM21.45 2.08c-9.06 0-16.866 6.27-18.895 15.014L1.24 14.903l-1.19.713 2.439 4.062L6.55 17.24l-.714-1.189-1.88 1.128c1.966-7.999 9.159-13.71 17.495-13.71 1.822 0 3.62.27 5.343.804l.41-1.324a19.407 19.407 0 00-5.753-.867zm21.163 13.277l-4.062-2.438-2.437 4.062 1.19.714 1.213-2.023c.639 1.87.965 3.824.965 5.828 0 4.125-1.428 8.157-4.022 11.353l1.078.874A19.463 19.463 0 0040.869 21.5c0-2.122-.341-4.193-1.008-6.177l2.038 1.223.714-1.19z" /></g><defs><clipPath id="support-icon_clip0"><path d="M0 0h43v43H0z" /></clipPath></defs></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"trasser-icon",use:"trasser-icon-usage",viewBox:"0 0 43 43",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43 43" id="trasser-icon"><g clip-path="url(#trasser-icon_clip0)"><path d="M42.664.1a.694.694 0 00-.684-.017L31.903 5.457 21.827.083a.692.692 0 00-.653 0L11.097 5.457 1.02.083A.693.693 0 000 .694V36.76c0 .256.14.49.367.611L10.77 42.92a.69.69 0 00.654 0l7.995-4.264v2.265c0 1.147.934 2.08 2.081 2.08h16.645c1.147 0 2.08-.933 2.08-2.08v-2.266l2.408-1.284A.693.693 0 0043 36.76V.694A.694.694 0 0042.664.1zM10.77 6.854a.692.692 0 00.653 0l4.495-2.397-.61 1.528a.742.742 0 00-.037.12l-.693 3.469a.699.699 0 000 .272l.632 3.164-3.387 4.516-.777-1.165-.664-2.658a.693.693 0 00-.672-.525H6.935a.699.699 0 00-.385.117l-1.503 1.002-1.002-1.504a.696.696 0 00-.161-.17l-2.497-1.872v-8.9l9.383 5.003zM1.387 18.462l1.77.885a.699.699 0 00.479.052l1.912-.478v1.886a.693.693 0 00.862.673l2.476-.62 1.628 1.085.583 1.749v2.47l-1.78 2.966H6.935a.699.699 0 00-.385.116l-2.08 1.387a.693.693 0 00-.288.746l.673 2.691v.608c0 .319.216.596.525.673l2.405.601.538 1.613v2.476l-6.936-3.698V18.462zm22.194 1.168l2.913-4.371h9.57v19.42H23.582V19.63zm2.774-8.342a5.532 5.532 0 01-.933 3.078l-2.535 3.803-2.535-3.803a5.541 5.541 0 01-.933-3.094c0-1.828 1.338-3.416 3.044-3.617a3.65 3.65 0 01.428-.025c.853 0 1.657.304 2.3.876a3.468 3.468 0 011.164 2.592v.19zM38.839 40.92a.695.695 0 01-.694.694H21.5a.694.694 0 01-.694-.694V17.55l1.387 2.08v15.743c0 .382.31.693.694.693h13.871c.384 0 .694-.31.694-.693V14.565a.693.693 0 00-.694-.693h-9.534c.182-.448.32-.91.404-1.387h10.517c.383 0 .694.31.694.693V40.92zm2.774-4.577l-1.387.74V13.178c0-1.147-.934-2.08-2.08-2.08H27.741a4.858 4.858 0 00-1.63-3.629A4.876 4.876 0 0022.3 6.277c-2.433.287-4.268 2.434-4.268 5.011 0 1.373.403 2.704 1.166 3.847l.221.333v21.615l-8.322 4.439-1.387-.74v-3.33a.7.7 0 00-.036-.219l-.694-2.08a.693.693 0 00-.49-.454l-2.248-.563v-.151a.693.693 0 00-.02-.169l-.576-2.3 1.5-1H9.71a.692.692 0 00.594-.335l2.08-3.468a.69.69 0 00.1-.357V23.58a.703.703 0 00-.036-.219l-.694-2.08a.697.697 0 00-.273-.358l-2.08-1.387a.696.696 0 00-.554-.096l-1.912.478v-1.886a.693.693 0 00-.861-.673l-2.526.631-2.16-1.08v-4.426l1.569 1.177 1.32 1.981a.694.694 0 00.963.192l1.906-1.27h2.022l.563 2.25c.019.076.051.15.096.216l1.387 2.08a.694.694 0 00.558.31h.019a.694.694 0 00.555-.278l4.161-5.549a.693.693 0 00.126-.552l-.667-3.332.653-3.269 1.2-2.998L21.5 1.48l10.076 5.374a.692.692 0 00.653 0l9.384-5.004v34.493z" /><path d="M22.887 9.016c-1.147 0-2.08.934-2.08 2.08 0 1.148.933 2.081 2.08 2.081s2.08-.933 2.08-2.08-.933-2.08-2.08-2.08zm0 2.774a.694.694 0 11.002-1.389.694.694 0 01-.002 1.39zm6.935 24.968c-1.147 0-2.08.934-2.08 2.08 0 1.148.933 2.081 2.08 2.081s2.081-.933 2.081-2.08-.934-2.08-2.08-2.08zm0 2.774a.694.694 0 11.002-1.389.694.694 0 01-.002 1.39zm-1.386-17.338h-3.468v1.387h2.774v6.935h-2.774v1.387h3.468c.383 0 .693-.31.693-.693v-8.323a.693.693 0 00-.694-.694zm-.694-2.774h-2.774v1.386h3.468c.383 0 .693-.31.693-.693v-3.468h-1.387v2.774zm4.161-2.775h-1.387v3.468c0 .383.31.694.694.694h3.467v-1.388h-2.774v-2.774zm-1.387 6.242v2.774c0 .383.31.694.694.694h3.467v-1.387h-2.774V23.58h2.774v-1.387H31.21a.693.693 0 00-.694.693zm0 5.549v3.467h1.387V29.13h2.774v-1.387H31.21a.693.693 0 00-.694.694zm-17.339 6.241c-1.147 0-2.08.934-2.08 2.081 0 1.147.933 2.08 2.08 2.08s2.081-.933 2.081-2.08-.934-2.08-2.08-2.08zm0 2.775a.694.694 0 11.002-1.39.694.694 0 01-.002 1.39zm2.081-9.71a2.777 2.777 0 00-2.774 2.774 2.777 2.777 0 002.774 2.774 2.777 2.777 0 002.774-2.774 2.777 2.777 0 00-2.774-2.774zm0 4.161a1.388 1.388 0 01-1.387-1.387c0-.765.622-1.387 1.387-1.387s1.387.622 1.387 1.387-.622 1.387-1.387 1.387z" /></g><defs><clipPath id="trasser-icon_clip0"><path d="M0 0h43v43H0z" /></clipPath></defs></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"truck-icon",use:"truck-icon-usage",viewBox:"0 0 43 44",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43 44" id="truck-icon"><path d="M10.033 28.897a4.3 4.3 0 00-4.3 4.292 4.3 4.3 0 008.6 0 4.3 4.3 0 00-4.3-4.292zm0 7.153a2.867 2.867 0 01-2.866-2.861 2.867 2.867 0 015.733 0 2.867 2.867 0 01-2.867 2.861zM34.4 28.897a4.3 4.3 0 00-4.3 4.292 4.3 4.3 0 008.6 0 4.3 4.3 0 00-4.3-4.292zm0 7.153a2.867 2.867 0 01-2.866-2.861 2.867 2.867 0 015.733 0A2.867 2.867 0 0134.4 36.05z" /><path d="M42.886 24.934l-6.45-10.015a.717.717 0 00-.603-.328H27.95a.716.716 0 00-.717.715V33.19c0 .395.32.715.717.715h2.867v-1.43h-2.15V16.022h6.775l6.125 9.509v6.943h-3.584v1.43h4.3c.397 0 .717-.32.717-.715v-7.868a.713.713 0 00-.114-.387z" /><path d="M31.533 23.89v-5.007h5.734v-1.43h-6.45a.716.716 0 00-.717.715v6.437c0 .396.32.715.717.715h10.75v-1.43H31.533zM27.95 9.584H.717a.716.716 0 00-.717.715v22.89c0 .395.321.715.717.715H6.45v-1.43H1.433v-21.46h25.8v21.46H13.617v1.43H27.95c.396 0 .717-.32.717-.715v-22.89a.716.716 0 00-.717-.715z" /><path d="M5.016 29.612h-4.3v1.43h4.3v-1.43zm22.217 0H15.05v1.43h12.183v-1.43zm15.05 0h-2.867v1.43h2.867v-1.43zM27.95 12.445H2.867v1.43H27.95v-1.43zm-17.2 20.029H9.316v1.43h1.434v-1.43zm24.367 0h-1.433v1.43h1.433v-1.43zM12.9 6.723H2.867v1.43H12.9v-1.43zm-11.467 0H0v1.43h1.433v-1.43z" /></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"way-icon",use:"way-icon-usage",viewBox:"0 0 43 43",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43 43" id="way-icon"><path clip-rule="evenodd" d="M13.642 6.834a3.453 3.453 0 00-3.449-3.449 3.453 3.453 0 00-3.448 3.449 3.452 3.452 0 003.448 3.449 3.452 3.452 0 003.45-3.449zm-5.218 0c0-.975.794-1.769 1.77-1.769a1.77 1.77 0 011.768 1.769 1.77 1.77 0 01-1.769 1.769 1.77 1.77 0 01-1.769-1.769zm24.948 15.17c-2.164 0-4.004.54-5.115 1.396l-3.012-.67a.84.84 0 00-.365 1.64l2.308.513c-.043.168-.066.34-.066.517 0 1.14.934 2.116 2.43 2.725l-1.344 1.383a.84.84 0 001.204 1.17l1.987-2.043c.616.104 1.277.16 1.973.16 3.563 0 6.25-1.46 6.25-3.395 0-1.936-2.687-3.396-6.25-3.396zm0 5.111c-2.747 0-4.57-1.032-4.57-1.715 0-.143.08-.301.232-.462a.74.74 0 00.073-.073c.627-.586 2.179-1.181 4.265-1.181 2.747 0 4.57 1.033 4.57 1.716s-1.823 1.715-4.57 1.715zm-9.987 9.765l1.345-1.384a.84.84 0 00-1.205-1.17l-1.986 2.043a11.867 11.867 0 00-1.974-.16c-3.562 0-6.25 1.46-6.25 3.395 0 1.936 2.688 3.396 6.25 3.396 3.563 0 6.25-1.46 6.25-3.395 0-1.141-.934-2.116-2.43-2.725zm-3.82 4.44c-2.747 0-4.57-1.032-4.57-1.715 0-.684 1.823-1.716 4.57-1.716 2.748 0 4.57 1.032 4.57 1.715 0 .684-1.822 1.716-4.57 1.716z" /><path clip-rule="evenodd" d="M18.32 22.909a.837.837 0 001.003-.637.84.84 0 00-.637-1.003l-2.309-.514c.043-.168.066-.34.066-.516 0-1.574-1.75-2.637-3.756-3.115l3.748-7.506.017-.037A6.842 6.842 0 0010.193 0 6.842 6.842 0 003.36 6.834a6.784 6.784 0 00.593 2.784l3.751 7.513c-2.01.49-3.76 1.553-3.76 3.108 0 1.935 2.687 3.395 6.25 3.395 2.165 0 4.004-.54 5.116-1.396l3.012.67zM5.04 6.834a5.16 5.16 0 015.153-5.154 5.16 5.16 0 014.73 7.207l-4.73 9.472-4.728-9.472a5.112 5.112 0 01-.426-2.053zm.583 13.405c0-.441 1.094-1.208 2.854-1.559l.965 1.934a.84.84 0 001.503 0l.968-1.939c1.78.338 2.85 1.103 2.85 1.564 0 .143-.081.302-.233.463a.834.834 0 00-.072.072c-.627.585-2.18 1.18-4.265 1.18-2.747 0-4.57-1.032-4.57-1.715zm20.846 11.423a.841.841 0 00-.84.84.841.841 0 001.68 0 .841.841 0 00-.84-.84zm-4.686-8.002c.462 0 .84-.378.84-.84a.841.841 0 00-.84-.84.841.841 0 00-.84.84c0 .462.377.84.84.84z" /></symbol>'});s.a.add(a);t.default=a},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(1),s=n.n(o),a=new i.a({id:"weighing-icon",use:"weighing-icon-usage",viewBox:"0 0 43 43",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 43 43" id="weighing-icon"><g clip-path="url(#weighing-icon_clip0)"><path d="M.012 33.481v4.654l42.947-.034v-4.62H.012zm41.632 3.308l-40.317.032v-2.027h40.317v1.995zm-2.097 2.057v2.013h-.79v-2.013H4.034v2.013H3.42v-2.013H0v1.313h2.104v2.012H5.35v-2.013h32.093v2.013h3.42v-2.013h2.104v-1.312h-3.42zm-13.241-7.352V14.778H3.507v16.716H2.104v1.313h25.517v-1.313h-1.315zM12.188 16.091h5.437v2.55l-2.718-.538-2.719.538v-2.55zm12.803 15.403H4.823V16.091h6.05v4.149l4.034-.798 4.033.798v-4.15h6.05v15.404z" /><path d="M8.207 27.197l-1.804 1.8.93.928.874-.872.874.872.93-.928-1.804-1.8zm4.016 0l-1.804 1.8.93.928.874-.872.874.872.93-.928-1.804-1.8zm10.751-2.442H16.31v1.313h6.664v-1.313zm-2.806 2.013H16.31v1.313h3.858v-1.313zm-1.929 2.012h-1.93v1.314h1.93V28.78zm4.735 0H18.94v1.314h4.034V28.78zM43 8.752C43 4.338 39.402.747 34.98.747s-8.02 3.59-8.02 8.005c0 4.21 3.273 7.671 7.413 7.982v.757h-2.718v1.925h1.315v-.612h4.034v.612h1.315v-1.925h-2.63v-.766C39.78 16.365 43 12.927 43 8.752zm-14.153 2.7a6.641 6.641 0 01-.572-2.7c0-3.69 3.008-6.692 6.705-6.692s6.705 3.002 6.705 6.692a6.64 6.64 0 01-.573 2.7h-2.128V10.1h-8.008v1.352h-2.129zm8.822-.04v.692H32.29v-.692h5.378zm-2.689 4.032a6.703 6.703 0 01-5.362-2.679h1.358v.651h8.008v-.651h1.358a6.703 6.703 0 01-5.362 2.679z" /><path d="M39.205 4.53a5.944 5.944 0 00-4.233-1.748c-1.608 0-3.126.62-4.258 1.748a5.97 5.97 0 00-1.777 4.253v.656h4.735v-.656c0-.756.558-1.348 1.315-1.348.757 0 1.315.592 1.315 1.348v.656h4.648v-.656c0-1.612-.609-3.123-1.745-4.253zm-1.638 3.596a2.617 2.617 0 00-1.879-1.911V4.713h-1.315v1.478a2.617 2.617 0 00-1.98 1.935h-2.064a4.701 4.701 0 014.651-4.031 4.701 4.701 0 014.65 4.031h-2.063zm-1.879 21.443h-1.403v1.312h1.403V29.57zm0-2.101h-1.403v1.313h1.403v-1.313zm0-1.925h-1.403v1.313h1.403v-1.313z" /><path d="M37.617 31.494V21.342h.702v-1.313h-6.664v1.313h.613v10.152h-1.315v1.313h8.067v-1.313h-1.403zm-1.315 0h-2.718V21.342h2.718v10.152z" /></g><defs><clipPath id="weighing-icon_clip0"><path d="M0 0h43v42.918H0z" /></clipPath></defs></symbol>'});s.a.add(a);t.default=a},function(e,t,n){(function(e){e(".js-button-frame").on("click",(function(){e("html").toggleClass("menu-open")})),e('a[href^="#"]').bind("click.smoothscroll",(function(t){t.preventDefault();var n=this.hash,r=e(n);e("html, body").stop().animate({scrollTop:r.offset().top},900,"swing",(function(){window.location.hash=n}))}))}).call(this,n(67))},function(e,t,n){"use strict";var r=n(4),i=n(68),o=n(150),s=n(74);function a(e){var t=new o(e),n=i(o.prototype.request,t);return r.extend(n,o.prototype,t),r.extend(n,t),n}var l=a(n(71));l.Axios=o,l.create=function(e){return a(s(l.defaults,e))},l.Cancel=n(75),l.CancelToken=n(164),l.isCancel=n(70),l.all=function(e){return Promise.all(e)},l.spread=n(165),e.exports=l,e.exports.default=l},function(e,t,n){"use strict";var r=n(4),i=n(69),o=n(151),s=n(152),a=n(74);function l(e){this.defaults=e,this.interceptors={request:new o,response:new o}}l.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=a(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[s,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)n=n.then(t.shift(),t.shift());return n},l.prototype.getUri=function(e){return e=a(this.defaults,e),i(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},r.forEach(["delete","get","head","options"],(function(e){l.prototype[e]=function(t,n){return this.request(r.merge(n||{},{method:e,url:t}))}})),r.forEach(["post","put","patch"],(function(e){l.prototype[e]=function(t,n,i){return this.request(r.merge(i||{},{method:e,url:t,data:n}))}})),e.exports=l},function(e,t,n){"use strict";var r=n(4);function i(){this.handlers=[]}i.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},i.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},i.prototype.forEach=function(e){r.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=i},function(e,t,n){"use strict";var r=n(4),i=n(153),o=n(70),s=n(71);function a(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return a(e),e.headers=e.headers||{},e.data=i(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),r.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||s.adapter)(e).then((function(t){return a(e),t.data=i(t.data,t.headers,e.transformResponse),t}),(function(t){return o(t)||(a(e),t&&t.response&&(t.response.data=i(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t,n){return r.forEach(n,(function(n){e=n(e,t)})),e}},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(e){r=s}}();var l,c=[],u=!1,d=-1;function p(){u&&l&&(u=!1,l.length?c=l.concat(c):d=-1,c.length&&f())}function f(){if(!u){var e=a(p);u=!0;for(var t=c.length;t;){for(l=c,c=[];++d<t;)l&&l[d].run();d=-1,t=c.length}l=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||u||a(f)},h.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t){r.forEach(e,(function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])}))}},function(e,t,n){"use strict";var r=n(73);e.exports=function(e,t,n){var i=n.config.validateStatus;!i||i(n.status)?e(n):t(r("Request failed with status code "+n.status,n.config,null,n.request,n))}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i){return e.config=t,n&&(e.code=n),e.request=r,e.response=i,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,n){"use strict";var r=n(159),i=n(160);e.exports=function(e,t){return e&&!r(t)?i(e,t):t}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(4),i=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,o,s={};return e?(r.forEach(e.split("\n"),(function(e){if(o=e.indexOf(":"),t=r.trim(e.substr(0,o)).toLowerCase(),n=r.trim(e.substr(o+1)),t){if(s[t]&&i.indexOf(t)>=0)return;s[t]="set-cookie"===t?(s[t]?s[t]:[]).concat([n]):s[t]?s[t]+", "+n:n}})),s):s}},function(e,t,n){"use strict";var r=n(4);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function i(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=i(window.location.href),function(t){var n=r.isString(t)?i(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(4);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,i,o,s){var a=[];a.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),r.isString(i)&&a.push("path="+i),r.isString(o)&&a.push("domain="+o),!0===s&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(75);function i(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var n=this;e((function(e){n.reason||(n.reason=new r(e),t(n.reason))}))}i.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},i.source=function(){var e;return{token:new i((function(t){e=t})),cancel:e}},e.exports=i},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t){var n=document.getElementById("delivery-form"),r=n.querySelector('[name="mkad"]'),i=n.querySelector('[name="hours"]'),o=n.querySelector('[name="weight"]'),s=window.pricelist,a=document.querySelector(".js-calc-price"),l=function(){if(""!==o.value&&s[parseInt(o.value,10)]){var e,t,n=s[parseInt(o.value,10)],l=parseInt(i.value,10)<n.min?n.min:parseInt(i.value,10);a.innerHTML=(e=parseInt(r.value,10)*n.mkad+l*n.price,void 0===t&&(t=" "),e.toString().replace(/\B(?=(\d{3})+(?!\d))/g,t))}};r.onchange=l,r.onkeyup=l,o.onchange=function(){var e=s[parseInt(o.value,10)];parseInt(i.value,10)<e.min&&(i.value=e.min),l()},i.onchange=l,i.onkeyup=l},function(e,t,n){(function(e){e(".js-select").each((function(){var t=e(this),n=e(this).children("option").length;t.addClass("select-hidden"),t.wrap('<div class="select"></div>'),t.after('<div class="select-styled"><span class="value"></span> <i class="fa fa-chevron-down"></i></div>');var r=t.next("div.select-styled"),i=r.find(".value");i.text(t.children("option").eq(0).text());for(var o=e("<ul />",{class:"select-options"}).insertAfter(r),s=0;s<n;s+=1)e("<li />",{text:t.children("option").eq(s).text(),rel:t.children("option").eq(s).val()}).appendTo(o);var a=o.children("li");r.click((function(t){t.stopPropagation(),e("div.select-styled.active").not(this).each((function(){e(this).removeClass("active").next("ul.select-options").hide()})),e(this).toggleClass("active").next("ul.select-options").toggle()})),a.click((function(n){n.stopPropagation(),i.text(e(this).text()),r.removeClass("active"),t.val(e(this).attr("rel")).trigger("change"),o.hide()})),e(document).click((function(){r.removeClass("active"),o.hide()}))}))}).call(this,n(67))},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t);n(77),n(94),n(97),n(99),n(106),n(107),n(114),n(115),n(117),n(118),n(119),n(123),n(124),n(125),n(148);var r=function(){var e=this;this.register=function(t,n){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];e.modules[t]||(e.modules[t]=new n(r))},this.init=function(){window.Ayeps||(Object.keys(e.modules).forEach((function(t){Object.defineProperty(e,t,{get:function(){return e.modules[t]}})})),window.Ayeps=e)},this.modules={}},i=function(e,t){var n="string"==typeof e?document.querySelectorAll(e):e;Array.from(n).forEach((function(e,n){t(e,n)}))},o=function(e){var t=this;void 0===e&&(e={}),this.init=function(){t.overlay=document.createElement("div"),t.overlay.classList.add(t.getOption("overlaySelector")),t.body.appendChild(t.overlay),t.overlay.onclick=function(){t.closeModal()},i("."+t.getOption("modalClass"),(function(e){t.recalculate(e),e.style.display="none",e.style.zIndex="-1"}))},this.open=function(e){var n=document.getElementById(e.replace("#",""));if(t.hideActive(),n){t.showOverlay(),n.style.removeProperty("display"),n.style.removeProperty("z-index");var r=n.offsetHeight;r<window.innerHeight?n.style.top=t.calculateTop(r,window.innerHeight)+"px":n.style.top="0",t.body.style.overflow="hidden",n.classList.add(t.getOption("modalVisibilityClass"))}},this.getOption=function(e){return Object.hasOwnProperty.call(t.options,e)?"string"==typeof t.options[e]?t.options[e].replace(/^\./,""):t.options[e]:null},this.showOverlay=function(){t.overlay.classList.add(t.getOption("overlayVisibilityClass"))},this.closeModal=function(){t.overlay.classList.remove(t.getOption("overlayVisibilityClass")),t.hideActive(),t.body.style.removeProperty("overflow")},this.calculateTop=function(e,t){return(t-e)/2},this.recalculate=function(e){var n=e.offsetHeight;n<window.innerHeight?e.style.top=t.calculateTop(n,window.innerHeight)+"px":e.style.top="0"},this.getActive=function(){return document.querySelector("."+t.getOption("modalClass")+"."+t.getOption("modalVisibilityClass"))},this.hideActive=function(){var e=t.getActive();null!==e&&(e.classList.remove(t.getOption("modalVisibilityClass")),e.addEventListener("transitionend",t.hideModal,!1))},this.hideModal=function(e){var n=e.target;n.classList.contains(t.getOption("modalClass"))&&(n.style.display="none",n.style.zIndex="-1",n.dispatchEvent(t.closeEvent),n.removeEventListener("transitionend",t.hideModal,!1))},this.options=Object.assign({overlaySelector:".overlay",overlayVisibilityClass:".is-visible",modalVisibilityClass:".is-visible",modalClass:".modal"},e),this.body=document.querySelector("body"),this.closeEvent=new Event("ayp.modal.closed"),this.init()},s=n(76),a=n.n(s),l=function(e,t){var n=this;void 0===t&&(t={}),this.setEndPoint=function(e){return n.endpoint=e,n},this.setParameters=function(e){return Object.keys(e).forEach((function(t){n.parameters[t]=e[t]})),n},this.setParameter=function(e,t){return n.parameters[e]=t,n},this.removeParameters=function(e){return e.forEach((function(e){delete n.parameters[e]})),n},this.removeParameter=function(e){return delete n.parameters[e],n},this.getParameterString=function(){var e=Object.keys(n.parameters).filter((function(e){return!!n.parameters[e]})).map((function(e){return e+"="+n.parameters[e]}));return 0===e.length?"":"?"+e.join("&")},this.submit=function(e,t,r){return void 0===r&&(r=null),new Promise((function(i,o){a.a[e](t+n.getParameterString(),r).then((function(e){i(e.data)})).catch((function(e){var t=e.response;t?o(t.data):o()}))}))},this.get=function(e){return void 0===e&&(e=null),n.submit("get",n.endpoint,e)},this.post=function(e){return void 0===e&&(e=null),n.submit("post",n.endpoint,e)},this.put=function(e){return void 0===e&&(e=null),n.submit("put",n.endpoint,e)},this.endpoint=e,this.parameters=t},c=new r;c.register("modal",o),c.register("request",l,"/api"),c.init();var u=window.Ayeps.modal;i('[data-toggle="modal"]',(function(e){var t=e.dataset.target;t&&(e.onclick=function(e){e.preventDefault(),console.log(u),u.open(t)})})),i('[data-toggle="modal-close"]',(function(e){e.onclick=function(e){e.preventDefault(),u.closeModal()}}));n(166);var d=n(27),p=n.n(d),f=window.Ayeps,h=f.request,v=f.modal,m=document.querySelector("#modal-notification .js-message"),g=document.getElementById("delivery-form"),y=function(e,t){var n=t.errors;Object.keys(n).forEach((function(t){var r,i,o=e.querySelector('[name="'+t+'"]'),s=o.closest("div");o.classList.add("has-error"),s.appendChild((r=n[t],(i=document.createElement("p")).classList.add("form-error"),i.innerHTML=r,i))}))},w=function(e,t){t.success?function(e){if(Object.prototype.hasOwnProperty.call(e,"message")){var t=e.message,n=void 0===t?"":t;m.innerHTML=n,v.open("modal-notification")}}(t):y(e,t)},x=function(e){i(e.querySelectorAll(".form-error"),(function(e){e.remove()}))};i(".js-form",(function(e){e.onsubmit=function(t){t.preventDefault();var n=p()(e);x(e),h.setEndPoint(e.getAttribute("action")),h.post(n).then((function(t){if(!Object.hasOwnProperty.call(t,"success"))throw new Error('Response "success" property is missing');w(e,t)})).catch((function(t){t.errors&&y(e,t)}))}})),i(".js-calculator-order",(function(e){e.onsubmit=function(t){t.preventDefault();var n=p()(e);x(e),h.setEndPoint(e.getAttribute("action")),h.post(n+"&"+p()(g)).then((function(t){if(!Object.hasOwnProperty.call(t,"success"))throw new Error('Response "success" property is missing');w(e,t)})).catch((function(t){t.errors&&y(e,t)}))}}));n(167),n(168);var b="undefined"==typeof document?{body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document,C="undefined"==typeof window?{document:b,navigator:{userAgent:""},location:{},history:{},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){}}:window;class T{constructor(e){const t=this;for(let n=0;n<e.length;n+=1)t[n]=e[n];return t.length=e.length,this}}function S(e,t){const n=[];let r=0;if(e&&!t&&e instanceof T)return e;if(e)if("string"==typeof e){let i,o;const s=e.trim();if(s.indexOf("<")>=0&&s.indexOf(">")>=0){let e="div";for(0===s.indexOf("<li")&&(e="ul"),0===s.indexOf("<tr")&&(e="tbody"),0!==s.indexOf("<td")&&0!==s.indexOf("<th")||(e="tr"),0===s.indexOf("<tbody")&&(e="table"),0===s.indexOf("<option")&&(e="select"),o=b.createElement(e),o.innerHTML=s,r=0;r<o.childNodes.length;r+=1)n.push(o.childNodes[r])}else for(i=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||b).querySelectorAll(e.trim()):[b.getElementById(e.trim().split("#")[1])],r=0;r<i.length;r+=1)i[r]&&n.push(i[r])}else if(e.nodeType||e===C||e===b)n.push(e);else if(e.length>0&&e[0].nodeType)for(r=0;r<e.length;r+=1)n.push(e[r]);return new T(n)}function E(e){const t=[];for(let n=0;n<e.length;n+=1)-1===t.indexOf(e[n])&&t.push(e[n]);return t}S.fn=T.prototype,S.Class=T,S.Dom7=T;"resize scroll".split(" ");const z={addClass:function(e){if(void 0===e)return this;const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.add(t[e]);return this},removeClass:function(e){const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.remove(t[e]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.toggle(t[e]);return this},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(let n=0;n<this.length;n+=1)if(2===arguments.length)this[n].setAttribute(e,t);else for(const t in e)this[n][t]=e[t],this[n].setAttribute(t,e[t]);return this},removeAttr:function(e){for(let t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){let n;if(void 0!==t){for(let r=0;r<this.length;r+=1)n=this[r],n.dom7ElementDataStorage||(n.dom7ElementDataStorage={}),n.dom7ElementDataStorage[e]=t;return this}if(n=this[0],n){if(n.dom7ElementDataStorage&&e in n.dom7ElementDataStorage)return n.dom7ElementDataStorage[e];const t=n.getAttribute(`data-${e}`);return t||void 0}},transform:function(e){for(let t=0;t<this.length;t+=1){const n=this[t].style;n.webkitTransform=e,n.transform=e}return this},transition:function(e){"string"!=typeof e&&(e=`${e}ms`);for(let t=0;t<this.length;t+=1){const n=this[t].style;n.webkitTransitionDuration=e,n.transitionDuration=e}return this},on:function(...e){let[t,n,r,i]=e;function o(e){const t=e.target;if(!t)return;const i=e.target.dom7EventData||[];if(i.indexOf(e)<0&&i.unshift(e),S(t).is(n))r.apply(t,i);else{const e=S(t).parents();for(let t=0;t<e.length;t+=1)S(e[t]).is(n)&&r.apply(e[t],i)}}function s(e){const t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),r.apply(this,t)}"function"==typeof e[1]&&([t,r,i]=e,n=void 0),i||(i=!1);const a=t.split(" ");let l;for(let e=0;e<this.length;e+=1){const t=this[e];if(n)for(l=0;l<a.length;l+=1){const e=a[l];t.dom7LiveListeners||(t.dom7LiveListeners={}),t.dom7LiveListeners[e]||(t.dom7LiveListeners[e]=[]),t.dom7LiveListeners[e].push({listener:r,proxyListener:o}),t.addEventListener(e,o,i)}else for(l=0;l<a.length;l+=1){const e=a[l];t.dom7Listeners||(t.dom7Listeners={}),t.dom7Listeners[e]||(t.dom7Listeners[e]=[]),t.dom7Listeners[e].push({listener:r,proxyListener:s}),t.addEventListener(e,s,i)}}return this},off:function(...e){let[t,n,r,i]=e;"function"==typeof e[1]&&([t,r,i]=e,n=void 0),i||(i=!1);const o=t.split(" ");for(let e=0;e<o.length;e+=1){const t=o[e];for(let e=0;e<this.length;e+=1){const o=this[e];let s;if(!n&&o.dom7Listeners?s=o.dom7Listeners[t]:n&&o.dom7LiveListeners&&(s=o.dom7LiveListeners[t]),s&&s.length)for(let e=s.length-1;e>=0;e-=1){const n=s[e];r&&n.listener===r||r&&n.listener&&n.listener.dom7proxy&&n.listener.dom7proxy===r?(o.removeEventListener(t,n.proxyListener,i),s.splice(e,1)):r||(o.removeEventListener(t,n.proxyListener,i),s.splice(e,1))}}}return this},trigger:function(...e){const t=e[0].split(" "),n=e[1];for(let r=0;r<t.length;r+=1){const i=t[r];for(let t=0;t<this.length;t+=1){const r=this[t];let o;try{o=new C.CustomEvent(i,{detail:n,bubbles:!0,cancelable:!0})}catch(e){o=b.createEvent("Event"),o.initEvent(i,!0,!0),o.detail=n}r.dom7EventData=e.filter((e,t)=>t>0),r.dispatchEvent(o),r.dom7EventData=[],delete r.dom7EventData}}return this},transitionEnd:function(e){const t=["webkitTransitionEnd","transitionend"],n=this;let r;function i(o){if(o.target===this)for(e.call(this,o),r=0;r<t.length;r+=1)n.off(t[r],i)}if(e)for(r=0;r<t.length;r+=1)n.on(t[r],i);return this},outerWidth:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetHeight+parseFloat(e.getPropertyValue("margin-top"))+parseFloat(e.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(this.length>0){const e=this[0],t=e.getBoundingClientRect(),n=b.body,r=e.clientTop||n.clientTop||0,i=e.clientLeft||n.clientLeft||0,o=e===C?C.scrollY:e.scrollTop,s=e===C?C.scrollX:e.scrollLeft;return{top:t.top+o-r,left:t.left+s-i}}return null},css:function(e,t){let n;if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n+=1)for(let t in e)this[n].style[t]=e[t];return this}if(this[0])return C.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(n=0;n<this.length;n+=1)this[n].style[e]=t;return this}return this},each:function(e){if(!e)return this;for(let t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(let t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(let t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){const t=this[0];let n,r;if(!t||void 0===e)return!1;if("string"==typeof e){if(t.matches)return t.matches(e);if(t.webkitMatchesSelector)return t.webkitMatchesSelector(e);if(t.msMatchesSelector)return t.msMatchesSelector(e);for(n=S(e),r=0;r<n.length;r+=1)if(n[r]===t)return!0;return!1}if(e===b)return t===b;if(e===C)return t===C;if(e.nodeType||e instanceof T){for(n=e.nodeType?[e]:e,r=0;r<n.length;r+=1)if(n[r]===t)return!0;return!1}return!1},index:function(){let e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;const t=this.length;let n;return e>t-1?new T([]):e<0?(n=t+e,new T(n<0?[]:[this[n]])):new T([this[e]])},append:function(...e){let t;for(let n=0;n<e.length;n+=1){t=e[n];for(let e=0;e<this.length;e+=1)if("string"==typeof t){const n=b.createElement("div");for(n.innerHTML=t;n.firstChild;)this[e].appendChild(n.firstChild)}else if(t instanceof T)for(let n=0;n<t.length;n+=1)this[e].appendChild(t[n]);else this[e].appendChild(t)}return this},prepend:function(e){let t,n;for(t=0;t<this.length;t+=1)if("string"==typeof e){const r=b.createElement("div");for(r.innerHTML=e,n=r.childNodes.length-1;n>=0;n-=1)this[t].insertBefore(r.childNodes[n],this[t].childNodes[0])}else if(e instanceof T)for(n=0;n<e.length;n+=1)this[t].insertBefore(e[n],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&S(this[0].nextElementSibling).is(e)?new T([this[0].nextElementSibling]):new T([]):this[0].nextElementSibling?new T([this[0].nextElementSibling]):new T([]):new T([])},nextAll:function(e){const t=[];let n=this[0];if(!n)return new T([]);for(;n.nextElementSibling;){const r=n.nextElementSibling;e?S(r).is(e)&&t.push(r):t.push(r),n=r}return new T(t)},prev:function(e){if(this.length>0){const t=this[0];return e?t.previousElementSibling&&S(t.previousElementSibling).is(e)?new T([t.previousElementSibling]):new T([]):t.previousElementSibling?new T([t.previousElementSibling]):new T([])}return new T([])},prevAll:function(e){const t=[];let n=this[0];if(!n)return new T([]);for(;n.previousElementSibling;){const r=n.previousElementSibling;e?S(r).is(e)&&t.push(r):t.push(r),n=r}return new T(t)},parent:function(e){const t=[];for(let n=0;n<this.length;n+=1)null!==this[n].parentNode&&(e?S(this[n].parentNode).is(e)&&t.push(this[n].parentNode):t.push(this[n].parentNode));return S(E(t))},parents:function(e){const t=[];for(let n=0;n<this.length;n+=1){let r=this[n].parentNode;for(;r;)e?S(r).is(e)&&t.push(r):t.push(r),r=r.parentNode}return S(E(t))},closest:function(e){let t=this;return void 0===e?new T([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){const t=[];for(let n=0;n<this.length;n+=1){const r=this[n].querySelectorAll(e);for(let e=0;e<r.length;e+=1)t.push(r[e])}return new T(t)},children:function(e){const t=[];for(let n=0;n<this.length;n+=1){const r=this[n].childNodes;for(let n=0;n<r.length;n+=1)e?1===r[n].nodeType&&S(r[n]).is(e)&&t.push(r[n]):1===r[n].nodeType&&t.push(r[n])}return new T(E(t))},remove:function(){for(let e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(...e){const t=this;let n,r;for(n=0;n<e.length;n+=1){const i=S(e[n]);for(r=0;r<i.length;r+=1)t[t.length]=i[r],t.length+=1}return t},styles:function(){return this[0]?C.getComputedStyle(this[0],null):{}}};Object.keys(z).forEach(e=>{S.fn[e]=S.fn[e]||z[e]});const M={deleteProps(e){const t=e;Object.keys(t).forEach(e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:(e,t=0)=>setTimeout(e,t),now:()=>Date.now(),getTranslate(e,t="x"){let n,r,i;const o=C.getComputedStyle(e,null);return C.WebKitCSSMatrix?(r=o.transform||o.webkitTransform,r.split(",").length>6&&(r=r.split(", ").map(e=>e.replace(",",".")).join(", ")),i=new C.WebKitCSSMatrix("none"===r?"":r)):(i=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),n=i.toString().split(",")),"x"===t&&(r=C.WebKitCSSMatrix?i.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(r=C.WebKitCSSMatrix?i.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),r||0},parseUrlQuery(e){const t={};let n,r,i,o,s=e||C.location.href;if("string"==typeof s&&s.length)for(s=s.indexOf("?")>-1?s.replace(/\S*\?/,""):"",r=s.split("&").filter(e=>""!==e),o=r.length,n=0;n<o;n+=1)i=r[n].replace(/#\S+/g,"").split("="),t[decodeURIComponent(i[0])]=void 0===i[1]?void 0:decodeURIComponent(i[1])||"";return t},isObject:e=>"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object,extend(...e){const t=Object(e[0]);for(let n=1;n<e.length;n+=1){const r=e[n];if(null!=r){const e=Object.keys(Object(r));for(let n=0,i=e.length;n<i;n+=1){const i=e[n],o=Object.getOwnPropertyDescriptor(r,i);void 0!==o&&o.enumerable&&(M.isObject(t[i])&&M.isObject(r[i])?M.extend(t[i],r[i]):!M.isObject(t[i])&&M.isObject(r[i])?(t[i]={},M.extend(t[i],r[i])):t[i]=r[i])}}}return t}},k=function(){const e=b.createElement("div");return{touch:C.Modernizr&&!0===C.Modernizr.touch||!!(C.navigator.maxTouchPoints>0||"ontouchstart"in C||C.DocumentTouch&&b instanceof C.DocumentTouch),pointerEvents:!!(C.navigator.pointerEnabled||C.PointerEvent||"maxTouchPoints"in C.navigator&&C.navigator.maxTouchPoints>0),prefixedPointerEvents:!!C.navigator.msPointerEnabled,transition:function(){const t=e.style;return"transition"in t||"webkitTransition"in t||"MozTransition"in t}(),transforms3d:C.Modernizr&&!0===C.Modernizr.csstransforms3d||function(){const t=e.style;return"webkitPerspective"in t||"MozPerspective"in t||"OPerspective"in t||"MsPerspective"in t||"perspective"in t}(),flexbox:function(){const t=e.style,n="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" ");for(let e=0;e<n.length;e+=1)if(n[e]in t)return!0;return!1}(),observer:"MutationObserver"in C||"WebkitMutationObserver"in C,passiveListener:function(){let e=!1;try{const t=Object.defineProperty({},"passive",{get(){e=!0}});C.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in C}}(),A={isIE:!!C.navigator.userAgent.match(/Trident/g)||!!C.navigator.userAgent.match(/MSIE/g),isEdge:!!C.navigator.userAgent.match(/Edge/g),isSafari:function(){const e=C.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(C.navigator.userAgent)};class P{constructor(e={}){const t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(e=>{t.on(e,t.params.on[e])})}on(e,t,n){const r=this;if("function"!=typeof t)return r;const i=n?"unshift":"push";return e.split(" ").forEach(e=>{r.eventsListeners[e]||(r.eventsListeners[e]=[]),r.eventsListeners[e][i](t)}),r}once(e,t,n){const r=this;if("function"!=typeof t)return r;function i(...n){t.apply(r,n),r.off(e,i),i.f7proxy&&delete i.f7proxy}return i.f7proxy=t,r.on(e,i,n)}off(e,t){const n=this;return n.eventsListeners?(e.split(" ").forEach(e=>{void 0===t?n.eventsListeners[e]=[]:n.eventsListeners[e]&&n.eventsListeners[e].length&&n.eventsListeners[e].forEach((r,i)=>{(r===t||r.f7proxy&&r.f7proxy===t)&&n.eventsListeners[e].splice(i,1)})}),n):n}emit(...e){const t=this;if(!t.eventsListeners)return t;let n,r,i;return"string"==typeof e[0]||Array.isArray(e[0])?(n=e[0],r=e.slice(1,e.length),i=t):(n=e[0].events,r=e[0].data,i=e[0].context||t),(Array.isArray(n)?n:n.split(" ")).forEach(e=>{if(t.eventsListeners&&t.eventsListeners[e]){const n=[];t.eventsListeners[e].forEach(e=>{n.push(e)}),n.forEach(e=>{e.apply(i,r)})}}),t}useModulesParams(e){const t=this;t.modules&&Object.keys(t.modules).forEach(n=>{const r=t.modules[n];r.params&&M.extend(e,r.params)})}useModules(e={}){const t=this;t.modules&&Object.keys(t.modules).forEach(n=>{const r=t.modules[n],i=e[n]||{};r.instance&&Object.keys(r.instance).forEach(e=>{const n=r.instance[e];t[e]="function"==typeof n?n.bind(t):n}),r.on&&t.on&&Object.keys(r.on).forEach(e=>{t.on(e,r.on[e])}),r.create&&r.create.bind(t)(i)})}static set components(e){this.use&&this.use(e)}static installModule(e,...t){const n=this;n.prototype.modules||(n.prototype.modules={});const r=e.name||`${Object.keys(n.prototype.modules).length}_${M.now()}`;return n.prototype.modules[r]=e,e.proto&&Object.keys(e.proto).forEach(t=>{n.prototype[t]=e.proto[t]}),e.static&&Object.keys(e.static).forEach(t=>{n[t]=e.static[t]}),e.install&&e.install.apply(n,t),n}static use(e,...t){const n=this;return Array.isArray(e)?(e.forEach(e=>n.installModule(e)),n):n.installModule(e,...t)}}var L={updateSize:function(){const e=this;let t,n;const r=e.$el;t=void 0!==e.params.width?e.params.width:r[0].clientWidth,n=void 0!==e.params.height?e.params.height:r[0].clientHeight,0===t&&e.isHorizontal()||0===n&&e.isVertical()||(t=t-parseInt(r.css("padding-left"),10)-parseInt(r.css("padding-right"),10),n=n-parseInt(r.css("padding-top"),10)-parseInt(r.css("padding-bottom"),10),M.extend(e,{width:t,height:n,size:e.isHorizontal()?t:n}))},updateSlides:function(){const e=this,t=e.params,{$wrapperEl:n,size:r,rtlTranslate:i,wrongRTL:o}=e,s=e.virtual&&t.virtual.enabled,a=s?e.virtual.slides.length:e.slides.length,l=n.children(`.${e.params.slideClass}`),c=s?e.virtual.slides.length:l.length;let u=[];const d=[],p=[];let f=t.slidesOffsetBefore;"function"==typeof f&&(f=t.slidesOffsetBefore.call(e));let h=t.slidesOffsetAfter;"function"==typeof h&&(h=t.slidesOffsetAfter.call(e));const v=e.snapGrid.length,m=e.snapGrid.length;let g,y,w=t.spaceBetween,x=-f,b=0,T=0;if(void 0===r)return;"string"==typeof w&&w.indexOf("%")>=0&&(w=parseFloat(w.replace("%",""))/100*r),e.virtualSize=-w,i?l.css({marginLeft:"",marginTop:""}):l.css({marginRight:"",marginBottom:""}),t.slidesPerColumn>1&&(g=Math.floor(c/t.slidesPerColumn)===c/e.params.slidesPerColumn?c:Math.ceil(c/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(g=Math.max(g,t.slidesPerView*t.slidesPerColumn)));const S=t.slidesPerColumn,E=g/S,z=Math.floor(c/t.slidesPerColumn);for(let n=0;n<c;n+=1){y=0;const i=l.eq(n);if(t.slidesPerColumn>1){let r,o,s;if("column"===t.slidesPerColumnFill||"row"===t.slidesPerColumnFill&&t.slidesPerGroup>1){if("column"===t.slidesPerColumnFill)o=Math.floor(n/S),s=n-o*S,(o>z||o===z&&s===S-1)&&(s+=1,s>=S&&(s=0,o+=1));else{const e=Math.floor(n/t.slidesPerGroup);s=Math.floor(n/t.slidesPerView)-e*t.slidesPerColumn,o=n-s*t.slidesPerView-e*t.slidesPerView}r=o+s*g/S,i.css({"-webkit-box-ordinal-group":r,"-moz-box-ordinal-group":r,"-ms-flex-order":r,"-webkit-order":r,order:r})}else s=Math.floor(n/E),o=n-s*E;i.css(`margin-${e.isHorizontal()?"top":"left"}`,0!==s&&t.spaceBetween&&`${t.spaceBetween}px`).attr("data-swiper-column",o).attr("data-swiper-row",s)}if("none"!==i.css("display")){if("auto"===t.slidesPerView){const n=C.getComputedStyle(i[0],null),r=i[0].style.transform,o=i[0].style.webkitTransform;if(r&&(i[0].style.transform="none"),o&&(i[0].style.webkitTransform="none"),t.roundLengths)y=e.isHorizontal()?i.outerWidth(!0):i.outerHeight(!0);else if(e.isHorizontal()){const e=parseFloat(n.getPropertyValue("width")),t=parseFloat(n.getPropertyValue("padding-left")),r=parseFloat(n.getPropertyValue("padding-right")),i=parseFloat(n.getPropertyValue("margin-left")),o=parseFloat(n.getPropertyValue("margin-right")),s=n.getPropertyValue("box-sizing");y=s&&"border-box"===s&&!A.isIE?e+i+o:e+t+r+i+o}else{const e=parseFloat(n.getPropertyValue("height")),t=parseFloat(n.getPropertyValue("padding-top")),r=parseFloat(n.getPropertyValue("padding-bottom")),i=parseFloat(n.getPropertyValue("margin-top")),o=parseFloat(n.getPropertyValue("margin-bottom")),s=n.getPropertyValue("box-sizing");y=s&&"border-box"===s&&!A.isIE?e+i+o:e+t+r+i+o}r&&(i[0].style.transform=r),o&&(i[0].style.webkitTransform=o),t.roundLengths&&(y=Math.floor(y))}else y=(r-(t.slidesPerView-1)*w)/t.slidesPerView,t.roundLengths&&(y=Math.floor(y)),l[n]&&(e.isHorizontal()?l[n].style.width=`${y}px`:l[n].style.height=`${y}px`);l[n]&&(l[n].swiperSlideSize=y),p.push(y),t.centeredSlides?(x=x+y/2+b/2+w,0===b&&0!==n&&(x=x-r/2-w),0===n&&(x=x-r/2-w),Math.abs(x)<.001&&(x=0),t.roundLengths&&(x=Math.floor(x)),T%t.slidesPerGroup==0&&u.push(x),d.push(x)):(t.roundLengths&&(x=Math.floor(x)),T%t.slidesPerGroup==0&&u.push(x),d.push(x),x=x+y+w),e.virtualSize+=y+w,b=y,T+=1}}let P;if(e.virtualSize=Math.max(e.virtualSize,r)+h,i&&o&&("slide"===t.effect||"coverflow"===t.effect)&&n.css({width:`${e.virtualSize+t.spaceBetween}px`}),k.flexbox&&!t.setWrapperSize||(e.isHorizontal()?n.css({width:`${e.virtualSize+t.spaceBetween}px`}):n.css({height:`${e.virtualSize+t.spaceBetween}px`})),t.slidesPerColumn>1&&(e.virtualSize=(y+t.spaceBetween)*g,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?n.css({width:`${e.virtualSize+t.spaceBetween}px`}):n.css({height:`${e.virtualSize+t.spaceBetween}px`}),t.centeredSlides)){P=[];for(let n=0;n<u.length;n+=1){let r=u[n];t.roundLengths&&(r=Math.floor(r)),u[n]<e.virtualSize+u[0]&&P.push(r)}u=P}if(!t.centeredSlides){P=[];for(let n=0;n<u.length;n+=1){let i=u[n];t.roundLengths&&(i=Math.floor(i)),u[n]<=e.virtualSize-r&&P.push(i)}u=P,Math.floor(e.virtualSize-r)-Math.floor(u[u.length-1])>1&&u.push(e.virtualSize-r)}if(0===u.length&&(u=[0]),0!==t.spaceBetween&&(e.isHorizontal()?i?l.css({marginLeft:`${w}px`}):l.css({marginRight:`${w}px`}):l.css({marginBottom:`${w}px`})),t.centerInsufficientSlides){let e=0;if(p.forEach(n=>{e+=n+(t.spaceBetween?t.spaceBetween:0)}),e-=t.spaceBetween,e<r){const t=(r-e)/2;u.forEach((e,n)=>{u[n]=e-t}),d.forEach((e,n)=>{d[n]=e+t})}}M.extend(e,{slides:l,snapGrid:u,slidesGrid:d,slidesSizesGrid:p}),c!==a&&e.emit("slidesLengthChange"),u.length!==v&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),d.length!==m&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()},updateAutoHeight:function(e){const t=this,n=[];let r,i=0;if("number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed),"auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)for(r=0;r<Math.ceil(t.params.slidesPerView);r+=1){const e=t.activeIndex+r;if(e>t.slides.length)break;n.push(t.slides.eq(e)[0])}else n.push(t.slides.eq(t.activeIndex)[0]);for(r=0;r<n.length;r+=1)if(void 0!==n[r]){const e=n[r].offsetHeight;i=e>i?e:i}i&&t.$wrapperEl.css("height",`${i}px`)},updateSlidesOffset:function(){const e=this,t=e.slides;for(let n=0;n<t.length;n+=1)t[n].swiperSlideOffset=e.isHorizontal()?t[n].offsetLeft:t[n].offsetTop},updateSlidesProgress:function(e=this&&this.translate||0){const t=this,n=t.params,{slides:r,rtlTranslate:i}=t;if(0===r.length)return;void 0===r[0].swiperSlideOffset&&t.updateSlidesOffset();let o=-e;i&&(o=e),r.removeClass(n.slideVisibleClass),t.visibleSlidesIndexes=[],t.visibleSlides=[];for(let e=0;e<r.length;e+=1){const s=r[e],a=(o+(n.centeredSlides?t.minTranslate():0)-s.swiperSlideOffset)/(s.swiperSlideSize+n.spaceBetween);if(n.watchSlidesVisibility){const i=-(o-s.swiperSlideOffset),a=i+t.slidesSizesGrid[e];(i>=0&&i<t.size-1||a>1&&a<=t.size||i<=0&&a>=t.size)&&(t.visibleSlides.push(s),t.visibleSlidesIndexes.push(e),r.eq(e).addClass(n.slideVisibleClass))}s.progress=i?-a:a}t.visibleSlides=S(t.visibleSlides)},updateProgress:function(e=this&&this.translate||0){const t=this,n=t.params,r=t.maxTranslate()-t.minTranslate();let{progress:i,isBeginning:o,isEnd:s}=t;const a=o,l=s;0===r?(i=0,o=!0,s=!0):(i=(e-t.minTranslate())/r,o=i<=0,s=i>=1),M.extend(t,{progress:i,isBeginning:o,isEnd:s}),(n.watchSlidesProgress||n.watchSlidesVisibility)&&t.updateSlidesProgress(e),o&&!a&&t.emit("reachBeginning toEdge"),s&&!l&&t.emit("reachEnd toEdge"),(a&&!o||l&&!s)&&t.emit("fromEdge"),t.emit("progress",i)},updateSlidesClasses:function(){const e=this,{slides:t,params:n,$wrapperEl:r,activeIndex:i,realIndex:o}=e,s=e.virtual&&n.virtual.enabled;let a;t.removeClass(`${n.slideActiveClass} ${n.slideNextClass} ${n.slidePrevClass} ${n.slideDuplicateActiveClass} ${n.slideDuplicateNextClass} ${n.slideDuplicatePrevClass}`),a=s?e.$wrapperEl.find(`.${n.slideClass}[data-swiper-slide-index="${i}"]`):t.eq(i),a.addClass(n.slideActiveClass),n.loop&&(a.hasClass(n.slideDuplicateClass)?r.children(`.${n.slideClass}:not(.${n.slideDuplicateClass})[data-swiper-slide-index="${o}"]`).addClass(n.slideDuplicateActiveClass):r.children(`.${n.slideClass}.${n.slideDuplicateClass}[data-swiper-slide-index="${o}"]`).addClass(n.slideDuplicateActiveClass));let l=a.nextAll(`.${n.slideClass}`).eq(0).addClass(n.slideNextClass);n.loop&&0===l.length&&(l=t.eq(0),l.addClass(n.slideNextClass));let c=a.prevAll(`.${n.slideClass}`).eq(0).addClass(n.slidePrevClass);n.loop&&0===c.length&&(c=t.eq(-1),c.addClass(n.slidePrevClass)),n.loop&&(l.hasClass(n.slideDuplicateClass)?r.children(`.${n.slideClass}:not(.${n.slideDuplicateClass})[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicateNextClass):r.children(`.${n.slideClass}.${n.slideDuplicateClass}[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicateNextClass),c.hasClass(n.slideDuplicateClass)?r.children(`.${n.slideClass}:not(.${n.slideDuplicateClass})[data-swiper-slide-index="${c.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicatePrevClass):r.children(`.${n.slideClass}.${n.slideDuplicateClass}[data-swiper-slide-index="${c.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicatePrevClass))},updateActiveIndex:function(e){const t=this,n=t.rtlTranslate?t.translate:-t.translate,{slidesGrid:r,snapGrid:i,params:o,activeIndex:s,realIndex:a,snapIndex:l}=t;let c,u=e;if(void 0===u){for(let e=0;e<r.length;e+=1)void 0!==r[e+1]?n>=r[e]&&n<r[e+1]-(r[e+1]-r[e])/2?u=e:n>=r[e]&&n<r[e+1]&&(u=e+1):n>=r[e]&&(u=e);o.normalizeSlideIndex&&(u<0||void 0===u)&&(u=0)}if(c=i.indexOf(n)>=0?i.indexOf(n):Math.floor(u/o.slidesPerGroup),c>=i.length&&(c=i.length-1),u===s)return void(c!==l&&(t.snapIndex=c,t.emit("snapIndexChange")));const d=parseInt(t.slides.eq(u).attr("data-swiper-slide-index")||u,10);M.extend(t,{snapIndex:c,realIndex:d,previousIndex:s,activeIndex:u}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),a!==d&&t.emit("realIndexChange"),(t.initialized||t.runCallbacksOnInit)&&t.emit("slideChange")},updateClickedSlide:function(e){const t=this,n=t.params,r=S(e.target).closest(`.${n.slideClass}`)[0];let i=!1;if(r)for(let e=0;e<t.slides.length;e+=1)t.slides[e]===r&&(i=!0);if(!r||!i)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=r,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(S(r).attr("data-swiper-slide-index"),10):t.clickedIndex=S(r).index(),n.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};var O={getTranslate:function(e=(this.isHorizontal()?"x":"y")){const{params:t,rtlTranslate:n,translate:r,$wrapperEl:i}=this;if(t.virtualTranslate)return n?-r:r;let o=M.getTranslate(i[0],e);return n&&(o=-o),o||0},setTranslate:function(e,t){const n=this,{rtlTranslate:r,params:i,$wrapperEl:o,progress:s}=n;let a,l=0,c=0;n.isHorizontal()?l=r?-e:e:c=e,i.roundLengths&&(l=Math.floor(l),c=Math.floor(c)),i.virtualTranslate||(k.transforms3d?o.transform(`translate3d(${l}px, ${c}px, 0px)`):o.transform(`translate(${l}px, ${c}px)`)),n.previousTranslate=n.translate,n.translate=n.isHorizontal()?l:c;const u=n.maxTranslate()-n.minTranslate();a=0===u?0:(e-n.minTranslate())/u,a!==s&&n.updateProgress(e),n.emit("setTranslate",n.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]}};var j={setTransition:function(e,t){this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e=!0,t){const n=this,{activeIndex:r,params:i,previousIndex:o}=n;i.autoHeight&&n.updateAutoHeight();let s=t;if(s||(s=r>o?"next":r<o?"prev":"reset"),n.emit("transitionStart"),e&&r!==o){if("reset"===s)return void n.emit("slideResetTransitionStart");n.emit("slideChangeTransitionStart"),"next"===s?n.emit("slideNextTransitionStart"):n.emit("slidePrevTransitionStart")}},transitionEnd:function(e=!0,t){const n=this,{activeIndex:r,previousIndex:i}=n;n.animating=!1,n.setTransition(0);let o=t;if(o||(o=r>i?"next":r<i?"prev":"reset"),n.emit("transitionEnd"),e&&r!==i){if("reset"===o)return void n.emit("slideResetTransitionEnd");n.emit("slideChangeTransitionEnd"),"next"===o?n.emit("slideNextTransitionEnd"):n.emit("slidePrevTransitionEnd")}}};var H={slideTo:function(e=0,t=this.params.speed,n=!0,r){const i=this;let o=e;o<0&&(o=0);const{params:s,snapGrid:a,slidesGrid:l,previousIndex:c,activeIndex:u,rtlTranslate:d}=i;if(i.animating&&s.preventInteractionOnTransition)return!1;let p=Math.floor(o/s.slidesPerGroup);p>=a.length&&(p=a.length-1),(u||s.initialSlide||0)===(c||0)&&n&&i.emit("beforeSlideChangeStart");const f=-a[p];if(i.updateProgress(f),s.normalizeSlideIndex)for(let e=0;e<l.length;e+=1)-Math.floor(100*f)>=Math.floor(100*l[e])&&(o=e);if(i.initialized&&o!==u){if(!i.allowSlideNext&&f<i.translate&&f<i.minTranslate())return!1;if(!i.allowSlidePrev&&f>i.translate&&f>i.maxTranslate()&&(u||0)!==o)return!1}let h;return h=o>u?"next":o<u?"prev":"reset",d&&-f===i.translate||!d&&f===i.translate?(i.updateActiveIndex(o),s.autoHeight&&i.updateAutoHeight(),i.updateSlidesClasses(),"slide"!==s.effect&&i.setTranslate(f),"reset"!==h&&(i.transitionStart(n,h),i.transitionEnd(n,h)),!1):(0!==t&&k.transition?(i.setTransition(t),i.setTranslate(f),i.updateActiveIndex(o),i.updateSlidesClasses(),i.emit("beforeTransitionStart",t,r),i.transitionStart(n,h),i.animating||(i.animating=!0,i.onSlideToWrapperTransitionEnd||(i.onSlideToWrapperTransitionEnd=function(e){i&&!i.destroyed&&e.target===this&&(i.$wrapperEl[0].removeEventListener("transitionend",i.onSlideToWrapperTransitionEnd),i.$wrapperEl[0].removeEventListener("webkitTransitionEnd",i.onSlideToWrapperTransitionEnd),i.onSlideToWrapperTransitionEnd=null,delete i.onSlideToWrapperTransitionEnd,i.transitionEnd(n,h))}),i.$wrapperEl[0].addEventListener("transitionend",i.onSlideToWrapperTransitionEnd),i.$wrapperEl[0].addEventListener("webkitTransitionEnd",i.onSlideToWrapperTransitionEnd))):(i.setTransition(0),i.setTranslate(f),i.updateActiveIndex(o),i.updateSlidesClasses(),i.emit("beforeTransitionStart",t,r),i.transitionStart(n,h),i.transitionEnd(n,h)),!0)},slideToLoop:function(e=0,t=this.params.speed,n=!0,r){const i=this;let o=e;return i.params.loop&&(o+=i.loopedSlides),i.slideTo(o,t,n,r)},slideNext:function(e=this.params.speed,t=!0,n){const r=this,{params:i,animating:o}=r;return i.loop?!o&&(r.loopFix(),r._clientLeft=r.$wrapperEl[0].clientLeft,r.slideTo(r.activeIndex+i.slidesPerGroup,e,t,n)):r.slideTo(r.activeIndex+i.slidesPerGroup,e,t,n)},slidePrev:function(e=this.params.speed,t=!0,n){const r=this,{params:i,animating:o,snapGrid:s,slidesGrid:a,rtlTranslate:l}=r;if(i.loop){if(o)return!1;r.loopFix(),r._clientLeft=r.$wrapperEl[0].clientLeft}function c(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const u=c(l?r.translate:-r.translate),d=s.map(e=>c(e)),p=(a.map(e=>c(e)),s[d.indexOf(u)],s[d.indexOf(u)-1]);let f;return void 0!==p&&(f=a.indexOf(p),f<0&&(f=r.activeIndex-1)),r.slideTo(f,e,t,n)},slideReset:function(e=this.params.speed,t=!0,n){return this.slideTo(this.activeIndex,e,t,n)},slideToClosest:function(e=this.params.speed,t=!0,n){const r=this;let i=r.activeIndex;const o=Math.floor(i/r.params.slidesPerGroup);if(o<r.snapGrid.length-1){const e=r.rtlTranslate?r.translate:-r.translate,t=r.snapGrid[o];e-t>(r.snapGrid[o+1]-t)/2&&(i=r.params.slidesPerGroup)}return r.slideTo(i,e,t,n)},slideToClickedSlide:function(){const e=this,{params:t,$wrapperEl:n}=e,r="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let i,o=e.clickedIndex;if(t.loop){if(e.animating)return;i=parseInt(S(e.clickedSlide).attr("data-swiper-slide-index"),10),t.centeredSlides?o<e.loopedSlides-r/2||o>e.slides.length-e.loopedSlides+r/2?(e.loopFix(),o=n.children(`.${t.slideClass}[data-swiper-slide-index="${i}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),M.nextTick(()=>{e.slideTo(o)})):e.slideTo(o):o>e.slides.length-r?(e.loopFix(),o=n.children(`.${t.slideClass}[data-swiper-slide-index="${i}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),M.nextTick(()=>{e.slideTo(o)})):e.slideTo(o)}else e.slideTo(o)}};var D={loopCreate:function(){const e=this,{params:t,$wrapperEl:n}=e;n.children(`.${t.slideClass}.${t.slideDuplicateClass}`).remove();let r=n.children(`.${t.slideClass}`);if(t.loopFillGroupWithBlank){const e=t.slidesPerGroup-r.length%t.slidesPerGroup;if(e!==t.slidesPerGroup){for(let r=0;r<e;r+=1){const e=S(b.createElement("div")).addClass(`${t.slideClass} ${t.slideBlankClass}`);n.append(e)}r=n.children(`.${t.slideClass}`)}}"auto"!==t.slidesPerView||t.loopedSlides||(t.loopedSlides=r.length),e.loopedSlides=parseInt(t.loopedSlides||t.slidesPerView,10),e.loopedSlides+=t.loopAdditionalSlides,e.loopedSlides>r.length&&(e.loopedSlides=r.length);const i=[],o=[];r.each((t,n)=>{const s=S(n);t<e.loopedSlides&&o.push(n),t<r.length&&t>=r.length-e.loopedSlides&&i.push(n),s.attr("data-swiper-slide-index",t)});for(let e=0;e<o.length;e+=1)n.append(S(o[e].cloneNode(!0)).addClass(t.slideDuplicateClass));for(let e=i.length-1;e>=0;e-=1)n.prepend(S(i[e].cloneNode(!0)).addClass(t.slideDuplicateClass))},loopFix:function(){const e=this,{params:t,activeIndex:n,slides:r,loopedSlides:i,allowSlidePrev:o,allowSlideNext:s,snapGrid:a,rtlTranslate:l}=e;let c;e.allowSlidePrev=!0,e.allowSlideNext=!0;const u=-a[n]-e.getTranslate();if(n<i){c=r.length-3*i+n,c+=i,e.slideTo(c,0,!1,!0)&&0!==u&&e.setTranslate((l?-e.translate:e.translate)-u)}else if("auto"===t.slidesPerView&&n>=2*i||n>=r.length-i){c=-r.length+n+i,c+=i,e.slideTo(c,0,!1,!0)&&0!==u&&e.setTranslate((l?-e.translate:e.translate)-u)}e.allowSlidePrev=o,e.allowSlideNext=s},loopDestroy:function(){const{$wrapperEl:e,params:t,slides:n}=this;e.children(`.${t.slideClass}.${t.slideDuplicateClass},.${t.slideClass}.${t.slideBlankClass}`).remove(),n.removeAttr("data-swiper-slide-index")}};var N={setGrabCursor:function(e){if(k.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked)return;const t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"},unsetGrabCursor:function(){k.touch||this.params.watchOverflow&&this.isLocked||(this.el.style.cursor="")}};var V={appendSlide:function(e){const t=this,{$wrapperEl:n,params:r}=t;if(r.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&n.append(e[t]);else n.append(e);r.loop&&t.loopCreate(),r.observer&&k.observer||t.update()},prependSlide:function(e){const t=this,{params:n,$wrapperEl:r,activeIndex:i}=t;n.loop&&t.loopDestroy();let o=i+1;if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&r.prepend(e[t]);o=i+e.length}else r.prepend(e);n.loop&&t.loopCreate(),n.observer&&k.observer||t.update(),t.slideTo(o,0,!1)},addSlide:function(e,t){const n=this,{$wrapperEl:r,params:i,activeIndex:o}=n;let s=o;i.loop&&(s-=n.loopedSlides,n.loopDestroy(),n.slides=r.children(`.${i.slideClass}`));const a=n.slides.length;if(e<=0)return void n.prependSlide(t);if(e>=a)return void n.appendSlide(t);let l=s>e?s+1:s;const c=[];for(let t=a-1;t>=e;t-=1){const e=n.slides.eq(t);e.remove(),c.unshift(e)}if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&r.append(t[e]);l=s>e?s+t.length:s}else r.append(t);for(let e=0;e<c.length;e+=1)r.append(c[e]);i.loop&&n.loopCreate(),i.observer&&k.observer||n.update(),i.loop?n.slideTo(l+n.loopedSlides,0,!1):n.slideTo(l,0,!1)},removeSlide:function(e){const t=this,{params:n,$wrapperEl:r,activeIndex:i}=t;let o=i;n.loop&&(o-=t.loopedSlides,t.loopDestroy(),t.slides=r.children(`.${n.slideClass}`));let s,a=o;if("object"==typeof e&&"length"in e){for(let n=0;n<e.length;n+=1)s=e[n],t.slides[s]&&t.slides.eq(s).remove(),s<a&&(a-=1);a=Math.max(a,0)}else s=e,t.slides[s]&&t.slides.eq(s).remove(),s<a&&(a-=1),a=Math.max(a,0);n.loop&&t.loopCreate(),n.observer&&k.observer||t.update(),n.loop?t.slideTo(a+t.loopedSlides,0,!1):t.slideTo(a,0,!1)},removeAllSlides:function(){const e=this,t=[];for(let n=0;n<e.slides.length;n+=1)t.push(n);e.removeSlide(t)}};const I=function(){const e=C.navigator.userAgent,t={ios:!1,android:!1,androidChrome:!1,desktop:!1,windows:!1,iphone:!1,ipod:!1,ipad:!1,cordova:C.cordova||C.phonegap,phonegap:C.cordova||C.phonegap},n=e.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),r=e.match(/(Android);?[\s\/]+([\d.]+)?/),i=e.match(/(iPad).*OS\s([\d_]+)/),o=e.match(/(iPod)(.*OS\s([\d_]+))?/),s=!i&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);if(n&&(t.os="windows",t.osVersion=n[2],t.windows=!0),r&&!n&&(t.os="android",t.osVersion=r[2],t.android=!0,t.androidChrome=e.toLowerCase().indexOf("chrome")>=0),(i||s||o)&&(t.os="ios",t.ios=!0),s&&!o&&(t.osVersion=s[2].replace(/_/g,"."),t.iphone=!0),i&&(t.osVersion=i[2].replace(/_/g,"."),t.ipad=!0),o&&(t.osVersion=o[3]?o[3].replace(/_/g,"."):null,t.iphone=!0),t.ios&&t.osVersion&&e.indexOf("Version/")>=0&&"10"===t.osVersion.split(".")[0]&&(t.osVersion=e.toLowerCase().split("version/")[1].split(" ")[0]),t.desktop=!(t.os||t.android||t.webView),t.webView=(s||i||o)&&e.match(/.*AppleWebKit(?!.*Safari)/i),t.os&&"ios"===t.os){const e=t.osVersion.split("."),n=b.querySelector('meta[name="viewport"]');t.minimalUi=!t.webView&&(o||s)&&(1*e[0]==7?1*e[1]>=1:1*e[0]>7)&&n&&n.getAttribute("content").indexOf("minimal-ui")>=0}return t.pixelRatio=C.devicePixelRatio||1,t}();function B(e){const t=this,n=t.touchEventsData,{params:r,touches:i}=t;if(t.animating&&r.preventInteractionOnTransition)return;let o=e;if(o.originalEvent&&(o=o.originalEvent),n.isTouchEvent="touchstart"===o.type,!n.isTouchEvent&&"which"in o&&3===o.which)return;if(!n.isTouchEvent&&"button"in o&&o.button>0)return;if(n.isTouched&&n.isMoved)return;if(r.noSwiping&&S(o.target).closest(r.noSwipingSelector?r.noSwipingSelector:`.${r.noSwipingClass}`)[0])return void(t.allowClick=!0);if(r.swipeHandler&&!S(o).closest(r.swipeHandler)[0])return;i.currentX="touchstart"===o.type?o.targetTouches[0].pageX:o.pageX,i.currentY="touchstart"===o.type?o.targetTouches[0].pageY:o.pageY;const s=i.currentX,a=i.currentY,l=r.edgeSwipeDetection||r.iOSEdgeSwipeDetection,c=r.edgeSwipeThreshold||r.iOSEdgeSwipeThreshold;if(!l||!(s<=c||s>=C.screen.width-c)){if(M.extend(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),i.startX=s,i.startY=a,n.touchStartTime=M.now(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,r.threshold>0&&(n.allowThresholdMove=!1),"touchstart"!==o.type){let e=!0;S(o.target).is(n.formElements)&&(e=!1),b.activeElement&&S(b.activeElement).is(n.formElements)&&b.activeElement!==o.target&&b.activeElement.blur();const i=e&&t.allowTouchMove&&r.touchStartPreventDefault;(r.touchStartForcePreventDefault||i)&&o.preventDefault()}t.emit("touchStart",o)}}function $(e){const t=this,n=t.touchEventsData,{params:r,touches:i,rtlTranslate:o}=t;let s=e;if(s.originalEvent&&(s=s.originalEvent),!n.isTouched)return void(n.startMoving&&n.isScrolling&&t.emit("touchMoveOpposite",s));if(n.isTouchEvent&&"mousemove"===s.type)return;const a="touchmove"===s.type?s.targetTouches[0].pageX:s.pageX,l="touchmove"===s.type?s.targetTouches[0].pageY:s.pageY;if(s.preventedByNestedSwiper)return i.startX=a,void(i.startY=l);if(!t.allowTouchMove)return t.allowClick=!1,void(n.isTouched&&(M.extend(i,{startX:a,startY:l,currentX:a,currentY:l}),n.touchStartTime=M.now()));if(n.isTouchEvent&&r.touchReleaseOnEdges&&!r.loop)if(t.isVertical()){if(l<i.startY&&t.translate<=t.maxTranslate()||l>i.startY&&t.translate>=t.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(a<i.startX&&t.translate<=t.maxTranslate()||a>i.startX&&t.translate>=t.minTranslate())return;if(n.isTouchEvent&&b.activeElement&&s.target===b.activeElement&&S(s.target).is(n.formElements))return n.isMoved=!0,void(t.allowClick=!1);if(n.allowTouchCallbacks&&t.emit("touchMove",s),s.targetTouches&&s.targetTouches.length>1)return;i.currentX=a,i.currentY=l;const c=i.currentX-i.startX,u=i.currentY-i.startY;if(t.params.threshold&&Math.sqrt(c**2+u**2)<t.params.threshold)return;if(void 0===n.isScrolling){let e;t.isHorizontal()&&i.currentY===i.startY||t.isVertical()&&i.currentX===i.startX?n.isScrolling=!1:c*c+u*u>=25&&(e=180*Math.atan2(Math.abs(u),Math.abs(c))/Math.PI,n.isScrolling=t.isHorizontal()?e>r.touchAngle:90-e>r.touchAngle)}if(n.isScrolling&&t.emit("touchMoveOpposite",s),void 0===n.startMoving&&(i.currentX===i.startX&&i.currentY===i.startY||(n.startMoving=!0)),n.isScrolling)return void(n.isTouched=!1);if(!n.startMoving)return;t.allowClick=!1,s.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&s.stopPropagation(),n.isMoved||(r.loop&&t.loopFix(),n.startTranslate=t.getTranslate(),t.setTransition(0),t.animating&&t.$wrapperEl.trigger("webkitTransitionEnd transitionend"),n.allowMomentumBounce=!1,!r.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",s)),t.emit("sliderMove",s),n.isMoved=!0;let d=t.isHorizontal()?c:u;i.diff=d,d*=r.touchRatio,o&&(d=-d),t.swipeDirection=d>0?"prev":"next",n.currentTranslate=d+n.startTranslate;let p=!0,f=r.resistanceRatio;if(r.touchReleaseOnEdges&&(f=0),d>0&&n.currentTranslate>t.minTranslate()?(p=!1,r.resistance&&(n.currentTranslate=t.minTranslate()-1+(-t.minTranslate()+n.startTranslate+d)**f)):d<0&&n.currentTranslate<t.maxTranslate()&&(p=!1,r.resistance&&(n.currentTranslate=t.maxTranslate()+1-(t.maxTranslate()-n.startTranslate-d)**f)),p&&(s.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),r.threshold>0){if(!(Math.abs(d)>r.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,i.startX=i.currentX,i.startY=i.currentY,n.currentTranslate=n.startTranslate,void(i.diff=t.isHorizontal()?i.currentX-i.startX:i.currentY-i.startY)}r.followFinger&&((r.freeMode||r.watchSlidesProgress||r.watchSlidesVisibility)&&(t.updateActiveIndex(),t.updateSlidesClasses()),r.freeMode&&(0===n.velocities.length&&n.velocities.push({position:i[t.isHorizontal()?"startX":"startY"],time:n.touchStartTime}),n.velocities.push({position:i[t.isHorizontal()?"currentX":"currentY"],time:M.now()})),t.updateProgress(n.currentTranslate),t.setTranslate(n.currentTranslate))}function q(e){const t=this,n=t.touchEventsData,{params:r,touches:i,rtlTranslate:o,$wrapperEl:s,slidesGrid:a,snapGrid:l}=t;let c=e;if(c.originalEvent&&(c=c.originalEvent),n.allowTouchCallbacks&&t.emit("touchEnd",c),n.allowTouchCallbacks=!1,!n.isTouched)return n.isMoved&&r.grabCursor&&t.setGrabCursor(!1),n.isMoved=!1,void(n.startMoving=!1);r.grabCursor&&n.isMoved&&n.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const u=M.now(),d=u-n.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(c),t.emit("tap",c),d<300&&u-n.lastClickTime>300&&(n.clickTimeout&&clearTimeout(n.clickTimeout),n.clickTimeout=M.nextTick(()=>{t&&!t.destroyed&&t.emit("click",c)},300)),d<300&&u-n.lastClickTime<300&&(n.clickTimeout&&clearTimeout(n.clickTimeout),t.emit("doubleTap",c))),n.lastClickTime=M.now(),M.nextTick(()=>{t.destroyed||(t.allowClick=!0)}),!n.isTouched||!n.isMoved||!t.swipeDirection||0===i.diff||n.currentTranslate===n.startTranslate)return n.isTouched=!1,n.isMoved=!1,void(n.startMoving=!1);let p;if(n.isTouched=!1,n.isMoved=!1,n.startMoving=!1,p=r.followFinger?o?t.translate:-t.translate:-n.currentTranslate,r.freeMode){if(p<-t.minTranslate())return void t.slideTo(t.activeIndex);if(p>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(r.freeModeMomentum){if(n.velocities.length>1){const e=n.velocities.pop(),i=n.velocities.pop(),o=e.position-i.position,s=e.time-i.time;t.velocity=o/s,t.velocity/=2,Math.abs(t.velocity)<r.freeModeMinimumVelocity&&(t.velocity=0),(s>150||M.now()-e.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=r.freeModeMomentumVelocityRatio,n.velocities.length=0;let e=1e3*r.freeModeMomentumRatio;const i=t.velocity*e;let a=t.translate+i;o&&(a=-a);let c,u=!1;const d=20*Math.abs(t.velocity)*r.freeModeMomentumBounceRatio;let p;if(a<t.maxTranslate())r.freeModeMomentumBounce?(a+t.maxTranslate()<-d&&(a=t.maxTranslate()-d),c=t.maxTranslate(),u=!0,n.allowMomentumBounce=!0):a=t.maxTranslate(),r.loop&&r.centeredSlides&&(p=!0);else if(a>t.minTranslate())r.freeModeMomentumBounce?(a-t.minTranslate()>d&&(a=t.minTranslate()+d),c=t.minTranslate(),u=!0,n.allowMomentumBounce=!0):a=t.minTranslate(),r.loop&&r.centeredSlides&&(p=!0);else if(r.freeModeSticky){let e;for(let t=0;t<l.length;t+=1)if(l[t]>-a){e=t;break}a=Math.abs(l[e]-a)<Math.abs(l[e-1]-a)||"next"===t.swipeDirection?l[e]:l[e-1],a=-a}if(p&&t.once("transitionEnd",()=>{t.loopFix()}),0!==t.velocity)e=o?Math.abs((-a-t.translate)/t.velocity):Math.abs((a-t.translate)/t.velocity);else if(r.freeModeSticky)return void t.slideToClosest();r.freeModeMomentumBounce&&u?(t.updateProgress(c),t.setTransition(e),t.setTranslate(a),t.transitionStart(!0,t.swipeDirection),t.animating=!0,s.transitionEnd(()=>{t&&!t.destroyed&&n.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(r.speed),t.setTranslate(c),s.transitionEnd(()=>{t&&!t.destroyed&&t.transitionEnd()}))})):t.velocity?(t.updateProgress(a),t.setTransition(e),t.setTranslate(a),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,s.transitionEnd(()=>{t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(a),t.updateActiveIndex(),t.updateSlidesClasses()}else if(r.freeModeSticky)return void t.slideToClosest();return void((!r.freeModeMomentum||d>=r.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses()))}let f=0,h=t.slidesSizesGrid[0];for(let e=0;e<a.length;e+=r.slidesPerGroup)void 0!==a[e+r.slidesPerGroup]?p>=a[e]&&p<a[e+r.slidesPerGroup]&&(f=e,h=a[e+r.slidesPerGroup]-a[e]):p>=a[e]&&(f=e,h=a[a.length-1]-a[a.length-2]);const v=(p-a[f])/h;if(d>r.longSwipesMs){if(!r.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(v>=r.longSwipesRatio?t.slideTo(f+r.slidesPerGroup):t.slideTo(f)),"prev"===t.swipeDirection&&(v>1-r.longSwipesRatio?t.slideTo(f+r.slidesPerGroup):t.slideTo(f))}else{if(!r.shortSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&t.slideTo(f+r.slidesPerGroup),"prev"===t.swipeDirection&&t.slideTo(f)}}function R(){const e=this,{params:t,el:n}=e;if(n&&0===n.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:r,allowSlidePrev:i,snapGrid:o}=e;if(e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),t.freeMode){const n=Math.min(Math.max(e.translate,e.maxTranslate()),e.minTranslate());e.setTranslate(n),e.updateActiveIndex(),e.updateSlidesClasses(),t.autoHeight&&e.updateAutoHeight()}else e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0);e.autoplay&&e.autoplay.running&&e.autoplay.paused&&e.autoplay.run(),e.allowSlidePrev=i,e.allowSlideNext=r,e.params.watchOverflow&&o!==e.snapGrid&&e.checkOverflow()}function _(e){const t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}var F={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsInverse:!1,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!0,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0};const G={update:L,translate:O,transition:j,slide:H,loop:D,grabCursor:N,manipulation:V,events:{attachEvents:function(){const e=this,{params:t,touchEvents:n,el:r,wrapperEl:i}=e;e.onTouchStart=B.bind(e),e.onTouchMove=$.bind(e),e.onTouchEnd=q.bind(e),e.onClick=_.bind(e);const o="container"===t.touchEventsTarget?r:i,s=!!t.nested;if(k.touch||!k.pointerEvents&&!k.prefixedPointerEvents){if(k.touch){const r=!("touchstart"!==n.start||!k.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};o.addEventListener(n.start,e.onTouchStart,r),o.addEventListener(n.move,e.onTouchMove,k.passiveListener?{passive:!1,capture:s}:s),o.addEventListener(n.end,e.onTouchEnd,r)}(t.simulateTouch&&!I.ios&&!I.android||t.simulateTouch&&!k.touch&&I.ios)&&(o.addEventListener("mousedown",e.onTouchStart,!1),b.addEventListener("mousemove",e.onTouchMove,s),b.addEventListener("mouseup",e.onTouchEnd,!1))}else o.addEventListener(n.start,e.onTouchStart,!1),b.addEventListener(n.move,e.onTouchMove,s),b.addEventListener(n.end,e.onTouchEnd,!1);(t.preventClicks||t.preventClicksPropagation)&&o.addEventListener("click",e.onClick,!0),e.on(I.ios||I.android?"resize orientationchange observerUpdate":"resize observerUpdate",R,!0)},detachEvents:function(){const e=this,{params:t,touchEvents:n,el:r,wrapperEl:i}=e,o="container"===t.touchEventsTarget?r:i,s=!!t.nested;if(k.touch||!k.pointerEvents&&!k.prefixedPointerEvents){if(k.touch){const r=!("onTouchStart"!==n.start||!k.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};o.removeEventListener(n.start,e.onTouchStart,r),o.removeEventListener(n.move,e.onTouchMove,s),o.removeEventListener(n.end,e.onTouchEnd,r)}(t.simulateTouch&&!I.ios&&!I.android||t.simulateTouch&&!k.touch&&I.ios)&&(o.removeEventListener("mousedown",e.onTouchStart,!1),b.removeEventListener("mousemove",e.onTouchMove,s),b.removeEventListener("mouseup",e.onTouchEnd,!1))}else o.removeEventListener(n.start,e.onTouchStart,!1),b.removeEventListener(n.move,e.onTouchMove,s),b.removeEventListener(n.end,e.onTouchEnd,!1);(t.preventClicks||t.preventClicksPropagation)&&o.removeEventListener("click",e.onClick,!0),e.off(I.ios||I.android?"resize orientationchange observerUpdate":"resize observerUpdate",R)}},breakpoints:{setBreakpoint:function(){const e=this,{activeIndex:t,initialized:n,loopedSlides:r=0,params:i}=e,o=i.breakpoints;if(!o||o&&0===Object.keys(o).length)return;const s=e.getBreakpoint(o);if(s&&e.currentBreakpoint!==s){const a=s in o?o[s]:void 0;a&&["slidesPerView","spaceBetween","slidesPerGroup"].forEach(e=>{const t=a[e];void 0!==t&&(a[e]="slidesPerView"!==e||"AUTO"!==t&&"auto"!==t?"slidesPerView"===e?parseFloat(t):parseInt(t,10):"auto")});const l=a||e.originalParams,c=l.direction&&l.direction!==i.direction,u=i.loop&&(l.slidesPerView!==i.slidesPerView||c);c&&n&&e.changeDirection(),M.extend(e.params,l),M.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=s,u&&n&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-r+e.loopedSlides,0,!1)),e.emit("breakpoint",l)}},getBreakpoint:function(e){const t=this;if(!e)return;let n=!1;const r=[];Object.keys(e).forEach(e=>{r.push(e)}),r.sort((e,t)=>parseInt(e,10)-parseInt(t,10));for(let e=0;e<r.length;e+=1){const i=r[e];t.params.breakpointsInverse?i<=C.innerWidth&&(n=i):i>=C.innerWidth&&!n&&(n=i)}return n||"max"}},checkOverflow:{checkOverflow:function(){const e=this,t=e.isLocked;e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),t&&t!==e.isLocked&&(e.isEnd=!1,e.navigation.update())}},classes:{addClasses:function(){const{classNames:e,params:t,rtl:n,$el:r}=this,i=[];i.push("initialized"),i.push(t.direction),t.freeMode&&i.push("free-mode"),k.flexbox||i.push("no-flexbox"),t.autoHeight&&i.push("autoheight"),n&&i.push("rtl"),t.slidesPerColumn>1&&i.push("multirow"),I.android&&i.push("android"),I.ios&&i.push("ios"),(A.isIE||A.isEdge)&&(k.pointerEvents||k.prefixedPointerEvents)&&i.push(`wp8-${t.direction}`),i.forEach(n=>{e.push(t.containerModifierClass+n)}),r.addClass(e.join(" "))},removeClasses:function(){const{$el:e,classNames:t}=this;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,n,r,i,o){let s;function a(){o&&o()}e.complete&&i?a():t?(s=new C.Image,s.onload=a,s.onerror=a,r&&(s.sizes=r),n&&(s.srcset=n),t&&(s.src=t)):a()},preloadImages:function(){const e=this;function t(){null!=e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(let n=0;n<e.imagesToLoad.length;n+=1){const r=e.imagesToLoad[n];e.loadImage(r,r.currentSrc||r.getAttribute("src"),r.srcset||r.getAttribute("srcset"),r.sizes||r.getAttribute("sizes"),!0,t)}}}},W={};class U extends P{constructor(...e){let t,n;1===e.length&&e[0].constructor&&e[0].constructor===Object?n=e[0]:[t,n]=e,n||(n={}),n=M.extend({},n),t&&!n.el&&(n.el=t),super(n),Object.keys(G).forEach(e=>{Object.keys(G[e]).forEach(t=>{U.prototype[t]||(U.prototype[t]=G[e][t])})});const r=this;void 0===r.modules&&(r.modules={}),Object.keys(r.modules).forEach(e=>{const t=r.modules[e];if(t.params){const e=Object.keys(t.params)[0],r=t.params[e];if("object"!=typeof r||null===r)return;if(!(e in n&&"enabled"in r))return;!0===n[e]&&(n[e]={enabled:!0}),"object"!=typeof n[e]||"enabled"in n[e]||(n[e].enabled=!0),n[e]||(n[e]={enabled:!1})}});const i=M.extend({},F);r.useModulesParams(i),r.params=M.extend({},i,W,n),r.originalParams=M.extend({},r.params),r.passedParams=M.extend({},n),r.$=S;const o=S(r.params.el);if(t=o[0],!t)return;if(o.length>1){const e=[];return o.each((t,r)=>{const i=M.extend({},n,{el:r});e.push(new U(i))}),e}t.swiper=r,o.data("swiper",r);const s=o.children(`.${r.params.wrapperClass}`);return M.extend(r,{$el:o,el:t,$wrapperEl:s,wrapperEl:s[0],classNames:[],slides:S(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===r.params.direction,isVertical:()=>"vertical"===r.params.direction,rtl:"rtl"===t.dir.toLowerCase()||"rtl"===o.css("direction"),rtlTranslate:"horizontal"===r.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===o.css("direction")),wrongRTL:"-webkit-box"===s.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:r.params.allowSlideNext,allowSlidePrev:r.params.allowSlidePrev,touchEvents:function(){const e=["touchstart","touchmove","touchend"];let t=["mousedown","mousemove","mouseup"];return k.pointerEvents?t=["pointerdown","pointermove","pointerup"]:k.prefixedPointerEvents&&(t=["MSPointerDown","MSPointerMove","MSPointerUp"]),r.touchEventsTouch={start:e[0],move:e[1],end:e[2]},r.touchEventsDesktop={start:t[0],move:t[1],end:t[2]},k.touch||!r.params.simulateTouch?r.touchEventsTouch:r.touchEventsDesktop}(),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video",lastClickTime:M.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:r.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),r.useModules(),r.params.init&&r.init(),r}slidesPerViewDynamic(){const{params:e,slides:t,slidesGrid:n,size:r,activeIndex:i}=this;let o=1;if(e.centeredSlides){let e,n=t[i].swiperSlideSize;for(let s=i+1;s<t.length;s+=1)t[s]&&!e&&(n+=t[s].swiperSlideSize,o+=1,n>r&&(e=!0));for(let s=i-1;s>=0;s-=1)t[s]&&!e&&(n+=t[s].swiperSlideSize,o+=1,n>r&&(e=!0))}else for(let e=i+1;e<t.length;e+=1)n[e]-n[i]<r&&(o+=1);return o}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:n}=e;function r(){const t=e.rtlTranslate?-1*e.translate:e.translate,n=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(n),e.updateActiveIndex(),e.updateSlidesClasses()}let i;n.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(r(),e.params.autoHeight&&e.updateAutoHeight()):(i=("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0),i||r()),n.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}changeDirection(e,t=!0){const n=this,r=n.params.direction;return e||(e="horizontal"===r?"vertical":"horizontal"),e===r||"horizontal"!==e&&"vertical"!==e||(n.$el.removeClass(`${n.params.containerModifierClass}${r} wp8-${r}`).addClass(`${n.params.containerModifierClass}${e}`),(A.isIE||A.isEdge)&&(k.pointerEvents||k.prefixedPointerEvents)&&n.$el.addClass(`${n.params.containerModifierClass}wp8-${e}`),n.params.direction=e,n.slides.each((t,n)=>{"vertical"===e?n.style.width="":n.style.height=""}),n.emit("changeDirection"),t&&n.update()),n}init(){const e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))}destroy(e=!0,t=!0){const n=this,{params:r,$el:i,$wrapperEl:o,slides:s}=n;return void 0===n.params||n.destroyed||(n.emit("beforeDestroy"),n.initialized=!1,n.detachEvents(),r.loop&&n.loopDestroy(),t&&(n.removeClasses(),i.removeAttr("style"),o.removeAttr("style"),s&&s.length&&s.removeClass([r.slideVisibleClass,r.slideActiveClass,r.slideNextClass,r.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")),n.emit("destroy"),Object.keys(n.eventsListeners).forEach(e=>{n.off(e)}),!1!==e&&(n.$el[0].swiper=null,n.$el.data("swiper",null),M.deleteProps(n)),n.destroyed=!0),null}static extendDefaults(e){M.extend(W,e)}static get extendedDefaults(){return W}static get defaults(){return F}static get Class(){return P}static get $(){return S}}var X={name:"device",proto:{device:I},static:{device:I}},Y={name:"support",proto:{support:k},static:{support:k}},K={name:"browser",proto:{browser:A},static:{browser:A}},J={name:"resize",create(){const e=this;M.extend(e,{resize:{resizeHandler(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init(){C.addEventListener("resize",this.resize.resizeHandler),C.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy(){C.removeEventListener("resize",this.resize.resizeHandler),C.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}};const Q={func:C.MutationObserver||C.WebkitMutationObserver,attach(e,t={}){const n=this,r=new(0,Q.func)(e=>{if(1===e.length)return void n.emit("observerUpdate",e[0]);const t=function(){n.emit("observerUpdate",e[0])};C.requestAnimationFrame?C.requestAnimationFrame(t):C.setTimeout(t,0)});r.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),n.observer.observers.push(r)},init(){const e=this;if(k.observer&&e.params.observer){if(e.params.observeParents){const t=e.$el.parents();for(let n=0;n<t.length;n+=1)e.observer.attach(t[n])}e.observer.attach(e.$el[0],{childList:e.params.observeSlideChildren}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy(){this.observer.observers.forEach(e=>{e.disconnect()}),this.observer.observers=[]}};var Z={name:"observer",params:{observer:!1,observeParents:!1,observeSlideChildren:!1},create(){M.extend(this,{observer:{init:Q.init.bind(this),attach:Q.attach.bind(this),destroy:Q.destroy.bind(this),observers:[]}})},on:{init(){this.observer.init()},destroy(){this.observer.destroy()}}};const ee={lastScrollTime:M.now(),event:C.navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){let e="onwheel"in b;if(!e){const t=b.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&b.implementation&&b.implementation.hasFeature&&!0!==b.implementation.hasFeature("","")&&(e=b.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel",normalize(e){let t=0,n=0,r=0,i=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),r=10*t,i=10*n,"deltaY"in e&&(i=e.deltaY),"deltaX"in e&&(r=e.deltaX),(r||i)&&e.deltaMode&&(1===e.deltaMode?(r*=40,i*=40):(r*=800,i*=800)),r&&!t&&(t=r<1?-1:1),i&&!n&&(n=i<1?-1:1),{spinX:t,spinY:n,pixelX:r,pixelY:i}},handleMouseEnter(){this.mouseEntered=!0},handleMouseLeave(){this.mouseEntered=!1},handle(e){let t=e;const n=this,r=n.params.mousewheel;if(!n.mouseEntered&&!r.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);let i=0;const o=n.rtlTranslate?-1:1,s=ee.normalize(t);if(r.forceToAxis)if(n.isHorizontal()){if(!(Math.abs(s.pixelX)>Math.abs(s.pixelY)))return!0;i=s.pixelX*o}else{if(!(Math.abs(s.pixelY)>Math.abs(s.pixelX)))return!0;i=s.pixelY}else i=Math.abs(s.pixelX)>Math.abs(s.pixelY)?-s.pixelX*o:-s.pixelY;if(0===i)return!0;if(r.invert&&(i=-i),n.params.freeMode){n.params.loop&&n.loopFix();let e=n.getTranslate()+i*r.sensitivity;const o=n.isBeginning,s=n.isEnd;if(e>=n.minTranslate()&&(e=n.minTranslate()),e<=n.maxTranslate()&&(e=n.maxTranslate()),n.setTransition(0),n.setTranslate(e),n.updateProgress(),n.updateActiveIndex(),n.updateSlidesClasses(),(!o&&n.isBeginning||!s&&n.isEnd)&&n.updateSlidesClasses(),n.params.freeModeSticky&&(clearTimeout(n.mousewheel.timeout),n.mousewheel.timeout=M.nextTick(()=>{n.slideToClosest()},300)),n.emit("scroll",t),n.params.autoplay&&n.params.autoplayDisableOnInteraction&&n.autoplay.stop(),e===n.minTranslate()||e===n.maxTranslate())return!0}else{if(M.now()-n.mousewheel.lastScrollTime>60)if(i<0)if(n.isEnd&&!n.params.loop||n.animating){if(r.releaseOnEdges)return!0}else n.slideNext(),n.emit("scroll",t);else if(n.isBeginning&&!n.params.loop||n.animating){if(r.releaseOnEdges)return!0}else n.slidePrev(),n.emit("scroll",t);n.mousewheel.lastScrollTime=(new C.Date).getTime()}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},enable(){const e=this;if(!ee.event)return!1;if(e.mousewheel.enabled)return!1;let t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=S(e.params.mousewheel.eventsTarged)),t.on("mouseenter",e.mousewheel.handleMouseEnter),t.on("mouseleave",e.mousewheel.handleMouseLeave),t.on(ee.event,e.mousewheel.handle),e.mousewheel.enabled=!0,!0},disable(){const e=this;if(!ee.event)return!1;if(!e.mousewheel.enabled)return!1;let t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=S(e.params.mousewheel.eventsTarged)),t.off(ee.event,e.mousewheel.handle),e.mousewheel.enabled=!1,!0}};const te={update(){const e=this,t=e.params.navigation;if(e.params.loop)return;const{$nextEl:n,$prevEl:r}=e.navigation;r&&r.length>0&&(e.isBeginning?r.addClass(t.disabledClass):r.removeClass(t.disabledClass),r[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass)),n&&n.length>0&&(e.isEnd?n.addClass(t.disabledClass):n.removeClass(t.disabledClass),n[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass))},onPrevClick(e){e.preventDefault(),this.isBeginning&&!this.params.loop||this.slidePrev()},onNextClick(e){e.preventDefault(),this.isEnd&&!this.params.loop||this.slideNext()},init(){const e=this,t=e.params.navigation;if(!t.nextEl&&!t.prevEl)return;let n,r;t.nextEl&&(n=S(t.nextEl),e.params.uniqueNavElements&&"string"==typeof t.nextEl&&n.length>1&&1===e.$el.find(t.nextEl).length&&(n=e.$el.find(t.nextEl))),t.prevEl&&(r=S(t.prevEl),e.params.uniqueNavElements&&"string"==typeof t.prevEl&&r.length>1&&1===e.$el.find(t.prevEl).length&&(r=e.$el.find(t.prevEl))),n&&n.length>0&&n.on("click",e.navigation.onNextClick),r&&r.length>0&&r.on("click",e.navigation.onPrevClick),M.extend(e.navigation,{$nextEl:n,nextEl:n&&n[0],$prevEl:r,prevEl:r&&r[0]})},destroy(){const e=this,{$nextEl:t,$prevEl:n}=e.navigation;t&&t.length&&(t.off("click",e.navigation.onNextClick),t.removeClass(e.params.navigation.disabledClass)),n&&n.length&&(n.off("click",e.navigation.onPrevClick),n.removeClass(e.params.navigation.disabledClass))}};var ne={name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create(){M.extend(this,{navigation:{init:te.init.bind(this),update:te.update.bind(this),destroy:te.destroy.bind(this),onNextClick:te.onNextClick.bind(this),onPrevClick:te.onPrevClick.bind(this)}})},on:{init(){this.navigation.init(),this.navigation.update()},toEdge(){this.navigation.update()},fromEdge(){this.navigation.update()},destroy(){this.navigation.destroy()},click(e){const t=this,{$nextEl:n,$prevEl:r}=t.navigation;if(t.params.navigation.hideOnClick&&!S(e.target).is(r)&&!S(e.target).is(n)){let e;n?e=n.hasClass(t.params.navigation.hiddenClass):r&&(e=r.hasClass(t.params.navigation.hiddenClass)),!0===e?t.emit("navigationShow",t):t.emit("navigationHide",t),n&&n.toggleClass(t.params.navigation.hiddenClass),r&&r.toggleClass(t.params.navigation.hiddenClass)}}}};const re={update(){const e=this,t=e.rtl,n=e.params.pagination;if(!n.el||!e.pagination.el||!e.pagination.$el||0===e.pagination.$el.length)return;const r=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,i=e.pagination.$el;let o;const s=e.params.loop?Math.ceil((r-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?(o=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup),o>r-1-2*e.loopedSlides&&(o-=r-2*e.loopedSlides),o>s-1&&(o-=s),o<0&&"bullets"!==e.params.paginationType&&(o=s+o)):o=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===n.type&&e.pagination.bullets&&e.pagination.bullets.length>0){const r=e.pagination.bullets;let s,a,l;if(n.dynamicBullets&&(e.pagination.bulletSize=r.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),i.css(e.isHorizontal()?"width":"height",`${e.pagination.bulletSize*(n.dynamicMainBullets+4)}px`),n.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=o-e.previousIndex,e.pagination.dynamicBulletIndex>n.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=n.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),s=o-e.pagination.dynamicBulletIndex,a=s+(Math.min(r.length,n.dynamicMainBullets)-1),l=(a+s)/2),r.removeClass(`${n.bulletActiveClass} ${n.bulletActiveClass}-next ${n.bulletActiveClass}-next-next ${n.bulletActiveClass}-prev ${n.bulletActiveClass}-prev-prev ${n.bulletActiveClass}-main`),i.length>1)r.each((e,t)=>{const r=S(t),i=r.index();i===o&&r.addClass(n.bulletActiveClass),n.dynamicBullets&&(i>=s&&i<=a&&r.addClass(`${n.bulletActiveClass}-main`),i===s&&r.prev().addClass(`${n.bulletActiveClass}-prev`).prev().addClass(`${n.bulletActiveClass}-prev-prev`),i===a&&r.next().addClass(`${n.bulletActiveClass}-next`).next().addClass(`${n.bulletActiveClass}-next-next`))});else{if(r.eq(o).addClass(n.bulletActiveClass),n.dynamicBullets){const e=r.eq(s),t=r.eq(a);for(let e=s;e<=a;e+=1)r.eq(e).addClass(`${n.bulletActiveClass}-main`);e.prev().addClass(`${n.bulletActiveClass}-prev`).prev().addClass(`${n.bulletActiveClass}-prev-prev`),t.next().addClass(`${n.bulletActiveClass}-next`).next().addClass(`${n.bulletActiveClass}-next-next`)}}if(n.dynamicBullets){const i=Math.min(r.length,n.dynamicMainBullets+4),o=(e.pagination.bulletSize*i-e.pagination.bulletSize)/2-l*e.pagination.bulletSize,s=t?"right":"left";r.css(e.isHorizontal()?s:"top",`${o}px`)}}if("fraction"===n.type&&(i.find(`.${n.currentClass}`).text(n.formatFractionCurrent(o+1)),i.find(`.${n.totalClass}`).text(n.formatFractionTotal(s))),"progressbar"===n.type){let t;t=n.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";const r=(o+1)/s;let a=1,l=1;"horizontal"===t?a=r:l=r,i.find(`.${n.progressbarFillClass}`).transform(`translate3d(0,0,0) scaleX(${a}) scaleY(${l})`).transition(e.params.speed)}"custom"===n.type&&n.renderCustom?(i.html(n.renderCustom(e,o+1,s)),e.emit("paginationRender",e,i[0])):e.emit("paginationUpdate",e,i[0]),i[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](n.lockClass)},render(){const e=this,t=e.params.pagination;if(!t.el||!e.pagination.el||!e.pagination.$el||0===e.pagination.$el.length)return;const n=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,r=e.pagination.$el;let i="";if("bullets"===t.type){const o=e.params.loop?Math.ceil((n-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;for(let n=0;n<o;n+=1)t.renderBullet?i+=t.renderBullet.call(e,n,t.bulletClass):i+=`<${t.bulletElement} class="${t.bulletClass}"></${t.bulletElement}>`;r.html(i),e.pagination.bullets=r.find(`.${t.bulletClass}`)}"fraction"===t.type&&(i=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):`<span class="${t.currentClass}"></span>`+" / "+`<span class="${t.totalClass}"></span>`,r.html(i)),"progressbar"===t.type&&(i=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):`<span class="${t.progressbarFillClass}"></span>`,r.html(i)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])},init(){const e=this,t=e.params.pagination;if(!t.el)return;let n=S(t.el);0!==n.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&n.length>1&&1===e.$el.find(t.el).length&&(n=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&n.addClass(t.clickableClass),n.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(n.addClass(`${t.modifierClass}${t.type}-dynamic`),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&n.addClass(t.progressbarOppositeClass),t.clickable&&n.on("click",`.${t.bulletClass}`,(function(t){t.preventDefault();let n=S(this).index()*e.params.slidesPerGroup;e.params.loop&&(n+=e.loopedSlides),e.slideTo(n)})),M.extend(e.pagination,{$el:n,el:n[0]}))},destroy(){const e=this.params.pagination;if(!e.el||!this.pagination.el||!this.pagination.$el||0===this.pagination.$el.length)return;const t=this.pagination.$el;t.removeClass(e.hiddenClass),t.removeClass(e.modifierClass+e.type),this.pagination.bullets&&this.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&t.off("click",`.${e.bulletClass}`)}};var ie={name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create(){M.extend(this,{pagination:{init:re.init.bind(this),render:re.render.bind(this),update:re.update.bind(this),destroy:re.destroy.bind(this),dynamicBulletIndex:0}})},on:{init(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange(){const e=this;(e.params.loop||void 0===e.snapIndex)&&e.pagination.update()},snapIndexChange(){const e=this;e.params.loop||e.pagination.update()},slidesLengthChange(){const e=this;e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange(){const e=this;e.params.loop||(e.pagination.render(),e.pagination.update())},destroy(){this.pagination.destroy()},click(e){const t=this;if(t.params.pagination.el&&t.params.pagination.hideOnClick&&t.pagination.$el.length>0&&!S(e.target).hasClass(t.params.pagination.bulletClass)){!0===t.pagination.$el.hasClass(t.params.pagination.hiddenClass)?t.emit("paginationShow",t):t.emit("paginationHide",t),t.pagination.$el.toggleClass(t.params.pagination.hiddenClass)}}}};const oe=[X,Y,K,J,Z];void 0===U.use&&(U.use=U.Class.use,U.installModule=U.Class.installModule),U.use(oe),U.use([ne,ie]);var se=function(e,t){var n=Object.assign({slidesPerView:1,breakpointsInverse:!0,spaceBetween:e.dataset.spacebetween?parseInt(e.dataset.spacebetween,10):0,pagination:{el:e.querySelector(".js-pagination")?e.querySelector(".js-pagination"):null},navigation:{nextEl:e.querySelector(".js-next")?e.querySelector(".js-next"):null,prevEl:e.querySelector(".js-prev")?e.querySelector(".js-prev"):null}},t);e.dataset.pagination&&(n.pagination.el=document.querySelector(e.dataset.pagination)),e.dataset.next&&(n.navigation.nextEl=e.dataset.next),e.dataset.prev&&(n.navigation.prevEl=e.dataset.prev),e.slider=new U(e,n)};i(".js-carousel-4",(function(e){se(e,{breakpoints:{992:{slidesPerView:4},768:{slidesPerView:3},576:{slidesPerView:2}}})})),i(".js-select-slider",(function(e){se(e,{autoHeight:!0,breakpoints:{1170:{slidesPerView:3},992:{slidesPerView:2},768:{slidesPerView:1}}})})),i(".js-client-slider",(function(e){se(e,{loop:!0,breakpoints:{1170:{slidesPerView:4},992:{slidesPerView:3},768:{slidesPerView:2},576:{slidesPerView:1}}})})),i(".js-rewievs-slider",(function(e){se(e,{autoHeight:!0})})),i(".js-target-next",(function(e){if(e.dataset.target){var t=document.querySelector(e.dataset.target);e.slider=t.slider,e.onclick=function(t){t.preventDefault(),e.slider.slideNext()}}})),i(".js-target-prev",(function(e){if(e.dataset.target){var t=document.querySelector(e.dataset.target);e.slider=t.slider,e.onclick=function(t){t.preventDefault(),e.slider.slidePrev()}}})),i(".gallery-top",(function(e){var t=e.nextElementSibling;e.slider=new U(e,{spaceBetween:10,navigation:{nextEl:".js-card-next",prevEl:".js-card-prev"},thumbs:{swiper:{el:t,spaceBetween:10,slidesPerView:5,freeMode:!0,watchSlidesVisibility:!0,watchSlidesProgress:!0,navigation:{nextEl:".js-cardthumbs-next",prevEl:".js-cardthumbs-prev"}}}})}));n(169)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2V4cG9ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dldC1idWlsdC1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLXB1cmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZnVuY3Rpb24tYmluZC1jb250ZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mb3JtLXNlcmlhbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC1nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luc3BlY3Qtc291cmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9oaWRkZW4ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZW51bS1idWcta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2llOC1kb20tZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQtc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jaGVjay1jb3JyZWN0bmVzcy1vZi1pdGVyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS1wcm9taXNlLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90YXNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtaXMtaW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcHJvbWlzZS1yZXNvbHZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9idWlsZFVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2RlZmF1bHRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvbWVyZ2VDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZvci1lYWNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1zeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1zcGVjaWVzLWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtaXMtc3RyaWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hcnJheS1mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtdG8tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4taW5zdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL21pY3JvdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbmdpbmUtdjgtdmVyc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc3RyaW5nLW11bHRpYnl0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3JyZWN0LXByb3RvdHlwZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXNuZXh0LmFnZ3JlZ2F0ZS1lcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5wcm9taXNlLmFsbC1zZXR0bGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMucHJvbWlzZS5hbGwtc2V0dGxlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5wcm9taXNlLmFueS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5wcm9taXNlLnRyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jdXN0b20tZXZlbnQtcG9seWZpbGwvY3VzdG9tLWV2ZW50LXBvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9wb2x5ZmlsbC9jbG9zZXN0LXBvbHlmaWxsLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy9zdmctc3ByaXRlLmpzIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvc3ZnLXNwcml0ZSBzeW5jIG5vbnJlY3Vyc2l2ZSBcXC5zdmckIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvc3ZnLXNwcml0ZS9hcnJvdy1uZXh0LWljb24uc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvc3ZnLXNwcml0ZS9hcnJvdy1wcmV2LWljb24uc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvc3ZnLXNwcml0ZS9jYWxlbmRhci1pY29uLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3N2Zy1zcHJpdGUvY2FyLWljb24uc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvc3ZnLXNwcml0ZS9jaGVja2VkLWljb24uc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvc3ZnLXNwcml0ZS9jaGVja2xpc3QtaWNvbi5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9zdmctc3ByaXRlL2ZyYW1lLWljb24uc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvc3ZnLXNwcml0ZS9pZC1jYXJkLWljb24uc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvc3ZnLXNwcml0ZS9sb2dvLWljb24uc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvc3ZnLXNwcml0ZS9tYWlsLWljb24uc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvc3ZnLXNwcml0ZS9tYXAtaWNvbi5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9zdmctc3ByaXRlL3Bhc3Nwb3J0LWljb24uc3ZnIiwid2VicGFjazovLy8uL3NyYy9pbWFnZXMvc3ZnLXNwcml0ZS9waW4taWNvbi5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9zdmctc3ByaXRlL3NtYXJ0cGhvbmUtY2FsbC1pY29uLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3N2Zy1zcHJpdGUvc3BhcmUtaWNvbi5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9zdmctc3ByaXRlL3N0b3B3YXRjaC1pY29uLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3N2Zy1zcHJpdGUvc3VwcG9ydC1pY29uLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3N2Zy1zcHJpdGUvdHJhc3Nlci1pY29uLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3N2Zy1zcHJpdGUvdHJ1Y2staWNvbi5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2ltYWdlcy9zdmctc3ByaXRlL3dheS1pY29uLnN2ZyIsIndlYnBhY2s6Ly8vLi9zcmMvaW1hZ2VzL3N2Zy1zcHJpdGUvd2VpZ2hpbmctaWNvbi5zdmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2NvbXBvbmVudC9tZW51LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYXhpb3MuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2Rpc3BhdGNoUmVxdWVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvdHJhbnNmb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9zZXR0bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL2VuaGFuY2VFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvY29tYmluZVVSTHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbFRva2VuLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9zcHJlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbnRyb2xsZXIvY2FsY3VsYXRvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvY29udHJvbGxlci9pbnB1dC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdHMvQXllcHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL3V0aWxzL2VsZW1lbnRzLnRzIiwid2VicGFjazovLy8uL3NyYy90cy9wbHVnaW4vbW9kYWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL3BsdWdpbi9yZXF1ZXN0LnRzIiwid2VicGFjazovLy8uL3NyYy90cy9BcHAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbnRyb2xsZXIvbW9kYWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RzL2NvbnRyb2xsZXIvZm9ybS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3NyLXdpbmRvdy9kaXN0L3Nzci13aW5kb3cuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9kb203L2Rpc3QvZG9tNy5tb2R1bGFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zd2lwZXIvZGlzdC9qcy9zd2lwZXIuZXNtLmpzIiwid2VicGFjazovLy8uL3NyYy90cy9jb21wb25lbnQvc2xpZGVyLnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZmFjdG9yeSIsIlNwcml0ZVN5bWJvbCIsInJlZiIsImlkIiwidmlld0JveCIsImNvbnRlbnQiLCJ0aGlzIiwiY3JlYXRlQ29tbW9uanNNb2R1bGUiLCJmbiIsInN0cmluZ2lmeSIsInRvU3RyaW5nIiwiZGVzdHJveSIsInRoaXMkMSIsImZvckVhY2giLCJwcm9wIiwid2luZG93IiwiZ2xvYmFsIiwic2VsZiIsImRlZXBtZXJnZSIsImlzTWVyZ2VhYmxlT2JqZWN0IiwidmFsIiwiY2xvbmVJZk5lY2Vzc2FyeSIsIm9wdGlvbnNBcmd1bWVudCIsImNsb25lIiwiQXJyYXkiLCJpc0FycmF5IiwiZGVmYXVsdEFycmF5TWVyZ2UiLCJ0YXJnZXQiLCJzb3VyY2UiLCJkZXN0aW5hdGlvbiIsInNsaWNlIiwiZSIsImluZGV4T2YiLCJwdXNoIiwiYXJyYXkiLCJhcnJheU1lcmdlIiwia2V5cyIsIm1lcmdlT2JqZWN0IiwiYWxsIiwibGVuZ3RoIiwiRXJyb3IiLCJyZWR1Y2UiLCJwcmV2IiwibmV4dCIsIm5hbWVzcGFjZXNfMSIsImRlZmF1bHQiLCJzdmciLCJ1cmkiLCJ4bGluayIsImRlZmF1bHRBdHRycyIsIndyYXBJblN2Z1N0cmluZyIsImF0dHJpYnV0ZXMiLCJhdHRycyIsIm1hcCIsImF0dHIiLCJyZXBsYWNlIiwiam9pbiIsIm9iamVjdFRvQXR0cnNTdHJpbmciLCJTcHJpdGVTeW1ib2wkJDEiLCJCcm93c2VyU3ByaXRlU3ltYm9sIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfX3Byb3RvX18iLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZUFjY2Vzc29ycyIsImlzTW91bnRlZCIsIm5vZGUiLCJjcmVhdGVGcm9tRXhpc3RpbmdOb2RlIiwiZ2V0QXR0cmlidXRlIiwib3V0ZXJIVE1MIiwidW5tb3VudCIsIm1vdW50IiwibW91bnRUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJyZW5kZXIiLCJhcHBlbmRDaGlsZCIsImhhc0ltcG9ydE5vZGUiLCJpbXBvcnROb2RlIiwiZG9jIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwiZG9jdW1lbnRFbGVtZW50IiwicGFyc2UiLCJjaGlsZE5vZGVzIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiZGVmaW5lUHJvcGVydGllcyIsIm9iaiIsInN2ZyQxIiwieGxpbmskMSIsImRlZmF1bHRDb25maWciLCJzdHlsZSIsIlNwcml0ZSIsImNvbmZpZyIsInN5bWJvbHMiLCJhZGQiLCJzeW1ib2wiLCJleGlzdGluZyIsImZpbmQiLCJyZW1vdmUiLCJzcGxpY2UiLCJmaWx0ZXIiLCJoYXMiLCJzdHJpbmdpZmllZFN5bWJvbHMiLCJkZWZhdWx0Q29uZmlnJDEiLCJhdXRvQ29uZmlndXJlIiwibW91bnRUbyIsInN5bmNVcmxzV2l0aEJhc2VUYWciLCJsaXN0ZW5Mb2NhdGlvbkNoYW5nZUV2ZW50IiwibG9jYXRpb25DaGFuZ2VFdmVudCIsImxvY2F0aW9uQ2hhbmdlQW5ndWxhckVtaXR0ZXIiLCJ1c2FnZXNUb1VwZGF0ZSIsIm1vdmVHcmFkaWVudHNPdXRzaWRlU3ltYm9sIiwiYXJyYXlGcm9tIiwiYXJyYXlMaWtlIiwidWEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJicm93c2VyIiwiaXNDaHJvbWUiLCJ0ZXN0IiwiaXNGaXJlZm94IiwiaXNJRSIsImlzRWRnZSIsImdldFVybFdpdGhvdXRGcmFnbWVudCIsInVybCIsImxvY2F0aW9uIiwiaHJlZiIsInNwbGl0IiwiZXZlbnROYW1lIiwiYW5ndWxhciIsInJ1biIsIiRyb290U2NvcGUiLCIkb24iLCJuZXdVcmwiLCJvbGRVcmwiLCJkYXRhIiwiZXZlbnQiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsImRpc3BhdGNoRXZlbnQiLCJzZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnNlcnRCZWZvcmUiLCJ4TGlua05TIiwic3BlY2lhbFVybENoYXJzUGF0dGVybiIsImVuY29kZXIiLCJtYXRjaCIsImNoYXJDb2RlQXQiLCJ0b1VwcGVyQ2FzZSIsInNwcml0ZSIsImF0dExpc3QiLCJhdHRTZWxlY3RvciIsInVwZGF0ZVVybHMiLCJyZWZlcmVuY2VzIiwic3RhcnRzV2l0aCIsInJlcGxhY2VXaXRoIiwic3RhcnRzV2l0aEVuY29kZWQiLCJyZXBsYWNlV2l0aEVuY29kZWQiLCJub2RlcyIsIm1hdGNoZXIiLCJhY2MiLCJhcnJheWZpZWQiLCJtYXRjaGVkIiwiY29uY2F0Iiwic2VsZWN0QXR0cmlidXRlcyIsImxvY2FsTmFtZSIsInNldEF0dHJpYnV0ZU5TIiwidXBkYXRlUmVmZXJlbmNlcyIsIkV2ZW50cyIsIkJyb3dzZXJTcHJpdGUiLCJTcHJpdGUkJDEiLCJjZmciLCJlbWl0dGVyIiwib24iLCJ0eXBlIiwiaGFuZGxlciIsIm9mZiIsImVtaXQiLCJldnQiLCJfZW1pdHRlciIsIl9hdXRvQ29uZmlndXJlIiwiYmFzZVVybCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiaGFuZGxlTG9jYXRpb25DaGFuZ2UiLCJfaGFuZGxlTG9jYXRpb25DaGFuZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwic3ByaXRlTm9kZSIsInN5bWJvbE5vZGUiLCJ1cGRhdGVkTm9kZXMiLCJ0ZXh0Q29udGVudCIsImRldGFpbCIsImlzTmV3U3ltYm9sIiwiYXR0YWNoIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInByZXBlbmQiLCJtb3VudE5vZGUiLCJ1c2FnZXMiLCJyZWFkeSQxIiwibGlzdGVuZXIiLCJmbnMiLCJoYWNrIiwibG9hZGVkIiwiZG9TY3JvbGwiLCJyZWFkeVN0YXRlIiwic2hpZnQiLCJzZXRUaW1lb3V0IiwibG9hZFNwcml0ZSIsImdldEVsZW1lbnRCeUlkIiwiYm9keSIsImNoZWNrIiwiaXQiLCJNYXRoIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicmVxdWlyZSIsInNoYXJlZCIsInVpZCIsIk5BVElWRV9TWU1CT0wiLCJVU0VfU1lNQk9MX0FTX1VJRCIsIldlbGxLbm93blN5bWJvbHNTdG9yZSIsImNyZWF0ZVdlbGxLbm93blN5bWJvbCIsIndpdGhvdXRTZXR0ZXIiLCJpc1VuZGVmaW5lZCIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsImlzQXJyYXlCdWZmZXIiLCJpc0J1ZmZlciIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJidWZmZXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsInByb2R1Y3QiLCJtZXJnZSIsInJlc3VsdCIsImFzc2lnblZhbHVlIiwiZGVlcE1lcmdlIiwiZXh0ZW5kIiwiYSIsImIiLCJ0aGlzQXJnIiwidHJpbSIsInN0ciIsImV4ZWMiLCJlcnJvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImYiLCJjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkiLCJyZWRlZmluZSIsInNldEdsb2JhbCIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJpc0ZvcmNlZCIsIm9wdGlvbnMiLCJ0YXJnZXRQcm9wZXJ0eSIsInNvdXJjZVByb3BlcnR5IiwiZGVzY3JpcHRvciIsIlRBUkdFVCIsIkdMT0JBTCIsIlNUQVRJQyIsInN0YXQiLCJub1RhcmdldEdldCIsImZvcmNlZCIsInVuZGVmaW5lZCIsInNoYW0iLCJUeXBlRXJyb3IiLCJTdHJpbmciLCJmYWlscyIsIkRFU0NSSVBUT1JTIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJJRThfRE9NX0RFRklORSIsImFuT2JqZWN0IiwidG9QcmltaXRpdmUiLCJuYXRpdmVEZWZpbmVQcm9wZXJ0eSIsIk8iLCJQIiwiQXR0cmlidXRlcyIsInBhdGgiLCJhRnVuY3Rpb24iLCJ2YXJpYWJsZSIsIm5hbWVzcGFjZSIsIm1ldGhvZCIsImluc3BlY3RTb3VyY2UiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiZW5mb3JjZSIsIlRFTVBMQVRFIiwidW5zYWZlIiwic2ltcGxlIiwiYml0bWFwIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJzZXQiLCJOQVRJVkVfV0VBS19NQVAiLCJvYmplY3RIYXMiLCJzaGFyZWRLZXkiLCJoaWRkZW5LZXlzIiwiV2Vha01hcCIsInN0b3JlIiwid21nZXQiLCJ3bWhhcyIsIndtc2V0IiwibWV0YWRhdGEiLCJTVEFURSIsImdldHRlckZvciIsIlRZUEUiLCJzdGF0ZSIsIlByb21pc2VDYXBhYmlsaXR5IiwiQyIsInJlc29sdmUiLCJyZWplY3QiLCJwcm9taXNlIiwiJCRyZXNvbHZlIiwiJCRyZWplY3QiLCJJbmRleGVkT2JqZWN0IiwicmVxdWlyZU9iamVjdENvZXJjaWJsZSIsInRvSW50ZWdlciIsIm1pbiIsImFyZ3VtZW50IiwidGhhdCIsImlzQXJyYXlJdGVyYXRvck1ldGhvZCIsInRvTGVuZ3RoIiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nIiwiUmVzdWx0Iiwic3RvcHBlZCIsIml0ZXJhYmxlIiwiQVNfRU5UUklFUyIsIklTX0lURVJBVE9SIiwiaXRlcmF0b3IiLCJpdGVyRm4iLCJpbmRleCIsInN0ZXAiLCJib3VuZEZ1bmN0aW9uIiwiZG9uZSIsInN0b3AiLCJrX3Jfc3VibWl0dGVyIiwia19yX3N1Y2Nlc3NfY29udHJscyIsImJyYWNrZXRzIiwiaGFzaF9zZXJpYWxpemVyIiwiaGFzaF9hc3NpZ24iLCJiZXR3ZWVuIiwiX3ZhbHVlcyIsInN0cmluZyIsImlzTmFOIiwiY2hpbGRyZW4iLCJSZWdFeHAiLCJwYXJzZV9rZXlzIiwic3RyX3NlcmlhbGl6ZSIsImVuY29kZVVSSUNvbXBvbmVudCIsImZvcm0iLCJoYXNoIiwic2VyaWFsaXplciIsImVsZW1lbnRzIiwicmFkaW9fc3RvcmUiLCJlbGVtZW50IiwiZGlzYWJsZWQiLCJub2RlTmFtZSIsImNoZWNrZWQiLCJlbXB0eSIsInNlbGVjdE9wdGlvbnMiLCJpc1NlbGVjdGVkT3B0aW9ucyIsImoiLCJvcHRpb24iLCJhbGxvd2VkRW1wdHkiLCJoYXNWYWx1ZSIsInNlbGVjdGVkIiwiZyIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwidG9JbmRleGVkT2JqZWN0IiwibmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiaW5wdXQiLCJQUkVGRVJSRURfU1RSSU5HIiwidmFsdWVPZiIsIkVYSVNUUyIsImNyZWF0ZUVsZW1lbnQiLCJmdW5jdGlvblRvU3RyaW5nIiwiY2VpbCIsImZsb29yIiwid2VsbEtub3duU3ltYm9sIiwiVE9fU1RSSU5HX1RBRyIsIlRBRyIsInRvT2JqZWN0IiwiQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIiwiSUVfUFJPVE8iLCJPYmplY3RQcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsImFjdGl2ZVhEb2N1bWVudCIsImVudW1CdWdLZXlzIiwiaHRtbCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJMVCIsIk51bGxQcm90b09iamVjdCIsImRvbWFpbiIsIkFjdGl2ZVhPYmplY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsIndyaXRlIiwiY2xvc2UiLCJ0ZW1wIiwicGFyZW50V2luZG93IiwiTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCIsImRpc3BsYXkiLCJzcmMiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIkYiLCJQcm9wZXJ0aWVzIiwiY2xhc3NvZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiSVNfUFVSRSIsInZlcnNpb24iLCJjb3B5cmlnaHQiLCJwb3N0Zml4IiwicmFuZG9tIiwibmFtZXMiLCJyZXBsYWNlbWVudCIsImZlYXR1cmUiLCJkZXRlY3Rpb24iLCJub3JtYWxpemUiLCJQT0xZRklMTCIsIk5BVElWRSIsInRvTG93ZXJDYXNlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiRU5UUklFUyIsInJldHVybk1ldGhvZCIsIkl0ZXJhdG9ycyIsIklURVJBVE9SIiwiQXJyYXlQcm90b3R5cGUiLCJUT19TVFJJTkdfVEFHX1NVUFBPUlQiLCJjbGFzc29mUmF3IiwiQ09SUkVDVF9BUkdVTUVOVFMiLCJ0YWciLCJ0cnlHZXQiLCJjYWxsZWUiLCJTQUZFX0NMT1NJTkciLCJjYWxsZWQiLCJpdGVyYXRvcldpdGhSZXR1cm4iLCJmcm9tIiwiU0tJUF9DTE9TSU5HIiwiSVRFUkFUSU9OX1NVUFBPUlQiLCJQcm9taXNlIiwiU1BFQ0lFUyIsImRlZmF1bHRDb25zdHJ1Y3RvciIsIlMiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiSVNfSU9TIiwic2V0SW1tZWRpYXRlIiwiY2xlYXIiLCJjbGVhckltbWVkaWF0ZSIsInByb2Nlc3MiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVubmVyIiwicG9zdCIsInBvc3RNZXNzYWdlIiwicHJvdG9jb2wiLCJob3N0IiwiYXJncyIsIm5leHRUaWNrIiwibm93IiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJnZXRCdWlsdEluIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJ4IiwicHJvbWlzZUNhcGFiaWxpdHkiLCIkIiwiY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwic2V0VG9TdHJpbmdUYWciLCJJdGVyYXRvcnNDb3JlIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJCVUdHWV9TQUZBUklfSVRFUkFUT1JTIiwicmV0dXJuVGhpcyIsIkl0ZXJhYmxlIiwiTkFNRSIsIkl0ZXJhdG9yQ29uc3RydWN0b3IiLCJERUZBVUxUIiwiSVNfU0VUIiwiRk9SQ0VEIiwiQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlIiwibWV0aG9kcyIsIktFWSIsImdldEl0ZXJhdGlvbk1ldGhvZCIsIktJTkQiLCJkZWZhdWx0SXRlcmF0b3IiLCJJdGVyYWJsZVByb3RvdHlwZSIsIklOQ09SUkVDVF9WQUxVRVNfTkFNRSIsIm5hdGl2ZUl0ZXJhdG9yIiwiYW55TmF0aXZlSXRlcmF0b3IiLCJlbnRyaWVzIiwidmFsdWVzIiwicHJvdG8iLCJQcm90b3R5cGVPZkFycmF5SXRlcmF0b3JQcm90b3R5cGUiLCJhcnJheUl0ZXJhdG9yIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwic2V0dGVyIiwiQ09SUkVDVF9TRVRURVIiLCJ3Iiwibm9HbG9iYWwiLCJhcnIiLCJnZXRQcm90byIsImNsYXNzMnR5cGUiLCJoYXNPd24iLCJmblRvU3RyaW5nIiwiT2JqZWN0RnVuY3Rpb25TdHJpbmciLCJzdXBwb3J0Iiwibm9kZVR5cGUiLCJpc1dpbmRvdyIsInByZXNlcnZlZFNjcmlwdEF0dHJpYnV0ZXMiLCJub25jZSIsIm5vTW9kdWxlIiwiRE9NRXZhbCIsImNvZGUiLCJzY3JpcHQiLCJ0ZXh0Iiwic2V0QXR0cmlidXRlIiwiaGVhZCIsInRvVHlwZSIsImpRdWVyeSIsImNvbnRleHQiLCJpbml0IiwicnRyaW0iLCJpc0FycmF5TGlrZSIsImpxdWVyeSIsInRvQXJyYXkiLCJudW0iLCJwdXNoU3RhY2siLCJlbGVtcyIsInJldCIsInByZXZPYmplY3QiLCJlYWNoIiwiY2FsbGJhY2siLCJlbGVtIiwiZmlyc3QiLCJlcSIsImxhc3QiLCJsZW4iLCJlbmQiLCJzb3J0IiwiY29weSIsImNvcHlJc0FycmF5IiwiZGVlcCIsImlzUGxhaW5PYmplY3QiLCJleHBhbmRvIiwiaXNSZWFkeSIsIm1zZyIsIm5vb3AiLCJDdG9yIiwiaXNFbXB0eU9iamVjdCIsImdsb2JhbEV2YWwiLCJtYWtlQXJyYXkiLCJyZXN1bHRzIiwiaW5BcnJheSIsInNlY29uZCIsImdyZXAiLCJpbnZlcnQiLCJtYXRjaGVzIiwiY2FsbGJhY2tFeHBlY3QiLCJhcmciLCJndWlkIiwiU2l6emxlIiwiRXhwciIsImdldFRleHQiLCJpc1hNTCIsInRva2VuaXplIiwiY29tcGlsZSIsInNlbGVjdCIsIm91dGVybW9zdENvbnRleHQiLCJzb3J0SW5wdXQiLCJoYXNEdXBsaWNhdGUiLCJzZXREb2N1bWVudCIsImRvY0VsZW0iLCJkb2N1bWVudElzSFRNTCIsInJidWdneVFTQSIsInJidWdneU1hdGNoZXMiLCJjb250YWlucyIsIkRhdGUiLCJwcmVmZXJyZWREb2MiLCJkaXJydW5zIiwiY2xhc3NDYWNoZSIsImNyZWF0ZUNhY2hlIiwidG9rZW5DYWNoZSIsImNvbXBpbGVyQ2FjaGUiLCJub25uYXRpdmVTZWxlY3RvckNhY2hlIiwic29ydE9yZGVyIiwicG9wIiwicHVzaF9uYXRpdmUiLCJsaXN0IiwiYm9vbGVhbnMiLCJ3aGl0ZXNwYWNlIiwiaWRlbnRpZmllciIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJkZXNjZW5kIiwicnBzZXVkbyIsInJpZGVudGlmaWVyIiwibWF0Y2hFeHByIiwicmh0bWwiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJfIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsImZyb21DaGFyQ29kZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsInVubG9hZEhhbmRsZXIiLCJpbkRpc2FibGVkRmllbGRzZXQiLCJhZGRDb21iaW5hdG9yIiwiZGlyIiwiZWxzIiwic2VlZCIsIm5pZCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwidG9TZWxlY3RvciIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwibWFya0Z1bmN0aW9uIiwiYXNzZXJ0IiwiZWwiLCJhZGRIYW5kbGUiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJtYXRjaEluZGV4ZXMiLCJuYW1lc3BhY2VVUkkiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJ0b3AiLCJhdHRhY2hFdmVudCIsImNsYXNzTmFtZSIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJhdHRySWQiLCJnZXRBdHRyaWJ1dGVOb2RlIiwidG1wIiwiaW5uZXJIVE1MIiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJ1bnNoaWZ0IiwiZXhwciIsInNwZWNpZmllZCIsImVzY2FwZSIsInNlbCIsInVuaXF1ZVNvcnQiLCJkdXBsaWNhdGVzIiwiZGV0ZWN0RHVwbGljYXRlcyIsInNvcnRTdGFibGUiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJ3aGF0IiwiZm9yd2FyZCIsIm9mVHlwZSIsInhtbCIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5vZGVJbmRleCIsInN0YXJ0IiwicGFyZW50IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsInNldEZpbHRlcnMiLCJpZHgiLCJ1bm1hdGNoZWQiLCJsYW5nIiwiZWxlbUxhbmciLCJhY3RpdmVFbGVtZW50IiwiaGFzRm9jdXMiLCJ0YWJJbmRleCIsInNlbGVjdGVkSW5kZXgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsInRva2VucyIsImNvbWJpbmF0b3IiLCJiYXNlIiwic2tpcCIsImNoZWNrTm9uRWxlbWVudHMiLCJkb25lTmFtZSIsIm9sZENhY2hlIiwibmV3Q2FjaGUiLCJlbGVtZW50TWF0Y2hlciIsIm1hdGNoZXJzIiwiY29uZGVuc2UiLCJuZXdVbm1hdGNoZWQiLCJtYXBwZWQiLCJzZXRNYXRjaGVyIiwicG9zdEZpbHRlciIsInBvc3RGaW5kZXIiLCJwb3N0U2VsZWN0b3IiLCJwcmVNYXAiLCJwb3N0TWFwIiwicHJlZXhpc3RpbmciLCJjb250ZXh0cyIsIm11bHRpcGxlQ29udGV4dHMiLCJtYXRjaGVySW4iLCJtYXRjaGVyT3V0IiwibWF0Y2hlckZyb21Ub2tlbnMiLCJjaGVja0NvbnRleHQiLCJsZWFkaW5nUmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJ0b2tlbiIsImNvbXBpbGVkIiwiZGVmYXVsdFZhbHVlIiwidW5pcXVlIiwiaXNYTUxEb2MiLCJlc2NhcGVTZWxlY3RvciIsInVudGlsIiwidHJ1bmNhdGUiLCJpcyIsInNpYmxpbmdzIiwicm5lZWRzQ29udGV4dCIsIm5lZWRzQ29udGV4dCIsInJzaW5nbGVUYWciLCJ3aW5ub3ciLCJxdWFsaWZpZXIiLCJub3QiLCJyb290alF1ZXJ5Iiwicm9vdCIsInBhcnNlSFRNTCIsInJlYWR5IiwicnBhcmVudHNwcmV2IiwiZ3VhcmFudGVlZFVuaXF1ZSIsImNvbnRlbnRzIiwic2libGluZyIsInRhcmdldHMiLCJjbG9zZXN0IiwicHJldkFsbCIsImFkZEJhY2siLCJwYXJlbnRzIiwicGFyZW50c1VudGlsIiwibmV4dEFsbCIsIm5leHRVbnRpbCIsInByZXZVbnRpbCIsImNvbnRlbnREb2N1bWVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsIm5vVmFsdWUiLCJmYWlsIiwidGhlbiIsIkNhbGxiYWNrcyIsImZsYWciLCJjcmVhdGVPcHRpb25zIiwiZmlyaW5nIiwibWVtb3J5IiwiZmlyZWQiLCJsb2NrZWQiLCJmaXJpbmdJbmRleCIsImZpcmUiLCJvbmNlIiwic3RvcE9uRmFsc2UiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJwcm9ncmVzcyIsIm5vdGlmeSIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsIm9uUHJvZ3Jlc3MiLCJtYXhEZXB0aCIsImRlcHRoIiwic3BlY2lhbCIsIm1pZ2h0VGhyb3ciLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsImNvbnNvbGUiLCJ3YXJuIiwibWVzc2FnZSIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwiY29tcGxldGVkIiwiY2F0Y2giLCJyZWFkeVdhaXQiLCJ3YWl0IiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsImZjYW1lbENhc2UiLCJsZXR0ZXIiLCJjYW1lbENhc2UiLCJhY2NlcHREYXRhIiwib3duZXIiLCJEYXRhIiwiaGFzRGF0YSIsImRhdGFQcml2IiwiZGF0YVVzZXIiLCJyYnJhY2UiLCJybXVsdGlEYXNoIiwiZGF0YUF0dHIiLCJKU09OIiwiZ2V0RGF0YSIsInJlbW92ZURhdGEiLCJfZGF0YSIsIl9yZW1vdmVEYXRhIiwiZGVxdWV1ZSIsInN0YXJ0TGVuZ3RoIiwiaG9va3MiLCJfcXVldWVIb29rcyIsImNsZWFyUXVldWUiLCJjb3VudCIsInBudW0iLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNBdHRhY2hlZCIsImNvbXBvc2VkIiwiZ2V0Um9vdE5vZGUiLCJpc0hpZGRlbldpdGhpblRyZWUiLCJjc3MiLCJzd2FwIiwib2xkIiwiYWRqdXN0Q1NTIiwidmFsdWVQYXJ0cyIsInR3ZWVuIiwiYWRqdXN0ZWQiLCJzY2FsZSIsIm1heEl0ZXJhdGlvbnMiLCJjdXJyZW50VmFsdWUiLCJpbml0aWFsIiwidW5pdCIsImNzc051bWJlciIsImluaXRpYWxJblVuaXQiLCJkZWZhdWx0RGlzcGxheU1hcCIsImdldERlZmF1bHREaXNwbGF5Iiwic2hvd0hpZGUiLCJzaG93IiwiaGlkZSIsInRvZ2dsZSIsInJjaGVja2FibGVUeXBlIiwicnRhZ05hbWUiLCJyc2NyaXB0VHlwZSIsIndyYXBNYXAiLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJfZGVmYXVsdCIsImdldEFsbCIsInNldEdsb2JhbEV2YWwiLCJyZWZFbGVtZW50cyIsIm9wdGdyb3VwIiwidGJvZHkiLCJ0Zm9vdCIsImNvbGdyb3VwIiwiY2FwdGlvbiIsInRoIiwiZGl2IiwiYnVpbGRGcmFnbWVudCIsInNjcmlwdHMiLCJzZWxlY3Rpb24iLCJpZ25vcmVkIiwid3JhcCIsImF0dGFjaGVkIiwiZnJhZ21lbnQiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiaHRtbFByZWZpbHRlciIsImNyZWF0ZVRleHROb2RlIiwiY2hlY2tDbG9uZSIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsImV4cGVjdFN5bmMiLCJlcnIiLCJzYWZlQWN0aXZlRWxlbWVudCIsInR5cGVzIiwib25lIiwib3JpZ0ZuIiwibGV2ZXJhZ2VOYXRpdmUiLCJub3RBc3luYyIsInNhdmVkIiwiaXNUcmlnZ2VyIiwiZGVsZWdhdGVUeXBlIiwic3RvcFByb3BhZ2F0aW9uIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJ0cmlnZ2VyIiwiRXZlbnQiLCJoYW5kbGVPYmpJbiIsImV2ZW50SGFuZGxlIiwiZXZlbnRzIiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYnV0dG9uIiwiYWRkUHJvcCIsImhvb2siLCJvcmlnaW5hbEV2ZW50IiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsInByb3BzIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJ3aGljaCIsImZvY3VzIiwiYmx1ciIsIm1vdXNlZW50ZXIiLCJtb3VzZWxlYXZlIiwicG9pbnRlcmVudGVyIiwicG9pbnRlcmxlYXZlIiwib3JpZyIsInJlbGF0ZWQiLCJyeGh0bWxUYWciLCJybm9Jbm5lcmh0bWwiLCJyY2hlY2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJmaXhJbnB1dCIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsInZhbHVlSXNGdW5jdGlvbiIsIl9ldmFsVXJsIiwia2VlcERhdGEiLCJjbGVhbkRhdGEiLCJkYXRhQW5kRXZlbnRzIiwiZGVlcERhdGFBbmRFdmVudHMiLCJzcmNFbGVtZW50cyIsImRlc3RFbGVtZW50cyIsImluUGFnZSIsImRldGFjaCIsImFwcGVuZCIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZUNoaWxkIiwiYXBwZW5kVG8iLCJwcmVwZW5kVG8iLCJpbnNlcnRBZnRlciIsInJlcGxhY2VBbGwiLCJvcmlnaW5hbCIsImluc2VydCIsInJudW1ub25weCIsImdldFN0eWxlcyIsIm9wZW5lciIsImdldENvbXB1dGVkU3R5bGUiLCJyYm94U3R5bGUiLCJjdXJDU1MiLCJjb21wdXRlZCIsIndpZHRoIiwibWluV2lkdGgiLCJtYXhXaWR0aCIsImdldFByb3BlcnR5VmFsdWUiLCJwaXhlbEJveFN0eWxlcyIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwiY29tcHV0ZVN0eWxlVGVzdHMiLCJjb250YWluZXIiLCJjc3NUZXh0IiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwicm91bmRQaXhlbE1lYXN1cmVzIiwibWFyZ2luTGVmdCIsInJpZ2h0IiwicGl4ZWxCb3hTdHlsZXNWYWwiLCJib3hTaXppbmdSZWxpYWJsZVZhbCIsInBvc2l0aW9uIiwic2Nyb2xsYm94U2l6ZVZhbCIsIm9mZnNldFdpZHRoIiwibWVhc3VyZSIsInJvdW5kIiwicGFyc2VGbG9hdCIsImJhY2tncm91bmRDbGlwIiwiY2xlYXJDbG9uZVN0eWxlIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbFBvc2l0aW9uIiwicmVsaWFibGVNYXJnaW5MZWZ0Iiwic2Nyb2xsYm94U2l6ZSIsImNzc1ByZWZpeGVzIiwiZW1wdHlTdHlsZSIsInZlbmRvclByb3BzIiwiZmluYWxQcm9wTmFtZSIsImZpbmFsIiwiY3NzUHJvcHMiLCJjYXBOYW1lIiwidmVuZG9yUHJvcE5hbWUiLCJyZGlzcGxheXN3YXAiLCJyY3VzdG9tUHJvcCIsImNzc1Nob3ciLCJ2aXNpYmlsaXR5IiwiY3NzTm9ybWFsVHJhbnNmb3JtIiwibGV0dGVyU3BhY2luZyIsImZvbnRXZWlnaHQiLCJzZXRQb3NpdGl2ZU51bWJlciIsInN1YnRyYWN0IiwibWF4IiwiYm94TW9kZWxBZGp1c3RtZW50IiwiZGltZW5zaW9uIiwiYm94IiwiaXNCb3JkZXJCb3giLCJzdHlsZXMiLCJjb21wdXRlZFZhbCIsImV4dHJhIiwiZGVsdGEiLCJnZXRXaWR0aE9ySGVpZ2h0IiwidmFsdWVJc0JvcmRlckJveCIsIm9mZnNldFByb3AiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiY3NzSG9va3MiLCJvcGFjaXR5Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwic2Nyb2xsYm94U2l6ZUJ1Z2d5IiwibGVmdCIsIm1hcmdpbiIsInBhZGRpbmciLCJib3JkZXIiLCJwcmVmaXgiLCJzdWZmaXgiLCJleHBhbmQiLCJleHBhbmRlZCIsInBhcnRzIiwicHJvcEhvb2tzIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJmeCIsInNjcm9sbFRvcCIsInNjcm9sbExlZnQiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiaGVpZ2h0IiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsInByb3BlcnRpZXMiLCJwcmVmaWx0ZXJzIiwiY3VycmVudFRpbWUiLCJzdGFydFRpbWUiLCJ0d2VlbnMiLCJvcHRzIiwic3BlY2lhbEVhc2luZyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJwcm9wRmlsdGVyIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCJ0d2VlbmVyIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJkYXRhU2hvdyIsInVucXVldWVkIiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJwcmVmaWx0ZXIiLCJzcGVlZCIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJ0aW1lIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsImNoZWNrT24iLCJvcHRTZWxlY3RlZCIsInJhZGlvVmFsdWUiLCJib29sSG9vayIsInJlbW92ZUF0dHIiLCJuVHlwZSIsImF0dHJIb29rcyIsImJvb2wiLCJhdHRyTmFtZXMiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJzdHJpcEFuZENvbGxhcHNlIiwiZ2V0Q2xhc3MiLCJjbGFzc2VzVG9BcnJheSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJwYXJzZUludCIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsInJicmFja2V0IiwickNSTEYiLCJyc3VibWl0dGVyVHlwZXMiLCJyc3VibWl0dGFibGUiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicGFyYW0iLCJ2YWx1ZU9yRnVuY3Rpb24iLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsInRyYW5zcG9ydHMiLCJhbGxUeXBlcyIsIm9yaWdpbkFuY2hvciIsImFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsInN0cnVjdHVyZSIsImRhdGFUeXBlRXhwcmVzc2lvbiIsImRhdGFUeXBlIiwiZGF0YVR5cGVzIiwiaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJqcVhIUiIsImluc3BlY3RlZCIsInNlZWtpbmdUcmFuc3BvcnQiLCJpbnNwZWN0IiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsImFqYXhFeHRlbmQiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImFjdGl2ZSIsImxhc3RNb2RpZmllZCIsImV0YWciLCJpc0xvY2FsIiwicHJvY2Vzc0RhdGEiLCJhc3luYyIsImNvbnRlbnRUeXBlIiwiYWNjZXB0cyIsImpzb24iLCJyZXNwb25zZUZpZWxkcyIsImNvbnZlcnRlcnMiLCJhamF4U2V0dXAiLCJzZXR0aW5ncyIsImFqYXhQcmVmaWx0ZXIiLCJhamF4VHJhbnNwb3J0IiwiYWpheCIsInRyYW5zcG9ydCIsImNhY2hlVVJMIiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwicmVzcG9uc2VIZWFkZXJzIiwidGltZW91dFRpbWVyIiwidXJsQW5jaG9yIiwiZmlyZUdsb2JhbHMiLCJ1bmNhY2hlZCIsImNhbGxiYWNrQ29udGV4dCIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJzdGF0dXNDb2RlIiwicmVxdWVzdEhlYWRlcnMiLCJyZXF1ZXN0SGVhZGVyc05hbWVzIiwic3RyQWJvcnQiLCJnZXRSZXNwb25zZUhlYWRlciIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldFJlcXVlc3RIZWFkZXIiLCJvdmVycmlkZU1pbWVUeXBlIiwibWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhhc0NvbnRlbnQiLCJpZk1vZGlmaWVkIiwiaGVhZGVycyIsImJlZm9yZVNlbmQiLCJzdWNjZXNzIiwic2VuZCIsIm5hdGl2ZVN0YXR1c1RleHQiLCJyZXNwb25zZXMiLCJpc1N1Y2Nlc3MiLCJyZXNwb25zZSIsIm1vZGlmaWVkIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsImFqYXhIYW5kbGVSZXNwb25zZXMiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwiZGF0YUZpbHRlciIsInRocm93cyIsImFqYXhDb252ZXJ0IiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsIndyYXBBbGwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIndyYXBJbm5lciIsImh0bWxJc0Z1bmN0aW9uIiwidW53cmFwIiwidmlzaWJsZSIsIm9mZnNldEhlaWdodCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJ1c2VybmFtZSIsInhockZpZWxkcyIsIm9ubG9hZCIsIm9uZXJyb3IiLCJvbmFib3J0Iiwib250aW1lb3V0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVzcG9uc2VUeXBlIiwicmVzcG9uc2VUZXh0IiwiYmluYXJ5Iiwic2NyaXB0QXR0cnMiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJvZmZzZXQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiX2pRdWVyeSIsIl8kIiwibm9Db25mbGljdCIsInV0aWxzIiwiZW5jb2RlIiwicGFyYW1zU2VyaWFsaXplciIsInNlcmlhbGl6ZWRQYXJhbXMiLCJ0b0lTT1N0cmluZyIsImhhc2htYXJrSW5kZXgiLCJfX0NBTkNFTF9fIiwibm9ybWFsaXplSGVhZGVyTmFtZSIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwic2V0Q29udGVudFR5cGVJZlVuc2V0IiwiYWRhcHRlciIsImRlZmF1bHRzIiwidHJhbnNmb3JtUmVxdWVzdCIsInRyYW5zZm9ybVJlc3BvbnNlIiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJ2YWxpZGF0ZVN0YXR1cyIsImNvbW1vbiIsInNldHRsZSIsImJ1aWxkVVJMIiwiYnVpbGRGdWxsUGF0aCIsInBhcnNlSGVhZGVycyIsImlzVVJMU2FtZU9yaWdpbiIsImNyZWF0ZUVycm9yIiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0IiwiYXV0aCIsIkF1dGhvcml6YXRpb24iLCJidG9hIiwiZnVsbFBhdGgiLCJiYXNlVVJMIiwicmVzcG9uc2VVUkwiLCJ0aW1lb3V0RXJyb3JNZXNzYWdlIiwiY29va2llcyIsInhzcmZWYWx1ZSIsIndpdGhDcmVkZW50aWFscyIsInJlYWQiLCJvbkRvd25sb2FkUHJvZ3Jlc3MiLCJvblVwbG9hZFByb2dyZXNzIiwidXBsb2FkIiwiY2FuY2VsVG9rZW4iLCJjYW5jZWwiLCJlbmhhbmNlRXJyb3IiLCJjb25maWcxIiwiY29uZmlnMiIsInZhbHVlRnJvbUNvbmZpZzJLZXlzIiwibWVyZ2VEZWVwUHJvcGVydGllc0tleXMiLCJkZWZhdWx0VG9Db25maWcyS2V5cyIsImF4aW9zS2V5cyIsIm90aGVyS2V5cyIsIkNhbmNlbCIsIm5hdGl2ZVByb3BlcnR5SXNFbnVtZXJhYmxlIiwiTkFTSE9STl9CVUciLCIxIiwiViIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwiaW50ZXJuYWxPYmplY3RLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRvQWJzb2x1dGVJbmRleCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJmcm9tSW5kZXgiLCJpbmNsdWRlcyIsImludGVnZXIiLCIkZm9yRWFjaCIsImFycmF5TWV0aG9kSXNTdHJpY3QiLCJhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCIsIlNUUklDVF9NRVRIT0QiLCJVU0VTX1RPX0xFTkdUSCIsImNhbGxiYWNrZm4iLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCJzcGVjaWZpY0NyZWF0ZSIsInNvbWUiLCJldmVyeSIsImZpbmRJbmRleCIsIm9yaWdpbmFsQXJyYXkiLCJNRVRIT0RfTkFNRSIsInRocm93ZXIiLCJBQ0NFU1NPUlMiLCJhcmd1bWVudDAiLCJhcmd1bWVudDEiLCJjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24iLCJjcmVhdGVQcm9wZXJ0eSIsImFyZ3VtZW50c0xlbmd0aCIsIm1hcGZuIiwibWFwcGluZyIsIml0ZXJhdG9yTWV0aG9kIiwicHJvcGVydHlLZXkiLCJJbnRlcm5hbCIsIk93blByb21pc2VDYXBhYmlsaXR5IiwiUHJvbWlzZVdyYXBwZXIiLCJuYXRpdmVUaGVuIiwiTmF0aXZlUHJvbWlzZSIsInJlZGVmaW5lQWxsIiwic2V0U3BlY2llcyIsImFuSW5zdGFuY2UiLCJpdGVyYXRlIiwic3BlY2llc0NvbnN0cnVjdG9yIiwidGFzayIsIm1pY3JvdGFzayIsInByb21pc2VSZXNvbHZlIiwiaG9zdFJlcG9ydEVycm9ycyIsIm5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlIiwicGVyZm9ybSIsIlY4X1ZFUlNJT04iLCJQUk9NSVNFIiwic2V0SW50ZXJuYWxTdGF0ZSIsImdldEludGVybmFsUHJvbWlzZVN0YXRlIiwiUHJvbWlzZUNvbnN0cnVjdG9yIiwiJGZldGNoIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiSVNfTk9ERSIsIkRJU1BBVENIX0VWRU5UIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiRmFrZVByb21pc2UiLCJJTkNPUlJFQ1RfSVRFUkFUSU9OIiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0Iiwibm90aWZpZWQiLCJjaGFpbiIsInJlYWN0aW9ucyIsIm9rIiwiZXhpdGVkIiwicmVhY3Rpb24iLCJyZWplY3Rpb24iLCJvbkhhbmRsZVVuaGFuZGxlZCIsImVudGVyIiwiZXhpdCIsIm9uVW5oYW5kbGVkIiwicmVhc29uIiwiaW5pdEV2ZW50IiwiaXNVbmhhbmRsZWQiLCJpbnRlcm5hbFJlamVjdCIsImludGVybmFsUmVzb2x2ZSIsIndyYXBwZXIiLCJleGVjdXRvciIsImZldGNoIiwiY2FwYWJpbGl0eSIsIiRwcm9taXNlUmVzb2x2ZSIsImFscmVhZHlDYWxsZWQiLCJyYWNlIiwiQ09OU1RSVUNUT1JfTkFNRSIsIkNvbnN0cnVjdG9yIiwiZmx1c2giLCJtYWNyb3Rhc2siLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsInF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciIsInF1ZXVlTWljcm90YXNrIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ2ZXJzaW9ucyIsInY4IiwicmVhbCIsIm9uRmluYWxseSIsImNoYXJBdCIsImRlZmluZUl0ZXJhdG9yIiwiaXRlcmF0ZWQiLCJwb2ludCIsIkNPTlZFUlRfVE9fU1RSSU5HIiwic2l6ZSIsImNvZGVBdCIsIm9iamVjdEtleXMiLCJnZXRJbnRlcm5hbEFnZ3JlZ2F0ZUVycm9yU3RhdGUiLCIkQWdncmVnYXRlRXJyb3IiLCJlcnJvcnMiLCJlcnJvcnNBcnJheSIsIkFnZ3JlZ2F0ZUVycm9yIiwiYWxsU2V0dGxlZCIsImFueSIsImFscmVhZHlSZXNvbHZlZCIsImFscmVhZHlSZWplY3RlZCIsIkRPTUl0ZXJhYmxlcyIsIkFycmF5SXRlcmF0b3JNZXRob2RzIiwiQXJyYXlWYWx1ZXMiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiYWRkVG9VbnNjb3BhYmxlcyIsImtpbmQiLCJBcmd1bWVudHMiLCJVTlNDT1BBQkxFUyIsImNlIiwiQ3VzdG9tRXZlbnQiLCJvcmlnUHJldmVudCIsIkVsZW1lbnRQcm90byIsIkVsZW1lbnQiLCJCb29sZWFuIiwicmVxdWlyZUNvbnRleHQiLCJyZXEiLCJ3ZWJwYWNrQ29udGV4dCIsIndlYnBhY2tDb250ZXh0UmVzb2x2ZSIsIiR0YXJnZXQiLCJBeGlvcyIsIm1lcmdlQ29uZmlnIiwiY3JlYXRlSW5zdGFuY2UiLCJpbnN0YW5jZSIsImF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJDYW5jZWxUb2tlbiIsImlzQ2FuY2VsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJJbnRlcmNlcHRvck1hbmFnZXIiLCJkaXNwYXRjaFJlcXVlc3QiLCJpbnRlcmNlcHRvcnMiLCJpbnRlcmNlcHRvciIsImZ1bGZpbGxlZCIsInJlamVjdGVkIiwiZ2V0VXJpIiwidXNlIiwiZWplY3QiLCJoIiwidHJhbnNmb3JtRGF0YSIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImN1cnJlbnRRdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwidGl0bGUiLCJlbnYiLCJhcmd2IiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsInByZXBlbmRMaXN0ZW5lciIsInByZXBlbmRPbmNlTGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJiaW5kaW5nIiwiY3dkIiwiY2hkaXIiLCJ1bWFzayIsIm5vcm1hbGl6ZWROYW1lIiwiaXNBeGlvc0Vycm9yIiwidG9KU09OIiwiZGVzY3JpcHRpb24iLCJudW1iZXIiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJjb2x1bW5OdW1iZXIiLCJpc0Fic29sdXRlVVJMIiwiY29tYmluZVVSTHMiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwibGluZSIsInN1YnN0ciIsIm9yaWdpblVSTCIsIm1zaWUiLCJ1cmxQYXJzaW5nTm9kZSIsInJlc29sdmVVUkwiLCJzZWFyY2giLCJob3N0bmFtZSIsInBhdGhuYW1lIiwicmVxdWVzdFVSTCIsImV4cGlyZXMiLCJzZWN1cmUiLCJjb29raWUiLCJ0b0dNVFN0cmluZyIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlc29sdmVQcm9taXNlIiwiZGVsaXZlcnlGb3JtIiwibWthZCIsImhvdXJzSW5wdXQiLCJ3ZWlnaHQiLCJwcmljZWxpc3QiLCJwcmljZUJveCIsImNhbHVsYXRlIiwicHJpY2UiLCJzZXAiLCJpdGVtIiwiaG91cnMiLCJvbmNoYW5nZSIsIm9ua2V5dXAiLCJudW1iZXJPZk9wdGlvbnMiLCIkc3R5bGVkU2VsZWN0IiwiJHNlbGVjdGVkIiwiJGxpc3QiLCJjbGFzcyIsInJlbCIsIiRsaXN0SXRlbXMiLCJyZWdpc3RlciIsIk1vZHVsZSIsIkF5ZXBzIiwiZm9yRWFjaEVsZW1lbnQiLCJvdmVybGF5IiwiY2xhc3NMaXN0IiwiZ2V0T3B0aW9uIiwib25jbGljayIsImNsb3NlTW9kYWwiLCJyZWNhbGN1bGF0ZSIsInpJbmRleCIsIm1vZGFsV2luIiwiaGlkZUFjdGl2ZSIsInNob3dPdmVybGF5IiwicmVtb3ZlUHJvcGVydHkiLCJpbm5lckhlaWdodCIsImNhbGN1bGF0ZVRvcCIsIm1vZGFsSCIsIndpbkgiLCJtb2RhbCIsImdldEFjdGl2ZSIsImFjdGl2ZU1vZGFsIiwiaGlkZU1vZGFsIiwiY2xvc2VFdmVudCIsImFzc2lnbiIsIm92ZXJsYXlTZWxlY3RvciIsIm92ZXJsYXlWaXNpYmlsaXR5Q2xhc3MiLCJtb2RhbFZpc2liaWxpdHlDbGFzcyIsIm1vZGFsQ2xhc3MiLCJlbmRwb2ludCIsInBhcmFtZXRlcnMiLCJzZXRFbmRQb2ludCIsInNldFBhcmFtZXRlcnMiLCJzZXRQYXJhbWV0ZXIiLCJwYXJhbWV0ZXIiLCJyZW1vdmVQYXJhbWV0ZXJzIiwicmVtb3ZlUGFyYW1ldGVyIiwiZ2V0UGFyYW1ldGVyU3RyaW5nIiwicGFyYW1ldGVyU3RyaW5ncyIsInJlcXVlc3RUeXBlIiwicHV0IiwiYXBwIiwibG9nIiwibm90aWZpY2F0aW9uIiwiaGFuZGxlRXJyb3IiLCJoYW5kbGVSZXNwb25zZSIsImhhbmRsZVN1Y2Nlc3MiLCJyZW1vdmVFcnJvcnMiLCJvbnN1Ym1pdCIsImhpc3RvcnkiLCJJbWFnZSIsInNjcmVlbiIsIkRvbTciLCJ0ZW1wUGFyZW50IiwidG9DcmVhdGUiLCJ1bmlxdWVBcnJheSIsIkNsYXNzIiwiTWV0aG9kcyIsImF0dHJOYW1lIiwiZG9tN0VsZW1lbnREYXRhU3RvcmFnZSIsImRhdGFLZXkiLCJ0cmFuc2Zvcm0iLCJlbFN0eWxlIiwid2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbiIsIndlYmtpdFRyYW5zaXRpb25EdXJhdGlvbiIsInRyYW5zaXRpb25EdXJhdGlvbiIsImV2ZW50VHlwZSIsInRhcmdldFNlbGVjdG9yIiwiY2FwdHVyZSIsImhhbmRsZUxpdmVFdmVudCIsImV2ZW50RGF0YSIsImRvbTdFdmVudERhdGEiLCJrIiwiaGFuZGxlRXZlbnQiLCJkb203TGl2ZUxpc3RlbmVycyIsInByb3h5TGlzdGVuZXIiLCJkb203TGlzdGVuZXJzIiwiZG9tN3Byb3h5IiwiZGF0YUluZGV4IiwidHJhbnNpdGlvbkVuZCIsImRvbSIsImZpcmVDYWxsQmFjayIsIm91dGVyV2lkdGgiLCJpbmNsdWRlTWFyZ2lucyIsIm91dGVySGVpZ2h0IiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsInNjcm9sbFkiLCJzY3JvbGxYIiwiY29tcGFyZVdpdGgiLCJjaGlsZCIsInByZXZpb3VzU2libGluZyIsInJldHVybkluZGV4IiwibmV3Q2hpbGQiLCJ0ZW1wRGl2IiwibmV4dEVsZW1lbnRTaWJsaW5nIiwibmV4dEVscyIsInByZXZpb3VzRWxlbWVudFNpYmxpbmciLCJwcmV2RWxzIiwiZm91bmRFbGVtZW50cyIsImZvdW5kIiwidG9BZGQiLCJtZXRob2ROYW1lIiwiVXRpbHMiLCJkZWxldGVQcm9wcyIsImdldFRyYW5zbGF0ZSIsImF4aXMiLCJtYXRyaXgiLCJjdXJUcmFuc2Zvcm0iLCJ0cmFuc2Zvcm1NYXRyaXgiLCJjdXJTdHlsZSIsIldlYktpdENTU01hdHJpeCIsIk1velRyYW5zZm9ybSIsIk9UcmFuc2Zvcm0iLCJNc1RyYW5zZm9ybSIsIm1zVHJhbnNmb3JtIiwibTQxIiwibTQyIiwicGFyc2VVcmxRdWVyeSIsInF1ZXJ5IiwidXJsVG9QYXJzZSIsInBhcmFtc1BhcnQiLCJuZXh0U291cmNlIiwia2V5c0FycmF5IiwibmV4dEluZGV4IiwibmV4dEtleSIsImRlc2MiLCJTdXBwb3J0IiwidGVzdERpdiIsInRvdWNoIiwiTW9kZXJuaXpyIiwibWF4VG91Y2hQb2ludHMiLCJEb2N1bWVudFRvdWNoIiwicG9pbnRlckV2ZW50cyIsInBvaW50ZXJFbmFibGVkIiwiUG9pbnRlckV2ZW50IiwicHJlZml4ZWRQb2ludGVyRXZlbnRzIiwibXNQb2ludGVyRW5hYmxlZCIsInRyYW5zZm9ybXMzZCIsImNzc3RyYW5zZm9ybXMzZCIsImZsZXhib3giLCJvYnNlcnZlciIsInBhc3NpdmVMaXN0ZW5lciIsInN1cHBvcnRzUGFzc2l2ZSIsImdlc3R1cmVzIiwiQnJvd3NlciIsImlzU2FmYXJpIiwiaXNVaVdlYlZpZXciLCJTd2lwZXJDbGFzcyIsImV2ZW50c0xpc3RlbmVycyIsInByaW9yaXR5Iiwib25jZUhhbmRsZXIiLCJmN3Byb3h5IiwiZXZlbnRIYW5kbGVyIiwidXNlTW9kdWxlc1BhcmFtcyIsImluc3RhbmNlUGFyYW1zIiwibW9kdWxlTmFtZSIsInVzZU1vZHVsZXMiLCJtb2R1bGVzUGFyYW1zIiwibW9kdWxlUGFyYW1zIiwibW9kdWxlUHJvcE5hbWUiLCJtb2R1bGVQcm9wIiwibW9kdWxlRXZlbnROYW1lIiwiY29tcG9uZW50cyIsInN0YXRpYyIsImluc3RhbGwiLCJpbnN0YWxsTW9kdWxlIiwidXBkYXRlIiwidXBkYXRlU2l6ZSIsInN3aXBlciIsIiRlbCIsImNsaWVudFdpZHRoIiwiY2xpZW50SGVpZ2h0IiwiaXNIb3Jpem9udGFsIiwiaXNWZXJ0aWNhbCIsInVwZGF0ZVNsaWRlcyIsIiR3cmFwcGVyRWwiLCJzd2lwZXJTaXplIiwicnRsVHJhbnNsYXRlIiwicnRsIiwid3JvbmdSVEwiLCJpc1ZpcnR1YWwiLCJ2aXJ0dWFsIiwiZW5hYmxlZCIsInByZXZpb3VzU2xpZGVzTGVuZ3RoIiwic2xpZGVzIiwic2xpZGVDbGFzcyIsInNsaWRlc0xlbmd0aCIsInNuYXBHcmlkIiwic2xpZGVzR3JpZCIsInNsaWRlc1NpemVzR3JpZCIsIm9mZnNldEJlZm9yZSIsInNsaWRlc09mZnNldEJlZm9yZSIsIm9mZnNldEFmdGVyIiwic2xpZGVzT2Zmc2V0QWZ0ZXIiLCJwcmV2aW91c1NuYXBHcmlkTGVuZ3RoIiwicHJldmlvdXNTbGlkZXNHcmlkTGVuZ3RoIiwic2xpZGVzTnVtYmVyRXZlblRvUm93cyIsInNsaWRlU2l6ZSIsInNwYWNlQmV0d2VlbiIsInNsaWRlUG9zaXRpb24iLCJwcmV2U2xpZGVTaXplIiwidmlydHVhbFNpemUiLCJtYXJnaW5Ub3AiLCJtYXJnaW5SaWdodCIsIm1hcmdpbkJvdHRvbSIsInNsaWRlc1BlckNvbHVtbiIsInNsaWRlc1BlclZpZXciLCJzbGlkZXNQZXJDb2x1bW5GaWxsIiwic2xpZGVzUGVyUm93IiwibnVtRnVsbENvbHVtbnMiLCJzbGlkZSIsIm5ld1NsaWRlT3JkZXJJbmRleCIsImNvbHVtbiIsInJvdyIsInNsaWRlc1Blckdyb3VwIiwiZ3JvdXBJbmRleCIsIm9yZGVyIiwic2xpZGVTdHlsZXMiLCJjdXJyZW50VHJhbnNmb3JtIiwiY3VycmVudFdlYktpdFRyYW5zZm9ybSIsInJvdW5kTGVuZ3RocyIsInBhZGRpbmdMZWZ0IiwicGFkZGluZ1JpZ2h0IiwiYm94U2l6aW5nIiwicGFkZGluZ1RvcCIsInBhZGRpbmdCb3R0b20iLCJzd2lwZXJTbGlkZVNpemUiLCJjZW50ZXJlZFNsaWRlcyIsImFicyIsIm5ld1NsaWRlc0dyaWQiLCJlZmZlY3QiLCJzZXRXcmFwcGVyU2l6ZSIsInNsaWRlc0dyaWRJdGVtIiwiY2VudGVySW5zdWZmaWNpZW50U2xpZGVzIiwiYWxsU2xpZGVzU2l6ZSIsInNsaWRlU2l6ZVZhbHVlIiwiYWxsU2xpZGVzT2Zmc2V0Iiwic25hcCIsInNuYXBJbmRleCIsIndhdGNoT3ZlcmZsb3ciLCJjaGVja092ZXJmbG93Iiwid2F0Y2hTbGlkZXNQcm9ncmVzcyIsIndhdGNoU2xpZGVzVmlzaWJpbGl0eSIsInVwZGF0ZVNsaWRlc09mZnNldCIsInVwZGF0ZUF1dG9IZWlnaHQiLCJhY3RpdmVTbGlkZXMiLCJuZXdIZWlnaHQiLCJzZXRUcmFuc2l0aW9uIiwiYWN0aXZlSW5kZXgiLCJzd2lwZXJTbGlkZU9mZnNldCIsIm9mZnNldExlZnQiLCJvZmZzZXRUb3AiLCJ1cGRhdGVTbGlkZXNQcm9ncmVzcyIsInRyYW5zbGF0ZSIsIm9mZnNldENlbnRlciIsInNsaWRlVmlzaWJsZUNsYXNzIiwidmlzaWJsZVNsaWRlc0luZGV4ZXMiLCJ2aXNpYmxlU2xpZGVzIiwic2xpZGVQcm9ncmVzcyIsIm1pblRyYW5zbGF0ZSIsInNsaWRlQmVmb3JlIiwic2xpZGVBZnRlciIsInVwZGF0ZVByb2dyZXNzIiwidHJhbnNsYXRlc0RpZmYiLCJtYXhUcmFuc2xhdGUiLCJpc0JlZ2lubmluZyIsImlzRW5kIiwid2FzQmVnaW5uaW5nIiwid2FzRW5kIiwidXBkYXRlU2xpZGVzQ2xhc3NlcyIsInJlYWxJbmRleCIsImFjdGl2ZVNsaWRlIiwic2xpZGVBY3RpdmVDbGFzcyIsInNsaWRlTmV4dENsYXNzIiwic2xpZGVQcmV2Q2xhc3MiLCJzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzIiwic2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3MiLCJzbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyIsImxvb3AiLCJzbGlkZUR1cGxpY2F0ZUNsYXNzIiwibmV4dFNsaWRlIiwicHJldlNsaWRlIiwidXBkYXRlQWN0aXZlSW5kZXgiLCJuZXdBY3RpdmVJbmRleCIsInByZXZpb3VzSW5kZXgiLCJwcmV2aW91c1JlYWxJbmRleCIsInByZXZpb3VzU25hcEluZGV4Iiwibm9ybWFsaXplU2xpZGVJbmRleCIsImluaXRpYWxpemVkIiwicnVuQ2FsbGJhY2tzT25Jbml0IiwidXBkYXRlQ2xpY2tlZFNsaWRlIiwic2xpZGVGb3VuZCIsImNsaWNrZWRTbGlkZSIsImNsaWNrZWRJbmRleCIsInNsaWRlVG9DbGlja2VkU2xpZGUiLCJ2aXJ0dWFsVHJhbnNsYXRlIiwiY3VycmVudFRyYW5zbGF0ZSIsInNldFRyYW5zbGF0ZSIsImJ5Q29udHJvbGxlciIsIm5ld1Byb2dyZXNzIiwieSIsInByZXZpb3VzVHJhbnNsYXRlIiwidHJhbnNpdGlvblN0YXJ0IiwicnVuQ2FsbGJhY2tzIiwiZGlyZWN0aW9uIiwiYXV0b0hlaWdodCIsImFuaW1hdGluZyIsInNsaWRlVG8iLCJpbnRlcm5hbCIsInNsaWRlSW5kZXgiLCJwcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24iLCJpbml0aWFsU2xpZGUiLCJhbGxvd1NsaWRlTmV4dCIsImFsbG93U2xpZGVQcmV2Iiwib25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQiLCJkZXN0cm95ZWQiLCJzbGlkZVRvTG9vcCIsIm5ld0luZGV4IiwibG9vcGVkU2xpZGVzIiwic2xpZGVOZXh0IiwibG9vcEZpeCIsIl9jbGllbnRMZWZ0Iiwic2xpZGVQcmV2Iiwibm9ybWFsaXplZFRyYW5zbGF0ZSIsIm5vcm1hbGl6ZWRTbmFwR3JpZCIsInByZXZTbmFwIiwicHJldkluZGV4Iiwic2xpZGVSZXNldCIsInNsaWRlVG9DbG9zZXN0IiwiY3VycmVudFNuYXAiLCJzbGlkZXNQZXJWaWV3RHluYW1pYyIsInNsaWRlVG9JbmRleCIsImxvb3BDcmVhdGUiLCJsb29wRmlsbEdyb3VwV2l0aEJsYW5rIiwiYmxhbmtTbGlkZXNOdW0iLCJibGFua05vZGUiLCJzbGlkZUJsYW5rQ2xhc3MiLCJsb29wQWRkaXRpb25hbFNsaWRlcyIsInByZXBlbmRTbGlkZXMiLCJhcHBlbmRTbGlkZXMiLCJsb29wRGVzdHJveSIsImdyYWJDdXJzb3IiLCJzZXRHcmFiQ3Vyc29yIiwibW92aW5nIiwic2ltdWxhdGVUb3VjaCIsImlzTG9ja2VkIiwiY3Vyc29yIiwidW5zZXRHcmFiQ3Vyc29yIiwibWFuaXB1bGF0aW9uIiwiYXBwZW5kU2xpZGUiLCJwcmVwZW5kU2xpZGUiLCJhZGRTbGlkZSIsImFjdGl2ZUluZGV4QnVmZmVyIiwiYmFzZUxlbmd0aCIsInNsaWRlc0J1ZmZlciIsImN1cnJlbnRTbGlkZSIsInJlbW92ZVNsaWRlIiwic2xpZGVzSW5kZXhlcyIsImluZGV4VG9SZW1vdmUiLCJyZW1vdmVBbGxTbGlkZXMiLCJEZXZpY2UiLCJkZXZpY2UiLCJpb3MiLCJhbmRyb2lkIiwiYW5kcm9pZENocm9tZSIsImRlc2t0b3AiLCJ3aW5kb3dzIiwiaXBob25lIiwiaXBvZCIsImlwYWQiLCJjb3Jkb3ZhIiwicGhvbmVnYXAiLCJvcyIsIm9zVmVyc2lvbiIsIndlYlZpZXciLCJvc1ZlcnNpb25BcnIiLCJtZXRhVmlld3BvcnQiLCJtaW5pbWFsVWkiLCJwaXhlbFJhdGlvIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIm9uVG91Y2hTdGFydCIsInRvdWNoRXZlbnRzRGF0YSIsImlzVG91Y2hFdmVudCIsImlzVG91Y2hlZCIsImlzTW92ZWQiLCJub1N3aXBpbmciLCJub1N3aXBpbmdTZWxlY3RvciIsIm5vU3dpcGluZ0NsYXNzIiwiYWxsb3dDbGljayIsInN3aXBlSGFuZGxlciIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJzdGFydFgiLCJzdGFydFkiLCJlZGdlU3dpcGVEZXRlY3Rpb24iLCJpT1NFZGdlU3dpcGVEZXRlY3Rpb24iLCJlZGdlU3dpcGVUaHJlc2hvbGQiLCJpT1NFZGdlU3dpcGVUaHJlc2hvbGQiLCJhbGxvd1RvdWNoQ2FsbGJhY2tzIiwiaXNTY3JvbGxpbmciLCJzdGFydE1vdmluZyIsInRvdWNoU3RhcnRUaW1lIiwic3dpcGVEaXJlY3Rpb24iLCJ0aHJlc2hvbGQiLCJhbGxvd1RocmVzaG9sZE1vdmUiLCJmb3JtRWxlbWVudHMiLCJzaG91bGRQcmV2ZW50RGVmYXVsdCIsImFsbG93VG91Y2hNb3ZlIiwidG91Y2hTdGFydFByZXZlbnREZWZhdWx0IiwidG91Y2hTdGFydEZvcmNlUHJldmVudERlZmF1bHQiLCJvblRvdWNoTW92ZSIsInByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyIiwidG91Y2hSZWxlYXNlT25FZGdlcyIsImRpZmZYIiwiZGlmZlkiLCJzcXJ0IiwidG91Y2hBbmdsZSIsImF0YW4yIiwidG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uIiwibmVzdGVkIiwic3RhcnRUcmFuc2xhdGUiLCJhbGxvd01vbWVudHVtQm91bmNlIiwidG91Y2hSYXRpbyIsImRpc2FibGVQYXJlbnRTd2lwZXIiLCJyZXNpc3RhbmNlUmF0aW8iLCJyZXNpc3RhbmNlIiwiZm9sbG93RmluZ2VyIiwiZnJlZU1vZGUiLCJ2ZWxvY2l0aWVzIiwib25Ub3VjaEVuZCIsInRvdWNoRW5kVGltZSIsInRpbWVEaWZmIiwibGFzdENsaWNrVGltZSIsImNsaWNrVGltZW91dCIsImN1cnJlbnRQb3MiLCJmcmVlTW9kZU1vbWVudHVtIiwibGFzdE1vdmVFdmVudCIsInZlbG9jaXR5RXZlbnQiLCJkaXN0YW5jZSIsInZlbG9jaXR5IiwiZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHkiLCJmcmVlTW9kZU1vbWVudHVtVmVsb2NpdHlSYXRpbyIsIm1vbWVudHVtRHVyYXRpb24iLCJmcmVlTW9kZU1vbWVudHVtUmF0aW8iLCJtb21lbnR1bURpc3RhbmNlIiwibmV3UG9zaXRpb24iLCJhZnRlckJvdW5jZVBvc2l0aW9uIiwiZG9Cb3VuY2UiLCJib3VuY2VBbW91bnQiLCJmcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW8iLCJuZWVkc0xvb3BGaXgiLCJmcmVlTW9kZU1vbWVudHVtQm91bmNlIiwiZnJlZU1vZGVTdGlja3kiLCJsb25nU3dpcGVzTXMiLCJzdG9wSW5kZXgiLCJncm91cFNpemUiLCJyYXRpbyIsImxvbmdTd2lwZXMiLCJsb25nU3dpcGVzUmF0aW8iLCJzaG9ydFN3aXBlcyIsIm9uUmVzaXplIiwiYnJlYWtwb2ludHMiLCJzZXRCcmVha3BvaW50IiwibmV3VHJhbnNsYXRlIiwiYXV0b3BsYXkiLCJydW5uaW5nIiwicGF1c2VkIiwib25DbGljayIsInByZXZlbnRDbGlja3MiLCJwcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24iLCJ0b3VjaEV2ZW50c1RhcmdldCIsImJyZWFrcG9pbnRzSW52ZXJzZSIsInVuaXF1ZU5hdkVsZW1lbnRzIiwicHJlbG9hZEltYWdlcyIsInVwZGF0ZU9uSW1hZ2VzUmVhZHkiLCJwYXNzaXZlTGlzdGVuZXJzIiwiY29udGFpbmVyTW9kaWZpZXJDbGFzcyIsIndyYXBwZXJDbGFzcyIsInByb3RvdHlwZXMiLCJhdHRhY2hFdmVudHMiLCJ0b3VjaEV2ZW50cyIsIndyYXBwZXJFbCIsInBhc3NpdmUiLCJtb3ZlIiwiZGV0YWNoRXZlbnRzIiwiYnJlYWtwb2ludCIsImdldEJyZWFrcG9pbnQiLCJjdXJyZW50QnJlYWtwb2ludCIsImJyZWFrcG9pbnRPbmx5UGFyYW1zIiwicGFyYW1WYWx1ZSIsImJyZWFrcG9pbnRQYXJhbXMiLCJvcmlnaW5hbFBhcmFtcyIsImRpcmVjdGlvbkNoYW5nZWQiLCJuZWVkc1JlTG9vcCIsImNoYW5nZURpcmVjdGlvbiIsInBvaW50cyIsImlubmVyV2lkdGgiLCJ3YXNMb2NrZWQiLCJuYXZpZ2F0aW9uIiwiYWRkQ2xhc3NlcyIsInN1ZmZpeGVzIiwicmVtb3ZlQ2xhc3NlcyIsImltYWdlcyIsImxvYWRJbWFnZSIsImltYWdlRWwiLCJzcmNzZXQiLCJzaXplcyIsImNoZWNrRm9yQ29tcGxldGUiLCJvblJlYWR5IiwiaW1hZ2VzTG9hZGVkIiwiaW1hZ2VzVG9Mb2FkIiwiY3VycmVudFNyYyIsImV4dGVuZGVkRGVmYXVsdHMiLCJTd2lwZXIiLCJzdXBlciIsInByb3RvdHlwZUdyb3VwIiwicHJvdG9NZXRob2QiLCJtb2R1bGVQYXJhbU5hbWUiLCJzd2lwZXJQYXJhbXMiLCJwYXNzZWRQYXJhbXMiLCJzd2lwZXJzIiwiY29udGFpbmVyRWwiLCJuZXdQYXJhbXMiLCJ0b3VjaEV2ZW50c1RvdWNoIiwidG91Y2hFdmVudHNEZXNrdG9wIiwic3B2IiwiYnJlYWtMb29wIiwidHJhbnNsYXRlVmFsdWUiLCJ0cmFuc2xhdGVkIiwibmV3RGlyZWN0aW9uIiwibmVlZFVwZGF0ZSIsImN1cnJlbnREaXJlY3Rpb24iLCJzbGlkZUVsIiwiZGVsZXRlSW5zdGFuY2UiLCJjbGVhblN0eWxlcyIsIm5ld0RlZmF1bHRzIiwiRGV2aWNlJDEiLCJTdXBwb3J0JDEiLCJCcm93c2VyJDEiLCJSZXNpemUiLCJyZXNpemUiLCJyZXNpemVIYW5kbGVyIiwib3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyIiwiT2JzZXJ2ZXIiLCJXZWJraXRNdXRhdGlvbk9ic2VydmVyIiwiT2JzZXJ2ZXJGdW5jIiwibXV0YXRpb25zIiwib2JzZXJ2ZXJVcGRhdGUiLCJjaGlsZExpc3QiLCJvYnNlcnZlcnMiLCJvYnNlcnZlUGFyZW50cyIsImNvbnRhaW5lclBhcmVudHMiLCJvYnNlcnZlU2xpZGVDaGlsZHJlbiIsImRpc2Nvbm5lY3QiLCJPYnNlcnZlciQxIiwiTW91c2V3aGVlbCIsImxhc3RTY3JvbGxUaW1lIiwiaXNTdXBwb3J0ZWQiLCJoYXNGZWF0dXJlIiwiaXNFdmVudFN1cHBvcnRlZCIsInNYIiwic1kiLCJwWCIsInBZIiwid2hlZWxEZWx0YSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YVgiLCJIT1JJWk9OVEFMX0FYSVMiLCJkZWx0YVkiLCJkZWx0YVgiLCJkZWx0YU1vZGUiLCJzcGluWCIsInNwaW5ZIiwicGl4ZWxYIiwicGl4ZWxZIiwiaGFuZGxlTW91c2VFbnRlciIsIm1vdXNlRW50ZXJlZCIsImhhbmRsZU1vdXNlTGVhdmUiLCJtb3VzZXdoZWVsIiwicmVsZWFzZU9uRWRnZXMiLCJydGxGYWN0b3IiLCJmb3JjZVRvQXhpcyIsInNlbnNpdGl2aXR5IiwiYXV0b3BsYXlEaXNhYmxlT25JbnRlcmFjdGlvbiIsImdldFRpbWUiLCJlbmFibGUiLCJldmVudHNUYXJnZWQiLCJOYXZpZ2F0aW9uIiwiJG5leHRFbCIsIiRwcmV2RWwiLCJkaXNhYmxlZENsYXNzIiwibG9ja0NsYXNzIiwib25QcmV2Q2xpY2siLCJvbk5leHRDbGljayIsIm5leHRFbCIsInByZXZFbCIsImhpZGVPbkNsaWNrIiwiaGlkZGVuQ2xhc3MiLCJ0b0VkZ2UiLCJmcm9tRWRnZSIsImlzSGlkZGVuIiwiUGFnaW5hdGlvbiIsInBhZ2luYXRpb24iLCJ0b3RhbCIsInBhZ2luYXRpb25UeXBlIiwiYnVsbGV0cyIsImZpcnN0SW5kZXgiLCJsYXN0SW5kZXgiLCJtaWRJbmRleCIsImR5bmFtaWNCdWxsZXRzIiwiYnVsbGV0U2l6ZSIsImR5bmFtaWNNYWluQnVsbGV0cyIsImR5bmFtaWNCdWxsZXRJbmRleCIsImJ1bGxldEFjdGl2ZUNsYXNzIiwiYnVsbGV0IiwiJGJ1bGxldCIsImJ1bGxldEluZGV4IiwiJGZpcnN0RGlzcGxheWVkQnVsbGV0IiwiJGxhc3REaXNwbGF5ZWRCdWxsZXQiLCJkeW5hbWljQnVsbGV0c0xlbmd0aCIsImJ1bGxldHNPZmZzZXQiLCJjdXJyZW50Q2xhc3MiLCJmb3JtYXRGcmFjdGlvbkN1cnJlbnQiLCJ0b3RhbENsYXNzIiwiZm9ybWF0RnJhY3Rpb25Ub3RhbCIsInByb2dyZXNzYmFyRGlyZWN0aW9uIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZSIsInNjYWxlWCIsInNjYWxlWSIsInByb2dyZXNzYmFyRmlsbENsYXNzIiwicmVuZGVyQ3VzdG9tIiwicGFnaW5hdGlvbkhUTUwiLCJudW1iZXJPZkJ1bGxldHMiLCJyZW5kZXJCdWxsZXQiLCJidWxsZXRDbGFzcyIsImJ1bGxldEVsZW1lbnQiLCJyZW5kZXJGcmFjdGlvbiIsInJlbmRlclByb2dyZXNzYmFyIiwiY2xpY2thYmxlIiwiY2xpY2thYmxlQ2xhc3MiLCJtb2RpZmllckNsYXNzIiwicHJvZ3Jlc3NiYXJPcHBvc2l0ZUNsYXNzIiwiYWN0aXZlSW5kZXhDaGFuZ2UiLCJzbmFwSW5kZXhDaGFuZ2UiLCJzbGlkZXNMZW5ndGhDaGFuZ2UiLCJzbmFwR3JpZExlbmd0aENoYW5nZSIsImluaXRTbGlkZXIiLCJkYXRhc2V0Iiwic3BhY2ViZXR3ZWVuIiwic2xpZGVyIiwiOTkyIiwiNzY4IiwiNTc2IiwiMTE3MCIsInRodW1iRWwiLCJ0aHVtYnMiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5B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LEdBQ2RRLGNBQWUsRUFDZjZOLFVBQVUsRUFDVnpMLHVCQUF1QixFQUN2QkQscUJBQXFCLEVBQ3JCaVEsV0FBWSxDQUNWZ0csT0FBUSxzQkFDUkMsT0FBUSw4QiIsImZpbGUiOiJqcy9hcHAuOGY4OTFlNzdiZmI1MzAwOGYxMjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9kaXN0L1wiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTcwKTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC5Ccm93c2VyU3ByaXRlU3ltYm9sID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ByaXRlU3ltYm9sID0gZnVuY3Rpb24gU3ByaXRlU3ltYm9sKHJlZikge1xuICB2YXIgaWQgPSByZWYuaWQ7XG4gIHZhciB2aWV3Qm94ID0gcmVmLnZpZXdCb3g7XG4gIHZhciBjb250ZW50ID0gcmVmLmNvbnRlbnQ7XG5cbiAgdGhpcy5pZCA9IGlkO1xuICB0aGlzLnZpZXdCb3ggPSB2aWV3Qm94O1xuICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblNwcml0ZVN5bWJvbC5wcm90b3R5cGUuc3RyaW5naWZ5ID0gZnVuY3Rpb24gc3RyaW5naWZ5ICgpIHtcbiAgcmV0dXJuIHRoaXMuY29udGVudDtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5TcHJpdGVTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICByZXR1cm4gdGhpcy5zdHJpbmdpZnkoKTtcbn07XG5cblNwcml0ZVN5bWJvbC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIFsnaWQnLCAndmlld0JveCcsICdjb250ZW50J10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkgeyByZXR1cm4gZGVsZXRlIHRoaXMkMVtwcm9wXTsgfSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG52YXIgcGFyc2UgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICB2YXIgaGFzSW1wb3J0Tm9kZSA9ICEhZG9jdW1lbnQuaW1wb3J0Tm9kZTtcbiAgdmFyIGRvYyA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoY29udGVudCwgJ2ltYWdlL3N2Zyt4bWwnKS5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIEZpeCBmb3IgYnJvd3NlciB3aGljaCBhcmUgdGhyb3dpbmcgV3JvbmdEb2N1bWVudEVycm9yXG4gICAqIGlmIHlvdSBpbnNlcnQgYW4gZWxlbWVudCB3aGljaCBpcyBub3QgcGFydCBvZiB0aGUgZG9jdW1lbnRcbiAgICogQHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83OTg2NTE5LzQ2MjQ0MDNcbiAgICovXG4gIGlmIChoYXNJbXBvcnROb2RlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmltcG9ydE5vZGUoZG9jLCB0cnVlKTtcbiAgfVxuXG4gIHJldHVybiBkb2M7XG59O1xuXG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG52YXIgZGVlcG1lcmdlID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiB1bmRlZmluZWQgPT09ICdmdW5jdGlvbicgJiYgdW5kZWZpbmVkLmFtZCkge1xuICAgICAgICB1bmRlZmluZWQoZmFjdG9yeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfVxufShjb21tb25qc0dsb2JhbCwgZnVuY3Rpb24gKCkge1xuXG5mdW5jdGlvbiBpc01lcmdlYWJsZU9iamVjdCh2YWwpIHtcbiAgICB2YXIgbm9uTnVsbE9iamVjdCA9IHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JztcblxuICAgIHJldHVybiBub25OdWxsT2JqZWN0XG4gICAgICAgICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBSZWdFeHBdJ1xuICAgICAgICAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgRGF0ZV0nXG59XG5cbmZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG59XG5cbmZ1bmN0aW9uIGNsb25lSWZOZWNlc3NhcnkodmFsdWUsIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIHZhciBjbG9uZSA9IG9wdGlvbnNBcmd1bWVudCAmJiBvcHRpb25zQXJndW1lbnQuY2xvbmUgPT09IHRydWU7XG4gICAgcmV0dXJuIChjbG9uZSAmJiBpc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpID8gZGVlcG1lcmdlKGVtcHR5VGFyZ2V0KHZhbHVlKSwgdmFsdWUsIG9wdGlvbnNBcmd1bWVudCkgOiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0QXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0gdGFyZ2V0LnNsaWNlKCk7XG4gICAgc291cmNlLmZvckVhY2goZnVuY3Rpb24oZSwgaSkge1xuICAgICAgICBpZiAodHlwZW9mIGRlc3RpbmF0aW9uW2ldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZGVzdGluYXRpb25baV0gPSBjbG9uZUlmTmVjZXNzYXJ5KGUsIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNNZXJnZWFibGVPYmplY3QoZSkpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2ldID0gZGVlcG1lcmdlKHRhcmdldFtpXSwgZSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQuaW5kZXhPZihlKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLnB1c2goY2xvbmVJZk5lY2Vzc2FyeShlLCBvcHRpb25zQXJndW1lbnQpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0ge307XG4gICAgaWYgKGlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcbiAgICAgICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZUlmTmVjZXNzYXJ5KHRhcmdldFtrZXldLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc01lcmdlYWJsZU9iamVjdChzb3VyY2Vba2V5XSkgfHwgIXRhcmdldFtrZXldKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY2xvbmVJZk5lY2Vzc2FyeShzb3VyY2Vba2V5XSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgdmFyIGFycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuICAgIHZhciBvcHRpb25zID0gb3B0aW9uc0FyZ3VtZW50IHx8IHsgYXJyYXlNZXJnZTogZGVmYXVsdEFycmF5TWVyZ2UgfTtcbiAgICB2YXIgYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblxuICAgIGlmIChhcnJheSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0YXJnZXQpID8gYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KSA6IGNsb25lSWZOZWNlc3Nhcnkoc291cmNlLCBvcHRpb25zQXJndW1lbnQpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpXG4gICAgfVxufVxuXG5kZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpIHx8IGFycmF5Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXkgd2l0aCBhdCBsZWFzdCB0d28gZWxlbWVudHMnKVxuICAgIH1cblxuICAgIC8vIHdlIGFyZSBzdXJlIHRoZXJlIGFyZSBhdCBsZWFzdCAyIHZhbHVlcywgc28gaXQgaXMgc2FmZSB0byBoYXZlIG5vIGluaXRpYWwgdmFsdWVcbiAgICByZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG5leHQpIHtcbiAgICAgICAgcmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zQXJndW1lbnQpXG4gICAgfSlcbn07XG5cbnJldHVybiBkZWVwbWVyZ2VcblxufSkpO1xufSk7XG5cbnZhciBuYW1lc3BhY2VzXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG52YXIgbmFtZXNwYWNlcyA9IHtcbiAgc3ZnOiB7XG4gICAgbmFtZTogJ3htbG5zJyxcbiAgICB1cmk6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZydcbiAgfSxcbiAgeGxpbms6IHtcbiAgICBuYW1lOiAneG1sbnM6eGxpbmsnLFxuICAgIHVyaTogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnXG4gIH1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG5hbWVzcGFjZXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn0pO1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG52YXIgb2JqZWN0VG9BdHRyc1N0cmluZyA9IGZ1bmN0aW9uIChhdHRycykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cnMpLm1hcChmdW5jdGlvbiAoYXR0cikge1xuICAgIHZhciB2YWx1ZSA9IGF0dHJzW2F0dHJdLnRvU3RyaW5nKCkucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xuICAgIHJldHVybiAoYXR0ciArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpO1xuICB9KS5qb2luKCcgJyk7XG59O1xuXG52YXIgc3ZnID0gbmFtZXNwYWNlc18xLnN2ZztcbnZhciB4bGluayA9IG5hbWVzcGFjZXNfMS54bGluaztcblxudmFyIGRlZmF1bHRBdHRycyA9IHt9O1xuZGVmYXVsdEF0dHJzW3N2Zy5uYW1lXSA9IHN2Zy51cmk7XG5kZWZhdWx0QXR0cnNbeGxpbmsubmFtZV0gPSB4bGluay51cmk7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb250ZW50XVxuICogQHBhcmFtIHtPYmplY3R9IFthdHRyaWJ1dGVzXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG52YXIgd3JhcEluU3ZnU3RyaW5nID0gZnVuY3Rpb24gKGNvbnRlbnQsIGF0dHJpYnV0ZXMpIHtcbiAgaWYgKCBjb250ZW50ID09PSB2b2lkIDAgKSBjb250ZW50ID0gJyc7XG5cbiAgdmFyIGF0dHJzID0gZGVlcG1lcmdlKGRlZmF1bHRBdHRycywgYXR0cmlidXRlcyB8fCB7fSk7XG4gIHZhciBhdHRyc1JlbmRlcmVkID0gb2JqZWN0VG9BdHRyc1N0cmluZyhhdHRycyk7XG4gIHJldHVybiAoXCI8c3ZnIFwiICsgYXR0cnNSZW5kZXJlZCArIFwiPlwiICsgY29udGVudCArIFwiPC9zdmc+XCIpO1xufTtcblxudmFyIEJyb3dzZXJTcHJpdGVTeW1ib2wgPSAoZnVuY3Rpb24gKFNwcml0ZVN5bWJvbCQkMSkge1xuICBmdW5jdGlvbiBCcm93c2VyU3ByaXRlU3ltYm9sICgpIHtcbiAgICBTcHJpdGVTeW1ib2wkJDEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGlmICggU3ByaXRlU3ltYm9sJCQxICkgQnJvd3NlclNwcml0ZVN5bWJvbC5fX3Byb3RvX18gPSBTcHJpdGVTeW1ib2wkJDE7XG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU3ByaXRlU3ltYm9sJCQxICYmIFNwcml0ZVN5bWJvbCQkMS5wcm90b3R5cGUgKTtcbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCcm93c2VyU3ByaXRlU3ltYm9sO1xuXG4gIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGlzTW91bnRlZDoge30gfTtcblxuICBwcm90b3R5cGVBY2Nlc3NvcnMuaXNNb3VudGVkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF0aGlzLm5vZGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICAgKiBAcmV0dXJuIHtCcm93c2VyU3ByaXRlU3ltYm9sfVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5jcmVhdGVGcm9tRXhpc3RpbmdOb2RlID0gZnVuY3Rpb24gY3JlYXRlRnJvbUV4aXN0aW5nTm9kZSAobm9kZSkge1xuICAgIHJldHVybiBuZXcgQnJvd3NlclNwcml0ZVN5bWJvbCh7XG4gICAgICBpZDogbm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJyksXG4gICAgICB2aWV3Qm94OiBub2RlLmdldEF0dHJpYnV0ZSgndmlld0JveCcpLFxuICAgICAgY29udGVudDogbm9kZS5vdXRlckhUTUxcbiAgICB9KTtcbiAgfTtcblxuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gICAgaWYgKHRoaXMuaXNNb3VudGVkKSB7XG4gICAgICB0aGlzLnVubW91bnQoKTtcbiAgICB9XG4gICAgU3ByaXRlU3ltYm9sJCQxLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudHxzdHJpbmd9IHRhcmdldFxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUubW91bnQgPSBmdW5jdGlvbiBtb3VudCAodGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuaXNNb3VudGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlO1xuICAgIH1cblxuICAgIHZhciBtb3VudFRhcmdldCA9IHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpIDogdGFyZ2V0O1xuICAgIHZhciBub2RlID0gdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuXG4gICAgbW91bnRUYXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLnN0cmluZ2lmeSgpO1xuICAgIHJldHVybiBwYXJzZSh3cmFwSW5TdmdTdHJpbmcoY29udGVudCkpLmNoaWxkTm9kZXNbMF07XG4gIH07XG5cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUudW5tb3VudCA9IGZ1bmN0aW9uIHVubW91bnQgKCkge1xuICAgIHRoaXMubm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMubm9kZSk7XG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuICByZXR1cm4gQnJvd3NlclNwcml0ZVN5bWJvbDtcbn0oU3ByaXRlU3ltYm9sKSk7XG5cbnJldHVybiBCcm93c2VyU3ByaXRlU3ltYm9sO1xuXG59KSkpO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLkJyb3dzZXJTcHJpdGUgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cblxuXG5cblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbnZhciBkZWVwbWVyZ2UgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIHVuZGVmaW5lZCA9PT0gJ2Z1bmN0aW9uJyAmJiB1bmRlZmluZWQuYW1kKSB7XG4gICAgICAgIHVuZGVmaW5lZChmYWN0b3J5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgICB9XG59KGNvbW1vbmpzR2xvYmFsLCBmdW5jdGlvbiAoKSB7XG5cbmZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbCkge1xuICAgIHZhciBub25OdWxsT2JqZWN0ID0gdmFsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xuXG4gICAgcmV0dXJuIG5vbk51bGxPYmplY3RcbiAgICAgICAgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IFJlZ0V4cF0nXG4gICAgICAgICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBEYXRlXSdcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IFtdIDoge31cbn1cblxuZnVuY3Rpb24gY2xvbmVJZk5lY2Vzc2FyeSh2YWx1ZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgdmFyIGNsb25lID0gb3B0aW9uc0FyZ3VtZW50ICYmIG9wdGlvbnNBcmd1bWVudC5jbG9uZSA9PT0gdHJ1ZTtcbiAgICByZXR1cm4gKGNsb25lICYmIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSkgPyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9uc0FyZ3VtZW50KSA6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgZGVzdGluYXRpb24gPSB0YXJnZXQuc2xpY2UoKTtcbiAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbihlLCBpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb25baV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltpXSA9IGNsb25lSWZOZWNlc3NhcnkoZSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChpc01lcmdlYWJsZU9iamVjdChlKSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb25baV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2ldLCBlLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5pbmRleE9mKGUpID09PSAtMSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ucHVzaChjbG9uZUlmTmVjZXNzYXJ5KGUsIG9wdGlvbnNBcmd1bWVudCkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgZGVzdGluYXRpb24gPSB7fTtcbiAgICBpZiAoaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuICAgICAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNsb25lSWZOZWNlc3NhcnkodGFyZ2V0W2tleV0sIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSB8fCAhdGFyZ2V0W2tleV0pIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZUlmTmVjZXNzYXJ5KHNvdXJjZVtrZXldLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgYXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRpb25zQXJndW1lbnQgfHwgeyBhcnJheU1lcmdlOiBkZWZhdWx0QXJyYXlNZXJnZSB9O1xuICAgIHZhciBhcnJheU1lcmdlID0gb3B0aW9ucy5hcnJheU1lcmdlIHx8IGRlZmF1bHRBcnJheU1lcmdlO1xuXG4gICAgaWYgKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHRhcmdldCkgPyBhcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIDogY2xvbmVJZk5lY2Vzc2FyeShzb3VyY2UsIG9wdGlvbnNBcmd1bWVudClcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudClcbiAgICB9XG59XG5cbmRlZXBtZXJnZS5hbGwgPSBmdW5jdGlvbiBkZWVwbWVyZ2VBbGwoYXJyYXksIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkgfHwgYXJyYXkubGVuZ3RoIDwgMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheSB3aXRoIGF0IGxlYXN0IHR3byBlbGVtZW50cycpXG4gICAgfVxuXG4gICAgLy8gd2UgYXJlIHN1cmUgdGhlcmUgYXJlIGF0IGxlYXN0IDIgdmFsdWVzLCBzbyBpdCBpcyBzYWZlIHRvIGhhdmUgbm8gaW5pdGlhbCB2YWx1ZVxuICAgIHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuICAgICAgICByZXR1cm4gZGVlcG1lcmdlKHByZXYsIG5leHQsIG9wdGlvbnNBcmd1bWVudClcbiAgICB9KVxufTtcblxucmV0dXJuIGRlZXBtZXJnZVxuXG59KSk7XG59KTtcblxuLy8gICAgICBcbi8vIEFuIGV2ZW50IGhhbmRsZXIgY2FuIHRha2UgYW4gb3B0aW9uYWwgZXZlbnQgYXJndW1lbnRcbi8vIGFuZCBzaG91bGQgbm90IHJldHVybiBhIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbi8vIEFuIGFycmF5IG9mIGFsbCBjdXJyZW50bHkgcmVnaXN0ZXJlZCBldmVudCBoYW5kbGVycyBmb3IgYSB0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuLy8gQSBtYXAgb2YgZXZlbnQgdHlwZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgZXZlbnQgaGFuZGxlcnMuXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIFxuXG4vKiogTWl0dDogVGlueSAofjIwMGIpIGZ1bmN0aW9uYWwgZXZlbnQgZW1pdHRlciAvIHB1YnN1Yi5cbiAqICBAbmFtZSBtaXR0XG4gKiAgQHJldHVybnMge01pdHR9XG4gKi9cbmZ1bmN0aW9uIG1pdHQoYWxsICAgICAgICAgICAgICAgICApIHtcblx0YWxsID0gYWxsIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cblx0cmV0dXJuIHtcblx0XHQvKipcblx0XHQgKiBSZWdpc3RlciBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAge1N0cmluZ30gdHlwZVx0VHlwZSBvZiBldmVudCB0byBsaXN0ZW4gZm9yLCBvciBgXCIqXCJgIGZvciBhbGwgZXZlbnRzXG5cdFx0ICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgRnVuY3Rpb24gdG8gY2FsbCBpbiByZXNwb25zZSB0byBnaXZlbiBldmVudFxuXHRcdCAqIEBtZW1iZXJPZiBtaXR0XG5cdFx0ICovXG5cdFx0b246IGZ1bmN0aW9uIG9uKHR5cGUgICAgICAgICwgaGFuZGxlciAgICAgICAgICAgICAgKSB7XG5cdFx0XHQoYWxsW3R5cGVdIHx8IChhbGxbdHlwZV0gPSBbXSkpLnB1c2goaGFuZGxlcik7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZSBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAge1N0cmluZ30gdHlwZVx0VHlwZSBvZiBldmVudCB0byB1bnJlZ2lzdGVyIGBoYW5kbGVyYCBmcm9tLCBvciBgXCIqXCJgXG5cdFx0ICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgSGFuZGxlciBmdW5jdGlvbiB0byByZW1vdmVcblx0XHQgKiBAbWVtYmVyT2YgbWl0dFxuXHRcdCAqL1xuXHRcdG9mZjogZnVuY3Rpb24gb2ZmKHR5cGUgICAgICAgICwgaGFuZGxlciAgICAgICAgICAgICAgKSB7XG5cdFx0XHRpZiAoYWxsW3R5cGVdKSB7XG5cdFx0XHRcdGFsbFt0eXBlXS5zcGxpY2UoYWxsW3R5cGVdLmluZGV4T2YoaGFuZGxlcikgPj4+IDAsIDEpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbnZva2UgYWxsIGhhbmRsZXJzIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKiBJZiBwcmVzZW50LCBgXCIqXCJgIGhhbmRsZXJzIGFyZSBpbnZva2VkIGFmdGVyIHR5cGUtbWF0Y2hlZCBoYW5kbGVycy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlICBUaGUgZXZlbnQgdHlwZSB0byBpbnZva2Vcblx0XHQgKiBAcGFyYW0ge0FueX0gW2V2dF0gIEFueSB2YWx1ZSAob2JqZWN0IGlzIHJlY29tbWVuZGVkIGFuZCBwb3dlcmZ1bCksIHBhc3NlZCB0byBlYWNoIGhhbmRsZXJcblx0XHQgKiBAbWVtYmVyb2YgbWl0dFxuXHRcdCAqL1xuXHRcdGVtaXQ6IGZ1bmN0aW9uIGVtaXQodHlwZSAgICAgICAgLCBldnQgICAgICkge1xuXHRcdFx0KGFsbFt0eXBlXSB8fCBbXSkubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IGhhbmRsZXIoZXZ0KTsgfSk7XG5cdFx0XHQoYWxsWycqJ10gfHwgW10pLm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyBoYW5kbGVyKHR5cGUsIGV2dCk7IH0pO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIG5hbWVzcGFjZXNfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbnZhciBuYW1lc3BhY2VzID0ge1xuICBzdmc6IHtcbiAgICBuYW1lOiAneG1sbnMnLFxuICAgIHVyaTogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJ1xuICB9LFxuICB4bGluazoge1xuICAgIG5hbWU6ICd4bWxuczp4bGluaycsXG4gICAgdXJpOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaydcbiAgfVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbmFtZXNwYWNlcztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufSk7XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGF0dHJzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnZhciBvYmplY3RUb0F0dHJzU3RyaW5nID0gZnVuY3Rpb24gKGF0dHJzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhhdHRycykubWFwKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cnNbYXR0cl0udG9TdHJpbmcoKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG4gICAgcmV0dXJuIChhdHRyICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIik7XG4gIH0pLmpvaW4oJyAnKTtcbn07XG5cbnZhciBzdmcgPSBuYW1lc3BhY2VzXzEuc3ZnO1xudmFyIHhsaW5rID0gbmFtZXNwYWNlc18xLnhsaW5rO1xuXG52YXIgZGVmYXVsdEF0dHJzID0ge307XG5kZWZhdWx0QXR0cnNbc3ZnLm5hbWVdID0gc3ZnLnVyaTtcbmRlZmF1bHRBdHRyc1t4bGluay5uYW1lXSA9IHhsaW5rLnVyaTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbnRlbnRdXG4gKiBAcGFyYW0ge09iamVjdH0gW2F0dHJpYnV0ZXNdXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnZhciB3cmFwSW5TdmdTdHJpbmcgPSBmdW5jdGlvbiAoY29udGVudCwgYXR0cmlidXRlcykge1xuICBpZiAoIGNvbnRlbnQgPT09IHZvaWQgMCApIGNvbnRlbnQgPSAnJztcblxuICB2YXIgYXR0cnMgPSBkZWVwbWVyZ2UoZGVmYXVsdEF0dHJzLCBhdHRyaWJ1dGVzIHx8IHt9KTtcbiAgdmFyIGF0dHJzUmVuZGVyZWQgPSBvYmplY3RUb0F0dHJzU3RyaW5nKGF0dHJzKTtcbiAgcmV0dXJuIChcIjxzdmcgXCIgKyBhdHRyc1JlbmRlcmVkICsgXCI+XCIgKyBjb250ZW50ICsgXCI8L3N2Zz5cIik7XG59O1xuXG52YXIgc3ZnJDEgPSBuYW1lc3BhY2VzXzEuc3ZnO1xudmFyIHhsaW5rJDEgPSBuYW1lc3BhY2VzXzEueGxpbms7XG5cbnZhciBkZWZhdWx0Q29uZmlnID0ge1xuICBhdHRyczogKCBvYmogPSB7XG4gICAgc3R5bGU6IFsncG9zaXRpb246IGFic29sdXRlJywgJ3dpZHRoOiAwJywgJ2hlaWdodDogMCddLmpvaW4oJzsgJylcbiAgfSwgb2JqW3N2ZyQxLm5hbWVdID0gc3ZnJDEudXJpLCBvYmpbeGxpbmskMS5uYW1lXSA9IHhsaW5rJDEudXJpLCBvYmogKVxufTtcbnZhciBvYmo7XG5cbnZhciBTcHJpdGUgPSBmdW5jdGlvbiBTcHJpdGUoY29uZmlnKSB7XG4gIHRoaXMuY29uZmlnID0gZGVlcG1lcmdlKGRlZmF1bHRDb25maWcsIGNvbmZpZyB8fCB7fSk7XG4gIHRoaXMuc3ltYm9scyA9IFtdO1xufTtcblxuLyoqXG4gKiBBZGQgbmV3IHN5bWJvbC4gSWYgc3ltYm9sIHdpdGggdGhlIHNhbWUgaWQgZXhpc3RzIGl0IHdpbGwgYmUgcmVwbGFjZWQuXG4gKiBAcGFyYW0ge1Nwcml0ZVN5bWJvbH0gc3ltYm9sXG4gKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgLSBzeW1ib2wgd2FzIGFkZGVkLCBgZmFsc2VgIC0gcmVwbGFjZWRcbiAqL1xuU3ByaXRlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKHN5bWJvbCkge1xuICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgc3ltYm9scyA9IHJlZi5zeW1ib2xzO1xuICB2YXIgZXhpc3RpbmcgPSB0aGlzLmZpbmQoc3ltYm9sLmlkKTtcblxuICBpZiAoZXhpc3RpbmcpIHtcbiAgICBzeW1ib2xzW3N5bWJvbHMuaW5kZXhPZihleGlzdGluZyldID0gc3ltYm9sO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN5bWJvbHMucHVzaChzeW1ib2wpO1xuICByZXR1cm4gdHJ1ZTtcbn07XG5cbi8qKlxuICogUmVtb3ZlIHN5bWJvbCAmIGRlc3Ryb3kgaXRcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIC0gc3ltYm9sIHdhcyBmb3VuZCAmIHN1Y2Nlc3NmdWxseSBkZXN0cm95ZWQsIGBmYWxzZWAgLSBvdGhlcndpc2VcbiAqL1xuU3ByaXRlLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUgKGlkKSB7XG4gIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBzeW1ib2xzID0gcmVmLnN5bWJvbHM7XG4gIHZhciBzeW1ib2wgPSB0aGlzLmZpbmQoaWQpO1xuXG4gIGlmIChzeW1ib2wpIHtcbiAgICBzeW1ib2xzLnNwbGljZShzeW1ib2xzLmluZGV4T2Yoc3ltYm9sKSwgMSk7XG4gICAgc3ltYm9sLmRlc3Ryb3koKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gKiBAcmV0dXJuIHtTcHJpdGVTeW1ib2x8bnVsbH1cbiAqL1xuU3ByaXRlLnByb3RvdHlwZS5maW5kID0gZnVuY3Rpb24gZmluZCAoaWQpIHtcbiAgcmV0dXJuIHRoaXMuc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuaWQgPT09IGlkOyB9KVswXSB8fCBudWxsO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblNwcml0ZS5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24gaGFzIChpZCkge1xuICByZXR1cm4gdGhpcy5maW5kKGlkKSAhPT0gbnVsbDtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5TcHJpdGUucHJvdG90eXBlLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeSAoKSB7XG4gIHZhciByZWYgPSB0aGlzLmNvbmZpZztcbiAgICB2YXIgYXR0cnMgPSByZWYuYXR0cnM7XG4gIHZhciBzdHJpbmdpZmllZFN5bWJvbHMgPSB0aGlzLnN5bWJvbHMubWFwKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnN0cmluZ2lmeSgpOyB9KS5qb2luKCcnKTtcbiAgcmV0dXJuIHdyYXBJblN2Z1N0cmluZyhzdHJpbmdpZmllZFN5bWJvbHMsIGF0dHJzKTtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5TcHJpdGUucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICByZXR1cm4gdGhpcy5zdHJpbmdpZnkoKTtcbn07XG5cblNwcml0ZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICB0aGlzLnN5bWJvbHMuZm9yRWFjaChmdW5jdGlvbiAocykgeyByZXR1cm4gcy5kZXN0cm95KCk7IH0pO1xufTtcblxudmFyIFNwcml0ZVN5bWJvbCA9IGZ1bmN0aW9uIFNwcml0ZVN5bWJvbChyZWYpIHtcbiAgdmFyIGlkID0gcmVmLmlkO1xuICB2YXIgdmlld0JveCA9IHJlZi52aWV3Qm94O1xuICB2YXIgY29udGVudCA9IHJlZi5jb250ZW50O1xuXG4gIHRoaXMuaWQgPSBpZDtcbiAgdGhpcy52aWV3Qm94ID0gdmlld0JveDtcbiAgdGhpcy5jb250ZW50ID0gY29udGVudDtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5TcHJpdGVTeW1ib2wucHJvdG90eXBlLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeSAoKSB7XG4gIHJldHVybiB0aGlzLmNvbnRlbnQ7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuU3ByaXRlU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgcmV0dXJuIHRoaXMuc3RyaW5naWZ5KCk7XG59O1xuXG5TcHJpdGVTeW1ib2wucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICBbJ2lkJywgJ3ZpZXdCb3gnLCAnY29udGVudCddLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHsgcmV0dXJuIGRlbGV0ZSB0aGlzJDFbcHJvcF07IH0pO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICogQHJldHVybiB7RWxlbWVudH1cbiAqL1xudmFyIHBhcnNlID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgdmFyIGhhc0ltcG9ydE5vZGUgPSAhIWRvY3VtZW50LmltcG9ydE5vZGU7XG4gIHZhciBkb2MgPSBuZXcgRE9NUGFyc2VyKCkucGFyc2VGcm9tU3RyaW5nKGNvbnRlbnQsICdpbWFnZS9zdmcreG1sJykuZG9jdW1lbnRFbGVtZW50O1xuXG4gIC8qKlxuICAgKiBGaXggZm9yIGJyb3dzZXIgd2hpY2ggYXJlIHRocm93aW5nIFdyb25nRG9jdW1lbnRFcnJvclxuICAgKiBpZiB5b3UgaW5zZXJ0IGFuIGVsZW1lbnQgd2hpY2ggaXMgbm90IHBhcnQgb2YgdGhlIGRvY3VtZW50XG4gICAqIEBzZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNzk4NjUxOS80NjI0NDAzXG4gICAqL1xuICBpZiAoaGFzSW1wb3J0Tm9kZSkge1xuICAgIHJldHVybiBkb2N1bWVudC5pbXBvcnROb2RlKGRvYywgdHJ1ZSk7XG4gIH1cblxuICByZXR1cm4gZG9jO1xufTtcblxudmFyIEJyb3dzZXJTcHJpdGVTeW1ib2wgPSAoZnVuY3Rpb24gKFNwcml0ZVN5bWJvbCQkMSkge1xuICBmdW5jdGlvbiBCcm93c2VyU3ByaXRlU3ltYm9sICgpIHtcbiAgICBTcHJpdGVTeW1ib2wkJDEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGlmICggU3ByaXRlU3ltYm9sJCQxICkgQnJvd3NlclNwcml0ZVN5bWJvbC5fX3Byb3RvX18gPSBTcHJpdGVTeW1ib2wkJDE7XG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU3ByaXRlU3ltYm9sJCQxICYmIFNwcml0ZVN5bWJvbCQkMS5wcm90b3R5cGUgKTtcbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCcm93c2VyU3ByaXRlU3ltYm9sO1xuXG4gIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGlzTW91bnRlZDoge30gfTtcblxuICBwcm90b3R5cGVBY2Nlc3NvcnMuaXNNb3VudGVkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF0aGlzLm5vZGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICAgKiBAcmV0dXJuIHtCcm93c2VyU3ByaXRlU3ltYm9sfVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5jcmVhdGVGcm9tRXhpc3RpbmdOb2RlID0gZnVuY3Rpb24gY3JlYXRlRnJvbUV4aXN0aW5nTm9kZSAobm9kZSkge1xuICAgIHJldHVybiBuZXcgQnJvd3NlclNwcml0ZVN5bWJvbCh7XG4gICAgICBpZDogbm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJyksXG4gICAgICB2aWV3Qm94OiBub2RlLmdldEF0dHJpYnV0ZSgndmlld0JveCcpLFxuICAgICAgY29udGVudDogbm9kZS5vdXRlckhUTUxcbiAgICB9KTtcbiAgfTtcblxuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gICAgaWYgKHRoaXMuaXNNb3VudGVkKSB7XG4gICAgICB0aGlzLnVubW91bnQoKTtcbiAgICB9XG4gICAgU3ByaXRlU3ltYm9sJCQxLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudHxzdHJpbmd9IHRhcmdldFxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUubW91bnQgPSBmdW5jdGlvbiBtb3VudCAodGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuaXNNb3VudGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlO1xuICAgIH1cblxuICAgIHZhciBtb3VudFRhcmdldCA9IHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpIDogdGFyZ2V0O1xuICAgIHZhciBub2RlID0gdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuXG4gICAgbW91bnRUYXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLnN0cmluZ2lmeSgpO1xuICAgIHJldHVybiBwYXJzZSh3cmFwSW5TdmdTdHJpbmcoY29udGVudCkpLmNoaWxkTm9kZXNbMF07XG4gIH07XG5cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUudW5tb3VudCA9IGZ1bmN0aW9uIHVubW91bnQgKCkge1xuICAgIHRoaXMubm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMubm9kZSk7XG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuICByZXR1cm4gQnJvd3NlclNwcml0ZVN5bWJvbDtcbn0oU3ByaXRlU3ltYm9sKSk7XG5cbnZhciBkZWZhdWx0Q29uZmlnJDEgPSB7XG4gIC8qKlxuICAgKiBTaG91bGQgZm9sbG93aW5nIG9wdGlvbnMgYmUgYXV0b21hdGljYWxseSBjb25maWd1cmVkOlxuICAgKiAtIGBzeW5jVXJsc1dpdGhCYXNlVGFnYFxuICAgKiAtIGBsb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyYFxuICAgKiAtIGBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbGBcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBhdXRvQ29uZmlndXJlOiB0cnVlLFxuXG4gIC8qKlxuICAgKiBEZWZhdWx0IG1vdW50aW5nIHNlbGVjdG9yXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBtb3VudFRvOiAnYm9keScsXG5cbiAgLyoqXG4gICAqIEZpeCBkaXNhcHBlYXJpbmcgU1ZHIGVsZW1lbnRzIHdoZW4gPGJhc2UgaHJlZj4gZXhpc3RzLlxuICAgKiBFeGVjdXRlcyB3aGVuIHNwcml0ZSBtb3VudGVkLlxuICAgKiBAc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE4MjY1MzM2Lzc5NjE1MlxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9ldmVyZGltZW5zaW9uL2FuZ3VsYXItc3ZnLWJhc2UtZml4XG4gICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci5qcy9pc3N1ZXMvODkzNCNpc3N1ZWNvbW1lbnQtNTY1Njg0NjZcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBzeW5jVXJsc1dpdGhCYXNlVGFnOiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdWxkIHNwcml0ZSBsaXN0ZW4gY3VzdG9tIGxvY2F0aW9uIGNoYW5nZSBldmVudFxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGxpc3RlbkxvY2F0aW9uQ2hhbmdlRXZlbnQ6IHRydWUsXG5cbiAgLyoqXG4gICAqIEN1c3RvbSB3aW5kb3cgZXZlbnQgbmFtZSB3aGljaCBzaG91bGQgYmUgZW1pdHRlZCB0byB1cGRhdGUgc3ByaXRlIHVybHNcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIGxvY2F0aW9uQ2hhbmdlRXZlbnQ6ICdsb2NhdGlvbkNoYW5nZScsXG5cbiAgLyoqXG4gICAqIEVtaXQgbG9jYXRpb24gY2hhbmdlIGV2ZW50IGluIEFuZ3VsYXIgYXV0b21hdGljYWxseVxuICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICovXG4gIGxvY2F0aW9uQ2hhbmdlQW5ndWxhckVtaXR0ZXI6IGZhbHNlLFxuXG4gIC8qKlxuICAgKiBTZWxlY3RvciB0byBmaW5kIHN5bWJvbHMgdXNhZ2VzIHdoZW4gdXBkYXRpbmcgc3ByaXRlIHVybHNcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICovXG4gIHVzYWdlc1RvVXBkYXRlOiAndXNlWyp8aHJlZl0nLFxuXG4gIC8qKlxuICAgKiBGaXggRmlyZWZveCBidWcgd2hlbiBncmFkaWVudHMgYW5kIHBhdHRlcm5zIGRvbid0IHdvcmsgaWYgdGhleSBhcmUgd2l0aGluIGEgc3ltYm9sLlxuICAgKiBFeGVjdXRlcyB3aGVuIHNwcml0ZSBpcyByZW5kZXJlZCwgYnV0IG5vdCBtb3VudGVkLlxuICAgKiBAc2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTMwNjY3NFxuICAgKiBAc2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTM1MzU3NVxuICAgKiBAc2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEyMzUzNjRcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbDogZmFsc2Vcbn07XG5cbi8qKlxuICogQHBhcmFtIHsqfSBhcnJheUxpa2VcbiAqIEByZXR1cm4ge0FycmF5fVxuICovXG52YXIgYXJyYXlGcm9tID0gZnVuY3Rpb24gKGFycmF5TGlrZSkge1xuICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyYXlMaWtlLCAwKTtcbn07XG5cbnZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbnZhciBicm93c2VyID0ge1xuICBpc0Nocm9tZTogL2Nocm9tZS9pLnRlc3QodWEpLFxuICBpc0ZpcmVmb3g6IC9maXJlZm94L2kudGVzdCh1YSksXG5cbiAgLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNzUwMyh2PXZzLjg1KS5hc3B4XG4gIGlzSUU6IC9tc2llL2kudGVzdCh1YSkgfHwgL3RyaWRlbnQvaS50ZXN0KHVhKSxcbiAgaXNFZGdlOiAvZWRnZS9pLnRlc3QodWEpXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0geyp9IGRhdGFcbiAqL1xudmFyIGRpc3BhdGNoRXZlbnQgPSBmdW5jdGlvbiAobmFtZSwgZGF0YSkge1xuICB2YXIgZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcbiAgZXZlbnQuaW5pdEN1c3RvbUV2ZW50KG5hbWUsIGZhbHNlLCBmYWxzZSwgZGF0YSk7XG4gIHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbn07XG5cbi8qKlxuICogSUUgZG9lc24ndCBldmFsdWF0ZSA8c3R5bGU+IHRhZ3MgaW4gU1ZHcyB0aGF0IGFyZSBkeW5hbWljYWxseSBhZGRlZCB0byB0aGUgcGFnZS5cbiAqIFRoaXMgdHJpY2sgd2lsbCB0cmlnZ2VyIElFIHRvIHJlYWQgYW5kIHVzZSBhbnkgZXhpc3RpbmcgU1ZHIDxzdHlsZT4gdGFncy5cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ljb25pYy9TVkdJbmplY3Rvci9pc3N1ZXMvMjNcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvMTA4OTg0NjkvXG4gKlxuICogQHBhcmFtIHtFbGVtZW50fSBub2RlIERPTSBFbGVtZW50IHRvIHNlYXJjaCA8c3R5bGU+IHRhZ3MgaW5cbiAqIEByZXR1cm4ge0FycmF5PEhUTUxTdHlsZUVsZW1lbnQ+fVxuICovXG52YXIgZXZhbFN0eWxlc0lFV29ya2Fyb3VuZCA9IGZ1bmN0aW9uIChub2RlKSB7XG4gIHZhciB1cGRhdGVkTm9kZXMgPSBbXTtcblxuICBhcnJheUZyb20obm9kZS5xdWVyeVNlbGVjdG9yQWxsKCdzdHlsZScpKVxuICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzdHlsZSkge1xuICAgICAgc3R5bGUudGV4dENvbnRlbnQgKz0gJyc7XG4gICAgICB1cGRhdGVkTm9kZXMucHVzaChzdHlsZSk7XG4gICAgfSk7XG5cbiAgcmV0dXJuIHVwZGF0ZWROb2Rlcztcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IFt1cmxdIElmIG5vdCBwcm92aWRlZCAtIGN1cnJlbnQgVVJMIHdpbGwgYmUgdXNlZFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG52YXIgZ2V0VXJsV2l0aG91dEZyYWdtZW50ID0gZnVuY3Rpb24gKHVybCkge1xuICByZXR1cm4gKHVybCB8fCB3aW5kb3cubG9jYXRpb24uaHJlZikuc3BsaXQoJyMnKVswXTtcbn07XG5cbi8qIGdsb2JhbCBhbmd1bGFyICovXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAqL1xudmFyIGxvY2F0aW9uQ2hhbmdlQW5ndWxhckVtaXR0ZXIgPSBmdW5jdGlvbiAoZXZlbnROYW1lKSB7XG4gIGFuZ3VsYXIubW9kdWxlKCduZycpLnJ1bihbJyRyb290U2NvcGUnLCBmdW5jdGlvbiAoJHJvb3RTY29wZSkge1xuICAgICRyb290U2NvcGUuJG9uKCckbG9jYXRpb25DaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24gKGUsIG5ld1VybCwgb2xkVXJsKSB7XG4gICAgICBkaXNwYXRjaEV2ZW50KGV2ZW50TmFtZSwgeyBvbGRVcmw6IG9sZFVybCwgbmV3VXJsOiBuZXdVcmwgfSk7XG4gICAgfSk7XG4gIH1dKTtcbn07XG5cbnZhciBkZWZhdWx0U2VsZWN0b3IgPSAnbGluZWFyR3JhZGllbnQsIHJhZGlhbEdyYWRpZW50LCBwYXR0ZXJuJztcblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHN2Z1xuICogQHBhcmFtIHtzdHJpbmd9IFtzZWxlY3Rvcl1cbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbnZhciBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbCA9IGZ1bmN0aW9uIChzdmcsIHNlbGVjdG9yKSB7XG4gIGlmICggc2VsZWN0b3IgPT09IHZvaWQgMCApIHNlbGVjdG9yID0gZGVmYXVsdFNlbGVjdG9yO1xuXG4gIGFycmF5RnJvbShzdmcucXVlcnlTZWxlY3RvckFsbCgnc3ltYm9sJykpLmZvckVhY2goZnVuY3Rpb24gKHN5bWJvbCkge1xuICAgIGFycmF5RnJvbShzeW1ib2wucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHN5bWJvbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBzeW1ib2wpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHN2Zztcbn07XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlTGlzdH0gbm9kZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFttYXRjaGVyXVxuICogQHJldHVybiB7QXR0cltdfVxuICovXG5mdW5jdGlvbiBzZWxlY3RBdHRyaWJ1dGVzKG5vZGVzLCBtYXRjaGVyKSB7XG4gIHZhciBhdHRycyA9IGFycmF5RnJvbShub2RlcykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuYXR0cmlidXRlcykge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG5cbiAgICB2YXIgYXJyYXlmaWVkID0gYXJyYXlGcm9tKG5vZGUuYXR0cmlidXRlcyk7XG4gICAgdmFyIG1hdGNoZWQgPSBtYXRjaGVyID8gYXJyYXlmaWVkLmZpbHRlcihtYXRjaGVyKSA6IGFycmF5ZmllZDtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChtYXRjaGVkKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiBhdHRycztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGVMaXN0fE5vZGV9IG5vZGVzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtjbG9uZT10cnVlXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cbnZhciB4TGlua05TID0gbmFtZXNwYWNlc18xLnhsaW5rLnVyaTtcbnZhciB4TGlua0F0dHJOYW1lID0gJ3hsaW5rOmhyZWYnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbnZhciBzcGVjaWFsVXJsQ2hhcnNQYXR0ZXJuID0gL1t7fXxcXFxcXFxeXFxbXFxdYFwiPD5dL2c7XG5cbmZ1bmN0aW9uIGVuY29kZXIodXJsKSB7XG4gIHJldHVybiB1cmwucmVwbGFjZShzcGVjaWFsVXJsQ2hhcnNQYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gKFwiJVwiICsgKG1hdGNoWzBdLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpKTtcbiAgfSk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlTGlzdH0gbm9kZXNcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdGFydHNXaXRoXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwbGFjZVdpdGhcbiAqIEByZXR1cm4ge05vZGVMaXN0fVxuICovXG5mdW5jdGlvbiB1cGRhdGVSZWZlcmVuY2VzKG5vZGVzLCBzdGFydHNXaXRoLCByZXBsYWNlV2l0aCkge1xuICBhcnJheUZyb20obm9kZXMpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICB2YXIgaHJlZiA9IG5vZGUuZ2V0QXR0cmlidXRlKHhMaW5rQXR0ck5hbWUpO1xuICAgIGlmIChocmVmICYmIGhyZWYuaW5kZXhPZihzdGFydHNXaXRoKSA9PT0gMCkge1xuICAgICAgdmFyIG5ld1VybCA9IGhyZWYucmVwbGFjZShzdGFydHNXaXRoLCByZXBsYWNlV2l0aCk7XG4gICAgICBub2RlLnNldEF0dHJpYnV0ZU5TKHhMaW5rTlMsIHhMaW5rQXR0ck5hbWUsIG5ld1VybCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gbm9kZXM7XG59XG5cbi8qKlxuICogTGlzdCBvZiBTVkcgYXR0cmlidXRlcyB0byB1cGRhdGUgdXJsKCkgdGFyZ2V0IGluIHRoZW1cbiAqL1xudmFyIGF0dExpc3QgPSBbXG4gICdjbGlwUGF0aCcsXG4gICdjb2xvclByb2ZpbGUnLFxuICAnc3JjJyxcbiAgJ2N1cnNvcicsXG4gICdmaWxsJyxcbiAgJ2ZpbHRlcicsXG4gICdtYXJrZXInLFxuICAnbWFya2VyU3RhcnQnLFxuICAnbWFya2VyTWlkJyxcbiAgJ21hcmtlckVuZCcsXG4gICdtYXNrJyxcbiAgJ3N0cm9rZScsXG4gICdzdHlsZSdcbl07XG5cbnZhciBhdHRTZWxlY3RvciA9IGF0dExpc3QubWFwKGZ1bmN0aW9uIChhdHRyKSB7IHJldHVybiAoXCJbXCIgKyBhdHRyICsgXCJdXCIpOyB9KS5qb2luKCcsJyk7XG5cbi8qKlxuICogVXBkYXRlIFVSTHMgaW4gc3ZnIGltYWdlIChsaWtlIGBmaWxsPVwidXJsKC4uLilcImApIGFuZCB1cGRhdGUgcmVmZXJlbmNpbmcgZWxlbWVudHNcbiAqIEBwYXJhbSB7RWxlbWVudH0gc3ZnXG4gKiBAcGFyYW0ge05vZGVMaXN0fSByZWZlcmVuY2VzXG4gKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB9IHN0YXJ0c1dpdGhcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBsYWNlV2l0aFxuICogQHJldHVybiB7dm9pZH1cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3Qgc3ByaXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcignc3ZnLnNwcml0ZScpO1xuICogY29uc3QgdXNhZ2VzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgndXNlJyk7XG4gKiB1cGRhdGVVcmxzKHNwcml0ZSwgdXNhZ2VzLCAnIycsICdwcmVmaXgjJyk7XG4gKi9cbnZhciB1cGRhdGVVcmxzID0gZnVuY3Rpb24gKHN2ZywgcmVmZXJlbmNlcywgc3RhcnRzV2l0aCwgcmVwbGFjZVdpdGgpIHtcbiAgdmFyIHN0YXJ0c1dpdGhFbmNvZGVkID0gZW5jb2RlcihzdGFydHNXaXRoKTtcbiAgdmFyIHJlcGxhY2VXaXRoRW5jb2RlZCA9IGVuY29kZXIocmVwbGFjZVdpdGgpO1xuXG4gIHZhciBub2RlcyA9IHN2Zy5xdWVyeVNlbGVjdG9yQWxsKGF0dFNlbGVjdG9yKTtcbiAgdmFyIGF0dHJzID0gc2VsZWN0QXR0cmlidXRlcyhub2RlcywgZnVuY3Rpb24gKHJlZikge1xuICAgIHZhciBsb2NhbE5hbWUgPSByZWYubG9jYWxOYW1lO1xuICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcblxuICAgIHJldHVybiBhdHRMaXN0LmluZGV4T2YobG9jYWxOYW1lKSAhPT0gLTEgJiYgdmFsdWUuaW5kZXhPZigoXCJ1cmwoXCIgKyBzdGFydHNXaXRoRW5jb2RlZCkpICE9PSAtMTtcbiAgfSk7XG5cbiAgYXR0cnMuZm9yRWFjaChmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gYXR0ci52YWx1ZSA9IGF0dHIudmFsdWUucmVwbGFjZShzdGFydHNXaXRoRW5jb2RlZCwgcmVwbGFjZVdpdGhFbmNvZGVkKTsgfSk7XG4gIHVwZGF0ZVJlZmVyZW5jZXMocmVmZXJlbmNlcywgc3RhcnRzV2l0aEVuY29kZWQsIHJlcGxhY2VXaXRoRW5jb2RlZCk7XG59O1xuXG4vKipcbiAqIEludGVybmFsIGVtaXR0ZXIgZXZlbnRzXG4gKiBAZW51bVxuICogQHByaXZhdGVcbiAqL1xudmFyIEV2ZW50cyA9IHtcbiAgTU9VTlQ6ICdtb3VudCcsXG4gIFNZTUJPTF9NT1VOVDogJ3N5bWJvbF9tb3VudCdcbn07XG5cbnZhciBCcm93c2VyU3ByaXRlID0gKGZ1bmN0aW9uIChTcHJpdGUkJDEpIHtcbiAgZnVuY3Rpb24gQnJvd3NlclNwcml0ZShjZmcpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICBpZiAoIGNmZyA9PT0gdm9pZCAwICkgY2ZnID0ge307XG5cbiAgICBTcHJpdGUkJDEuY2FsbCh0aGlzLCBkZWVwbWVyZ2UoZGVmYXVsdENvbmZpZyQxLCBjZmcpKTtcblxuICAgIHZhciBlbWl0dGVyID0gbWl0dCgpO1xuICAgIHRoaXMuX2VtaXR0ZXIgPSBlbWl0dGVyO1xuICAgIHRoaXMubm9kZSA9IG51bGw7XG5cbiAgICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgY29uZmlnID0gcmVmLmNvbmZpZztcblxuICAgIGlmIChjb25maWcuYXV0b0NvbmZpZ3VyZSkge1xuICAgICAgdGhpcy5fYXV0b0NvbmZpZ3VyZShjZmcpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuc3luY1VybHNXaXRoQmFzZVRhZykge1xuICAgICAgdmFyIGJhc2VVcmwgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYmFzZScpWzBdLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICAgICAgZW1pdHRlci5vbihFdmVudHMuTU9VTlQsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMkMS51cGRhdGVVcmxzKCcjJywgYmFzZVVybCk7IH0pO1xuICAgIH1cblxuICAgIHZhciBoYW5kbGVMb2NhdGlvbkNoYW5nZSA9IHRoaXMuX2hhbmRsZUxvY2F0aW9uQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5faGFuZGxlTG9jYXRpb25DaGFuZ2UgPSBoYW5kbGVMb2NhdGlvbkNoYW5nZTtcblxuICAgIC8vIFByb3ZpZGUgd2F5IHRvIHVwZGF0ZSBzcHJpdGUgdXJscyBleHRlcm5hbGx5IHZpYSBkaXNwYXRjaGluZyBjdXN0b20gd2luZG93IGV2ZW50XG4gICAgaWYgKGNvbmZpZy5saXN0ZW5Mb2NhdGlvbkNoYW5nZUV2ZW50KSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihjb25maWcubG9jYXRpb25DaGFuZ2VFdmVudCwgaGFuZGxlTG9jYXRpb25DaGFuZ2UpO1xuICAgIH1cblxuICAgIC8vIEVtaXQgbG9jYXRpb24gY2hhbmdlIGV2ZW50IGluIEFuZ3VsYXIgYXV0b21hdGljYWxseVxuICAgIGlmIChjb25maWcubG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlcikge1xuICAgICAgbG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlcihjb25maWcubG9jYXRpb25DaGFuZ2VFdmVudCk7XG4gICAgfVxuXG4gICAgLy8gQWZ0ZXIgc3ByaXRlIG1vdW50ZWRcbiAgICBlbWl0dGVyLm9uKEV2ZW50cy5NT1VOVCwgZnVuY3Rpb24gKHNwcml0ZU5vZGUpIHtcbiAgICAgIGlmIChjb25maWcubW92ZUdyYWRpZW50c091dHNpZGVTeW1ib2wpIHtcbiAgICAgICAgbW92ZUdyYWRpZW50c091dHNpZGVTeW1ib2woc3ByaXRlTm9kZSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBBZnRlciBzeW1ib2wgbW91bnRlZCBpbnRvIHNwcml0ZVxuICAgIGVtaXR0ZXIub24oRXZlbnRzLlNZTUJPTF9NT1VOVCwgZnVuY3Rpb24gKHN5bWJvbE5vZGUpIHtcbiAgICAgIGlmIChjb25maWcubW92ZUdyYWRpZW50c091dHNpZGVTeW1ib2wpIHtcbiAgICAgICAgbW92ZUdyYWRpZW50c091dHNpZGVTeW1ib2woc3ltYm9sTm9kZS5wYXJlbnROb2RlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGJyb3dzZXIuaXNJRSB8fCBicm93c2VyLmlzRWRnZSkge1xuICAgICAgICBldmFsU3R5bGVzSUVXb3JrYXJvdW5kKHN5bWJvbE5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCBTcHJpdGUkJDEgKSBCcm93c2VyU3ByaXRlLl9fcHJvdG9fXyA9IFNwcml0ZSQkMTtcbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTcHJpdGUkJDEgJiYgU3ByaXRlJCQxLnByb3RvdHlwZSApO1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJyb3dzZXJTcHJpdGU7XG5cbiAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgaXNNb3VudGVkOiB7fSB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgcHJvdG90eXBlQWNjZXNzb3JzLmlzTW91bnRlZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5ub2RlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBdXRvbWF0aWNhbGx5IGNvbmZpZ3VyZSBmb2xsb3dpbmcgb3B0aW9uc1xuICAgKiAtIGBzeW5jVXJsc1dpdGhCYXNlVGFnYFxuICAgKiAtIGBsb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyYFxuICAgKiAtIGBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbGBcbiAgICogQHBhcmFtIHtPYmplY3R9IGNmZ1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUuX2F1dG9Db25maWd1cmUgPSBmdW5jdGlvbiBfYXV0b0NvbmZpZ3VyZSAoY2ZnKSB7XG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGNvbmZpZyA9IHJlZi5jb25maWc7XG5cbiAgICBpZiAodHlwZW9mIGNmZy5zeW5jVXJsc1dpdGhCYXNlVGFnID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnLnN5bmNVcmxzV2l0aEJhc2VUYWcgPSB0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2Jhc2UnKVswXSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjZmcubG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZy5sb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyID0gJ2FuZ3VsYXInIGluIHdpbmRvdztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNmZy5tb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZy5tb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbCA9IGJyb3dzZXIuaXNGaXJlZm94O1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQHBhcmFtIHtFdmVudH0gZXZlbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IGV2ZW50LmRldGFpbFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQuZGV0YWlsLm9sZFVybFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnQuZGV0YWlsLm5ld1VybFxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUuX2hhbmRsZUxvY2F0aW9uQ2hhbmdlID0gZnVuY3Rpb24gX2hhbmRsZUxvY2F0aW9uQ2hhbmdlIChldmVudCkge1xuICAgIHZhciByZWYgPSBldmVudC5kZXRhaWw7XG4gICAgdmFyIG9sZFVybCA9IHJlZi5vbGRVcmw7XG4gICAgdmFyIG5ld1VybCA9IHJlZi5uZXdVcmw7XG4gICAgdGhpcy51cGRhdGVVcmxzKG9sZFVybCwgbmV3VXJsKTtcbiAgfTtcblxuICAvKipcbiAgICogQWRkIG5ldyBzeW1ib2wuIElmIHN5bWJvbCB3aXRoIHRoZSBzYW1lIGlkIGV4aXN0cyBpdCB3aWxsIGJlIHJlcGxhY2VkLlxuICAgKiBJZiBzcHJpdGUgYWxyZWFkeSBtb3VudGVkIC0gYHN5bWJvbC5tb3VudChzcHJpdGUubm9kZSlgIHdpbGwgYmUgY2FsbGVkLlxuICAgKiBAZmlyZXMgRXZlbnRzI1NZTUJPTF9NT1VOVFxuICAgKiBAcGFyYW0ge0Jyb3dzZXJTcHJpdGVTeW1ib2x9IHN5bWJvbFxuICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgLSBzeW1ib2wgd2FzIGFkZGVkLCBgZmFsc2VgIC0gcmVwbGFjZWRcbiAgICovXG4gIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIGFkZCAoc3ltYm9sKSB7XG4gICAgdmFyIHNwcml0ZSA9IHRoaXM7XG4gICAgdmFyIGlzTmV3U3ltYm9sID0gU3ByaXRlJCQxLnByb3RvdHlwZS5hZGQuY2FsbCh0aGlzLCBzeW1ib2wpO1xuXG4gICAgaWYgKHRoaXMuaXNNb3VudGVkICYmIGlzTmV3U3ltYm9sKSB7XG4gICAgICBzeW1ib2wubW91bnQoc3ByaXRlLm5vZGUpO1xuICAgICAgdGhpcy5fZW1pdHRlci5lbWl0KEV2ZW50cy5TWU1CT0xfTU9VTlQsIHN5bWJvbC5ub2RlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXNOZXdTeW1ib2w7XG4gIH07XG5cbiAgLyoqXG4gICAqIEF0dGFjaCB0byBleGlzdGluZyBET00gbm9kZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xFbGVtZW50fSB0YXJnZXRcbiAgICogQHJldHVybiB7RWxlbWVudHxudWxsfSBhdHRhY2hlZCBET00gRWxlbWVudC4gbnVsbCBpZiBub2RlIHRvIGF0dGFjaCBub3QgZm91bmQuXG4gICAqL1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS5hdHRhY2ggPSBmdW5jdGlvbiBhdHRhY2ggKHRhcmdldCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgdmFyIHNwcml0ZSA9IHRoaXM7XG5cbiAgICBpZiAoc3ByaXRlLmlzTW91bnRlZCkge1xuICAgICAgcmV0dXJuIHNwcml0ZS5ub2RlO1xuICAgIH1cblxuICAgIC8qKiBAdHlwZSBFbGVtZW50ICovXG4gICAgdmFyIG5vZGUgPSB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KSA6IHRhcmdldDtcbiAgICBzcHJpdGUubm9kZSA9IG5vZGU7XG5cbiAgICAvLyBBbHJlYWR5IGFkZGVkIHN5bWJvbHMgbmVlZHMgdG8gYmUgbW91bnRlZFxuICAgIHRoaXMuc3ltYm9scy5mb3JFYWNoKGZ1bmN0aW9uIChzeW1ib2wpIHtcbiAgICAgIHN5bWJvbC5tb3VudChzcHJpdGUubm9kZSk7XG4gICAgICB0aGlzJDEuX2VtaXR0ZXIuZW1pdChFdmVudHMuU1lNQk9MX01PVU5ULCBzeW1ib2wubm9kZSk7XG4gICAgfSk7XG5cbiAgICAvLyBDcmVhdGUgc3ltYm9scyBmcm9tIGV4aXN0aW5nIERPTSBub2RlcywgYWRkIGFuZCBtb3VudCB0aGVtXG4gICAgYXJyYXlGcm9tKG5vZGUucXVlcnlTZWxlY3RvckFsbCgnc3ltYm9sJykpXG4gICAgICAuZm9yRWFjaChmdW5jdGlvbiAoc3ltYm9sTm9kZSkge1xuICAgICAgICB2YXIgc3ltYm9sID0gQnJvd3NlclNwcml0ZVN5bWJvbC5jcmVhdGVGcm9tRXhpc3RpbmdOb2RlKHN5bWJvbE5vZGUpO1xuICAgICAgICBzeW1ib2wubm9kZSA9IHN5bWJvbE5vZGU7IC8vIGhhY2sgdG8gcHJldmVudCBzeW1ib2wgbW91bnRpbmcgdG8gc3ByaXRlIHdoZW4gYWRkaW5nXG4gICAgICAgIHNwcml0ZS5hZGQoc3ltYm9sKTtcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5fZW1pdHRlci5lbWl0KEV2ZW50cy5NT1VOVCwgbm9kZSk7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGNvbmZpZyA9IHJlZi5jb25maWc7XG4gICAgdmFyIHN5bWJvbHMgPSByZWYuc3ltYm9scztcbiAgICB2YXIgX2VtaXR0ZXIgPSByZWYuX2VtaXR0ZXI7XG5cbiAgICBzeW1ib2xzLmZvckVhY2goZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuZGVzdHJveSgpOyB9KTtcblxuICAgIF9lbWl0dGVyLm9mZignKicpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKGNvbmZpZy5sb2NhdGlvbkNoYW5nZUV2ZW50LCB0aGlzLl9oYW5kbGVMb2NhdGlvbkNoYW5nZSk7XG5cbiAgICBpZiAodGhpcy5pc01vdW50ZWQpIHtcbiAgICAgIHRoaXMudW5tb3VudCgpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogQGZpcmVzIEV2ZW50cyNNT1VOVFxuICAgKiBAcGFyYW0ge3N0cmluZ3xFbGVtZW50fSBbdGFyZ2V0XVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtwcmVwZW5kPWZhbHNlXVxuICAgKiBAcmV0dXJuIHtFbGVtZW50fG51bGx9IHJlbmRlcmVkIHNwcml0ZSBub2RlLiBudWxsIGlmIG1vdW50IG5vZGUgbm90IGZvdW5kLlxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUubW91bnQgPSBmdW5jdGlvbiBtb3VudCAodGFyZ2V0LCBwcmVwZW5kKSB7XG4gICAgaWYgKCB0YXJnZXQgPT09IHZvaWQgMCApIHRhcmdldCA9IHRoaXMuY29uZmlnLm1vdW50VG87XG4gICAgaWYgKCBwcmVwZW5kID09PSB2b2lkIDAgKSBwcmVwZW5kID0gZmFsc2U7XG5cbiAgICB2YXIgc3ByaXRlID0gdGhpcztcblxuICAgIGlmIChzcHJpdGUuaXNNb3VudGVkKSB7XG4gICAgICByZXR1cm4gc3ByaXRlLm5vZGU7XG4gICAgfVxuXG4gICAgdmFyIG1vdW50Tm9kZSA9IHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpIDogdGFyZ2V0O1xuICAgIHZhciBub2RlID0gc3ByaXRlLnJlbmRlcigpO1xuICAgIHRoaXMubm9kZSA9IG5vZGU7XG5cbiAgICBpZiAocHJlcGVuZCAmJiBtb3VudE5vZGUuY2hpbGROb2Rlc1swXSkge1xuICAgICAgbW91bnROb2RlLmluc2VydEJlZm9yZShub2RlLCBtb3VudE5vZGUuY2hpbGROb2Rlc1swXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vdW50Tm9kZS5hcHBlbmRDaGlsZChub2RlKTtcbiAgICB9XG5cbiAgICB0aGlzLl9lbWl0dGVyLmVtaXQoRXZlbnRzLk1PVU5ULCBub2RlKTtcblxuICAgIHJldHVybiBub2RlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyICgpIHtcbiAgICByZXR1cm4gcGFyc2UodGhpcy5zdHJpbmdpZnkoKSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIERldGFjaCBzcHJpdGUgZnJvbSB0aGUgRE9NXG4gICAqL1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS51bm1vdW50ID0gZnVuY3Rpb24gdW5tb3VudCAoKSB7XG4gICAgdGhpcy5ub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5ub2RlKTtcbiAgfTtcblxuICAvKipcbiAgICogVXBkYXRlIFVSTHMgaW4gc3ByaXRlIGFuZCB1c2FnZSBlbGVtZW50c1xuICAgKiBAcGFyYW0ge3N0cmluZ30gb2xkVXJsXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdVcmxcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIC0gVVJMcyB3YXMgdXBkYXRlZCwgYGZhbHNlYCAtIHNwcml0ZSBpcyBub3QgbW91bnRlZFxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUudXBkYXRlVXJscyA9IGZ1bmN0aW9uIHVwZGF0ZVVybHMkMSAob2xkVXJsLCBuZXdVcmwpIHtcbiAgICBpZiAoIXRoaXMuaXNNb3VudGVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVzYWdlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5jb25maWcudXNhZ2VzVG9VcGRhdGUpO1xuXG4gICAgdXBkYXRlVXJscyhcbiAgICAgIHRoaXMubm9kZSxcbiAgICAgIHVzYWdlcyxcbiAgICAgICgoZ2V0VXJsV2l0aG91dEZyYWdtZW50KG9sZFVybCkpICsgXCIjXCIpLFxuICAgICAgKChnZXRVcmxXaXRob3V0RnJhZ21lbnQobmV3VXJsKSkgKyBcIiNcIilcbiAgICApO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuICByZXR1cm4gQnJvd3NlclNwcml0ZTtcbn0oU3ByaXRlKSk7XG5cbnZhciByZWFkeSQxID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSkge1xuLyohXG4gICogZG9tcmVhZHkgKGMpIER1c3RpbiBEaWF6IDIwMTQgLSBMaWNlbnNlIE1JVFxuICAqL1xuIWZ1bmN0aW9uIChuYW1lLCBkZWZpbml0aW9uKSB7XG5cbiAgeyBtb2R1bGUuZXhwb3J0cyA9IGRlZmluaXRpb24oKTsgfVxuXG59KCdkb21yZWFkeScsIGZ1bmN0aW9uICgpIHtcblxuICB2YXIgZm5zID0gW10sIGxpc3RlbmVyXG4gICAgLCBkb2MgPSBkb2N1bWVudFxuICAgICwgaGFjayA9IGRvYy5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGxcbiAgICAsIGRvbUNvbnRlbnRMb2FkZWQgPSAnRE9NQ29udGVudExvYWRlZCdcbiAgICAsIGxvYWRlZCA9IChoYWNrID8gL15sb2FkZWR8XmMvIDogL15sb2FkZWR8Xml8XmMvKS50ZXN0KGRvYy5yZWFkeVN0YXRlKTtcblxuXG4gIGlmICghbG9hZGVkKVxuICB7IGRvYy5hZGRFdmVudExpc3RlbmVyKGRvbUNvbnRlbnRMb2FkZWQsIGxpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgIGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKGRvbUNvbnRlbnRMb2FkZWQsIGxpc3RlbmVyKTtcbiAgICBsb2FkZWQgPSAxO1xuICAgIHdoaWxlIChsaXN0ZW5lciA9IGZucy5zaGlmdCgpKSB7IGxpc3RlbmVyKCk7IH1cbiAgfSk7IH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgbG9hZGVkID8gc2V0VGltZW91dChmbiwgMCkgOiBmbnMucHVzaChmbik7XG4gIH1cblxufSk7XG59KTtcblxudmFyIHNwcml0ZU5vZGVJZCA9ICdfX1NWR19TUFJJVEVfTk9ERV9fJztcbnZhciBzcHJpdGVHbG9iYWxWYXJOYW1lID0gJ19fU1ZHX1NQUklURV9fJztcbnZhciBpc1Nwcml0ZUV4aXN0cyA9ICEhd2luZG93W3Nwcml0ZUdsb2JhbFZhck5hbWVdO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLW11dGFibGUtZXhwb3J0c1xudmFyIHNwcml0ZTtcblxuaWYgKGlzU3ByaXRlRXhpc3RzKSB7XG4gIHNwcml0ZSA9IHdpbmRvd1tzcHJpdGVHbG9iYWxWYXJOYW1lXTtcbn0gZWxzZSB7XG4gIHNwcml0ZSA9IG5ldyBCcm93c2VyU3ByaXRlKHsgYXR0cnM6IHsgaWQ6IHNwcml0ZU5vZGVJZCB9IH0pO1xuICB3aW5kb3dbc3ByaXRlR2xvYmFsVmFyTmFtZV0gPSBzcHJpdGU7XG59XG5cbnZhciBsb2FkU3ByaXRlID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ2hlY2sgZm9yIHBhZ2UgYWxyZWFkeSBjb250YWlucyBzcHJpdGUgbm9kZVxuICAgKiBJZiBmb3VuZCAtIGF0dGFjaCB0byBhbmQgcmV1c2UgaXQncyBjb250ZW50XG4gICAqIElmIG5vdCAtIHJlbmRlciBhbmQgbW91bnQgdGhlIG5ldyBzcHJpdGVcbiAgICovXG4gIHZhciBleGlzdGluZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNwcml0ZU5vZGVJZCk7XG5cbiAgaWYgKGV4aXN0aW5nKSB7XG4gICAgc3ByaXRlLmF0dGFjaChleGlzdGluZyk7XG4gIH0gZWxzZSB7XG4gICAgc3ByaXRlLm1vdW50KGRvY3VtZW50LmJvZHksIHRydWUpO1xuICB9XG59O1xuXG5pZiAoZG9jdW1lbnQuYm9keSkge1xuICBsb2FkU3ByaXRlKCk7XG59IGVsc2Uge1xuICByZWFkeSQxKGxvYWRTcHJpdGUpO1xufVxuXG52YXIgc3ByaXRlJDEgPSBzcHJpdGU7XG5cbnJldHVybiBzcHJpdGUkMTtcblxufSkpKTtcbiIsInZhciBjaGVjayA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgJiYgaXQuTWF0aCA9PSBNYXRoICYmIGl0O1xufTtcblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcbm1vZHVsZS5leHBvcnRzID1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIGNoZWNrKHR5cGVvZiBnbG9iYWxUaGlzID09ICdvYmplY3QnICYmIGdsb2JhbFRoaXMpIHx8XG4gIGNoZWNrKHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93KSB8fFxuICBjaGVjayh0eXBlb2Ygc2VsZiA9PSAnb2JqZWN0JyAmJiBzZWxmKSB8fFxuICBjaGVjayh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCkgfHxcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gIEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkpIHtcbiAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXMoU3ltYm9sLCBuYW1lKSkgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdO1xuICAgIGVsc2UgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpO1xuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0J1ZmZlcih2YWwpIHtcbiAgcmV0dXJuIHZhbCAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsKSAmJiB2YWwuY29uc3RydWN0b3IgIT09IG51bGwgJiYgIWlzVW5kZWZpbmVkKHZhbC5jb25zdHJ1Y3RvcilcbiAgICAmJiB0eXBlb2YgdmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIHZhbC5jb25zdHJ1Y3Rvci5pc0J1ZmZlcih2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICogbmF0aXZlc2NyaXB0XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ05hdGl2ZVNjcmlwdCcgb3IgJ05TJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIChuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnTlMnKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gKFxuICAgIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ1xuICApO1xufVxuXG4vKipcbiAqIEl0ZXJhdGUgb3ZlciBhbiBBcnJheSBvciBhbiBPYmplY3QgaW52b2tpbmcgYSBmdW5jdGlvbiBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmIGBvYmpgIGlzIGFuIEFycmF5IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwgaW5kZXgsIGFuZCBjb21wbGV0ZSBhcnJheSBmb3IgZWFjaCBpdGVtLlxuICpcbiAqIElmICdvYmonIGlzIGFuIE9iamVjdCBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGtleSwgYW5kIGNvbXBsZXRlIG9iamVjdCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqXG4gKiBAcGFyYW0ge09iamVjdHxBcnJheX0gb2JqIFRoZSBvYmplY3QgdG8gaXRlcmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGNhbGxiYWNrIHRvIGludm9rZSBmb3IgZWFjaCBpdGVtXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbikge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZvcmNlIGFuIGFycmF5IGlmIG5vdCBhbHJlYWR5IHNvbWV0aGluZyBpdGVyYWJsZVxuICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBvYmogPSBbb2JqXTtcbiAgfVxuXG4gIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgYXJyYXkgdmFsdWVzXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIEFjY2VwdHMgdmFyYXJncyBleHBlY3RpbmcgZWFjaCBhcmd1bWVudCB0byBiZSBhbiBvYmplY3QsIHRoZW5cbiAqIGltbXV0YWJseSBtZXJnZXMgdGhlIHByb3BlcnRpZXMgb2YgZWFjaCBvYmplY3QgYW5kIHJldHVybnMgcmVzdWx0LlxuICpcbiAqIFdoZW4gbXVsdGlwbGUgb2JqZWN0cyBjb250YWluIHRoZSBzYW1lIGtleSB0aGUgbGF0ZXIgb2JqZWN0IGluXG4gKiB0aGUgYXJndW1lbnRzIGxpc3Qgd2lsbCB0YWtlIHByZWNlZGVuY2UuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIHJlc3VsdCA9IG1lcmdlKHtmb286IDEyM30sIHtmb286IDQ1Nn0pO1xuICogY29uc29sZS5sb2cocmVzdWx0LmZvbyk7IC8vIG91dHB1dHMgNDU2XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqMSBPYmplY3QgdG8gbWVyZ2VcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IG1lcmdlKHJlc3VsdFtrZXldLCB2YWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbDtcbiAgICB9XG4gIH1cblxuICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRnVuY3Rpb24gZXF1YWwgdG8gbWVyZ2Ugd2l0aCB0aGUgZGlmZmVyZW5jZSBiZWluZyB0aGF0IG5vIHJlZmVyZW5jZVxuICogdG8gb3JpZ2luYWwgb2JqZWN0cyBpcyBrZXB0LlxuICpcbiAqIEBzZWUgbWVyZ2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGRlZXBNZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0eXBlb2YgcmVzdWx0W2tleV0gPT09ICdvYmplY3QnICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZShyZXN1bHRba2V5XSwgdmFsKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXN1bHRba2V5XSA9IGRlZXBNZXJnZSh7fSwgdmFsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWw7XG4gICAgfVxuICB9XG5cbiAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZm9yRWFjaChhcmd1bWVudHNbaV0sIGFzc2lnblZhbHVlKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIEV4dGVuZHMgb2JqZWN0IGEgYnkgbXV0YWJseSBhZGRpbmcgdG8gaXQgdGhlIHByb3BlcnRpZXMgb2Ygb2JqZWN0IGIuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGEgVGhlIG9iamVjdCB0byBiZSBleHRlbmRlZFxuICogQHBhcmFtIHtPYmplY3R9IGIgVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgZnJvbVxuICogQHBhcmFtIHtPYmplY3R9IHRoaXNBcmcgVGhlIG9iamVjdCB0byBiaW5kIGZ1bmN0aW9uIHRvXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSByZXN1bHRpbmcgdmFsdWUgb2Ygb2JqZWN0IGFcbiAqL1xuZnVuY3Rpb24gZXh0ZW5kKGEsIGIsIHRoaXNBcmcpIHtcbiAgZm9yRWFjaChiLCBmdW5jdGlvbiBhc3NpZ25WYWx1ZSh2YWwsIGtleSkge1xuICAgIGlmICh0aGlzQXJnICYmIHR5cGVvZiB2YWwgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGFba2V5XSA9IGJpbmQodmFsLCB0aGlzQXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYVtrZXldID0gdmFsO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBhO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaXNBcnJheUJ1ZmZlcjogaXNBcnJheUJ1ZmZlcixcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhOiBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldzogaXNBcnJheUJ1ZmZlclZpZXcsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzVW5kZWZpbmVkOiBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlOiBpc0RhdGUsXG4gIGlzRmlsZTogaXNGaWxlLFxuICBpc0Jsb2I6IGlzQmxvYixcbiAgaXNGdW5jdGlvbjogaXNGdW5jdGlvbixcbiAgaXNTdHJlYW06IGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtczogaXNVUkxTZWFyY2hQYXJhbXMsXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52OiBpc1N0YW5kYXJkQnJvd3NlckVudixcbiAgZm9yRWFjaDogZm9yRWFjaCxcbiAgbWVyZ2U6IG1lcmdlLFxuICBkZWVwTWVyZ2U6IGRlZXBNZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwidmFyIGhhc093blByb3BlcnR5ID0ge30uaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgMSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSlbMV0gIT0gNztcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIHJldHVybiBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKG9iamVjdCwga2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgdmFsdWUpKTtcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIG9iamVjdFtrZXldID0gdmFsdWU7XG4gIHJldHVybiBvYmplY3Q7XG59O1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBJbnRlcm5hbFN0YXRlTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ludGVybmFsLXN0YXRlJyk7XG5cbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgZW5mb3JjZUludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmVuZm9yY2U7XG52YXIgVEVNUExBVEUgPSBTdHJpbmcoU3RyaW5nKS5zcGxpdCgnU3RyaW5nJyk7XG5cbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gIHZhciB1bnNhZmUgPSBvcHRpb25zID8gISFvcHRpb25zLnVuc2FmZSA6IGZhbHNlO1xuICB2YXIgc2ltcGxlID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5lbnVtZXJhYmxlIDogZmFsc2U7XG4gIHZhciBub1RhcmdldEdldCA9IG9wdGlvbnMgPyAhIW9wdGlvbnMubm9UYXJnZXRHZXQgOiBmYWxzZTtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gJ3N0cmluZycgJiYgIWhhcyh2YWx1ZSwgJ25hbWUnKSkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHZhbHVlLCAnbmFtZScsIGtleSk7XG4gICAgZW5mb3JjZUludGVybmFsU3RhdGUodmFsdWUpLnNvdXJjZSA9IFRFTVBMQVRFLmpvaW4odHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/IGtleSA6ICcnKTtcbiAgfVxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XG4gICAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gICAgZWxzZSBzZXRHbG9iYWwoa2V5LCB2YWx1ZSk7XG4gICAgcmV0dXJuO1xuICB9IGVsc2UgaWYgKCF1bnNhZmUpIHtcbiAgICBkZWxldGUgT1trZXldO1xuICB9IGVsc2UgaWYgKCFub1RhcmdldEdldCAmJiBPW2tleV0pIHtcbiAgICBzaW1wbGUgPSB0cnVlO1xuICB9XG4gIGlmIChzaW1wbGUpIE9ba2V5XSA9IHZhbHVlO1xuICBlbHNlIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShPLCBrZXksIHZhbHVlKTtcbi8vIGFkZCBmYWtlIEZ1bmN0aW9uI3RvU3RyaW5nIGZvciBjb3JyZWN0IHdvcmsgd3JhcHBlZCBtZXRob2RzIC8gY29uc3RydWN0b3JzIHdpdGggbWV0aG9kcyBsaWtlIExvRGFzaCBpc05hdGl2ZVxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgJiYgZ2V0SW50ZXJuYWxTdGF0ZSh0aGlzKS5zb3VyY2UgfHwgaW5zcGVjdFNvdXJjZSh0aGlzKTtcbn0pO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGJpdG1hcCwgdmFsdWUpIHtcbiAgcmV0dXJuIHtcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxuICAgIGNvbmZpZ3VyYWJsZTogIShiaXRtYXAgJiAyKSxcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfTtcbn07XG4iLCJ2YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgb2JqZWN0SGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xudmFyIHNldCwgZ2V0LCBoYXM7XG5cbnZhciBlbmZvcmNlID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBoYXMoaXQpID8gZ2V0KGl0KSA6IHNldChpdCwge30pO1xufTtcblxudmFyIGdldHRlckZvciA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcbiAgICB2YXIgc3RhdGU7XG4gICAgaWYgKCFpc09iamVjdChpdCkgfHwgKHN0YXRlID0gZ2V0KGl0KSkudHlwZSAhPT0gVFlQRSkge1xuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJbmNvbXBhdGlibGUgcmVjZWl2ZXIsICcgKyBUWVBFICsgJyByZXF1aXJlZCcpO1xuICAgIH0gcmV0dXJuIHN0YXRlO1xuICB9O1xufTtcblxuaWYgKE5BVElWRV9XRUFLX01BUCkge1xuICB2YXIgc3RvcmUgPSBuZXcgV2Vha01hcCgpO1xuICB2YXIgd21nZXQgPSBzdG9yZS5nZXQ7XG4gIHZhciB3bWhhcyA9IHN0b3JlLmhhcztcbiAgdmFyIHdtc2V0ID0gc3RvcmUuc2V0O1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgd21zZXQuY2FsbChzdG9yZSwgaXQsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWdldC5jYWxsKHN0b3JlLCBpdCkgfHwge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiB3bWhhcy5jYWxsKHN0b3JlLCBpdCk7XG4gIH07XG59IGVsc2Uge1xuICB2YXIgU1RBVEUgPSBzaGFyZWRLZXkoJ3N0YXRlJyk7XG4gIGhpZGRlbktleXNbU1RBVEVdID0gdHJ1ZTtcbiAgc2V0ID0gZnVuY3Rpb24gKGl0LCBtZXRhZGF0YSkge1xuICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShpdCwgU1RBVEUsIG1ldGFkYXRhKTtcbiAgICByZXR1cm4gbWV0YWRhdGE7XG4gIH07XG4gIGdldCA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKSA/IGl0W1NUQVRFXSA6IHt9O1xuICB9O1xuICBoYXMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgICByZXR1cm4gb2JqZWN0SGFzKGl0LCBTVEFURSk7XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBzZXQ6IHNldCxcbiAgZ2V0OiBnZXQsXG4gIGhhczogaGFzLFxuICBlbmZvcmNlOiBlbmZvcmNlLFxuICBnZXR0ZXJGb3I6IGdldHRlckZvclxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLWZ1bmN0aW9uJyk7XG5cbnZhciBQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XG4gIHZhciByZXNvbHZlLCByZWplY3Q7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xuICAgIHJlc29sdmUgPSAkJHJlc29sdmU7XG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XG4gIH0pO1xuICB0aGlzLnJlc29sdmUgPSBhRnVuY3Rpb24ocmVzb2x2ZSk7XG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XG59O1xuXG4vLyAyNS40LjEuNSBOZXdQcm9taXNlQ2FwYWJpbGl0eShDKVxubW9kdWxlLmV4cG9ydHMuZiA9IGZ1bmN0aW9uIChDKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcblxuLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XG4gIGFGdW5jdGlvbihmbik7XG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcbiAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICBjYXNlIDA6IHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0KTtcbiAgICB9O1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhKTtcbiAgICB9O1xuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiKTtcbiAgICB9O1xuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGF0LCBhLCBiLCBjKTtcbiAgICB9O1xuICB9XG4gIHJldHVybiBmdW5jdGlvbiAoLyogLi4uYXJncyAqLykge1xuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xuICB9O1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBpc0FycmF5SXRlcmF0b3JNZXRob2QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtYXJyYXktaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciBnZXRJdGVyYXRvck1ldGhvZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XG52YXIgY2FsbFdpdGhTYWZlSXRlcmF0aW9uQ2xvc2luZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jYWxsLXdpdGgtc2FmZS1pdGVyYXRpb24tY2xvc2luZycpO1xuXG52YXIgUmVzdWx0ID0gZnVuY3Rpb24gKHN0b3BwZWQsIHJlc3VsdCkge1xuICB0aGlzLnN0b3BwZWQgPSBzdG9wcGVkO1xuICB0aGlzLnJlc3VsdCA9IHJlc3VsdDtcbn07XG5cbnZhciBpdGVyYXRlID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGZuLCB0aGF0LCBBU19FTlRSSUVTLCBJU19JVEVSQVRPUikge1xuICB2YXIgYm91bmRGdW5jdGlvbiA9IGJpbmQoZm4sIHRoYXQsIEFTX0VOVFJJRVMgPyAyIDogMSk7XG4gIHZhciBpdGVyYXRvciwgaXRlckZuLCBpbmRleCwgbGVuZ3RoLCByZXN1bHQsIG5leHQsIHN0ZXA7XG5cbiAgaWYgKElTX0lURVJBVE9SKSB7XG4gICAgaXRlcmF0b3IgPSBpdGVyYWJsZTtcbiAgfSBlbHNlIHtcbiAgICBpdGVyRm4gPSBnZXRJdGVyYXRvck1ldGhvZChpdGVyYWJsZSk7XG4gICAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKCdUYXJnZXQgaXMgbm90IGl0ZXJhYmxlJyk7XG4gICAgLy8gb3B0aW1pc2F0aW9uIGZvciBhcnJheSBpdGVyYXRvcnNcbiAgICBpZiAoaXNBcnJheUl0ZXJhdG9yTWV0aG9kKGl0ZXJGbikpIHtcbiAgICAgIGZvciAoaW5kZXggPSAwLCBsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgICByZXN1bHQgPSBBU19FTlRSSUVTXG4gICAgICAgICAgPyBib3VuZEZ1bmN0aW9uKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKVxuICAgICAgICAgIDogYm91bmRGdW5jdGlvbihpdGVyYWJsZVtpbmRleF0pO1xuICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdCBpbnN0YW5jZW9mIFJlc3VsdCkgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xuICAgIH1cbiAgICBpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKGl0ZXJhYmxlKTtcbiAgfVxuXG4gIG5leHQgPSBpdGVyYXRvci5uZXh0O1xuICB3aGlsZSAoIShzdGVwID0gbmV4dC5jYWxsKGl0ZXJhdG9yKSkuZG9uZSkge1xuICAgIHJlc3VsdCA9IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIGJvdW5kRnVuY3Rpb24sIHN0ZXAudmFsdWUsIEFTX0VOVFJJRVMpO1xuICAgIGlmICh0eXBlb2YgcmVzdWx0ID09ICdvYmplY3QnICYmIHJlc3VsdCAmJiByZXN1bHQgaW5zdGFuY2VvZiBSZXN1bHQpIHJldHVybiByZXN1bHQ7XG4gIH0gcmV0dXJuIG5ldyBSZXN1bHQoZmFsc2UpO1xufTtcblxuaXRlcmF0ZS5zdG9wID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICByZXR1cm4gbmV3IFJlc3VsdCh0cnVlLCByZXN1bHQpO1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4geyBlcnJvcjogZmFsc2UsIHZhbHVlOiBleGVjKCkgfTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4geyBlcnJvcjogdHJ1ZSwgdmFsdWU6IGVycm9yIH07XG4gIH1cbn07XG4iLCIvLyBnZXQgc3VjY2Vzc2Z1bCBjb250cm9sIGZyb20gZm9ybSBhbmQgYXNzZW1ibGUgaW50byBvYmplY3Rcbi8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw0MDEvaW50ZXJhY3QvZm9ybXMuaHRtbCNoLTE3LjEzLjJcblxuLy8gdHlwZXMgd2hpY2ggaW5kaWNhdGUgYSBzdWJtaXQgYWN0aW9uIGFuZCBhcmUgbm90IHN1Y2Nlc3NmdWwgY29udHJvbHNcbi8vIHRoZXNlIHdpbGwgYmUgaWdub3JlZFxudmFyIGtfcl9zdWJtaXR0ZXIgPSAvXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2k7XG5cbi8vIG5vZGUgbmFtZXMgd2hpY2ggY291bGQgYmUgc3VjY2Vzc2Z1bCBjb250cm9sc1xudmFyIGtfcl9zdWNjZXNzX2NvbnRybHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxrZXlnZW4pL2k7XG5cbi8vIE1hdGNoZXMgYnJhY2tldCBub3RhdGlvbi5cbnZhciBicmFja2V0cyA9IC8oXFxbW15cXFtcXF1dKlxcXSkvZztcblxuLy8gc2VyaWFsaXplcyBmb3JtIGZpZWxkc1xuLy8gQHBhcmFtIGZvcm0gTVVTVCBiZSBhbiBIVE1MRm9ybSBlbGVtZW50XG4vLyBAcGFyYW0gb3B0aW9ucyBpcyBhbiBvcHRpb25hbCBhcmd1bWVudCB0byBjb25maWd1cmUgdGhlIHNlcmlhbGl6YXRpb24uIERlZmF1bHQgb3V0cHV0XG4vLyB3aXRoIG5vIG9wdGlvbnMgc3BlY2lmaWVkIGlzIGEgdXJsIGVuY29kZWQgc3RyaW5nXG4vLyAgICAtIGhhc2g6IFt0cnVlIHwgZmFsc2VdIENvbmZpZ3VyZSB0aGUgb3V0cHV0IHR5cGUuIElmIHRydWUsIHRoZSBvdXRwdXQgd2lsbFxuLy8gICAgYmUgYSBqcyBvYmplY3QuXG4vLyAgICAtIHNlcmlhbGl6ZXI6IFtmdW5jdGlvbl0gT3B0aW9uYWwgc2VyaWFsaXplciBmdW5jdGlvbiB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCBvbmUuXG4vLyAgICBUaGUgZnVuY3Rpb24gdGFrZXMgMyBhcmd1bWVudHMgKHJlc3VsdCwga2V5LCB2YWx1ZSkgYW5kIHNob3VsZCByZXR1cm4gbmV3IHJlc3VsdFxuLy8gICAgaGFzaCBhbmQgdXJsIGVuY29kZWQgc3RyIHNlcmlhbGl6ZXJzIGFyZSBwcm92aWRlZCB3aXRoIHRoaXMgbW9kdWxlXG4vLyAgICAtIGRpc2FibGVkOiBbdHJ1ZSB8IGZhbHNlXS4gSWYgdHJ1ZSBzZXJpYWxpemUgZGlzYWJsZWQgZmllbGRzLlxuLy8gICAgLSBlbXB0eTogW3RydWUgfCBmYWxzZV0uIElmIHRydWUgc2VyaWFsaXplIGVtcHR5IGZpZWxkc1xuZnVuY3Rpb24gc2VyaWFsaXplKGZvcm0sIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT0gJ29iamVjdCcpIHtcbiAgICAgICAgb3B0aW9ucyA9IHsgaGFzaDogISFvcHRpb25zIH07XG4gICAgfVxuICAgIGVsc2UgaWYgKG9wdGlvbnMuaGFzaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG9wdGlvbnMuaGFzaCA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdCA9IChvcHRpb25zLmhhc2gpID8ge30gOiAnJztcbiAgICB2YXIgc2VyaWFsaXplciA9IG9wdGlvbnMuc2VyaWFsaXplciB8fCAoKG9wdGlvbnMuaGFzaCkgPyBoYXNoX3NlcmlhbGl6ZXIgOiBzdHJfc2VyaWFsaXplKTtcblxuICAgIHZhciBlbGVtZW50cyA9IGZvcm0gJiYgZm9ybS5lbGVtZW50cyA/IGZvcm0uZWxlbWVudHMgOiBbXTtcblxuICAgIC8vT2JqZWN0IHN0b3JlIGVhY2ggcmFkaW8gYW5kIHNldCBpZiBpdCdzIGVtcHR5IG9yIG5vdFxuICAgIHZhciByYWRpb19zdG9yZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBmb3IgKHZhciBpPTAgOyBpPGVsZW1lbnRzLmxlbmd0aCA7ICsraSkge1xuICAgICAgICB2YXIgZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuXG4gICAgICAgIC8vIGluZ29yZSBkaXNhYmxlZCBmaWVsZHNcbiAgICAgICAgaWYgKCghb3B0aW9ucy5kaXNhYmxlZCAmJiBlbGVtZW50LmRpc2FibGVkKSB8fCAhZWxlbWVudC5uYW1lKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpZ25vcmUgYW55aHRpbmcgdGhhdCBpcyBub3QgY29uc2lkZXJlZCBhIHN1Y2Nlc3MgZmllbGRcbiAgICAgICAgaWYgKCFrX3Jfc3VjY2Vzc19jb250cmxzLnRlc3QoZWxlbWVudC5ub2RlTmFtZSkgfHxcbiAgICAgICAgICAgIGtfcl9zdWJtaXR0ZXIudGVzdChlbGVtZW50LnR5cGUpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXkgPSBlbGVtZW50Lm5hbWU7XG4gICAgICAgIHZhciB2YWwgPSBlbGVtZW50LnZhbHVlO1xuXG4gICAgICAgIC8vIHdlIGNhbid0IGp1c3QgdXNlIGVsZW1lbnQudmFsdWUgZm9yIGNoZWNrYm94ZXMgY2F1c2Ugc29tZSBicm93c2VycyBsaWUgdG8gdXNcbiAgICAgICAgLy8gdGhleSBzYXkgXCJvblwiIGZvciB2YWx1ZSB3aGVuIHRoZSBib3ggaXNuJ3QgY2hlY2tlZFxuICAgICAgICBpZiAoKGVsZW1lbnQudHlwZSA9PT0gJ2NoZWNrYm94JyB8fCBlbGVtZW50LnR5cGUgPT09ICdyYWRpbycpICYmICFlbGVtZW50LmNoZWNrZWQpIHtcbiAgICAgICAgICAgIHZhbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHdlIHdhbnQgZW1wdHkgZWxlbWVudHNcbiAgICAgICAgaWYgKG9wdGlvbnMuZW1wdHkpIHtcbiAgICAgICAgICAgIC8vIGZvciBjaGVja2JveFxuICAgICAgICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gJ2NoZWNrYm94JyAmJiAhZWxlbWVudC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgdmFsID0gJyc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGZvciByYWRpb1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gJ3JhZGlvJykge1xuICAgICAgICAgICAgICAgIGlmICghcmFkaW9fc3RvcmVbZWxlbWVudC5uYW1lXSAmJiAhZWxlbWVudC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhZGlvX3N0b3JlW2VsZW1lbnQubmFtZV0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZWxlbWVudC5jaGVja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJhZGlvX3N0b3JlW2VsZW1lbnQubmFtZV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgb3B0aW9ucyBlbXB0eSBpcyB0cnVlLCBjb250aW51ZSBvbmx5IGlmIGl0cyByYWRpb1xuICAgICAgICAgICAgaWYgKHZhbCA9PSB1bmRlZmluZWQgJiYgZWxlbWVudC50eXBlID09ICdyYWRpbycpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIHZhbHVlLWxlc3MgZmllbGRzIGFyZSBpZ25vcmVkIHVubGVzcyBvcHRpb25zLmVtcHR5IGlzIHRydWVcbiAgICAgICAgICAgIGlmICghdmFsKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBtdWx0aSBzZWxlY3QgYm94ZXNcbiAgICAgICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gJ3NlbGVjdC1tdWx0aXBsZScpIHtcbiAgICAgICAgICAgIHZhbCA9IFtdO1xuXG4gICAgICAgICAgICB2YXIgc2VsZWN0T3B0aW9ucyA9IGVsZW1lbnQub3B0aW9ucztcbiAgICAgICAgICAgIHZhciBpc1NlbGVjdGVkT3B0aW9ucyA9IGZhbHNlO1xuICAgICAgICAgICAgZm9yICh2YXIgaj0wIDsgajxzZWxlY3RPcHRpb25zLmxlbmd0aCA7ICsraikge1xuICAgICAgICAgICAgICAgIHZhciBvcHRpb24gPSBzZWxlY3RPcHRpb25zW2pdO1xuICAgICAgICAgICAgICAgIHZhciBhbGxvd2VkRW1wdHkgPSBvcHRpb25zLmVtcHR5ICYmICFvcHRpb24udmFsdWU7XG4gICAgICAgICAgICAgICAgdmFyIGhhc1ZhbHVlID0gKG9wdGlvbi52YWx1ZSB8fCBhbGxvd2VkRW1wdHkpO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb24uc2VsZWN0ZWQgJiYgaGFzVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaXNTZWxlY3RlZE9wdGlvbnMgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHVzaW5nIGEgaGFzaCBzZXJpYWxpemVyIGJlIHN1cmUgdG8gYWRkIHRoZVxuICAgICAgICAgICAgICAgICAgICAvLyBjb3JyZWN0IG5vdGF0aW9uIGZvciBhbiBhcnJheSBpbiB0aGUgbXVsdGktc2VsZWN0XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnRleHQuIEhlcmUgdGhlIG5hbWUgYXR0cmlidXRlIG9uIHRoZSBzZWxlY3QgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAvLyBtaWdodCBiZSBtaXNzaW5nIHRoZSB0cmFpbGluZyBicmFja2V0IHBhaXIuIEJvdGggbmFtZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gXCJmb29cIiBhbmQgXCJmb29bXVwiIHNob3VsZCBiZSBhcnJheXMuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmhhc2ggJiYga2V5LnNsaWNlKGtleS5sZW5ndGggLSAyKSAhPT0gJ1tdJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gc2VyaWFsaXplcihyZXN1bHQsIGtleSArICdbXScsIG9wdGlvbi52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBzZXJpYWxpemVyKHJlc3VsdCwga2V5LCBvcHRpb24udmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTZXJpYWxpemUgaWYgbm8gc2VsZWN0ZWQgb3B0aW9ucyBhbmQgb3B0aW9ucy5lbXB0eSBpcyB0cnVlXG4gICAgICAgICAgICBpZiAoIWlzU2VsZWN0ZWRPcHRpb25zICYmIG9wdGlvbnMuZW1wdHkpIHtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBzZXJpYWxpemVyKHJlc3VsdCwga2V5LCAnJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0ID0gc2VyaWFsaXplcihyZXN1bHQsIGtleSwgdmFsKTtcbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgYWxsIGVtcHR5IHJhZGlvIGJ1dHRvbnMgYW5kIHNlcmlhbGl6ZSB0aGVtIHdpdGgga2V5PVwiXCJcbiAgICBpZiAob3B0aW9ucy5lbXB0eSkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gcmFkaW9fc3RvcmUpIHtcbiAgICAgICAgICAgIGlmICghcmFkaW9fc3RvcmVba2V5XSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNlcmlhbGl6ZXIocmVzdWx0LCBrZXksICcnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHBhcnNlX2tleXMoc3RyaW5nKSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICB2YXIgcHJlZml4ID0gL14oW15cXFtcXF1dKikvO1xuICAgIHZhciBjaGlsZHJlbiA9IG5ldyBSZWdFeHAoYnJhY2tldHMpO1xuICAgIHZhciBtYXRjaCA9IHByZWZpeC5leGVjKHN0cmluZyk7XG5cbiAgICBpZiAobWF0Y2hbMV0pIHtcbiAgICAgICAga2V5cy5wdXNoKG1hdGNoWzFdKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoKG1hdGNoID0gY2hpbGRyZW4uZXhlYyhzdHJpbmcpKSAhPT0gbnVsbCkge1xuICAgICAgICBrZXlzLnB1c2gobWF0Y2hbMV0pO1xuICAgIH1cblxuICAgIHJldHVybiBrZXlzO1xufVxuXG5mdW5jdGlvbiBoYXNoX2Fzc2lnbihyZXN1bHQsIGtleXMsIHZhbHVlKSB7XG4gICAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHZhciBrZXkgPSBrZXlzLnNoaWZ0KCk7XG4gICAgdmFyIGJldHdlZW4gPSBrZXkubWF0Y2goL15cXFsoLis/KVxcXSQvKTtcblxuICAgIGlmIChrZXkgPT09ICdbXScpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0IHx8IFtdO1xuXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGhhc2hfYXNzaWduKG51bGwsIGtleXMsIHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBUaGlzIG1pZ2h0IGJlIHRoZSByZXN1bHQgb2YgYmFkIG5hbWUgYXR0cmlidXRlcyBsaWtlIFwiW11bZm9vXVwiLFxuICAgICAgICAgICAgLy8gaW4gdGhpcyBjYXNlIHRoZSBvcmlnaW5hbCBgcmVzdWx0YCBvYmplY3Qgd2lsbCBhbHJlYWR5IGJlXG4gICAgICAgICAgICAvLyBhc3NpZ25lZCB0byBhbiBvYmplY3QgbGl0ZXJhbC4gUmF0aGVyIHRoYW4gY29lcmNlIHRoZSBvYmplY3QgdG9cbiAgICAgICAgICAgIC8vIGFuIGFycmF5LCBvciBjYXVzZSBhbiBleGNlcHRpb24gdGhlIGF0dHJpYnV0ZSBcIl92YWx1ZXNcIiBpc1xuICAgICAgICAgICAgLy8gYXNzaWduZWQgYXMgYW4gYXJyYXkuXG4gICAgICAgICAgICByZXN1bHQuX3ZhbHVlcyA9IHJlc3VsdC5fdmFsdWVzIHx8IFtdO1xuICAgICAgICAgICAgcmVzdWx0Ll92YWx1ZXMucHVzaChoYXNoX2Fzc2lnbihudWxsLCBrZXlzLCB2YWx1ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBLZXkgaXMgYW4gYXR0cmlidXRlIG5hbWUgYW5kIGNhbiBiZSBhc3NpZ25lZCBkaXJlY3RseS5cbiAgICBpZiAoIWJldHdlZW4pIHtcbiAgICAgICAgcmVzdWx0W2tleV0gPSBoYXNoX2Fzc2lnbihyZXN1bHRba2V5XSwga2V5cywgdmFsdWUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIHN0cmluZyA9IGJldHdlZW5bMV07XG4gICAgICAgIC8vICt2YXIgY29udmVydHMgdGhlIHZhcmlhYmxlIGludG8gYSBudW1iZXJcbiAgICAgICAgLy8gYmV0dGVyIHRoYW4gcGFyc2VJbnQgYmVjYXVzZSBpdCBkb2Vzbid0IHRydW5jYXRlIGF3YXkgdHJhaWxpbmdcbiAgICAgICAgLy8gbGV0dGVycyBhbmQgYWN0dWFsbHkgZmFpbHMgaWYgd2hvbGUgdGhpbmcgaXMgbm90IGEgbnVtYmVyXG4gICAgICAgIHZhciBpbmRleCA9ICtzdHJpbmc7XG5cbiAgICAgICAgLy8gSWYgdGhlIGNoYXJhY3RlcnMgYmV0d2VlbiB0aGUgYnJhY2tldHMgaXMgbm90IGEgbnVtYmVyIGl0IGlzIGFuXG4gICAgICAgIC8vIGF0dHJpYnV0ZSBuYW1lIGFuZCBjYW4gYmUgYXNzaWduZWQgZGlyZWN0bHkuXG4gICAgICAgIGlmIChpc05hTihpbmRleCkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCB8fCB7fTtcbiAgICAgICAgICAgIHJlc3VsdFtzdHJpbmddID0gaGFzaF9hc3NpZ24ocmVzdWx0W3N0cmluZ10sIGtleXMsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCB8fCBbXTtcbiAgICAgICAgICAgIHJlc3VsdFtpbmRleF0gPSBoYXNoX2Fzc2lnbihyZXN1bHRbaW5kZXhdLCBrZXlzLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vLyBPYmplY3QvaGFzaCBlbmNvZGluZyBzZXJpYWxpemVyLlxuZnVuY3Rpb24gaGFzaF9zZXJpYWxpemVyKHJlc3VsdCwga2V5LCB2YWx1ZSkge1xuICAgIHZhciBtYXRjaGVzID0ga2V5Lm1hdGNoKGJyYWNrZXRzKTtcblxuICAgIC8vIEhhcyBicmFja2V0cz8gVXNlIHRoZSByZWN1cnNpdmUgYXNzaWdubWVudCBmdW5jdGlvbiB0byB3YWxrIHRoZSBrZXlzLFxuICAgIC8vIGNvbnN0cnVjdCBhbnkgbWlzc2luZyBvYmplY3RzIGluIHRoZSByZXN1bHQgdHJlZSBhbmQgbWFrZSB0aGUgYXNzaWdubWVudFxuICAgIC8vIGF0IHRoZSBlbmQgb2YgdGhlIGNoYWluLlxuICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgIHZhciBrZXlzID0gcGFyc2Vfa2V5cyhrZXkpO1xuICAgICAgICBoYXNoX2Fzc2lnbihyZXN1bHQsIGtleXMsIHZhbHVlKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIE5vbiBicmFja2V0IG5vdGF0aW9uIGNhbiBtYWtlIGFzc2lnbm1lbnRzIGRpcmVjdGx5LlxuICAgICAgICB2YXIgZXhpc3RpbmcgPSByZXN1bHRba2V5XTtcblxuICAgICAgICAvLyBJZiB0aGUgdmFsdWUgaGFzIGJlZW4gYXNzaWduZWQgYWxyZWFkeSAoZm9yIGluc3RhbmNlIHdoZW4gYSByYWRpbyBhbmRcbiAgICAgICAgLy8gYSBjaGVja2JveCBoYXZlIHRoZSBzYW1lIG5hbWUgYXR0cmlidXRlKSBjb252ZXJ0IHRoZSBwcmV2aW91cyB2YWx1ZVxuICAgICAgICAvLyBpbnRvIGFuIGFycmF5IGJlZm9yZSBwdXNoaW5nIGludG8gaXQuXG4gICAgICAgIC8vXG4gICAgICAgIC8vIE5PVEU6IElmIHRoaXMgcmVxdWlyZW1lbnQgd2VyZSByZW1vdmVkIGFsbCBoYXNoIGNyZWF0aW9uIGFuZFxuICAgICAgICAvLyBhc3NpZ25tZW50IGNvdWxkIGdvIHRocm91Z2ggYGhhc2hfYXNzaWduYC5cbiAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXhpc3RpbmcpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSBbIGV4aXN0aW5nIF07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8vIHVybGZvcm0gZW5jb2Rpbmcgc2VyaWFsaXplclxuZnVuY3Rpb24gc3RyX3NlcmlhbGl6ZShyZXN1bHQsIGtleSwgdmFsdWUpIHtcbiAgICAvLyBlbmNvZGUgbmV3bGluZXMgYXMgXFxyXFxuIGNhdXNlIHRoZSBodG1sIHNwZWMgc2F5cyBzb1xuICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvKFxccik/XFxuL2csICdcXHJcXG4nKTtcbiAgICB2YWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG5cbiAgICAvLyBzcGFjZXMgc2hvdWxkIGJlICcrJyByYXRoZXIgdGhhbiAnJTIwJy5cbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoLyUyMC9nLCAnKycpO1xuICAgIHJldHVybiByZXN1bHQgKyAocmVzdWx0ID8gJyYnIDogJycpICsgZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyB2YWx1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXJpYWxpemU7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwiLy8gYFJlcXVpcmVPYmplY3RDb2VyY2libGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVxdWlyZW9iamVjdGNvZXJjaWJsZVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gXCIgKyBpdCk7XG4gIHJldHVybiBpdDtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgUFJFRkVSUkVEX1NUUklORykge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG52YXIgZG9jdW1lbnQgPSBnbG9iYWwuZG9jdW1lbnQ7XG4vLyB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCBpcyAnb2JqZWN0JyBpbiBvbGQgSUVcbnZhciBFWElTVFMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBFWElTVFMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gIHRyeSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGdsb2JhbCwga2V5LCB2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgZ2xvYmFsW2tleV0gPSB2YWx1ZTtcbiAgfSByZXR1cm4gdmFsdWU7XG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKHR5cGVvZiBzdG9yZS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIHVpZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy91aWQnKTtcblxudmFyIGtleXMgPSBzaGFyZWQoJ2tleXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiBrZXlzW2tleV0gfHwgKGtleXNba2V5XSA9IHVpZChrZXkpKTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwiLy8gSUU4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXG5tb2R1bGUuZXhwb3J0cyA9IFtcbiAgJ2NvbnN0cnVjdG9yJyxcbiAgJ2hhc093blByb3BlcnR5JyxcbiAgJ2lzUHJvdG90eXBlT2YnLFxuICAncHJvcGVydHlJc0VudW1lcmFibGUnLFxuICAndG9Mb2NhbGVTdHJpbmcnLFxuICAndG9TdHJpbmcnLFxuICAndmFsdWVPZidcbl07XG4iLCJ2YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFRvT2JqZWN0YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvb2JqZWN0XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xuICByZXR1cm4gT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpKTtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIHRlc3QgPSB7fTtcblxudGVzdFtUT19TVFJJTkdfVEFHXSA9ICd6JztcblxubW9kdWxlLmV4cG9ydHMgPSBTdHJpbmcodGVzdCkgPT09ICdbb2JqZWN0IHpdJztcbiIsInZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5JykuZjtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVEFHLCBTVEFUSUMpIHtcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBTVEFUSUMgPyBpdCA6IGl0LnByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRykpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShpdCwgVE9fU1RSSU5HX1RBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBUQUcgfSk7XG4gIH1cbn07XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLW9iamVjdCcpO1xudmFyIHNoYXJlZEtleSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQta2V5Jyk7XG52YXIgQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlcicpO1xuXG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG52YXIgT2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLy8gYE9iamVjdC5nZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0cHJvdG90eXBlb2Zcbm1vZHVsZS5leHBvcnRzID0gQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gKE8pIHtcbiAgTyA9IHRvT2JqZWN0KE8pO1xuICBpZiAoaGFzKE8sIElFX1BST1RPKSkgcmV0dXJuIE9bSUVfUFJPVE9dO1xuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcbiAgfSByZXR1cm4gTyBpbnN0YW5jZW9mIE9iamVjdCA/IE9iamVjdFByb3RvdHlwZSA6IG51bGw7XG59O1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0ICovXG4gICAgYWN0aXZlWERvY3VtZW50ID0gZG9jdW1lbnQuZG9tYWluICYmIG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSBhY3RpdmVYRG9jdW1lbnQgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKTtcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIHNwbGl0ID0gJycuc3BsaXQ7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIHJldHVybiAhT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdC5jYWxsKGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY3JlYXRlRWxlbWVudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kb2N1bWVudC1jcmVhdGUtZWxlbWVudCcpO1xuXG4vLyBUaGFuaydzIElFOCBmb3IgaGlzIGZ1bm55IGRlZmluZVByb3BlcnR5XG5tb2R1bGUuZXhwb3J0cyA9ICFERVNDUklQVE9SUyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0ZUVsZW1lbnQoJ2RpdicpLCAnYScsIHtcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH1cbiAgfSkuYSAhPSA3O1xufSk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG5cbnZhciBTSEFSRUQgPSAnX19jb3JlLWpzX3NoYXJlZF9fJztcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IHNldEdsb2JhbChTSEFSRUQsIHt9KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdG9yZTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjYuNCcsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGlkID0gMDtcbnZhciBwb3N0Zml4ID0gTWF0aC5yYW5kb20oKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XG4gIHJldHVybiAnU3ltYm9sKCcgKyBTdHJpbmcoa2V5ID09PSB1bmRlZmluZWQgPyAnJyA6IGtleSkgKyAnKV8nICsgKCsraWQgKyBwb3N0Zml4KS50b1N0cmluZygzNik7XG59O1xuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciBpbmRleE9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzJykuaW5kZXhPZjtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcbiAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3Qob2JqZWN0KTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHZhciBrZXk7XG4gIGZvciAoa2V5IGluIE8pICFoYXMoaGlkZGVuS2V5cywga2V5KSAmJiBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSBpZiAoaGFzKE8sIGtleSA9IG5hbWVzW2krK10pKSB7XG4gICAgfmluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiB0eXBlb2YgZGV0ZWN0aW9uID09ICdmdW5jdGlvbicgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICEhT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyBDaHJvbWUgMzggU3ltYm9sIGhhcyBpbmNvcnJlY3QgdG9TdHJpbmcgY29udmVyc2lvblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgcmV0dXJuICFTdHJpbmcoU3ltYm9sKCkpO1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG5cbi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIEVOVFJJRVMpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gRU5UUklFUyA/IGZuKGFuT2JqZWN0KHZhbHVlKVswXSwgdmFsdWVbMV0pIDogZm4odmFsdWUpO1xuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHZhciByZXR1cm5NZXRob2QgPSBpdGVyYXRvclsncmV0dXJuJ107XG4gICAgaWYgKHJldHVybk1ldGhvZCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXR1cm5NZXRob2QuY2FsbChpdGVyYXRvcikpO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvdHlwZVtJVEVSQVRPUl0gPT09IGl0KTtcbn07XG4iLCJ2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cbiAgICB8fCBpdFsnQEBpdGVyYXRvciddXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcbn07XG4iLCJ2YXIgVE9fU1RSSU5HX1RBR19TVVBQT1JUID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXN0cmluZy10YWctc3VwcG9ydCcpO1xudmFyIGNsYXNzb2ZSYXcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG4vLyBFUzMgd3JvbmcgaGVyZVxudmFyIENPUlJFQ1RfQVJHVU1FTlRTID0gY2xhc3NvZlJhdyhmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPT0gJ0FyZ3VtZW50cyc7XG5cbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXG52YXIgdHJ5R2V0ID0gZnVuY3Rpb24gKGl0LCBrZXkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXRba2V5XTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxufTtcblxuLy8gZ2V0dGluZyB0YWcgZnJvbSBFUzYrIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYFxubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyBjbGFzc29mUmF3IDogZnVuY3Rpb24gKGl0KSB7XG4gIHZhciBPLCB0YWcsIHJlc3VsdDtcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXG4gICAgLy8gQEB0b1N0cmluZ1RhZyBjYXNlXG4gICAgOiB0eXBlb2YgKHRhZyA9IHRyeUdldChPID0gT2JqZWN0KGl0KSwgVE9fU1RSSU5HX1RBRykpID09ICdzdHJpbmcnID8gdGFnXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXG4gICAgOiBDT1JSRUNUX0FSR1VNRU5UUyA/IGNsYXNzb2ZSYXcoTylcbiAgICAvLyBFUzMgYXJndW1lbnRzIGZhbGxiYWNrXG4gICAgOiAocmVzdWx0ID0gY2xhc3NvZlJhdyhPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IHJlc3VsdDtcbn07XG4iLCJ2YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBTQUZFX0NMT1NJTkcgPSBmYWxzZTtcblxudHJ5IHtcbiAgdmFyIGNhbGxlZCA9IDA7XG4gIHZhciBpdGVyYXRvcldpdGhSZXR1cm4gPSB7XG4gICAgbmV4dDogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHsgZG9uZTogISFjYWxsZWQrKyB9O1xuICAgIH0sXG4gICAgJ3JldHVybic6IGZ1bmN0aW9uICgpIHtcbiAgICAgIFNBRkVfQ0xPU0lORyA9IHRydWU7XG4gICAgfVxuICB9O1xuICBpdGVyYXRvcldpdGhSZXR1cm5bSVRFUkFUT1JdID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdGhyb3ctbGl0ZXJhbFxuICBBcnJheS5mcm9tKGl0ZXJhdG9yV2l0aFJldHVybiwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcbn0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYywgU0tJUF9DTE9TSU5HKSB7XG4gIGlmICghU0tJUF9DTE9TSU5HICYmICFTQUZFX0NMT1NJTkcpIHJldHVybiBmYWxzZTtcbiAgdmFyIElURVJBVElPTl9TVVBQT1JUID0gZmFsc2U7XG4gIHRyeSB7XG4gICAgdmFyIG9iamVjdCA9IHt9O1xuICAgIG9iamVjdFtJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogSVRFUkFUSU9OX1NVUFBPUlQgPSB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBleGVjKG9iamVjdCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIElURVJBVElPTl9TVVBQT1JUO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLlByb21pc2U7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIFNQRUNJRVMgPSB3ZWxsS25vd25TeW1ib2woJ3NwZWNpZXMnKTtcblxuLy8gYFNwZWNpZXNDb25zdHJ1Y3RvcmAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zcGVjaWVzY29uc3RydWN0b3Jcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGRlZmF1bHRDb25zdHJ1Y3Rvcikge1xuICB2YXIgQyA9IGFuT2JqZWN0KE8pLmNvbnN0cnVjdG9yO1xuICB2YXIgUztcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBkZWZhdWx0Q29uc3RydWN0b3IgOiBhRnVuY3Rpb24oUyk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIGh0bWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaHRtbCcpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBJU19JT1MgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLWlzLWlvcycpO1xuXG52YXIgbG9jYXRpb24gPSBnbG9iYWwubG9jYXRpb247XG52YXIgc2V0ID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcbnZhciBjbGVhciA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XG52YXIgY291bnRlciA9IDA7XG52YXIgcXVldWUgPSB7fTtcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcbnZhciBkZWZlciwgY2hhbm5lbCwgcG9ydDtcblxudmFyIHJ1biA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgICBmbigpO1xuICB9XG59O1xuXG52YXIgcnVubmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgcnVuKGlkKTtcbiAgfTtcbn07XG5cbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xuICBydW4oZXZlbnQuZGF0YSk7XG59O1xuXG52YXIgcG9zdCA9IGZ1bmN0aW9uIChpZCkge1xuICAvLyBvbGQgZW5naW5lcyBoYXZlIG5vdCBsb2NhdGlvbi5vcmlnaW5cbiAgZ2xvYmFsLnBvc3RNZXNzYWdlKGlkICsgJycsIGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3QpO1xufTtcblxuLy8gTm9kZS5qcyAwLjkrICYgSUUxMCsgaGFzIHNldEltbWVkaWF0ZSwgb3RoZXJ3aXNlOlxuaWYgKCFzZXQgfHwgIWNsZWFyKSB7XG4gIHNldCA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgdmFyIGkgPSAxO1xuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcbiAgICBxdWV1ZVsrK2NvdW50ZXJdID0gZnVuY3Rpb24gKCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXG4gICAgICAodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSkuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9O1xuICAgIGRlZmVyKGNvdW50ZXIpO1xuICAgIHJldHVybiBjb3VudGVyO1xuICB9O1xuICBjbGVhciA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XG4gICAgZGVsZXRlIHF1ZXVlW2lkXTtcbiAgfTtcbiAgLy8gTm9kZS5qcyAwLjgtXG4gIGlmIChjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKHJ1bm5lcihpZCkpO1xuICAgIH07XG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XG4gICAgICBEaXNwYXRjaC5ub3cocnVubmVyKGlkKSk7XG4gICAgfTtcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xuICAvLyBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzYyNFxuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsICYmICFJU19JT1MpIHtcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgcG9ydCA9IGNoYW5uZWwucG9ydDI7XG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcbiAgICBkZWZlciA9IGJpbmQocG9ydC5wb3N0TWVzc2FnZSwgcG9ydCwgMSk7XG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xuICB9IGVsc2UgaWYgKGdsb2JhbC5hZGRFdmVudExpc3RlbmVyICYmIHR5cGVvZiBwb3N0TWVzc2FnZSA9PSAnZnVuY3Rpb24nICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cyAmJiAhZmFpbHMocG9zdCkpIHtcbiAgICBkZWZlciA9IHBvc3Q7XG4gICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAvLyBJRTgtXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpW09OUkVBRFlTVEFURUNIQU5HRV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgICAgIHJ1bihpZCk7XG4gICAgICB9O1xuICAgIH07XG4gIC8vIFJlc3Qgb2xkIGJyb3dzZXJzXG4gIH0gZWxzZSB7XG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICAgIHNldFRpbWVvdXQocnVubmVyKGlkKSwgMCk7XG4gICAgfTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgc2V0OiBzZXQsXG4gIGNsZWFyOiBjbGVhclxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwidmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbmdpbmUtdXNlci1hZ2VudCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IC8oaXBob25lfGlwb2R8aXBhZCkuKmFwcGxld2Via2l0L2kudGVzdCh1c2VyQWdlbnQpO1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignbmF2aWdhdG9yJywgJ3VzZXJBZ2VudCcpIHx8ICcnO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQywgeCkge1xuICBhbk9iamVjdChDKTtcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xuICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eS5mKEMpO1xuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XG4gIHJlc29sdmUoeCk7XG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmF0aXZlSXRlcmF0b3IuY2FsbCh0aGlzKTsgfTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IpO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG5pZiAoSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuaWYgKCFJU19QVVJFICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBhUG9zc2libGVQcm90b3R5cGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5zZXRQcm90b3R5cGVPZmAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Quc2V0cHJvdG90eXBlb2Zcbi8vIFdvcmtzIHdpdGggX19wcm90b19fIG9ubHkuIE9sZCB2OCBjYW4ndCB3b3JrIHdpdGggbnVsbCBwcm90byBvYmplY3RzLlxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8ICgnX19wcm90b19fJyBpbiB7fSA/IGZ1bmN0aW9uICgpIHtcbiAgdmFyIENPUlJFQ1RfU0VUVEVSID0gZmFsc2U7XG4gIHZhciB0ZXN0ID0ge307XG4gIHZhciBzZXR0ZXI7XG4gIHRyeSB7XG4gICAgc2V0dGVyID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0O1xuICAgIHNldHRlci5jYWxsKHRlc3QsIFtdKTtcbiAgICBDT1JSRUNUX1NFVFRFUiA9IHRlc3QgaW5zdGFuY2VvZiBBcnJheTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcbiAgICBhbk9iamVjdChPKTtcbiAgICBhUG9zc2libGVQcm90b3R5cGUocHJvdG8pO1xuICAgIGlmIChDT1JSRUNUX1NFVFRFUikgc2V0dGVyLmNhbGwoTywgcHJvdG8pO1xuICAgIGVsc2UgTy5fX3Byb3RvX18gPSBwcm90bztcbiAgICByZXR1cm4gTztcbiAgfTtcbn0oKSA6IHVuZGVmaW5lZCk7XG4iLCIvKiFcbiAqIGpRdWVyeSBKYXZhU2NyaXB0IExpYnJhcnkgdjMuNC4xXG4gKiBodHRwczovL2pxdWVyeS5jb20vXG4gKlxuICogSW5jbHVkZXMgU2l6emxlLmpzXG4gKiBodHRwczovL3NpenpsZWpzLmNvbS9cbiAqXG4gKiBDb3B5cmlnaHQgSlMgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHBzOi8vanF1ZXJ5Lm9yZy9saWNlbnNlXG4gKlxuICogRGF0ZTogMjAxOS0wNS0wMVQyMTowNFpcbiAqL1xuKCBmdW5jdGlvbiggZ2xvYmFsLCBmYWN0b3J5ICkge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXG5cdGlmICggdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgbW9kdWxlLmV4cG9ydHMgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBGb3IgQ29tbW9uSlMgYW5kIENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHdoZXJlIGEgcHJvcGVyIGB3aW5kb3dgXG5cdFx0Ly8gaXMgcHJlc2VudCwgZXhlY3V0ZSB0aGUgZmFjdG9yeSBhbmQgZ2V0IGpRdWVyeS5cblx0XHQvLyBGb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IGhhdmUgYSBgd2luZG93YCB3aXRoIGEgYGRvY3VtZW50YFxuXHRcdC8vIChzdWNoIGFzIE5vZGUuanMpLCBleHBvc2UgYSBmYWN0b3J5IGFzIG1vZHVsZS5leHBvcnRzLlxuXHRcdC8vIFRoaXMgYWNjZW50dWF0ZXMgdGhlIG5lZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiBhIHJlYWwgYHdpbmRvd2AuXG5cdFx0Ly8gZS5nLiB2YXIgalF1ZXJ5ID0gcmVxdWlyZShcImpxdWVyeVwiKSh3aW5kb3cpO1xuXHRcdC8vIFNlZSB0aWNrZXQgIzE0NTQ5IGZvciBtb3JlIGluZm8uXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBnbG9iYWwuZG9jdW1lbnQgP1xuXHRcdFx0ZmFjdG9yeSggZ2xvYmFsLCB0cnVlICkgOlxuXHRcdFx0ZnVuY3Rpb24oIHcgKSB7XG5cdFx0XHRcdGlmICggIXcuZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCBcImpRdWVyeSByZXF1aXJlcyBhIHdpbmRvdyB3aXRoIGEgZG9jdW1lbnRcIiApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWN0b3J5KCB3ICk7XG5cdFx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdGZhY3RvcnkoIGdsb2JhbCApO1xuXHR9XG5cbi8vIFBhc3MgdGhpcyBpZiB3aW5kb3cgaXMgbm90IGRlZmluZWQgeWV0XG59ICkoIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOiB0aGlzLCBmdW5jdGlvbiggd2luZG93LCBub0dsb2JhbCApIHtcblxuLy8gRWRnZSA8PSAxMiAtIDEzKywgRmlyZWZveCA8PTE4IC0gNDUrLCBJRSAxMCAtIDExLCBTYWZhcmkgNS4xIC0gOSssIGlPUyA2IC0gOS4xXG4vLyB0aHJvdyBleGNlcHRpb25zIHdoZW4gbm9uLXN0cmljdCBjb2RlIChlLmcuLCBBU1AuTkVUIDQuNSkgYWNjZXNzZXMgc3RyaWN0IG1vZGVcbi8vIGFyZ3VtZW50cy5jYWxsZWUuY2FsbGVyICh0cmFjLTEzMzM1KS4gQnV0IGFzIG9mIGpRdWVyeSAzLjAgKDIwMTYpLCBzdHJpY3QgbW9kZSBzaG91bGQgYmUgY29tbW9uXG4vLyBlbm91Z2ggdGhhdCBhbGwgc3VjaCBhdHRlbXB0cyBhcmUgZ3VhcmRlZCBpbiBhIHRyeSBibG9jay5cblwidXNlIHN0cmljdFwiO1xuXG52YXIgYXJyID0gW107XG5cbnZhciBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuXG52YXIgc2xpY2UgPSBhcnIuc2xpY2U7XG5cbnZhciBjb25jYXQgPSBhcnIuY29uY2F0O1xuXG52YXIgcHVzaCA9IGFyci5wdXNoO1xuXG52YXIgaW5kZXhPZiA9IGFyci5pbmRleE9mO1xuXG52YXIgY2xhc3MydHlwZSA9IHt9O1xuXG52YXIgdG9TdHJpbmcgPSBjbGFzczJ0eXBlLnRvU3RyaW5nO1xuXG52YXIgaGFzT3duID0gY2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGZuVG9TdHJpbmcgPSBoYXNPd24udG9TdHJpbmc7XG5cbnZhciBPYmplY3RGdW5jdGlvblN0cmluZyA9IGZuVG9TdHJpbmcuY2FsbCggT2JqZWN0ICk7XG5cbnZhciBzdXBwb3J0ID0ge307XG5cbnZhciBpc0Z1bmN0aW9uID0gZnVuY3Rpb24gaXNGdW5jdGlvbiggb2JqICkge1xuXG4gICAgICAvLyBTdXBwb3J0OiBDaHJvbWUgPD01NywgRmlyZWZveCA8PTUyXG4gICAgICAvLyBJbiBzb21lIGJyb3dzZXJzLCB0eXBlb2YgcmV0dXJucyBcImZ1bmN0aW9uXCIgZm9yIEhUTUwgPG9iamVjdD4gZWxlbWVudHNcbiAgICAgIC8vIChpLmUuLCBgdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib2JqZWN0XCIgKSA9PT0gXCJmdW5jdGlvblwiYCkuXG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIGNsYXNzaWZ5ICphbnkqIERPTSBub2RlIGFzIGEgZnVuY3Rpb24uXG4gICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBvYmoubm9kZVR5cGUgIT09IFwibnVtYmVyXCI7XG4gIH07XG5cblxudmFyIGlzV2luZG93ID0gZnVuY3Rpb24gaXNXaW5kb3coIG9iaiApIHtcblx0XHRyZXR1cm4gb2JqICE9IG51bGwgJiYgb2JqID09PSBvYmoud2luZG93O1xuXHR9O1xuXG5cblxuXG5cdHZhciBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzID0ge1xuXHRcdHR5cGU6IHRydWUsXG5cdFx0c3JjOiB0cnVlLFxuXHRcdG5vbmNlOiB0cnVlLFxuXHRcdG5vTW9kdWxlOiB0cnVlXG5cdH07XG5cblx0ZnVuY3Rpb24gRE9NRXZhbCggY29kZSwgbm9kZSwgZG9jICkge1xuXHRcdGRvYyA9IGRvYyB8fCBkb2N1bWVudDtcblxuXHRcdHZhciBpLCB2YWwsXG5cdFx0XHRzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudCggXCJzY3JpcHRcIiApO1xuXG5cdFx0c2NyaXB0LnRleHQgPSBjb2RlO1xuXHRcdGlmICggbm9kZSApIHtcblx0XHRcdGZvciAoIGkgaW4gcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDY0KywgRWRnZSAxOCtcblx0XHRcdFx0Ly8gU29tZSBicm93c2VycyBkb24ndCBzdXBwb3J0IHRoZSBcIm5vbmNlXCIgcHJvcGVydHkgb24gc2NyaXB0cy5cblx0XHRcdFx0Ly8gT24gdGhlIG90aGVyIGhhbmQsIGp1c3QgdXNpbmcgYGdldEF0dHJpYnV0ZWAgaXMgbm90IGVub3VnaCBhc1xuXHRcdFx0XHQvLyB0aGUgYG5vbmNlYCBhdHRyaWJ1dGUgaXMgcmVzZXQgdG8gYW4gZW1wdHkgc3RyaW5nIHdoZW5ldmVyIGl0XG5cdFx0XHRcdC8vIGJlY29tZXMgYnJvd3NpbmctY29udGV4dCBjb25uZWN0ZWQuXG5cdFx0XHRcdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzIzNjlcblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI25vbmNlLWF0dHJpYnV0ZXNcblx0XHRcdFx0Ly8gVGhlIGBub2RlLmdldEF0dHJpYnV0ZWAgY2hlY2sgd2FzIGFkZGVkIGZvciB0aGUgc2FrZSBvZlxuXHRcdFx0XHQvLyBgalF1ZXJ5Lmdsb2JhbEV2YWxgIHNvIHRoYXQgaXQgY2FuIGZha2UgYSBub25jZS1jb250YWluaW5nIG5vZGVcblx0XHRcdFx0Ly8gdmlhIGFuIG9iamVjdC5cblx0XHRcdFx0dmFsID0gbm9kZVsgaSBdIHx8IG5vZGUuZ2V0QXR0cmlidXRlICYmIG5vZGUuZ2V0QXR0cmlidXRlKCBpICk7XG5cdFx0XHRcdGlmICggdmFsICkge1xuXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoIGksIHZhbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGRvYy5oZWFkLmFwcGVuZENoaWxkKCBzY3JpcHQgKS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBzY3JpcHQgKTtcblx0fVxuXG5cbmZ1bmN0aW9uIHRvVHlwZSggb2JqICkge1xuXHRpZiAoIG9iaiA9PSBudWxsICkge1xuXHRcdHJldHVybiBvYmogKyBcIlwiO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5IChmdW5jdGlvbmlzaCBSZWdFeHApXG5cdHJldHVybiB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiA/XG5cdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHR0eXBlb2Ygb2JqO1xufVxuLyogZ2xvYmFsIFN5bWJvbCAqL1xuLy8gRGVmaW5pbmcgdGhpcyBnbG9iYWwgaW4gLmVzbGludHJjLmpzb24gd291bGQgY3JlYXRlIGEgZGFuZ2VyIG9mIHVzaW5nIHRoZSBnbG9iYWxcbi8vIHVuZ3VhcmRlZCBpbiBhbm90aGVyIHBsYWNlLCBpdCBzZWVtcyBzYWZlciB0byBkZWZpbmUgZ2xvYmFsIG9ubHkgZm9yIHRoaXMgbW9kdWxlXG5cblxuXG52YXJcblx0dmVyc2lvbiA9IFwiMy40LjFcIixcblxuXHQvLyBEZWZpbmUgYSBsb2NhbCBjb3B5IG9mIGpRdWVyeVxuXHRqUXVlcnkgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cblx0XHQvLyBUaGUgalF1ZXJ5IG9iamVjdCBpcyBhY3R1YWxseSBqdXN0IHRoZSBpbml0IGNvbnN0cnVjdG9yICdlbmhhbmNlZCdcblx0XHQvLyBOZWVkIGluaXQgaWYgalF1ZXJ5IGlzIGNhbGxlZCAoanVzdCBhbGxvdyBlcnJvciB0byBiZSB0aHJvd24gaWYgbm90IGluY2x1ZGVkKVxuXHRcdHJldHVybiBuZXcgalF1ZXJ5LmZuLmluaXQoIHNlbGVjdG9yLCBjb250ZXh0ICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB3ZSB0cmltIEJPTSBhbmQgTkJTUFxuXHRydHJpbSA9IC9eW1xcc1xcdUZFRkZcXHhBMF0rfFtcXHNcXHVGRUZGXFx4QTBdKyQvZztcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWlzRnVuY3Rpb24oIHRhcmdldCApICkge1xuXHRcdHRhcmdldCA9IHt9O1xuXHR9XG5cblx0Ly8gRXh0ZW5kIGpRdWVyeSBpdHNlbGYgaWYgb25seSBvbmUgYXJndW1lbnQgaXMgcGFzc2VkXG5cdGlmICggaSA9PT0gbGVuZ3RoICkge1xuXHRcdHRhcmdldCA9IHRoaXM7XG5cdFx0aS0tO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cblx0XHQvLyBPbmx5IGRlYWwgd2l0aCBub24tbnVsbC91bmRlZmluZWQgdmFsdWVzXG5cdFx0aWYgKCAoIG9wdGlvbnMgPSBhcmd1bWVudHNbIGkgXSApICE9IG51bGwgKSB7XG5cblx0XHRcdC8vIEV4dGVuZCB0aGUgYmFzZSBvYmplY3Rcblx0XHRcdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRcdFx0Y29weSA9IG9wdGlvbnNbIG5hbWUgXTtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IE9iamVjdC5wcm90b3R5cGUgcG9sbHV0aW9uXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCBuYW1lID09PSBcIl9fcHJvdG9fX1wiIHx8IHRhcmdldCA9PT0gY29weSApIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlY3Vyc2UgaWYgd2UncmUgbWVyZ2luZyBwbGFpbiBvYmplY3RzIG9yIGFycmF5c1xuXHRcdFx0XHRpZiAoIGRlZXAgJiYgY29weSAmJiAoIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb3B5ICkgfHxcblx0XHRcdFx0XHQoIGNvcHlJc0FycmF5ID0gQXJyYXkuaXNBcnJheSggY29weSApICkgKSApIHtcblx0XHRcdFx0XHRzcmMgPSB0YXJnZXRbIG5hbWUgXTtcblxuXHRcdFx0XHRcdC8vIEVuc3VyZSBwcm9wZXIgdHlwZSBmb3IgdGhlIHNvdXJjZSB2YWx1ZVxuXHRcdFx0XHRcdGlmICggY29weUlzQXJyYXkgJiYgIUFycmF5LmlzQXJyYXkoIHNyYyApICkge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBbXTtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKCAhY29weUlzQXJyYXkgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBzcmMgKSApIHtcblx0XHRcdFx0XHRcdGNsb25lID0ge307XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRjb3B5SXNBcnJheSA9IGZhbHNlO1xuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXHRcdHZhciBuYW1lO1xuXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdHJldHVybiB0cnVlO1xuXHR9LFxuXG5cdC8vIEV2YWx1YXRlcyBhIHNjcmlwdCBpbiBhIGdsb2JhbCBjb250ZXh0XG5cdGdsb2JhbEV2YWw6IGZ1bmN0aW9uKCBjb2RlLCBvcHRpb25zICkge1xuXHRcdERPTUV2YWwoIGNvZGUsIHsgbm9uY2U6IG9wdGlvbnMgJiYgb3B0aW9ucy5ub25jZSB9ICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjRcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMTktMDQtMDhcbiAqL1xuKGZ1bmN0aW9uKCB3aW5kb3cgKSB7XG5cbnZhciBpLFxuXHRzdXBwb3J0LFxuXHRFeHByLFxuXHRnZXRUZXh0LFxuXHRpc1hNTCxcblx0dG9rZW5pemUsXG5cdGNvbXBpbGUsXG5cdHNlbGVjdCxcblx0b3V0ZXJtb3N0Q29udGV4dCxcblx0c29ydElucHV0LFxuXHRoYXNEdXBsaWNhdGUsXG5cblx0Ly8gTG9jYWwgZG9jdW1lbnQgdmFyc1xuXHRzZXREb2N1bWVudCxcblx0ZG9jdW1lbnQsXG5cdGRvY0VsZW0sXG5cdGRvY3VtZW50SXNIVE1MLFxuXHRyYnVnZ3lRU0EsXG5cdHJidWdneU1hdGNoZXMsXG5cdG1hdGNoZXMsXG5cdGNvbnRhaW5zLFxuXG5cdC8vIEluc3RhbmNlLXNwZWNpZmljIGRhdGFcblx0ZXhwYW5kbyA9IFwic2l6emxlXCIgKyAxICogbmV3IERhdGUoKSxcblx0cHJlZmVycmVkRG9jID0gd2luZG93LmRvY3VtZW50LFxuXHRkaXJydW5zID0gMCxcblx0ZG9uZSA9IDAsXG5cdGNsYXNzQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHR0b2tlbkNhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0Y29tcGlsZXJDYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cdHJkZXNjZW5kID0gbmV3IFJlZ0V4cCggd2hpdGVzcGFjZSArIFwifD5cIiApLFxuXG5cdHJwc2V1ZG8gPSBuZXcgUmVnRXhwKCBwc2V1ZG9zICksXG5cdHJpZGVudGlmaWVyID0gbmV3IFJlZ0V4cCggXCJeXCIgKyBpZGVudGlmaWVyICsgXCIkXCIgKSxcblxuXHRtYXRjaEV4cHIgPSB7XG5cdFx0XCJJRFwiOiBuZXcgUmVnRXhwKCBcIl4jKFwiICsgaWRlbnRpZmllciArIFwiKVwiICksXG5cdFx0XCJDTEFTU1wiOiBuZXcgUmVnRXhwKCBcIl5cXFxcLihcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiVEFHXCI6IG5ldyBSZWdFeHAoIFwiXihcIiArIGlkZW50aWZpZXIgKyBcInxbKl0pXCIgKSxcblx0XHRcIkFUVFJcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBhdHRyaWJ1dGVzICksXG5cdFx0XCJQU0VVRE9cIjogbmV3IFJlZ0V4cCggXCJeXCIgKyBwc2V1ZG9zICksXG5cdFx0XCJDSElMRFwiOiBuZXcgUmVnRXhwKCBcIl46KG9ubHl8Zmlyc3R8bGFzdHxudGh8bnRoLWxhc3QpLShjaGlsZHxvZi10eXBlKSg/OlxcXFwoXCIgKyB3aGl0ZXNwYWNlICtcblx0XHRcdFwiKihldmVufG9kZHwoKFsrLV18KShcXFxcZCopbnwpXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86KFsrLV18KVwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooXFxcXGQrKXwpKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfClcIiwgXCJpXCIgKSxcblx0XHRcImJvb2xcIjogbmV3IFJlZ0V4cCggXCJeKD86XCIgKyBib29sZWFucyArIFwiKSRcIiwgXCJpXCIgKSxcblx0XHQvLyBGb3IgdXNlIGluIGxpYnJhcmllcyBpbXBsZW1lbnRpbmcgLmlzKClcblx0XHQvLyBXZSB1c2UgdGhpcyBmb3IgUE9TIG1hdGNoaW5nIGluIGBzZWxlY3RgXG5cdFx0XCJuZWVkc0NvbnRleHRcIjogbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiICtcblx0XHRcdHdoaXRlc3BhY2UgKyBcIiooKD86LVxcXFxkKT9cXFxcZCopXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXCl8KSg/PVteLV18JClcIiwgXCJpXCIgKVxuXHR9LFxuXG5cdHJodG1sID0gL0hUTUwkL2ksXG5cdHJpbnB1dHMgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyaGVhZGVyID0gL15oXFxkJC9pLFxuXG5cdHJuYXRpdmUgPSAvXltee10rXFx7XFxzKlxcW25hdGl2ZSBcXHcvLFxuXG5cdC8vIEVhc2lseS1wYXJzZWFibGUvcmV0cmlldmFibGUgSUQgb3IgVEFHIG9yIENMQVNTIHNlbGVjdG9yc1xuXHRycXVpY2tFeHByID0gL14oPzojKFtcXHctXSspfChcXHcrKXxcXC4oW1xcdy1dKykpJC8sXG5cblx0cnNpYmxpbmcgPSAvWyt+XS8sXG5cblx0Ly8gQ1NTIGVzY2FwZXNcblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI2VzY2FwZWQtY2hhcmFjdGVyc1xuXHRydW5lc2NhcGUgPSBuZXcgUmVnRXhwKCBcIlxcXFxcXFxcKFtcXFxcZGEtZl17MSw2fVwiICsgd2hpdGVzcGFjZSArIFwiP3woXCIgKyB3aGl0ZXNwYWNlICsgXCIpfC4pXCIsIFwiaWdcIiApLFxuXHRmdW5lc2NhcGUgPSBmdW5jdGlvbiggXywgZXNjYXBlZCwgZXNjYXBlZFdoaXRlc3BhY2UgKSB7XG5cdFx0dmFyIGhpZ2ggPSBcIjB4XCIgKyBlc2NhcGVkIC0gMHgxMDAwMDtcblx0XHQvLyBOYU4gbWVhbnMgbm9uLWNvZGVwb2ludFxuXHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3g8MjRcblx0XHQvLyBXb3JrYXJvdW5kIGVycm9uZW91cyBudW1lcmljIGludGVycHJldGF0aW9uIG9mICtcIjB4XCJcblx0XHRyZXR1cm4gaGlnaCAhPT0gaGlnaCB8fCBlc2NhcGVkV2hpdGVzcGFjZSA/XG5cdFx0XHRlc2NhcGVkIDpcblx0XHRcdGhpZ2ggPCAwID9cblx0XHRcdFx0Ly8gQk1QIGNvZGVwb2ludFxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoICsgMHgxMDAwMCApIDpcblx0XHRcdFx0Ly8gU3VwcGxlbWVudGFsIFBsYW5lIGNvZGVwb2ludCAoc3Vycm9nYXRlIHBhaXIpXG5cdFx0XHRcdFN0cmluZy5mcm9tQ2hhckNvZGUoIGhpZ2ggPj4gMTAgfCAweEQ4MDAsIGhpZ2ggJiAweDNGRiB8IDB4REMwMCApO1xuXHR9LFxuXG5cdC8vIENTUyBzdHJpbmcvaWRlbnRpZmllciBzZXJpYWxpemF0aW9uXG5cdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jY29tbW9uLXNlcmlhbGl6aW5nLWlkaW9tc1xuXHRyY3NzZXNjYXBlID0gLyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csXG5cdGZjc3Nlc2NhcGUgPSBmdW5jdGlvbiggY2gsIGFzQ29kZVBvaW50ICkge1xuXHRcdGlmICggYXNDb2RlUG9pbnQgKSB7XG5cblx0XHRcdC8vIFUrMDAwMCBOVUxMIGJlY29tZXMgVStGRkZEIFJFUExBQ0VNRU5UIENIQVJBQ1RFUlxuXHRcdFx0aWYgKCBjaCA9PT0gXCJcXDBcIiApIHtcblx0XHRcdFx0cmV0dXJuIFwiXFx1RkZGRFwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb250cm9sIGNoYXJhY3RlcnMgYW5kIChkZXBlbmRlbnQgdXBvbiBwb3NpdGlvbikgbnVtYmVycyBnZXQgZXNjYXBlZCBhcyBjb2RlIHBvaW50c1xuXHRcdFx0cmV0dXJuIGNoLnNsaWNlKCAwLCAtMSApICsgXCJcXFxcXCIgKyBjaC5jaGFyQ29kZUF0KCBjaC5sZW5ndGggLSAxICkudG9TdHJpbmcoIDE2ICkgKyBcIiBcIjtcblx0XHR9XG5cblx0XHQvLyBPdGhlciBwb3RlbnRpYWxseS1zcGVjaWFsIEFTQ0lJIGNoYXJhY3RlcnMgZ2V0IGJhY2tzbGFzaC1lc2NhcGVkXG5cdFx0cmV0dXJuIFwiXFxcXFwiICsgY2g7XG5cdH0sXG5cblx0Ly8gVXNlZCBmb3IgaWZyYW1lc1xuXHQvLyBTZWUgc2V0RG9jdW1lbnQoKVxuXHQvLyBSZW1vdmluZyB0aGUgZnVuY3Rpb24gd3JhcHBlciBjYXVzZXMgYSBcIlBlcm1pc3Npb24gRGVuaWVkXCJcblx0Ly8gZXJyb3IgaW4gSUVcblx0dW5sb2FkSGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuXHRcdHNldERvY3VtZW50KCk7XG5cdH0sXG5cblx0aW5EaXNhYmxlZEZpZWxkc2V0ID0gYWRkQ29tYmluYXRvcihcblx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSB0cnVlICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmaWVsZHNldFwiO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFub25uYXRpdmVTZWxlY3RvckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDggb25seVxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHQobm9kZVR5cGUgIT09IDEgfHwgY29udGV4dC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcIm9iamVjdFwiKSApIHtcblxuXHRcdFx0XHRuZXdTZWxlY3RvciA9IHNlbGVjdG9yO1xuXHRcdFx0XHRuZXdDb250ZXh0ID0gY29udGV4dDtcblxuXHRcdFx0XHQvLyBxU0EgY29uc2lkZXJzIGVsZW1lbnRzIG91dHNpZGUgYSBzY29waW5nIHJvb3Qgd2hlbiBldmFsdWF0aW5nIGNoaWxkIG9yXG5cdFx0XHRcdC8vIGRlc2NlbmRhbnQgY29tYmluYXRvcnMsIHdoaWNoIGlzIG5vdCB3aGF0IHdlIHdhbnQuXG5cdFx0XHRcdC8vIEluIHN1Y2ggY2FzZXMsIHdlIHdvcmsgYXJvdW5kIHRoZSBiZWhhdmlvciBieSBwcmVmaXhpbmcgZXZlcnkgc2VsZWN0b3IgaW4gdGhlXG5cdFx0XHRcdC8vIGxpc3Qgd2l0aCBhbiBJRCBzZWxlY3RvciByZWZlcmVuY2luZyB0aGUgc2NvcGUgY29udGV4dC5cblx0XHRcdFx0Ly8gVGhhbmtzIHRvIEFuZHJldyBEdXBvbnQgZm9yIHRoaXMgdGVjaG5pcXVlLlxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlID09PSAxICYmIHJkZXNjZW5kLnRlc3QoIHNlbGVjdG9yICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cyxcblx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHRub25uYXRpdmVTZWxlY3RvckNhY2hlKCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdGlmICggbmlkID09PSBleHBhbmRvICkge1xuXHRcdFx0XHRcdFx0Y29udGV4dC5yZW1vdmVBdHRyaWJ1dGUoIFwiaWRcIiApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFsbCBvdGhlcnNcblx0cmV0dXJuIHNlbGVjdCggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICk7XG59XG5cbi8qKlxuICogQ3JlYXRlIGtleS12YWx1ZSBjYWNoZXMgb2YgbGltaXRlZCBzaXplXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb24oc3RyaW5nLCBvYmplY3QpfSBSZXR1cm5zIHRoZSBPYmplY3QgZGF0YSBhZnRlciBzdG9yaW5nIGl0IG9uIGl0c2VsZiB3aXRoXG4gKlx0cHJvcGVydHkgbmFtZSB0aGUgKHNwYWNlLXN1ZmZpeGVkKSBzdHJpbmcgYW5kIChpZiB0aGUgY2FjaGUgaXMgbGFyZ2VyIHRoYW4gRXhwci5jYWNoZUxlbmd0aClcbiAqXHRkZWxldGluZyB0aGUgb2xkZXN0IGVudHJ5XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCkge1xuXHR2YXIga2V5cyA9IFtdO1xuXG5cdGZ1bmN0aW9uIGNhY2hlKCBrZXksIHZhbHVlICkge1xuXHRcdC8vIFVzZSAoa2V5ICsgXCIgXCIpIHRvIGF2b2lkIGNvbGxpc2lvbiB3aXRoIG5hdGl2ZSBwcm90b3R5cGUgcHJvcGVydGllcyAoc2VlIElzc3VlICMxNTcpXG5cdFx0aWYgKCBrZXlzLnB1c2goIGtleSArIFwiIFwiICkgPiBFeHByLmNhY2hlTGVuZ3RoICkge1xuXHRcdFx0Ly8gT25seSBrZWVwIHRoZSBtb3N0IHJlY2VudCBlbnRyaWVzXG5cdFx0XHRkZWxldGUgY2FjaGVbIGtleXMuc2hpZnQoKSBdO1xuXHRcdH1cblx0XHRyZXR1cm4gKGNhY2hlWyBrZXkgKyBcIiBcIiBdID0gdmFsdWUpO1xuXHR9XG5cdHJldHVybiBjYWNoZTtcbn1cblxuLyoqXG4gKiBNYXJrIGEgZnVuY3Rpb24gZm9yIHNwZWNpYWwgdXNlIGJ5IFNpenpsZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gVGhlIGZ1bmN0aW9uIHRvIG1hcmtcbiAqL1xuZnVuY3Rpb24gbWFya0Z1bmN0aW9uKCBmbiApIHtcblx0Zm5bIGV4cGFuZG8gXSA9IHRydWU7XG5cdHJldHVybiBmbjtcbn1cblxuLyoqXG4gKiBTdXBwb3J0IHRlc3RpbmcgdXNpbmcgYW4gZWxlbWVudFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm4gUGFzc2VkIHRoZSBjcmVhdGVkIGVsZW1lbnQgYW5kIHJldHVybnMgYSBib29sZWFuIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhc3NlcnQoIGZuICkge1xuXHR2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIik7XG5cblx0dHJ5IHtcblx0XHRyZXR1cm4gISFmbiggZWwgKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fSBmaW5hbGx5IHtcblx0XHQvLyBSZW1vdmUgZnJvbSBpdHMgcGFyZW50IGJ5IGRlZmF1bHRcblx0XHRpZiAoIGVsLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRlbC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBlbCApO1xuXHRcdH1cblx0XHQvLyByZWxlYXNlIG1lbW9yeSBpbiBJRVxuXHRcdGVsID0gbnVsbDtcblx0fVxufVxuXG4vKipcbiAqIEFkZHMgdGhlIHNhbWUgaGFuZGxlciBmb3IgYWxsIG9mIHRoZSBzcGVjaWZpZWQgYXR0cnNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhdHRycyBQaXBlLXNlcGFyYXRlZCBsaXN0IG9mIGF0dHJpYnV0ZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXIgVGhlIG1ldGhvZCB0aGF0IHdpbGwgYmUgYXBwbGllZFxuICovXG5mdW5jdGlvbiBhZGRIYW5kbGUoIGF0dHJzLCBoYW5kbGVyICkge1xuXHR2YXIgYXJyID0gYXR0cnMuc3BsaXQoXCJ8XCIpLFxuXHRcdGkgPSBhcnIubGVuZ3RoO1xuXG5cdHdoaWxlICggaS0tICkge1xuXHRcdEV4cHIuYXR0ckhhbmRsZVsgYXJyW2ldIF0gPSBoYW5kbGVyO1xuXHR9XG59XG5cbi8qKlxuICogQ2hlY2tzIGRvY3VtZW50IG9yZGVyIG9mIHR3byBzaWJsaW5nc1xuICogQHBhcmFtIHtFbGVtZW50fSBhXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGJcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFJldHVybnMgbGVzcyB0aGFuIDAgaWYgYSBwcmVjZWRlcyBiLCBncmVhdGVyIHRoYW4gMCBpZiBhIGZvbGxvd3MgYlxuICovXG5mdW5jdGlvbiBzaWJsaW5nQ2hlY2soIGEsIGIgKSB7XG5cdHZhciBjdXIgPSBiICYmIGEsXG5cdFx0ZGlmZiA9IGN1ciAmJiBhLm5vZGVUeXBlID09PSAxICYmIGIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdGEuc291cmNlSW5kZXggLSBiLnNvdXJjZUluZGV4O1xuXG5cdC8vIFVzZSBJRSBzb3VyY2VJbmRleCBpZiBhdmFpbGFibGUgb24gYm90aCBub2Rlc1xuXHRpZiAoIGRpZmYgKSB7XG5cdFx0cmV0dXJuIGRpZmY7XG5cdH1cblxuXHQvLyBDaGVjayBpZiBiIGZvbGxvd3MgYVxuXHRpZiAoIGN1ciApIHtcblx0XHR3aGlsZSAoIChjdXIgPSBjdXIubmV4dFNpYmxpbmcpICkge1xuXHRcdFx0aWYgKCBjdXIgPT09IGIgKSB7XG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gYSA/IDEgOiAtMTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGlucHV0IHR5cGVzXG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZVxuICovXG5mdW5jdGlvbiBjcmVhdGVJbnB1dFBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiBuYW1lID09PSBcImlucHV0XCIgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgYnV0dG9uc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlQnV0dG9uUHNldWRvKCB0eXBlICkge1xuXHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0cmV0dXJuIChuYW1lID09PSBcImlucHV0XCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIikgJiYgZWxlbS50eXBlID09PSB0eXBlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgOmVuYWJsZWQvOmRpc2FibGVkXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGRpc2FibGVkIHRydWUgZm9yIDpkaXNhYmxlZDsgZmFsc2UgZm9yIDplbmFibGVkXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKCBkaXNhYmxlZCApIHtcblxuXHQvLyBLbm93biA6ZGlzYWJsZWQgZmFsc2UgcG9zaXRpdmVzOiBmaWVsZHNldFtkaXNhYmxlZF0gPiBsZWdlbmQ6bnRoLW9mLXR5cGUobisyKSA6Y2FuLWRpc2FibGVcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gT25seSBjZXJ0YWluIGVsZW1lbnRzIGNhbiBtYXRjaCA6ZW5hYmxlZCBvciA6ZGlzYWJsZWRcblx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9zY3JpcHRpbmcuaHRtbCNzZWxlY3Rvci1lbmFibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZGlzYWJsZWRcblx0XHRpZiAoIFwiZm9ybVwiIGluIGVsZW0gKSB7XG5cblx0XHRcdC8vIENoZWNrIGZvciBpbmhlcml0ZWQgZGlzYWJsZWRuZXNzIG9uIHJlbGV2YW50IG5vbi1kaXNhYmxlZCBlbGVtZW50czpcblx0XHRcdC8vICogbGlzdGVkIGZvcm0tYXNzb2NpYXRlZCBlbGVtZW50cyBpbiBhIGRpc2FibGVkIGZpZWxkc2V0XG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY2F0ZWdvcnktbGlzdGVkXG5cdFx0XHQvLyAgIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2Zvcm1zLmh0bWwjY29uY2VwdC1mZS1kaXNhYmxlZFxuXHRcdFx0Ly8gKiBvcHRpb24gZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBvcHRncm91cFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtb3B0aW9uLWRpc2FibGVkXG5cdFx0XHQvLyBBbGwgc3VjaCBlbGVtZW50cyBoYXZlIGEgXCJmb3JtXCIgcHJvcGVydHkuXG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSAmJiBlbGVtLmRpc2FibGVkID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHQvLyBPcHRpb24gZWxlbWVudHMgZGVmZXIgdG8gYSBwYXJlbnQgb3B0Z3JvdXAgaWYgcHJlc2VudFxuXHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0XHRcdGlmICggXCJsYWJlbFwiIGluIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtLnBhcmVudE5vZGUuZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5kaXNhYmxlZCA9PT0gZGlzYWJsZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgNiAtIDExXG5cdFx0XHRcdC8vIFVzZSB0aGUgaXNEaXNhYmxlZCBzaG9ydGN1dCBwcm9wZXJ0eSB0byBjaGVjayBmb3IgZGlzYWJsZWQgZmllbGRzZXQgYW5jZXN0b3JzXG5cdFx0XHRcdHJldHVybiBlbGVtLmlzRGlzYWJsZWQgPT09IGRpc2FibGVkIHx8XG5cblx0XHRcdFx0XHQvLyBXaGVyZSB0aGVyZSBpcyBubyBpc0Rpc2FibGVkLCBjaGVjayBtYW51YWxseVxuXHRcdFx0XHRcdC8qIGpzaGludCAtVzAxOCAqL1xuXHRcdFx0XHRcdGVsZW0uaXNEaXNhYmxlZCAhPT0gIWRpc2FibGVkICYmXG5cdFx0XHRcdFx0XHRpbkRpc2FibGVkRmllbGRzZXQoIGVsZW0gKSA9PT0gZGlzYWJsZWQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblxuXHRcdC8vIFRyeSB0byB3aW5ub3cgb3V0IGVsZW1lbnRzIHRoYXQgY2FuJ3QgYmUgZGlzYWJsZWQgYmVmb3JlIHRydXN0aW5nIHRoZSBkaXNhYmxlZCBwcm9wZXJ0eS5cblx0XHQvLyBTb21lIHZpY3RpbXMgZ2V0IGNhdWdodCBpbiBvdXIgbmV0IChsYWJlbCwgbGVnZW5kLCBtZW51LCB0cmFjayksIGJ1dCBpdCBzaG91bGRuJ3Rcblx0XHQvLyBldmVuIGV4aXN0IG9uIHRoZW0sIGxldCBhbG9uZSBoYXZlIGEgYm9vbGVhbiB2YWx1ZS5cblx0XHR9IGVsc2UgaWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHR9XG5cblx0XHQvLyBSZW1haW5pbmcgZWxlbWVudHMgYXJlIG5laXRoZXIgOmVuYWJsZWQgbm9yIDpkaXNhYmxlZFxuXHRcdHJldHVybiBmYWxzZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIHBvc2l0aW9uYWxzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICovXG5mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKCBmbiApIHtcblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggYXJndW1lbnQgKSB7XG5cdFx0YXJndW1lbnQgPSArYXJndW1lbnQ7XG5cdFx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdHZhciBqLFxuXHRcdFx0XHRtYXRjaEluZGV4ZXMgPSBmbiggW10sIHNlZWQubGVuZ3RoLCBhcmd1bWVudCApLFxuXHRcdFx0XHRpID0gbWF0Y2hJbmRleGVzLmxlbmd0aDtcblxuXHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgZm91bmQgYXQgdGhlIHNwZWNpZmllZCBpbmRleGVzXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCBzZWVkWyAoaiA9IG1hdGNoSW5kZXhlc1tpXSkgXSApIHtcblx0XHRcdFx0XHRzZWVkW2pdID0gIShtYXRjaGVzW2pdID0gc2VlZFtqXSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fSk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGEgbm9kZSBmb3IgdmFsaWRpdHkgYXMgYSBTaXp6bGUgY29udGV4dFxuICogQHBhcmFtIHtFbGVtZW50fE9iamVjdD19IGNvbnRleHRcbiAqIEByZXR1cm5zIHtFbGVtZW50fE9iamVjdHxCb29sZWFufSBUaGUgaW5wdXQgbm9kZSBpZiBhY2NlcHRhYmxlLCBvdGhlcndpc2UgYSBmYWxzeSB2YWx1ZVxuICovXG5mdW5jdGlvbiB0ZXN0Q29udGV4dCggY29udGV4dCApIHtcblx0cmV0dXJuIGNvbnRleHQgJiYgdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgJiYgY29udGV4dDtcbn1cblxuLy8gRXhwb3NlIHN1cHBvcnQgdmFycyBmb3IgY29udmVuaWVuY2VcbnN1cHBvcnQgPSBTaXp6bGUuc3VwcG9ydCA9IHt9O1xuXG4vKipcbiAqIERldGVjdHMgWE1MIG5vZGVzXG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0fSBlbGVtIEFuIGVsZW1lbnQgb3IgYSBkb2N1bWVudFxuICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWZmIGVsZW0gaXMgYSBub24tSFRNTCBYTUwgbm9kZVxuICovXG5pc1hNTCA9IFNpenpsZS5pc1hNTCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHR2YXIgbmFtZXNwYWNlID0gZWxlbS5uYW1lc3BhY2VVUkksXG5cdFx0ZG9jRWxlbSA9IChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHQvLyBBc3N1bWUgSFRNTCB3aGVuIGRvY3VtZW50RWxlbWVudCBkb2Vzbid0IHlldCBleGlzdCwgc3VjaCBhcyBpbnNpZGUgbG9hZGluZyBpZnJhbWVzXG5cdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC80ODMzXG5cdHJldHVybiAhcmh0bWwudGVzdCggbmFtZXNwYWNlIHx8IGRvY0VsZW0gJiYgZG9jRWxlbS5ub2RlTmFtZSB8fCBcIkhUTUxcIiApO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHRpZiAoIHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yICYmIGRvY3VtZW50SXNIVE1MICYmXG5cdFx0IW5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGVbIGV4cHIgKyBcIiBcIiBdICYmXG5cdFx0KCAhcmJ1Z2d5TWF0Y2hlcyB8fCAhcmJ1Z2d5TWF0Y2hlcy50ZXN0KCBleHByICkgKSAmJlxuXHRcdCggIXJidWdneVFTQSAgICAgfHwgIXJidWdneVFTQS50ZXN0KCBleHByICkgKSApIHtcblxuXHRcdHRyeSB7XG5cdFx0XHR2YXIgcmV0ID0gbWF0Y2hlcy5jYWxsKCBlbGVtLCBleHByICk7XG5cblx0XHRcdC8vIElFIDkncyBtYXRjaGVzU2VsZWN0b3IgcmV0dXJucyBmYWxzZSBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRcdGlmICggcmV0IHx8IHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2ggfHxcblx0XHRcdFx0XHQvLyBBcyB3ZWxsLCBkaXNjb25uZWN0ZWQgbm9kZXMgYXJlIHNhaWQgdG8gYmUgaW4gYSBkb2N1bWVudFxuXHRcdFx0XHRcdC8vIGZyYWdtZW50IGluIElFIDlcblx0XHRcdFx0XHRlbGVtLmRvY3VtZW50ICYmIGVsZW0uZG9jdW1lbnQubm9kZVR5cGUgIT09IDExICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoIGV4cHIsIHRydWUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gU2l6emxlKCBleHByLCBkb2N1bWVudCwgbnVsbCwgWyBlbGVtIF0gKS5sZW5ndGggPiAwO1xufTtcblxuU2l6emxlLmNvbnRhaW5zID0gZnVuY3Rpb24oIGNvbnRleHQsIGVsZW0gKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0fVxuXHRyZXR1cm4gY29udGFpbnMoIGNvbnRleHQsIGVsZW0gKTtcbn07XG5cblNpenpsZS5hdHRyID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdC8vIFNldCBkb2N1bWVudCB2YXJzIGlmIG5lZWRlZFxuXHRpZiAoICggZWxlbS5vd25lckRvY3VtZW50IHx8IGVsZW0gKSAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0fVxuXG5cdHZhciBmbiA9IEV4cHIuYXR0ckhhbmRsZVsgbmFtZS50b0xvd2VyQ2FzZSgpIF0sXG5cdFx0Ly8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKGpRdWVyeSAjMTM4MDcpXG5cdFx0dmFsID0gZm4gJiYgaGFzT3duLmNhbGwoIEV4cHIuYXR0ckhhbmRsZSwgbmFtZS50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0Zm4oIGVsZW0sIG5hbWUsICFkb2N1bWVudElzSFRNTCApIDpcblx0XHRcdHVuZGVmaW5lZDtcblxuXHRyZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgP1xuXHRcdHZhbCA6XG5cdFx0c3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApIDpcblx0XHRcdCh2YWwgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xufTtcblxuU2l6emxlLmVzY2FwZSA9IGZ1bmN0aW9uKCBzZWwgKSB7XG5cdHJldHVybiAoc2VsICsgXCJcIikucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xufTtcblxuU2l6emxlLmVycm9yID0gZnVuY3Rpb24oIG1zZyApIHtcblx0dGhyb3cgbmV3IEVycm9yKCBcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiICsgbXNnICk7XG59O1xuXG4vKipcbiAqIERvY3VtZW50IHNvcnRpbmcgYW5kIHJlbW92aW5nIGR1cGxpY2F0ZXNcbiAqIEBwYXJhbSB7QXJyYXlMaWtlfSByZXN1bHRzXG4gKi9cblNpenpsZS51bmlxdWVTb3J0ID0gZnVuY3Rpb24oIHJlc3VsdHMgKSB7XG5cdHZhciBlbGVtLFxuXHRcdGR1cGxpY2F0ZXMgPSBbXSxcblx0XHRqID0gMCxcblx0XHRpID0gMDtcblxuXHQvLyBVbmxlc3Mgd2UgKmtub3cqIHdlIGNhbiBkZXRlY3QgZHVwbGljYXRlcywgYXNzdW1lIHRoZWlyIHByZXNlbmNlXG5cdGhhc0R1cGxpY2F0ZSA9ICFzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM7XG5cdHNvcnRJbnB1dCA9ICFzdXBwb3J0LnNvcnRTdGFibGUgJiYgcmVzdWx0cy5zbGljZSggMCApO1xuXHRyZXN1bHRzLnNvcnQoIHNvcnRPcmRlciApO1xuXG5cdGlmICggaGFzRHVwbGljYXRlICkge1xuXHRcdHdoaWxlICggKGVsZW0gPSByZXN1bHRzW2krK10pICkge1xuXHRcdFx0aWYgKCBlbGVtID09PSByZXN1bHRzWyBpIF0gKSB7XG5cdFx0XHRcdGogPSBkdXBsaWNhdGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRyZXN1bHRzLnNwbGljZSggZHVwbGljYXRlc1sgaiBdLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2xlYXIgaW5wdXQgYWZ0ZXIgc29ydGluZyB0byByZWxlYXNlIG9iamVjdHNcblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvc2l6emxlL3B1bGwvMjI1XG5cdHNvcnRJbnB1dCA9IG51bGw7XG5cblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIHJldHJpZXZpbmcgdGhlIHRleHQgdmFsdWUgb2YgYW4gYXJyYXkgb2YgRE9NIG5vZGVzXG4gKiBAcGFyYW0ge0FycmF5fEVsZW1lbnR9IGVsZW1cbiAqL1xuZ2V0VGV4dCA9IFNpenpsZS5nZXRUZXh0ID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHZhciBub2RlLFxuXHRcdHJldCA9IFwiXCIsXG5cdFx0aSA9IDAsXG5cdFx0bm9kZVR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdGlmICggIW5vZGVUeXBlICkge1xuXHRcdC8vIElmIG5vIG5vZGVUeXBlLCB0aGlzIGlzIGV4cGVjdGVkIHRvIGJlIGFuIGFycmF5XG5cdFx0d2hpbGUgKCAobm9kZSA9IGVsZW1baSsrXSkgKSB7XG5cdFx0XHQvLyBEbyBub3QgdHJhdmVyc2UgY29tbWVudCBub2Rlc1xuXHRcdFx0cmV0ICs9IGdldFRleHQoIG5vZGUgKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAxIHx8IG5vZGVUeXBlID09PSA5IHx8IG5vZGVUeXBlID09PSAxMSApIHtcblx0XHQvLyBVc2UgdGV4dENvbnRlbnQgZm9yIGVsZW1lbnRzXG5cdFx0Ly8gaW5uZXJUZXh0IHVzYWdlIHJlbW92ZWQgZm9yIGNvbnNpc3RlbmN5IG9mIG5ldyBsaW5lcyAoalF1ZXJ5ICMxMTE1Mylcblx0XHRpZiAoIHR5cGVvZiBlbGVtLnRleHRDb250ZW50ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFRyYXZlcnNlIGl0cyBjaGlsZHJlblxuXHRcdFx0Zm9yICggZWxlbSA9IGVsZW0uZmlyc3RDaGlsZDsgZWxlbTsgZWxlbSA9IGVsZW0ubmV4dFNpYmxpbmcgKSB7XG5cdFx0XHRcdHJldCArPSBnZXRUZXh0KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgaWYgKCBub2RlVHlwZSA9PT0gMyB8fCBub2RlVHlwZSA9PT0gNCApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVmFsdWU7XG5cdH1cblx0Ly8gRG8gbm90IGluY2x1ZGUgY29tbWVudCBvciBwcm9jZXNzaW5nIGluc3RydWN0aW9uIG5vZGVzXG5cblx0cmV0dXJuIHJldDtcbn07XG5cbkV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzID0ge1xuXG5cdC8vIENhbiBiZSBhZGp1c3RlZCBieSB0aGUgdXNlclxuXHRjYWNoZUxlbmd0aDogNTAsXG5cblx0Y3JlYXRlUHNldWRvOiBtYXJrRnVuY3Rpb24sXG5cblx0bWF0Y2g6IG1hdGNoRXhwcixcblxuXHRhdHRySGFuZGxlOiB7fSxcblxuXHRmaW5kOiB7fSxcblxuXHRyZWxhdGl2ZToge1xuXHRcdFwiPlwiOiB7IGRpcjogXCJwYXJlbnROb2RlXCIsIGZpcnN0OiB0cnVlIH0sXG5cdFx0XCIgXCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiB9LFxuXHRcdFwiK1wiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIn5cIjogeyBkaXI6IFwicHJldmlvdXNTaWJsaW5nXCIgfVxuXHR9LFxuXG5cdHByZUZpbHRlcjoge1xuXHRcdFwiQVRUUlwiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdC8vIE1vdmUgdGhlIGdpdmVuIHZhbHVlIHRvIG1hdGNoWzNdIHdoZXRoZXIgcXVvdGVkIG9yIHVucXVvdGVkXG5cdFx0XHRtYXRjaFszXSA9ICggbWF0Y2hbM10gfHwgbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIiApLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cblx0XHRcdGlmICggbWF0Y2hbMl0gPT09IFwifj1cIiApIHtcblx0XHRcdFx0bWF0Y2hbM10gPSBcIiBcIiArIG1hdGNoWzNdICsgXCIgXCI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgNCApO1xuXHRcdH0sXG5cblx0XHRcIkNISUxEXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdC8qIG1hdGNoZXMgZnJvbSBtYXRjaEV4cHJbXCJDSElMRFwiXVxuXHRcdFx0XHQxIHR5cGUgKG9ubHl8bnRofC4uLilcblx0XHRcdFx0MiB3aGF0IChjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHQzIGFyZ3VtZW50IChldmVufG9kZHxcXGQqfFxcZCpuKFsrLV1cXGQrKT98Li4uKVxuXHRcdFx0XHQ0IHhuLWNvbXBvbmVudCBvZiB4bit5IGFyZ3VtZW50IChbKy1dP1xcZCpufClcblx0XHRcdFx0NSBzaWduIG9mIHhuLWNvbXBvbmVudFxuXHRcdFx0XHQ2IHggb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDcgc2lnbiBvZiB5LWNvbXBvbmVudFxuXHRcdFx0XHQ4IHkgb2YgeS1jb21wb25lbnRcblx0XHRcdCovXG5cdFx0XHRtYXRjaFsxXSA9IG1hdGNoWzFdLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRcdGlmICggbWF0Y2hbMV0uc2xpY2UoIDAsIDMgKSA9PT0gXCJudGhcIiApIHtcblx0XHRcdFx0Ly8gbnRoLSogcmVxdWlyZXMgYXJndW1lbnRcblx0XHRcdFx0aWYgKCAhbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBtYXRjaFswXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gbnVtZXJpYyB4IGFuZCB5IHBhcmFtZXRlcnMgZm9yIEV4cHIuZmlsdGVyLkNISUxEXG5cdFx0XHRcdC8vIHJlbWVtYmVyIHRoYXQgZmFsc2UvdHJ1ZSBjYXN0IHJlc3BlY3RpdmVseSB0byAwLzFcblx0XHRcdFx0bWF0Y2hbNF0gPSArKCBtYXRjaFs0XSA/IG1hdGNoWzVdICsgKG1hdGNoWzZdIHx8IDEpIDogMiAqICggbWF0Y2hbM10gPT09IFwiZXZlblwiIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICkgKTtcblx0XHRcdFx0bWF0Y2hbNV0gPSArKCAoIG1hdGNoWzddICsgbWF0Y2hbOF0gKSB8fCBtYXRjaFszXSA9PT0gXCJvZGRcIiApO1xuXG5cdFx0XHQvLyBvdGhlciB0eXBlcyBwcm9oaWJpdCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBtYXRjaDtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0dmFyIGV4Y2Vzcyxcblx0XHRcdFx0dW5xdW90ZWQgPSAhbWF0Y2hbNl0gJiYgbWF0Y2hbMl07XG5cblx0XHRcdGlmICggbWF0Y2hFeHByW1wiQ0hJTERcIl0udGVzdCggbWF0Y2hbMF0gKSApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFjY2VwdCBxdW90ZWQgYXJndW1lbnRzIGFzLWlzXG5cdFx0XHRpZiAoIG1hdGNoWzNdICkge1xuXHRcdFx0XHRtYXRjaFsyXSA9IG1hdGNoWzRdIHx8IG1hdGNoWzVdIHx8IFwiXCI7XG5cblx0XHRcdC8vIFN0cmlwIGV4Y2VzcyBjaGFyYWN0ZXJzIGZyb20gdW5xdW90ZWQgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCB1bnF1b3RlZCAmJiBycHNldWRvLnRlc3QoIHVucXVvdGVkICkgJiZcblx0XHRcdFx0Ly8gR2V0IGV4Y2VzcyBmcm9tIHRva2VuaXplIChyZWN1cnNpdmVseSlcblx0XHRcdFx0KGV4Y2VzcyA9IHRva2VuaXplKCB1bnF1b3RlZCwgdHJ1ZSApKSAmJlxuXHRcdFx0XHQvLyBhZHZhbmNlIHRvIHRoZSBuZXh0IGNsb3NpbmcgcGFyZW50aGVzaXNcblx0XHRcdFx0KGV4Y2VzcyA9IHVucXVvdGVkLmluZGV4T2YoIFwiKVwiLCB1bnF1b3RlZC5sZW5ndGggLSBleGNlc3MgKSAtIHVucXVvdGVkLmxlbmd0aCkgKSB7XG5cblx0XHRcdFx0Ly8gZXhjZXNzIGlzIGEgbmVnYXRpdmUgaW5kZXhcblx0XHRcdFx0bWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHRcdG1hdGNoWzJdID0gdW5xdW90ZWQuc2xpY2UoIDAsIGV4Y2VzcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXR1cm4gb25seSBjYXB0dXJlcyBuZWVkZWQgYnkgdGhlIHBzZXVkbyBmaWx0ZXIgbWV0aG9kICh0eXBlIGFuZCBhcmd1bWVudClcblx0XHRcdHJldHVybiBtYXRjaC5zbGljZSggMCwgMyApO1xuXHRcdH1cblx0fSxcblxuXHRmaWx0ZXI6IHtcblxuXHRcdFwiVEFHXCI6IGZ1bmN0aW9uKCBub2RlTmFtZVNlbGVjdG9yICkge1xuXHRcdFx0dmFyIG5vZGVOYW1lID0gbm9kZU5hbWVTZWxlY3Rvci5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbm9kZU5hbWVTZWxlY3RvciA9PT0gXCIqXCIgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH0gOlxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5vZGVOYW1lO1xuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIkNMQVNTXCI6IGZ1bmN0aW9uKCBjbGFzc05hbWUgKSB7XG5cdFx0XHR2YXIgcGF0dGVybiA9IGNsYXNzQ2FjaGVbIGNsYXNzTmFtZSArIFwiIFwiIF07XG5cblx0XHRcdHJldHVybiBwYXR0ZXJuIHx8XG5cdFx0XHRcdChwYXR0ZXJuID0gbmV3IFJlZ0V4cCggXCIoXnxcIiArIHdoaXRlc3BhY2UgKyBcIilcIiArIGNsYXNzTmFtZSArIFwiKFwiICsgd2hpdGVzcGFjZSArIFwifCQpXCIgKSkgJiZcblx0XHRcdFx0Y2xhc3NDYWNoZSggY2xhc3NOYW1lLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0XHRyZXR1cm4gcGF0dGVybi50ZXN0KCB0eXBlb2YgZWxlbS5jbGFzc05hbWUgPT09IFwic3RyaW5nXCIgJiYgZWxlbS5jbGFzc05hbWUgfHwgdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlICE9PSBcInVuZGVmaW5lZFwiICYmIGVsZW0uZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgfHwgXCJcIiApO1xuXHRcdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBuYW1lLCBvcGVyYXRvciwgY2hlY2sgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciByZXN1bHQgPSBTaXp6bGUuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0XHRcdGlmICggcmVzdWx0ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wZXJhdG9yID09PSBcIiE9XCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCAhb3BlcmF0b3IgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXN1bHQgKz0gXCJcIjtcblxuXHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiPVwiID8gcmVzdWx0ID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiIT1cIiA/IHJlc3VsdCAhPT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIl49XCIgPyBjaGVjayAmJiByZXN1bHQuaW5kZXhPZiggY2hlY2sgKSA9PT0gMCA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiKj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIiQ9XCIgPyBjaGVjayAmJiByZXN1bHQuc2xpY2UoIC1jaGVjay5sZW5ndGggKSA9PT0gY2hlY2sgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcIn49XCIgPyAoIFwiIFwiICsgcmVzdWx0LnJlcGxhY2UoIHJ3aGl0ZXNwYWNlLCBcIiBcIiApICsgXCIgXCIgKS5pbmRleE9mKCBjaGVjayApID4gLTEgOlxuXHRcdFx0XHRcdG9wZXJhdG9yID09PSBcInw9XCIgPyByZXN1bHQgPT09IGNoZWNrIHx8IHJlc3VsdC5zbGljZSggMCwgY2hlY2subGVuZ3RoICsgMSApID09PSBjaGVjayArIFwiLVwiIDpcblx0XHRcdFx0XHRmYWxzZTtcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIHR5cGUsIHdoYXQsIGFyZ3VtZW50LCBmaXJzdCwgbGFzdCApIHtcblx0XHRcdHZhciBzaW1wbGUgPSB0eXBlLnNsaWNlKCAwLCAzICkgIT09IFwibnRoXCIsXG5cdFx0XHRcdGZvcndhcmQgPSB0eXBlLnNsaWNlKCAtNCApICE9PSBcImxhc3RcIixcblx0XHRcdFx0b2ZUeXBlID0gd2hhdCA9PT0gXCJvZi10eXBlXCI7XG5cblx0XHRcdHJldHVybiBmaXJzdCA9PT0gMSAmJiBsYXN0ID09PSAwID9cblxuXHRcdFx0XHQvLyBTaG9ydGN1dCBmb3IgOm50aC0qKG4pXG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiAhIWVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdFx0fSA6XG5cblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgY2FjaGUsIHVuaXF1ZUNhY2hlLCBvdXRlckNhY2hlLCBub2RlLCBub2RlSW5kZXgsIHN0YXJ0LFxuXHRcdFx0XHRcdFx0ZGlyID0gc2ltcGxlICE9PSBmb3J3YXJkID8gXCJuZXh0U2libGluZ1wiIDogXCJwcmV2aW91c1NpYmxpbmdcIixcblx0XHRcdFx0XHRcdHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZSxcblx0XHRcdFx0XHRcdG5hbWUgPSBvZlR5cGUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0XHRcdFx0dXNlQ2FjaGUgPSAheG1sICYmICFvZlR5cGUsXG5cdFx0XHRcdFx0XHRkaWZmID0gZmFsc2U7XG5cblx0XHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblxuXHRcdFx0XHRcdFx0Ly8gOihmaXJzdHxsYXN0fG9ubHkpLShjaGlsZHxvZi10eXBlKVxuXHRcdFx0XHRcdFx0aWYgKCBzaW1wbGUgKSB7XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggZGlyICkge1xuXHRcdFx0XHRcdFx0XHRcdG5vZGUgPSBlbGVtO1xuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSBub2RlWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHQvLyBSZXZlcnNlIGRpcmVjdGlvbiBmb3IgOm9ubHktKiAoaWYgd2UgaGF2ZW4ndCB5ZXQgZG9uZSBzbylcblx0XHRcdFx0XHRcdFx0XHRzdGFydCA9IGRpciA9IHR5cGUgPT09IFwib25seVwiICYmICFzdGFydCAmJiBcIm5leHRTaWJsaW5nXCI7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHN0YXJ0ID0gWyBmb3J3YXJkID8gcGFyZW50LmZpcnN0Q2hpbGQgOiBwYXJlbnQubGFzdENoaWxkIF07XG5cblx0XHRcdFx0XHRcdC8vIG5vbi14bWwgOm50aC1jaGlsZCguLi4pIHN0b3JlcyBjYWNoZSBkYXRhIG9uIGBwYXJlbnRgXG5cdFx0XHRcdFx0XHRpZiAoIGZvcndhcmQgJiYgdXNlQ2FjaGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU2VlayBgZWxlbWAgZnJvbSBhIHByZXZpb3VzbHktY2FjaGVkIGluZGV4XG5cblx0XHRcdFx0XHRcdFx0Ly8gLi4uaW4gYSBnemlwLWZyaWVuZGx5IHdheVxuXHRcdFx0XHRcdFx0XHRub2RlID0gcGFyZW50O1xuXHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdGNhY2hlID0gdW5pcXVlQ2FjaGVbIHR5cGUgXSB8fCBbXTtcblx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4ICYmIGNhY2hlWyAyIF07XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBub2RlSW5kZXggJiYgcGFyZW50LmNoaWxkTm9kZXNbIG5vZGVJbmRleCBdO1xuXG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBGYWxsYmFjayB0byBzZWVraW5nIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdChkaWZmID0gbm9kZUluZGV4ID0gMCkgfHwgc3RhcnQucG9wKCkpICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gV2hlbiBmb3VuZCwgY2FjaGUgaW5kZXhlcyBvbiBgcGFyZW50YCBhbmQgYnJlYWtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUubm9kZVR5cGUgPT09IDEgJiYgKytkaWZmICYmIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBub2RlSW5kZXgsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBVc2UgcHJldmlvdXNseS1jYWNoZWQgZWxlbWVudCBpbmRleCBpZiBhdmFpbGFibGVcblx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IG5vZGVbIGV4cGFuZG8gXSB8fCAobm9kZVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPDkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQob3V0ZXJDYWNoZVsgbm9kZS51bmlxdWVJRCBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRcdG5vZGVJbmRleCA9IGNhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgY2FjaGVbIDEgXTtcblx0XHRcdFx0XHRcdFx0XHRkaWZmID0gbm9kZUluZGV4O1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0Ly8geG1sIDpudGgtY2hpbGQoLi4uKVxuXHRcdFx0XHRcdFx0XHQvLyBvciA6bnRoLWxhc3QtY2hpbGQoLi4uKSBvciA6bnRoKC1sYXN0KT8tb2YtdHlwZSguLi4pXG5cdFx0XHRcdFx0XHRcdGlmICggZGlmZiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdFx0Ly8gVXNlIHRoZSBzYW1lIGxvb3AgYXMgYWJvdmUgdG8gc2VlayBgZWxlbWAgZnJvbSB0aGUgc3RhcnRcblx0XHRcdFx0XHRcdFx0XHR3aGlsZSAoIChub2RlID0gKytub2RlSW5kZXggJiYgbm9kZSAmJiBub2RlWyBkaXIgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdGlmICggKCBvZlR5cGUgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUgOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRub2RlLm5vZGVUeXBlID09PSAxICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0KytkaWZmICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIENhY2hlIHRoZSBpbmRleCBvZiBlYWNoIGVuY291bnRlcmVkIGVsZW1lbnRcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCB1c2VDYWNoZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsgdHlwZSBdID0gWyBkaXJydW5zLCBkaWZmIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIG5vZGUgPT09IGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgdGhlIG9mZnNldCwgdGhlbiBjaGVjayBhZ2FpbnN0IGN5Y2xlIHNpemVcblx0XHRcdFx0XHRcdGRpZmYgLT0gbGFzdDtcblx0XHRcdFx0XHRcdHJldHVybiBkaWZmID09PSBmaXJzdCB8fCAoIGRpZmYgJSBmaXJzdCA9PT0gMCAmJiBkaWZmIC8gZmlyc3QgPj0gMCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJQU0VVRE9cIjogZnVuY3Rpb24oIHBzZXVkbywgYXJndW1lbnQgKSB7XG5cdFx0XHQvLyBwc2V1ZG8tY2xhc3MgbmFtZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmVcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jcHNldWRvLWNsYXNzZXNcblx0XHRcdC8vIFByaW9yaXRpemUgYnkgY2FzZSBzZW5zaXRpdml0eSBpbiBjYXNlIGN1c3RvbSBwc2V1ZG9zIGFyZSBhZGRlZCB3aXRoIHVwcGVyY2FzZSBsZXR0ZXJzXG5cdFx0XHQvLyBSZW1lbWJlciB0aGF0IHNldEZpbHRlcnMgaW5oZXJpdHMgZnJvbSBwc2V1ZG9zXG5cdFx0XHR2YXIgYXJncyxcblx0XHRcdFx0Zm4gPSBFeHByLnBzZXVkb3NbIHBzZXVkbyBdIHx8IEV4cHIuc2V0RmlsdGVyc1sgcHNldWRvLnRvTG93ZXJDYXNlKCkgXSB8fFxuXHRcdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiICsgcHNldWRvICk7XG5cblx0XHRcdC8vIFRoZSB1c2VyIG1heSB1c2UgY3JlYXRlUHNldWRvIHRvIGluZGljYXRlIHRoYXRcblx0XHRcdC8vIGFyZ3VtZW50cyBhcmUgbmVlZGVkIHRvIGNyZWF0ZSB0aGUgZmlsdGVyIGZ1bmN0aW9uXG5cdFx0XHQvLyBqdXN0IGFzIFNpenpsZSBkb2VzXG5cdFx0XHRpZiAoIGZuWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHJldHVybiBmbiggYXJndW1lbnQgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnV0IG1haW50YWluIHN1cHBvcnQgZm9yIG9sZCBzaWduYXR1cmVzXG5cdFx0XHRpZiAoIGZuLmxlbmd0aCA+IDEgKSB7XG5cdFx0XHRcdGFyZ3MgPSBbIHBzZXVkbywgcHNldWRvLCBcIlwiLCBhcmd1bWVudCBdO1xuXHRcdFx0XHRyZXR1cm4gRXhwci5zZXRGaWx0ZXJzLmhhc093blByb3BlcnR5KCBwc2V1ZG8udG9Mb3dlckNhc2UoKSApID9cblx0XHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMgKSB7XG5cdFx0XHRcdFx0XHR2YXIgaWR4LFxuXHRcdFx0XHRcdFx0XHRtYXRjaGVkID0gZm4oIHNlZWQsIGFyZ3VtZW50ICksXG5cdFx0XHRcdFx0XHRcdGkgPSBtYXRjaGVkLmxlbmd0aDtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZHggPSBpbmRleE9mKCBzZWVkLCBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHRcdHNlZWRbIGlkeCBdID0gISggbWF0Y2hlc1sgaWR4IF0gPSBtYXRjaGVkW2ldICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSkgOlxuXHRcdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZuKCBlbGVtLCAwLCBhcmdzICk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGZuO1xuXHRcdH1cblx0fSxcblxuXHRwc2V1ZG9zOiB7XG5cdFx0Ly8gUG90ZW50aWFsbHkgY29tcGxleCBwc2V1ZG9zXG5cdFx0XCJub3RcIjogbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRcdC8vIFRyaW0gdGhlIHNlbGVjdG9yIHBhc3NlZCB0byBjb21waWxlXG5cdFx0XHQvLyB0byBhdm9pZCB0cmVhdGluZyBsZWFkaW5nIGFuZCB0cmFpbGluZ1xuXHRcdFx0Ly8gc3BhY2VzIGFzIGNvbWJpbmF0b3JzXG5cdFx0XHR2YXIgaW5wdXQgPSBbXSxcblx0XHRcdFx0cmVzdWx0cyA9IFtdLFxuXHRcdFx0XHRtYXRjaGVyID0gY29tcGlsZSggc2VsZWN0b3IucmVwbGFjZSggcnRyaW0sIFwiJDFcIiApICk7XG5cblx0XHRcdHJldHVybiBtYXRjaGVyWyBleHBhbmRvIF0gP1xuXHRcdFx0XHRtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIG1hdGNoZXMsIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHR2YXIgZWxlbSxcblx0XHRcdFx0XHRcdHVubWF0Y2hlZCA9IG1hdGNoZXIoIHNlZWQsIG51bGwsIHhtbCwgW10gKSxcblx0XHRcdFx0XHRcdGkgPSBzZWVkLmxlbmd0aDtcblxuXHRcdFx0XHRcdC8vIE1hdGNoIGVsZW1lbnRzIHVubWF0Y2hlZCBieSBgbWF0Y2hlcmBcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRzZWVkW2ldID0gIShtYXRjaGVzW2ldID0gZWxlbSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBlbGVtO1xuXHRcdFx0XHRcdG1hdGNoZXIoIGlucHV0LCBudWxsLCB4bWwsIHJlc3VsdHMgKTtcblx0XHRcdFx0XHQvLyBEb24ndCBrZWVwIHRoZSBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0XHRcdGlucHV0WzBdID0gbnVsbDtcblx0XHRcdFx0XHRyZXR1cm4gIXJlc3VsdHMucG9wKCk7XG5cdFx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImhhc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gU2l6emxlKCBzZWxlY3RvciwgZWxlbSApLmxlbmd0aCA+IDA7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0XCJjb250YWluc1wiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0XHR0ZXh0ID0gdGV4dC5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLnRleHRDb250ZW50IHx8IGdldFRleHQoIGVsZW0gKSApLmluZGV4T2YoIHRleHQgKSA+IC0xO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIFwiV2hldGhlciBhbiBlbGVtZW50IGlzIHJlcHJlc2VudGVkIGJ5IGEgOmxhbmcoKSBzZWxlY3RvclxuXHRcdC8vIGlzIGJhc2VkIHNvbGVseSBvbiB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlXG5cdFx0Ly8gYmVpbmcgZXF1YWwgdG8gdGhlIGlkZW50aWZpZXIgQyxcblx0XHQvLyBvciBiZWdpbm5pbmcgd2l0aCB0aGUgaWRlbnRpZmllciBDIGltbWVkaWF0ZWx5IGZvbGxvd2VkIGJ5IFwiLVwiLlxuXHRcdC8vIFRoZSBtYXRjaGluZyBvZiBDIGFnYWluc3QgdGhlIGVsZW1lbnQncyBsYW5ndWFnZSB2YWx1ZSBpcyBwZXJmb3JtZWQgY2FzZS1pbnNlbnNpdGl2ZWx5LlxuXHRcdC8vIFRoZSBpZGVudGlmaWVyIEMgZG9lcyBub3QgaGF2ZSB0byBiZSBhIHZhbGlkIGxhbmd1YWdlIG5hbWUuXCJcblx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2xhbmctcHNldWRvXG5cdFx0XCJsYW5nXCI6IG1hcmtGdW5jdGlvbiggZnVuY3Rpb24oIGxhbmcgKSB7XG5cdFx0XHQvLyBsYW5nIHZhbHVlIG11c3QgYmUgYSB2YWxpZCBpZGVudGlmaWVyXG5cdFx0XHRpZiAoICFyaWRlbnRpZmllci50ZXN0KGxhbmcgfHwgXCJcIikgKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggXCJ1bnN1cHBvcnRlZCBsYW5nOiBcIiArIGxhbmcgKTtcblx0XHRcdH1cblx0XHRcdGxhbmcgPSBsYW5nLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIGVsZW1MYW5nO1xuXHRcdFx0XHRkbyB7XG5cdFx0XHRcdFx0aWYgKCAoZWxlbUxhbmcgPSBkb2N1bWVudElzSFRNTCA/XG5cdFx0XHRcdFx0XHRlbGVtLmxhbmcgOlxuXHRcdFx0XHRcdFx0ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ4bWw6bGFuZ1wiKSB8fCBlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpICkge1xuXG5cdFx0XHRcdFx0XHRlbGVtTGFuZyA9IGVsZW1MYW5nLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbUxhbmcgPT09IGxhbmcgfHwgZWxlbUxhbmcuaW5kZXhPZiggbGFuZyArIFwiLVwiICkgPT09IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IHdoaWxlICggKGVsZW0gPSBlbGVtLnBhcmVudE5vZGUpICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdC8vIE1pc2NlbGxhbmVvdXNcblx0XHRcInRhcmdldFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBoYXNoID0gd2luZG93LmxvY2F0aW9uICYmIHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0cmV0dXJuIGhhc2ggJiYgaGFzaC5zbGljZSggMSApID09PSBlbGVtLmlkO1xuXHRcdH0sXG5cblx0XHRcInJvb3RcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gZG9jRWxlbTtcblx0XHR9LFxuXG5cdFx0XCJmb2N1c1wiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmICghZG9jdW1lbnQuaGFzRm9jdXMgfHwgZG9jdW1lbnQuaGFzRm9jdXMoKSkgJiYgISEoZWxlbS50eXBlIHx8IGVsZW0uaHJlZiB8fCB+ZWxlbS50YWJJbmRleCk7XG5cdFx0fSxcblxuXHRcdC8vIEJvb2xlYW4gcHJvcGVydGllc1xuXHRcdFwiZW5hYmxlZFwiOiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZmFsc2UgKSxcblx0XHRcImRpc2FibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCB0cnVlICksXG5cblx0XHRcImNoZWNrZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBJbiBDU1MzLCA6Y2hlY2tlZCBzaG91bGQgcmV0dXJuIGJvdGggY2hlY2tlZCBhbmQgc2VsZWN0ZWQgZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gKG5vZGVOYW1lID09PSBcImlucHV0XCIgJiYgISFlbGVtLmNoZWNrZWQpIHx8IChub2RlTmFtZSA9PT0gXCJvcHRpb25cIiAmJiAhIWVsZW0uc2VsZWN0ZWQpO1xuXHRcdH0sXG5cblx0XHRcInNlbGVjdGVkXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gQWNjZXNzaW5nIHRoaXMgcHJvcGVydHkgbWFrZXMgc2VsZWN0ZWQtYnktZGVmYXVsdFxuXHRcdFx0Ly8gb3B0aW9ucyBpbiBTYWZhcmkgd29yayBwcm9wZXJseVxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGVsZW0ucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZWxlbS5zZWxlY3RlZCA9PT0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0Ly8gQ29udGVudHNcblx0XHRcImVtcHR5XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNlbXB0eS1wc2V1ZG9cblx0XHRcdC8vIDplbXB0eSBpcyBuZWdhdGVkIGJ5IGVsZW1lbnQgKDEpIG9yIGNvbnRlbnQgbm9kZXMgKHRleHQ6IDM7IGNkYXRhOiA0OyBlbnRpdHkgcmVmOiA1KSxcblx0XHRcdC8vICAgYnV0IG5vdCBieSBvdGhlcnMgKGNvbW1lbnQ6IDg7IHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb246IDc7IGV0Yy4pXG5cdFx0XHQvLyBub2RlVHlwZSA8IDYgd29ya3MgYmVjYXVzZSBhdHRyaWJ1dGVzICgyKSBkbyBub3QgYXBwZWFyIGFzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlIDwgNiApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0sXG5cblx0XHRcInBhcmVudFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAhRXhwci5wc2V1ZG9zW1wiZW1wdHlcIl0oIGVsZW0gKTtcblx0XHR9LFxuXG5cdFx0Ly8gRWxlbWVudC9pbnB1dCB0eXBlc1xuXHRcdFwiaGVhZGVyXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJoZWFkZXIudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImlucHV0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIHJpbnB1dHMudGVzdCggZWxlbS5ub2RlTmFtZSApO1xuXHRcdH0sXG5cblx0XHRcImJ1dHRvblwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIG5hbWUgPT09IFwiaW5wdXRcIiAmJiBlbGVtLnR5cGUgPT09IFwiYnV0dG9uXCIgfHwgbmFtZSA9PT0gXCJidXR0b25cIjtcblx0XHR9LFxuXG5cdFx0XCJ0ZXh0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGF0dHI7XG5cdFx0XHRyZXR1cm4gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgJiZcblx0XHRcdFx0ZWxlbS50eXBlID09PSBcInRleHRcIiAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFPDhcblx0XHRcdFx0Ly8gTmV3IEhUTUw1IGF0dHJpYnV0ZSB2YWx1ZXMgKGUuZy4sIFwic2VhcmNoXCIpIGFwcGVhciB3aXRoIGVsZW0udHlwZSA9PT0gXCJ0ZXh0XCJcblx0XHRcdFx0KCAoYXR0ciA9IGVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgPT0gbnVsbCB8fCBhdHRyLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dFwiICk7XG5cdFx0fSxcblxuXHRcdC8vIFBvc2l0aW9uLWluLWNvbGxlY3Rpb25cblx0XHRcImZpcnN0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gWyAwIF07XG5cdFx0fSksXG5cblx0XHRcImxhc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gWyBsZW5ndGggLSAxIF07XG5cdFx0fSksXG5cblx0XHRcImVxXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHJldHVybiBbIGFyZ3VtZW50IDwgMCA/IGFyZ3VtZW50ICsgbGVuZ3RoIDogYXJndW1lbnQgXTtcblx0XHR9KSxcblxuXHRcdFwiZXZlblwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSArPSAyICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwib2RkXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAxO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJsdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCwgYXJndW1lbnQgKSB7XG5cdFx0XHR2YXIgaSA9IGFyZ3VtZW50IDwgMCA/XG5cdFx0XHRcdGFyZ3VtZW50ICsgbGVuZ3RoIDpcblx0XHRcdFx0YXJndW1lbnQgPiBsZW5ndGggP1xuXHRcdFx0XHRcdGxlbmd0aCA6XG5cdFx0XHRcdFx0YXJndW1lbnQ7XG5cdFx0XHRmb3IgKCA7IC0taSA+PSAwOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImd0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgKytpIDwgbGVuZ3RoOyApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSlcblx0fVxufTtcblxuRXhwci5wc2V1ZG9zW1wibnRoXCJdID0gRXhwci5wc2V1ZG9zW1wiZXFcIl07XG5cbi8vIEFkZCBidXR0b24vaW5wdXQgdHlwZSBwc2V1ZG9zXG5mb3IgKCBpIGluIHsgcmFkaW86IHRydWUsIGNoZWNrYm94OiB0cnVlLCBmaWxlOiB0cnVlLCBwYXNzd29yZDogdHJ1ZSwgaW1hZ2U6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVJbnB1dFBzZXVkbyggaSApO1xufVxuZm9yICggaSBpbiB7IHN1Ym1pdDogdHJ1ZSwgcmVzZXQ6IHRydWUgfSApIHtcblx0RXhwci5wc2V1ZG9zWyBpIF0gPSBjcmVhdGVCdXR0b25Qc2V1ZG8oIGkgKTtcbn1cblxuLy8gRWFzeSBBUEkgZm9yIGNyZWF0aW5nIG5ldyBzZXRGaWx0ZXJzXG5mdW5jdGlvbiBzZXRGaWx0ZXJzKCkge31cbnNldEZpbHRlcnMucHJvdG90eXBlID0gRXhwci5maWx0ZXJzID0gRXhwci5wc2V1ZG9zO1xuRXhwci5zZXRGaWx0ZXJzID0gbmV3IHNldEZpbHRlcnMoKTtcblxudG9rZW5pemUgPSBTaXp6bGUudG9rZW5pemUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIHBhcnNlT25seSApIHtcblx0dmFyIG1hdGNoZWQsIG1hdGNoLCB0b2tlbnMsIHR5cGUsXG5cdFx0c29GYXIsIGdyb3VwcywgcHJlRmlsdGVycyxcblx0XHRjYWNoZWQgPSB0b2tlbkNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF07XG5cblx0aWYgKCBjYWNoZWQgKSB7XG5cdFx0cmV0dXJuIHBhcnNlT25seSA/IDAgOiBjYWNoZWQuc2xpY2UoIDAgKTtcblx0fVxuXG5cdHNvRmFyID0gc2VsZWN0b3I7XG5cdGdyb3VwcyA9IFtdO1xuXHRwcmVGaWx0ZXJzID0gRXhwci5wcmVGaWx0ZXI7XG5cblx0d2hpbGUgKCBzb0ZhciApIHtcblxuXHRcdC8vIENvbW1hIGFuZCBmaXJzdCBydW5cblx0XHRpZiAoICFtYXRjaGVkIHx8IChtYXRjaCA9IHJjb21tYS5leGVjKCBzb0ZhciApKSApIHtcblx0XHRcdGlmICggbWF0Y2ggKSB7XG5cdFx0XHRcdC8vIERvbid0IGNvbnN1bWUgdHJhaWxpbmcgY29tbWFzIGFzIHZhbGlkXG5cdFx0XHRcdHNvRmFyID0gc29GYXIuc2xpY2UoIG1hdGNoWzBdLmxlbmd0aCApIHx8IHNvRmFyO1xuXHRcdFx0fVxuXHRcdFx0Z3JvdXBzLnB1c2goICh0b2tlbnMgPSBbXSkgKTtcblx0XHR9XG5cblx0XHRtYXRjaGVkID0gZmFsc2U7XG5cblx0XHQvLyBDb21iaW5hdG9yc1xuXHRcdGlmICggKG1hdGNoID0gcmNvbWJpbmF0b3JzLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdHZhbHVlOiBtYXRjaGVkLFxuXHRcdFx0XHQvLyBDYXN0IGRlc2NlbmRhbnQgY29tYmluYXRvcnMgdG8gc3BhY2Vcblx0XHRcdFx0dHlwZTogbWF0Y2hbMF0ucmVwbGFjZSggcnRyaW0sIFwiIFwiIClcblx0XHRcdH0pO1xuXHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHR9XG5cblx0XHQvLyBGaWx0ZXJzXG5cdFx0Zm9yICggdHlwZSBpbiBFeHByLmZpbHRlciApIHtcblx0XHRcdGlmICggKG1hdGNoID0gbWF0Y2hFeHByWyB0eXBlIF0uZXhlYyggc29GYXIgKSkgJiYgKCFwcmVGaWx0ZXJzWyB0eXBlIF0gfHxcblx0XHRcdFx0KG1hdGNoID0gcHJlRmlsdGVyc1sgdHlwZSBdKCBtYXRjaCApKSkgKSB7XG5cdFx0XHRcdG1hdGNoZWQgPSBtYXRjaC5zaGlmdCgpO1xuXHRcdFx0XHR0b2tlbnMucHVzaCh7XG5cdFx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0XHRtYXRjaGVzOiBtYXRjaFxuXHRcdFx0XHR9KTtcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hlZC5sZW5ndGggKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoICFtYXRjaGVkICkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSBsZW5ndGggb2YgdGhlIGludmFsaWQgZXhjZXNzXG5cdC8vIGlmIHdlJ3JlIGp1c3QgcGFyc2luZ1xuXHQvLyBPdGhlcndpc2UsIHRocm93IGFuIGVycm9yIG9yIHJldHVybiB0b2tlbnNcblx0cmV0dXJuIHBhcnNlT25seSA/XG5cdFx0c29GYXIubGVuZ3RoIDpcblx0XHRzb0ZhciA/XG5cdFx0XHRTaXp6bGUuZXJyb3IoIHNlbGVjdG9yICkgOlxuXHRcdFx0Ly8gQ2FjaGUgdGhlIHRva2Vuc1xuXHRcdFx0dG9rZW5DYWNoZSggc2VsZWN0b3IsIGdyb3VwcyApLnNsaWNlKCAwICk7XG59O1xuXG5mdW5jdGlvbiB0b1NlbGVjdG9yKCB0b2tlbnMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSB0b2tlbnMubGVuZ3RoLFxuXHRcdHNlbGVjdG9yID0gXCJcIjtcblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0c2VsZWN0b3IgKz0gdG9rZW5zW2ldLnZhbHVlO1xuXHR9XG5cdHJldHVybiBzZWxlY3Rvcjtcbn1cblxuZnVuY3Rpb24gYWRkQ29tYmluYXRvciggbWF0Y2hlciwgY29tYmluYXRvciwgYmFzZSApIHtcblx0dmFyIGRpciA9IGNvbWJpbmF0b3IuZGlyLFxuXHRcdHNraXAgPSBjb21iaW5hdG9yLm5leHQsXG5cdFx0a2V5ID0gc2tpcCB8fCBkaXIsXG5cdFx0Y2hlY2tOb25FbGVtZW50cyA9IGJhc2UgJiYga2V5ID09PSBcInBhcmVudE5vZGVcIixcblx0XHRkb25lTmFtZSA9IGRvbmUrKztcblxuXHRyZXR1cm4gY29tYmluYXRvci5maXJzdCA/XG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBjbG9zZXN0IGFuY2VzdG9yL3ByZWNlZGluZyBlbGVtZW50XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdHJldHVybiBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0gOlxuXG5cdFx0Ly8gQ2hlY2sgYWdhaW5zdCBhbGwgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRzXG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBvbGRDYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsXG5cdFx0XHRcdG5ld0NhY2hlID0gWyBkaXJydW5zLCBkb25lTmFtZSBdO1xuXG5cdFx0XHQvLyBXZSBjYW4ndCBzZXQgYXJiaXRyYXJ5IGRhdGEgb24gWE1MIG5vZGVzLCBzbyB0aGV5IGRvbid0IGJlbmVmaXQgZnJvbSBjb21iaW5hdG9yIGNhY2hpbmdcblx0XHRcdGlmICggeG1sICkge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aGlsZSAoIChlbGVtID0gZWxlbVsgZGlyIF0pICkge1xuXHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBjaGVja05vbkVsZW1lbnRzICkge1xuXHRcdFx0XHRcdFx0b3V0ZXJDYWNoZSA9IGVsZW1bIGV4cGFuZG8gXSB8fCAoZWxlbVsgZXhwYW5kbyBdID0ge30pO1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlID0gb3V0ZXJDYWNoZVsgZWxlbS51bmlxdWVJRCBdIHx8IChvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdGlmICggc2tpcCAmJiBza2lwID09PSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdGVsZW0gPSBlbGVtWyBkaXIgXSB8fCBlbGVtO1xuXHRcdFx0XHRcdFx0fSBlbHNlIGlmICggKG9sZENhY2hlID0gdW5pcXVlQ2FjaGVbIGtleSBdKSAmJlxuXHRcdFx0XHRcdFx0XHRvbGRDYWNoZVsgMCBdID09PSBkaXJydW5zICYmIG9sZENhY2hlWyAxIF0gPT09IGRvbmVOYW1lICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFzc2lnbiB0byBuZXdDYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHJldHVybiAobmV3Q2FjaGVbIDIgXSA9IG9sZENhY2hlWyAyIF0pO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmV1c2UgbmV3Y2FjaGUgc28gcmVzdWx0cyBiYWNrLXByb3BhZ2F0ZSB0byBwcmV2aW91cyBlbGVtZW50c1xuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZVsga2V5IF0gPSBuZXdDYWNoZTtcblxuXHRcdFx0XHRcdFx0XHQvLyBBIG1hdGNoIG1lYW5zIHdlJ3JlIGRvbmU7IGEgZmFpbCBtZWFucyB3ZSBoYXZlIHRvIGtlZXAgY2hlY2tpbmdcblx0XHRcdFx0XHRcdFx0aWYgKCAobmV3Q2FjaGVbIDIgXSA9IG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH07XG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApIHtcblx0cmV0dXJuIG1hdGNoZXJzLmxlbmd0aCA+IDEgP1xuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb250ZXh0LCB4bWwgKSB7XG5cdFx0XHR2YXIgaSA9IG1hdGNoZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoICFtYXRjaGVyc1tpXSggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9IDpcblx0XHRtYXRjaGVyc1swXTtcbn1cblxuZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyggc2VsZWN0b3IsIGNvbnRleHRzLCByZXN1bHRzICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gY29udGV4dHMubGVuZ3RoO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0c1tpXSwgcmVzdWx0cyApO1xuXHR9XG5cdHJldHVybiByZXN1bHRzO1xufVxuXG5mdW5jdGlvbiBjb25kZW5zZSggdW5tYXRjaGVkLCBtYXAsIGZpbHRlciwgY29udGV4dCwgeG1sICkge1xuXHR2YXIgZWxlbSxcblx0XHRuZXdVbm1hdGNoZWQgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsZW4gPSB1bm1hdGNoZWQubGVuZ3RoLFxuXHRcdG1hcHBlZCA9IG1hcCAhPSBudWxsO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKGVsZW0gPSB1bm1hdGNoZWRbaV0pICkge1xuXHRcdFx0aWYgKCAhZmlsdGVyIHx8IGZpbHRlciggZWxlbSwgY29udGV4dCwgeG1sICkgKSB7XG5cdFx0XHRcdG5ld1VubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdGlmICggbWFwcGVkICkge1xuXHRcdFx0XHRcdG1hcC5wdXNoKCBpICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbmV3VW5tYXRjaGVkO1xufVxuXG5mdW5jdGlvbiBzZXRNYXRjaGVyKCBwcmVGaWx0ZXIsIHNlbGVjdG9yLCBtYXRjaGVyLCBwb3N0RmlsdGVyLCBwb3N0RmluZGVyLCBwb3N0U2VsZWN0b3IgKSB7XG5cdGlmICggcG9zdEZpbHRlciAmJiAhcG9zdEZpbHRlclsgZXhwYW5kbyBdICkge1xuXHRcdHBvc3RGaWx0ZXIgPSBzZXRNYXRjaGVyKCBwb3N0RmlsdGVyICk7XG5cdH1cblx0aWYgKCBwb3N0RmluZGVyICYmICFwb3N0RmluZGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbmRlciA9IHNldE1hdGNoZXIoIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApO1xuXHR9XG5cdHJldHVybiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlZWQsIHJlc3VsdHMsIGNvbnRleHQsIHhtbCApIHtcblx0XHR2YXIgdGVtcCwgaSwgZWxlbSxcblx0XHRcdHByZU1hcCA9IFtdLFxuXHRcdFx0cG9zdE1hcCA9IFtdLFxuXHRcdFx0cHJlZXhpc3RpbmcgPSByZXN1bHRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gR2V0IGluaXRpYWwgZWxlbWVudHMgZnJvbSBzZWVkIG9yIGNvbnRleHRcblx0XHRcdGVsZW1zID0gc2VlZCB8fCBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciB8fCBcIipcIiwgY29udGV4dC5ub2RlVHlwZSA/IFsgY29udGV4dCBdIDogY29udGV4dCwgW10gKSxcblxuXHRcdFx0Ly8gUHJlZmlsdGVyIHRvIGdldCBtYXRjaGVyIGlucHV0LCBwcmVzZXJ2aW5nIGEgbWFwIGZvciBzZWVkLXJlc3VsdHMgc3luY2hyb25pemF0aW9uXG5cdFx0XHRtYXRjaGVySW4gPSBwcmVGaWx0ZXIgJiYgKCBzZWVkIHx8ICFzZWxlY3RvciApID9cblx0XHRcdFx0Y29uZGVuc2UoIGVsZW1zLCBwcmVNYXAsIHByZUZpbHRlciwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRlbGVtcyxcblxuXHRcdFx0bWF0Y2hlck91dCA9IG1hdGNoZXIgP1xuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGEgcG9zdEZpbmRlciwgb3IgZmlsdGVyZWQgc2VlZCwgb3Igbm9uLXNlZWQgcG9zdEZpbHRlciBvciBwcmVleGlzdGluZyByZXN1bHRzLFxuXHRcdFx0XHRwb3N0RmluZGVyIHx8ICggc2VlZCA/IHByZUZpbHRlciA6IHByZWV4aXN0aW5nIHx8IHBvc3RGaWx0ZXIgKSA/XG5cblx0XHRcdFx0XHQvLyAuLi5pbnRlcm1lZGlhdGUgcHJvY2Vzc2luZyBpcyBuZWNlc3Nhcnlcblx0XHRcdFx0XHRbXSA6XG5cblx0XHRcdFx0XHQvLyAuLi5vdGhlcndpc2UgdXNlIHJlc3VsdHMgZGlyZWN0bHlcblx0XHRcdFx0XHRyZXN1bHRzIDpcblx0XHRcdFx0bWF0Y2hlckluO1xuXG5cdFx0Ly8gRmluZCBwcmltYXJ5IG1hdGNoZXNcblx0XHRpZiAoIG1hdGNoZXIgKSB7XG5cdFx0XHRtYXRjaGVyKCBtYXRjaGVySW4sIG1hdGNoZXJPdXQsIGNvbnRleHQsIHhtbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHBvc3RGaWx0ZXJcblx0XHRpZiAoIHBvc3RGaWx0ZXIgKSB7XG5cdFx0XHR0ZW1wID0gY29uZGVuc2UoIG1hdGNoZXJPdXQsIHBvc3RNYXAgKTtcblx0XHRcdHBvc3RGaWx0ZXIoIHRlbXAsIFtdLCBjb250ZXh0LCB4bWwgKTtcblxuXHRcdFx0Ly8gVW4tbWF0Y2ggZmFpbGluZyBlbGVtZW50cyBieSBtb3ZpbmcgdGhlbSBiYWNrIHRvIG1hdGNoZXJJblxuXHRcdFx0aSA9IHRlbXAubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggKGVsZW0gPSB0ZW1wW2ldKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyT3V0WyBwb3N0TWFwW2ldIF0gPSAhKG1hdGNoZXJJblsgcG9zdE1hcFtpXSBdID0gZWxlbSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgfHwgcHJlRmlsdGVyICkge1xuXHRcdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdFx0Ly8gR2V0IHRoZSBmaW5hbCBtYXRjaGVyT3V0IGJ5IGNvbmRlbnNpbmcgdGhpcyBpbnRlcm1lZGlhdGUgaW50byBwb3N0RmluZGVyIGNvbnRleHRzXG5cdFx0XHRcdFx0dGVtcCA9IFtdO1xuXHRcdFx0XHRcdGkgPSBtYXRjaGVyT3V0Lmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSApIHtcblx0XHRcdFx0XHRcdFx0Ly8gUmVzdG9yZSBtYXRjaGVySW4gc2luY2UgZWxlbSBpcyBub3QgeWV0IGEgZmluYWwgbWF0Y2hcblx0XHRcdFx0XHRcdFx0dGVtcC5wdXNoKCAobWF0Y2hlckluW2ldID0gZWxlbSkgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cG9zdEZpbmRlciggbnVsbCwgKG1hdGNoZXJPdXQgPSBbXSksIHRlbXAsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTW92ZSBtYXRjaGVkIGVsZW1lbnRzIGZyb20gc2VlZCB0byByZXN1bHRzIHRvIGtlZXAgdGhlbSBzeW5jaHJvbml6ZWRcblx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gbWF0Y2hlck91dFtpXSkgJiZcblx0XHRcdFx0XHRcdCh0ZW1wID0gcG9zdEZpbmRlciA/IGluZGV4T2YoIHNlZWQsIGVsZW0gKSA6IHByZU1hcFtpXSkgPiAtMSApIHtcblxuXHRcdFx0XHRcdFx0c2VlZFt0ZW1wXSA9ICEocmVzdWx0c1t0ZW1wXSA9IGVsZW0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gQWRkIGVsZW1lbnRzIHRvIHJlc3VsdHMsIHRocm91Z2ggcG9zdEZpbmRlciBpZiBkZWZpbmVkXG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXJPdXQgPSBjb25kZW5zZShcblx0XHRcdFx0bWF0Y2hlck91dCA9PT0gcmVzdWx0cyA/XG5cdFx0XHRcdFx0bWF0Y2hlck91dC5zcGxpY2UoIHByZWV4aXN0aW5nLCBtYXRjaGVyT3V0Lmxlbmd0aCApIDpcblx0XHRcdFx0XHRtYXRjaGVyT3V0XG5cdFx0XHQpO1xuXHRcdFx0aWYgKCBwb3N0RmluZGVyICkge1xuXHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCByZXN1bHRzLCBtYXRjaGVyT3V0LCB4bWwgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIG1hdGNoZXJPdXQgKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zICkge1xuXHR2YXIgY2hlY2tDb250ZXh0LCBtYXRjaGVyLCBqLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0bGVhZGluZ1JlbGF0aXZlID0gRXhwci5yZWxhdGl2ZVsgdG9rZW5zWzBdLnR5cGUgXSxcblx0XHRpbXBsaWNpdFJlbGF0aXZlID0gbGVhZGluZ1JlbGF0aXZlIHx8IEV4cHIucmVsYXRpdmVbXCIgXCJdLFxuXHRcdGkgPSBsZWFkaW5nUmVsYXRpdmUgPyAxIDogMCxcblxuXHRcdC8vIFRoZSBmb3VuZGF0aW9uYWwgbWF0Y2hlciBlbnN1cmVzIHRoYXQgZWxlbWVudHMgYXJlIHJlYWNoYWJsZSBmcm9tIHRvcC1sZXZlbCBjb250ZXh0KHMpXG5cdFx0bWF0Y2hDb250ZXh0ID0gYWRkQ29tYmluYXRvciggZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gZWxlbSA9PT0gY2hlY2tDb250ZXh0O1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaEFueUNvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBpbmRleE9mKCBjaGVja0NvbnRleHQsIGVsZW0gKSA+IC0xO1xuXHRcdH0sIGltcGxpY2l0UmVsYXRpdmUsIHRydWUgKSxcblx0XHRtYXRjaGVycyA9IFsgZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciByZXQgPSAoICFsZWFkaW5nUmVsYXRpdmUgJiYgKCB4bWwgfHwgY29udGV4dCAhPT0gb3V0ZXJtb3N0Q29udGV4dCApICkgfHwgKFxuXHRcdFx0XHQoY2hlY2tDb250ZXh0ID0gY29udGV4dCkubm9kZVR5cGUgP1xuXHRcdFx0XHRcdG1hdGNoQ29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgOlxuXHRcdFx0XHRcdG1hdGNoQW55Q29udGV4dCggZWxlbSwgY29udGV4dCwgeG1sICkgKTtcblx0XHRcdC8vIEF2b2lkIGhhbmdpbmcgb250byBlbGVtZW50IChpc3N1ZSAjMjk5KVxuXHRcdFx0Y2hlY2tDb250ZXh0ID0gbnVsbDtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fSBdO1xuXG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdGlmICggKG1hdGNoZXIgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbaV0udHlwZSBdKSApIHtcblx0XHRcdG1hdGNoZXJzID0gWyBhZGRDb21iaW5hdG9yKGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLCBtYXRjaGVyKSBdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtYXRjaGVyID0gRXhwci5maWx0ZXJbIHRva2Vuc1tpXS50eXBlIF0uYXBwbHkoIG51bGwsIHRva2Vuc1tpXS5tYXRjaGVzICk7XG5cblx0XHRcdC8vIFJldHVybiBzcGVjaWFsIHVwb24gc2VlaW5nIGEgcG9zaXRpb25hbCBtYXRjaGVyXG5cdFx0XHRpZiAoIG1hdGNoZXJbIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0Ly8gRmluZCB0aGUgbmV4dCByZWxhdGl2ZSBvcGVyYXRvciAoaWYgYW55KSBmb3IgcHJvcGVyIGhhbmRsaW5nXG5cdFx0XHRcdGogPSArK2k7XG5cdFx0XHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgdG9rZW5zW2pdLnR5cGUgXSApIHtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gc2V0TWF0Y2hlcihcblx0XHRcdFx0XHRpID4gMSAmJiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKSxcblx0XHRcdFx0XHRpID4gMSAmJiB0b1NlbGVjdG9yKFxuXHRcdFx0XHRcdFx0Ly8gSWYgdGhlIHByZWNlZGluZyB0b2tlbiB3YXMgYSBkZXNjZW5kYW50IGNvbWJpbmF0b3IsIGluc2VydCBhbiBpbXBsaWNpdCBhbnktZWxlbWVudCBgKmBcblx0XHRcdFx0XHRcdHRva2Vucy5zbGljZSggMCwgaSAtIDEgKS5jb25jYXQoeyB2YWx1ZTogdG9rZW5zWyBpIC0gMiBdLnR5cGUgPT09IFwiIFwiID8gXCIqXCIgOiBcIlwiIH0pXG5cdFx0XHRcdFx0KS5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICksXG5cdFx0XHRcdFx0bWF0Y2hlcixcblx0XHRcdFx0XHRpIDwgaiAmJiBtYXRjaGVyRnJvbVRva2VucyggdG9rZW5zLnNsaWNlKCBpLCBqICkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIG1hdGNoZXJGcm9tVG9rZW5zKCAodG9rZW5zID0gdG9rZW5zLnNsaWNlKCBqICkpICksXG5cdFx0XHRcdFx0aiA8IGxlbiAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlcnMucHVzaCggbWF0Y2hlciApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50TWF0Y2hlciggbWF0Y2hlcnMgKTtcbn1cblxuZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkge1xuXHR2YXIgYnlTZXQgPSBzZXRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdGJ5RWxlbWVudCA9IGVsZW1lbnRNYXRjaGVycy5sZW5ndGggPiAwLFxuXHRcdHN1cGVyTWF0Y2hlciA9IGZ1bmN0aW9uKCBzZWVkLCBjb250ZXh0LCB4bWwsIHJlc3VsdHMsIG91dGVybW9zdCApIHtcblx0XHRcdHZhciBlbGVtLCBqLCBtYXRjaGVyLFxuXHRcdFx0XHRtYXRjaGVkQ291bnQgPSAwLFxuXHRcdFx0XHRpID0gXCIwXCIsXG5cdFx0XHRcdHVubWF0Y2hlZCA9IHNlZWQgJiYgW10sXG5cdFx0XHRcdHNldE1hdGNoZWQgPSBbXSxcblx0XHRcdFx0Y29udGV4dEJhY2t1cCA9IG91dGVybW9zdENvbnRleHQsXG5cdFx0XHRcdC8vIFdlIG11c3QgYWx3YXlzIGhhdmUgZWl0aGVyIHNlZWQgZWxlbWVudHMgb3Igb3V0ZXJtb3N0IGNvbnRleHRcblx0XHRcdFx0ZWxlbXMgPSBzZWVkIHx8IGJ5RWxlbWVudCAmJiBFeHByLmZpbmRbXCJUQUdcIl0oIFwiKlwiLCBvdXRlcm1vc3QgKSxcblx0XHRcdFx0Ly8gVXNlIGludGVnZXIgZGlycnVucyBpZmYgdGhpcyBpcyB0aGUgb3V0ZXJtb3N0IG1hdGNoZXJcblx0XHRcdFx0ZGlycnVuc1VuaXF1ZSA9IChkaXJydW5zICs9IGNvbnRleHRCYWNrdXAgPT0gbnVsbCA/IDEgOiBNYXRoLnJhbmRvbSgpIHx8IDAuMSksXG5cdFx0XHRcdGxlbiA9IGVsZW1zLmxlbmd0aDtcblxuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0ID09PSBkb2N1bWVudCB8fCBjb250ZXh0IHx8IG91dGVybW9zdDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIGVsZW1lbnRzIHBhc3NpbmcgZWxlbWVudE1hdGNoZXJzIGRpcmVjdGx5IHRvIHJlc3VsdHNcblx0XHRcdC8vIFN1cHBvcnQ6IElFPDksIFNhZmFyaVxuXHRcdFx0Ly8gVG9sZXJhdGUgTm9kZUxpc3QgcHJvcGVydGllcyAoSUU6IFwibGVuZ3RoXCI7IFNhZmFyaTogPG51bWJlcj4pIG1hdGNoaW5nIGVsZW1lbnRzIGJ5IGlkXG5cdFx0XHRmb3IgKCA7IGkgIT09IGxlbiAmJiAoZWxlbSA9IGVsZW1zW2ldKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0XHRcdGlmICggYnlFbGVtZW50ICYmIGVsZW0gKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0aWYgKCAhY29udGV4dCAmJiBlbGVtLm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdFx0c2V0RG9jdW1lbnQoIGVsZW0gKTtcblx0XHRcdFx0XHRcdHhtbCA9ICFkb2N1bWVudElzSFRNTDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IGVsZW1lbnRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlciggZWxlbSwgY29udGV4dCB8fCBkb2N1bWVudCwgeG1sKSApIHtcblx0XHRcdFx0XHRcdFx0cmVzdWx0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFRyYWNrIHVubWF0Y2hlZCBlbGVtZW50cyBmb3Igc2V0IGZpbHRlcnNcblx0XHRcdFx0aWYgKCBieVNldCApIHtcblx0XHRcdFx0XHQvLyBUaGV5IHdpbGwgaGF2ZSBnb25lIHRocm91Z2ggYWxsIHBvc3NpYmxlIG1hdGNoZXJzXG5cdFx0XHRcdFx0aWYgKCAoZWxlbSA9ICFtYXRjaGVyICYmIGVsZW0pICkge1xuXHRcdFx0XHRcdFx0bWF0Y2hlZENvdW50LS07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTGVuZ3RoZW4gdGhlIGFycmF5IGZvciBldmVyeSBlbGVtZW50LCBtYXRjaGVkIG9yIG5vdFxuXHRcdFx0XHRcdGlmICggc2VlZCApIHtcblx0XHRcdFx0XHRcdHVubWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIGBpYCBpcyBub3cgdGhlIGNvdW50IG9mIGVsZW1lbnRzIHZpc2l0ZWQgYWJvdmUsIGFuZCBhZGRpbmcgaXQgdG8gYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIG1ha2VzIHRoZSBsYXR0ZXIgbm9ubmVnYXRpdmUuXG5cdFx0XHRtYXRjaGVkQ291bnQgKz0gaTtcblxuXHRcdFx0Ly8gQXBwbHkgc2V0IGZpbHRlcnMgdG8gdW5tYXRjaGVkIGVsZW1lbnRzXG5cdFx0XHQvLyBOT1RFOiBUaGlzIGNhbiBiZSBza2lwcGVkIGlmIHRoZXJlIGFyZSBubyB1bm1hdGNoZWQgZWxlbWVudHMgKGkuZS4sIGBtYXRjaGVkQ291bnRgXG5cdFx0XHQvLyBlcXVhbHMgYGlgKSwgdW5sZXNzIHdlIGRpZG4ndCB2aXNpdCBfYW55XyBlbGVtZW50cyBpbiB0aGUgYWJvdmUgbG9vcCBiZWNhdXNlIHdlIGhhdmVcblx0XHRcdC8vIG5vIGVsZW1lbnQgbWF0Y2hlcnMgYW5kIG5vIHNlZWQuXG5cdFx0XHQvLyBJbmNyZW1lbnRpbmcgYW4gaW5pdGlhbGx5LXN0cmluZyBcIjBcIiBgaWAgYWxsb3dzIGBpYCB0byByZW1haW4gYSBzdHJpbmcgb25seSBpbiB0aGF0XG5cdFx0XHQvLyBjYXNlLCB3aGljaCB3aWxsIHJlc3VsdCBpbiBhIFwiMDBcIiBgbWF0Y2hlZENvdW50YCB0aGF0IGRpZmZlcnMgZnJvbSBgaWAgYnV0IGlzIGFsc29cblx0XHRcdC8vIG51bWVyaWNhbGx5IHplcm8uXG5cdFx0XHRpZiAoIGJ5U2V0ICYmIGkgIT09IG1hdGNoZWRDb3VudCApIHtcblx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdHdoaWxlICggKG1hdGNoZXIgPSBzZXRNYXRjaGVyc1tqKytdKSApIHtcblx0XHRcdFx0XHRtYXRjaGVyKCB1bm1hdGNoZWQsIHNldE1hdGNoZWQsIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdC8vIFJlaW50ZWdyYXRlIGVsZW1lbnQgbWF0Y2hlcyB0byBlbGltaW5hdGUgdGhlIG5lZWQgZm9yIHNvcnRpbmdcblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRDb3VudCA+IDAgKSB7XG5cdFx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCAhKHVubWF0Y2hlZFtpXSB8fCBzZXRNYXRjaGVkW2ldKSApIHtcblx0XHRcdFx0XHRcdFx0XHRzZXRNYXRjaGVkW2ldID0gcG9wLmNhbGwoIHJlc3VsdHMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIERpc2NhcmQgaW5kZXggcGxhY2Vob2xkZXIgdmFsdWVzIHRvIGdldCBvbmx5IGFjdHVhbCBtYXRjaGVzXG5cdFx0XHRcdFx0c2V0TWF0Y2hlZCA9IGNvbmRlbnNlKCBzZXRNYXRjaGVkICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBZGQgbWF0Y2hlcyB0byByZXN1bHRzXG5cdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNldE1hdGNoZWQgKTtcblxuXHRcdFx0XHQvLyBTZWVkbGVzcyBzZXQgbWF0Y2hlcyBzdWNjZWVkaW5nIG11bHRpcGxlIHN1Y2Nlc3NmdWwgbWF0Y2hlcnMgc3RpcHVsYXRlIHNvcnRpbmdcblx0XHRcdFx0aWYgKCBvdXRlcm1vc3QgJiYgIXNlZWQgJiYgc2V0TWF0Y2hlZC5sZW5ndGggPiAwICYmXG5cdFx0XHRcdFx0KCBtYXRjaGVkQ291bnQgKyBzZXRNYXRjaGVycy5sZW5ndGggKSA+IDEgKSB7XG5cblx0XHRcdFx0XHRTaXp6bGUudW5pcXVlU29ydCggcmVzdWx0cyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIE92ZXJyaWRlIG1hbmlwdWxhdGlvbiBvZiBnbG9iYWxzIGJ5IG5lc3RlZCBtYXRjaGVyc1xuXHRcdFx0aWYgKCBvdXRlcm1vc3QgKSB7XG5cdFx0XHRcdGRpcnJ1bnMgPSBkaXJydW5zVW5pcXVlO1xuXHRcdFx0XHRvdXRlcm1vc3RDb250ZXh0ID0gY29udGV4dEJhY2t1cDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHVubWF0Y2hlZDtcblx0XHR9O1xuXG5cdHJldHVybiBieVNldCA/XG5cdFx0bWFya0Z1bmN0aW9uKCBzdXBlck1hdGNoZXIgKSA6XG5cdFx0c3VwZXJNYXRjaGVyO1xufVxuXG5jb21waWxlID0gU2l6emxlLmNvbXBpbGUgPSBmdW5jdGlvbiggc2VsZWN0b3IsIG1hdGNoIC8qIEludGVybmFsIFVzZSBPbmx5ICovICkge1xuXHR2YXIgaSxcblx0XHRzZXRNYXRjaGVycyA9IFtdLFxuXHRcdGVsZW1lbnRNYXRjaGVycyA9IFtdLFxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoICFjYWNoZWQgKSB7XG5cdFx0Ly8gR2VuZXJhdGUgYSBmdW5jdGlvbiBvZiByZWN1cnNpdmUgZnVuY3Rpb25zIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2hlY2sgZWFjaCBlbGVtZW50XG5cdFx0aWYgKCAhbWF0Y2ggKSB7XG5cdFx0XHRtYXRjaCA9IHRva2VuaXplKCBzZWxlY3RvciApO1xuXHRcdH1cblx0XHRpID0gbWF0Y2gubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0Y2FjaGVkID0gbWF0Y2hlckZyb21Ub2tlbnMoIG1hdGNoW2ldICk7XG5cdFx0XHRpZiAoIGNhY2hlZFsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHRzZXRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1lbnRNYXRjaGVycy5wdXNoKCBjYWNoZWQgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWNoZSB0aGUgY29tcGlsZWQgZnVuY3Rpb25cblx0XHRjYWNoZWQgPSBjb21waWxlckNhY2hlKCBzZWxlY3RvciwgbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKCBlbGVtZW50TWF0Y2hlcnMsIHNldE1hdGNoZXJzICkgKTtcblxuXHRcdC8vIFNhdmUgc2VsZWN0b3IgYW5kIHRva2VuaXphdGlvblxuXHRcdGNhY2hlZC5zZWxlY3RvciA9IHNlbGVjdG9yO1xuXHR9XG5cdHJldHVybiBjYWNoZWQ7XG59O1xuXG4vKipcbiAqIEEgbG93LWxldmVsIHNlbGVjdGlvbiBmdW5jdGlvbiB0aGF0IHdvcmtzIHdpdGggU2l6emxlJ3MgY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfEZ1bmN0aW9ufSBzZWxlY3RvciBBIHNlbGVjdG9yIG9yIGEgcHJlLWNvbXBpbGVkXG4gKiAgc2VsZWN0b3IgZnVuY3Rpb24gYnVpbHQgd2l0aCBTaXp6bGUuY29tcGlsZVxuICogQHBhcmFtIHtFbGVtZW50fSBjb250ZXh0XG4gKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0c11cbiAqIEBwYXJhbSB7QXJyYXl9IFtzZWVkXSBBIHNldCBvZiBlbGVtZW50cyB0byBtYXRjaCBhZ2FpbnN0XG4gKi9cbnNlbGVjdCA9IFNpenpsZS5zZWxlY3QgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJlc3VsdHMsIHNlZWQgKSB7XG5cdHZhciBpLCB0b2tlbnMsIHRva2VuLCB0eXBlLCBmaW5kLFxuXHRcdGNvbXBpbGVkID0gdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgJiYgc2VsZWN0b3IsXG5cdFx0bWF0Y2ggPSAhc2VlZCAmJiB0b2tlbml6ZSggKHNlbGVjdG9yID0gY29tcGlsZWQuc2VsZWN0b3IgfHwgc2VsZWN0b3IpICk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gVHJ5IHRvIG1pbmltaXplIG9wZXJhdGlvbnMgaWYgdGhlcmUgaXMgb25seSBvbmUgc2VsZWN0b3IgaW4gdGhlIGxpc3QgYW5kIG5vIHNlZWRcblx0Ly8gKHRoZSBsYXR0ZXIgb2Ygd2hpY2ggZ3VhcmFudGVlcyB1cyBjb250ZXh0KVxuXHRpZiAoIG1hdGNoLmxlbmd0aCA9PT0gMSApIHtcblxuXHRcdC8vIFJlZHVjZSBjb250ZXh0IGlmIHRoZSBsZWFkaW5nIGNvbXBvdW5kIHNlbGVjdG9yIGlzIGFuIElEXG5cdFx0dG9rZW5zID0gbWF0Y2hbMF0gPSBtYXRjaFswXS5zbGljZSggMCApO1xuXHRcdGlmICggdG9rZW5zLmxlbmd0aCA+IDIgJiYgKHRva2VuID0gdG9rZW5zWzBdKS50eXBlID09PSBcIklEXCIgJiZcblx0XHRcdFx0Y29udGV4dC5ub2RlVHlwZSA9PT0gOSAmJiBkb2N1bWVudElzSFRNTCAmJiBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMV0udHlwZSBdICkge1xuXG5cdFx0XHRjb250ZXh0ID0gKCBFeHByLmZpbmRbXCJJRFwiXSggdG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSwgZnVuZXNjYXBlKSwgY29udGV4dCApIHx8IFtdIClbMF07XG5cdFx0XHRpZiAoICFjb250ZXh0ICkge1xuXHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblxuXHRcdFx0Ly8gUHJlY29tcGlsZWQgbWF0Y2hlcnMgd2lsbCBzdGlsbCB2ZXJpZnkgYW5jZXN0cnksIHNvIHN0ZXAgdXAgYSBsZXZlbFxuXHRcdFx0fSBlbHNlIGlmICggY29tcGlsZWQgKSB7XG5cdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0LnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cblx0XHRcdHNlbGVjdG9yID0gc2VsZWN0b3Iuc2xpY2UoIHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZldGNoIGEgc2VlZCBzZXQgZm9yIHJpZ2h0LXRvLWxlZnQgbWF0Y2hpbmdcblx0XHRpID0gbWF0Y2hFeHByW1wibmVlZHNDb250ZXh0XCJdLnRlc3QoIHNlbGVjdG9yICkgPyAwIDogdG9rZW5zLmxlbmd0aDtcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRva2VuID0gdG9rZW5zW2ldO1xuXG5cdFx0XHQvLyBBYm9ydCBpZiB3ZSBoaXQgYSBjb21iaW5hdG9yXG5cdFx0XHRpZiAoIEV4cHIucmVsYXRpdmVbICh0eXBlID0gdG9rZW4udHlwZSkgXSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIChmaW5kID0gRXhwci5maW5kWyB0eXBlIF0pICkge1xuXHRcdFx0XHQvLyBTZWFyY2gsIGV4cGFuZGluZyBjb250ZXh0IGZvciBsZWFkaW5nIHNpYmxpbmcgY29tYmluYXRvcnNcblx0XHRcdFx0aWYgKCAoc2VlZCA9IGZpbmQoXG5cdFx0XHRcdFx0dG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKCBydW5lc2NhcGUsIGZ1bmVzY2FwZSApLFxuXHRcdFx0XHRcdHJzaWJsaW5nLnRlc3QoIHRva2Vuc1swXS50eXBlICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0XHRcdFx0KSkgKSB7XG5cblx0XHRcdFx0XHQvLyBJZiBzZWVkIGlzIGVtcHR5IG9yIG5vIHRva2VucyByZW1haW4sIHdlIGNhbiByZXR1cm4gZWFybHlcblx0XHRcdFx0XHR0b2tlbnMuc3BsaWNlKCBpLCAxICk7XG5cdFx0XHRcdFx0c2VsZWN0b3IgPSBzZWVkLmxlbmd0aCAmJiB0b1NlbGVjdG9yKCB0b2tlbnMgKTtcblx0XHRcdFx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsIHNlZWQgKTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ29tcGlsZSBhbmQgZXhlY3V0ZSBhIGZpbHRlcmluZyBmdW5jdGlvbiBpZiBvbmUgaXMgbm90IHByb3ZpZGVkXG5cdC8vIFByb3ZpZGUgYG1hdGNoYCB0byBhdm9pZCByZXRva2VuaXphdGlvbiBpZiB3ZSBtb2RpZmllZCB0aGUgc2VsZWN0b3IgYWJvdmVcblx0KCBjb21waWxlZCB8fCBjb21waWxlKCBzZWxlY3RvciwgbWF0Y2ggKSApKFxuXHRcdHNlZWQsXG5cdFx0Y29udGV4dCxcblx0XHQhZG9jdW1lbnRJc0hUTUwsXG5cdFx0cmVzdWx0cyxcblx0XHQhY29udGV4dCB8fCByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fCBjb250ZXh0XG5cdCk7XG5cdHJldHVybiByZXN1bHRzO1xufTtcblxuLy8gT25lLXRpbWUgYXNzaWdubWVudHNcblxuLy8gU29ydCBzdGFiaWxpdHlcbnN1cHBvcnQuc29ydFN0YWJsZSA9IGV4cGFuZG8uc3BsaXQoXCJcIikuc29ydCggc29ydE9yZGVyICkuam9pbihcIlwiKSA9PT0gZXhwYW5kbztcblxuLy8gU3VwcG9ydDogQ2hyb21lIDE0LTM1K1xuLy8gQWx3YXlzIGFzc3VtZSBkdXBsaWNhdGVzIGlmIHRoZXkgYXJlbid0IHBhc3NlZCB0byB0aGUgY29tcGFyaXNvbiBmdW5jdGlvblxuc3VwcG9ydC5kZXRlY3REdXBsaWNhdGVzID0gISFoYXNEdXBsaWNhdGU7XG5cbi8vIEluaXRpYWxpemUgYWdhaW5zdCB0aGUgZGVmYXVsdCBkb2N1bWVudFxuc2V0RG9jdW1lbnQoKTtcblxuLy8gU3VwcG9ydDogV2Via2l0PDUzNy4zMiAtIFNhZmFyaSA2LjAuMy9DaHJvbWUgMjUgKGZpeGVkIGluIENocm9tZSAyNylcbi8vIERldGFjaGVkIG5vZGVzIGNvbmZvdW5kaW5nbHkgZm9sbG93ICplYWNoIG90aGVyKlxuc3VwcG9ydC5zb3J0RGV0YWNoZWQgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHQvLyBTaG91bGQgcmV0dXJuIDEsIGJ1dCByZXR1cm5zIDQgKGZvbGxvd2luZylcblx0cmV0dXJuIGVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZmllbGRzZXRcIikgKSAmIDE7XG59KTtcblxuLy8gU3VwcG9ydDogSUU8OFxuLy8gUHJldmVudCBhdHRyaWJ1dGUvcHJvcGVydHkgXCJpbnRlcnBvbGF0aW9uXCJcbi8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvbXM1MzY0MjklMjhWUy44NSUyOS5hc3B4XG5pZiAoICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxhIGhyZWY9JyMnPjwvYT5cIjtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKSA9PT0gXCIjXCIgO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ0eXBlfGhyZWZ8aGVpZ2h0fHdpZHRoXCIsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHRpZiAoICFpc1hNTCApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSwgbmFtZS50b0xvd2VyQ2FzZSgpID09PSBcInR5cGVcIiA/IDEgOiAyICk7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGRlZmF1bHRWYWx1ZSBpbiBwbGFjZSBvZiBnZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiKVxuaWYgKCAhc3VwcG9ydC5hdHRyaWJ1dGVzIHx8ICFhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRlbC5pbm5lckhUTUwgPSBcIjxpbnB1dC8+XCI7XG5cdGVsLmZpcnN0Q2hpbGQuc2V0QXR0cmlidXRlKCBcInZhbHVlXCIsIFwiXCIgKTtcblx0cmV0dXJuIGVsLmZpcnN0Q2hpbGQuZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gXCJcIjtcbn0pICkge1xuXHRhZGRIYW5kbGUoIFwidmFsdWVcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJpbnB1dFwiICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGVmYXVsdFZhbHVlO1xuXHRcdH1cblx0fSk7XG59XG5cbi8vIFN1cHBvcnQ6IElFPDlcbi8vIFVzZSBnZXRBdHRyaWJ1dGVOb2RlIHRvIGZldGNoIGJvb2xlYW5zIHdoZW4gZ2V0QXR0cmlidXRlIGxpZXNcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKSA9PSBudWxsO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggYm9vbGVhbnMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBpc1hNTCApIHtcblx0XHR2YXIgdmFsO1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW1bIG5hbWUgXSA9PT0gdHJ1ZSA/IG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZSggbmFtZSApKSAmJiB2YWwuc3BlY2lmaWVkID9cblx0XHRcdFx0XHR2YWwudmFsdWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdH1cblx0fSk7XG59XG5cbnJldHVybiBTaXp6bGU7XG5cbn0pKCB3aW5kb3cgKTtcblxuXG5cbmpRdWVyeS5maW5kID0gU2l6emxlO1xualF1ZXJ5LmV4cHIgPSBTaXp6bGUuc2VsZWN0b3JzO1xuXG4vLyBEZXByZWNhdGVkXG5qUXVlcnkuZXhwclsgXCI6XCIgXSA9IGpRdWVyeS5leHByLnBzZXVkb3M7XG5qUXVlcnkudW5pcXVlU29ydCA9IGpRdWVyeS51bmlxdWUgPSBTaXp6bGUudW5pcXVlU29ydDtcbmpRdWVyeS50ZXh0ID0gU2l6emxlLmdldFRleHQ7XG5qUXVlcnkuaXNYTUxEb2MgPSBTaXp6bGUuaXNYTUw7XG5qUXVlcnkuY29udGFpbnMgPSBTaXp6bGUuY29udGFpbnM7XG5qUXVlcnkuZXNjYXBlU2VsZWN0b3IgPSBTaXp6bGUuZXNjYXBlO1xuXG5cblxuXG52YXIgZGlyID0gZnVuY3Rpb24oIGVsZW0sIGRpciwgdW50aWwgKSB7XG5cdHZhciBtYXRjaGVkID0gW10sXG5cdFx0dHJ1bmNhdGUgPSB1bnRpbCAhPT0gdW5kZWZpbmVkO1xuXG5cdHdoaWxlICggKCBlbGVtID0gZWxlbVsgZGlyIF0gKSAmJiBlbGVtLm5vZGVUeXBlICE9PSA5ICkge1xuXHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGlmICggdHJ1bmNhdGUgJiYgalF1ZXJ5KCBlbGVtICkuaXMoIHVudGlsICkgKSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0bWF0Y2hlZC5wdXNoKCBlbGVtICk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBtYXRjaGVkO1xufTtcblxuXG52YXIgc2libGluZ3MgPSBmdW5jdGlvbiggbiwgZWxlbSApIHtcblx0dmFyIG1hdGNoZWQgPSBbXTtcblxuXHRmb3IgKCA7IG47IG4gPSBuLm5leHRTaWJsaW5nICkge1xuXHRcdGlmICggbi5ub2RlVHlwZSA9PT0gMSAmJiBuICE9PSBlbGVtICkge1xuXHRcdFx0bWF0Y2hlZC5wdXNoKCBuICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBybmVlZHNDb250ZXh0ID0galF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0O1xuXG5cblxuZnVuY3Rpb24gbm9kZU5hbWUoIGVsZW0sIG5hbWUgKSB7XG5cbiAgcmV0dXJuIGVsZW0ubm9kZU5hbWUgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cbn07XG52YXIgcnNpbmdsZVRhZyA9ICggL148KFthLXpdW15cXC9cXDA+OlxceDIwXFx0XFxyXFxuXFxmXSopW1xceDIwXFx0XFxyXFxuXFxmXSpcXC8/Pig/OjxcXC9cXDE+fCkkL2kgKTtcblxuXG5cbi8vIEltcGxlbWVudCB0aGUgaWRlbnRpY2FsIGZ1bmN0aW9uYWxpdHkgZm9yIGZpbHRlciBhbmQgbm90XG5mdW5jdGlvbiB3aW5ub3coIGVsZW1lbnRzLCBxdWFsaWZpZXIsIG5vdCApIHtcblx0aWYgKCBpc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRmlsdGVyZWQgZGlyZWN0bHkgZm9yIGJvdGggc2ltcGxlIGFuZCBjb21wbGV4IHNlbGVjdG9yc1xuXHRyZXR1cm4galF1ZXJ5LmZpbHRlciggcXVhbGlmaWVyLCBlbGVtZW50cywgbm90ICk7XG59XG5cbmpRdWVyeS5maWx0ZXIgPSBmdW5jdGlvbiggZXhwciwgZWxlbXMsIG5vdCApIHtcblx0dmFyIGVsZW0gPSBlbGVtc1sgMCBdO1xuXG5cdGlmICggbm90ICkge1xuXHRcdGV4cHIgPSBcIjpub3QoXCIgKyBleHByICsgXCIpXCI7XG5cdH1cblxuXHRpZiAoIGVsZW1zLmxlbmd0aCA9PT0gMSAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGVsZW0sIGV4cHIgKSA/IFsgZWxlbSBdIDogW107XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlcyggZXhwciwgalF1ZXJ5LmdyZXAoIGVsZW1zLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApICk7XG59O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGZpbmQ6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgaSwgcmV0LFxuXHRcdFx0bGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRzZWxmID0gdGhpcztcblxuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkoIHNlbGVjdG9yICkuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggc2VsZlsgaSBdLCB0aGlzICkgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gKSApO1xuXHRcdH1cblxuXHRcdHJldCA9IHRoaXMucHVzaFN0YWNrKCBbXSApO1xuXG5cdFx0Zm9yICggaSA9IDA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdGpRdWVyeS5maW5kKCBzZWxlY3Rvciwgc2VsZlsgaSBdLCByZXQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbGVuID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCByZXQgKSA6IHJldDtcblx0fSxcblx0ZmlsdGVyOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCBmYWxzZSApICk7XG5cdH0sXG5cdG5vdDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgdHJ1ZSApICk7XG5cdH0sXG5cdGlzOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuICEhd2lubm93KFxuXHRcdFx0dGhpcyxcblxuXHRcdFx0Ly8gSWYgdGhpcyBpcyBhIHBvc2l0aW9uYWwvcmVsYXRpdmUgc2VsZWN0b3IsIGNoZWNrIG1lbWJlcnNoaXAgaW4gdGhlIHJldHVybmVkIHNldFxuXHRcdFx0Ly8gc28gJChcInA6Zmlyc3RcIikuaXMoXCJwOmxhc3RcIikgd29uJ3QgcmV0dXJuIHRydWUgZm9yIGEgZG9jIHdpdGggdHdvIFwicFwiLlxuXHRcdFx0dHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICYmIHJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3IgKSA/XG5cdFx0XHRcdGpRdWVyeSggc2VsZWN0b3IgKSA6XG5cdFx0XHRcdHNlbGVjdG9yIHx8IFtdLFxuXHRcdFx0ZmFsc2Vcblx0XHQpLmxlbmd0aDtcblx0fVxufSApO1xuXG5cbi8vIEluaXRpYWxpemUgYSBqUXVlcnkgb2JqZWN0XG5cblxuLy8gQSBjZW50cmFsIHJlZmVyZW5jZSB0byB0aGUgcm9vdCBqUXVlcnkoZG9jdW1lbnQpXG52YXIgcm9vdGpRdWVyeSxcblxuXHQvLyBBIHNpbXBsZSB3YXkgdG8gY2hlY2sgZm9yIEhUTUwgc3RyaW5nc1xuXHQvLyBQcmlvcml0aXplICNpZCBvdmVyIDx0YWc+IHRvIGF2b2lkIFhTUyB2aWEgbG9jYXRpb24uaGFzaCAoIzk1MjEpXG5cdC8vIFN0cmljdCBIVE1MIHJlY29nbml0aW9uICgjMTEyOTA6IG11c3Qgc3RhcnQgd2l0aCA8KVxuXHQvLyBTaG9ydGN1dCBzaW1wbGUgI2lkIGNhc2UgZm9yIHNwZWVkXG5cdHJxdWlja0V4cHIgPSAvXig/OlxccyooPFtcXHdcXFddKz4pW14+XSp8IyhbXFx3LV0rKSkkLyxcblxuXHRpbml0ID0galF1ZXJ5LmZuLmluaXQgPSBmdW5jdGlvbiggc2VsZWN0b3IsIGNvbnRleHQsIHJvb3QgKSB7XG5cdFx0dmFyIG1hdGNoLCBlbGVtO1xuXG5cdFx0Ly8gSEFORExFOiAkKFwiXCIpLCAkKG51bGwpLCAkKHVuZGVmaW5lZCksICQoZmFsc2UpXG5cdFx0aWYgKCAhc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cblx0XHQvLyBNZXRob2QgaW5pdCgpIGFjY2VwdHMgYW4gYWx0ZXJuYXRlIHJvb3RqUXVlcnlcblx0XHQvLyBzbyBtaWdyYXRlIGNhbiBzdXBwb3J0IGpRdWVyeS5zdWIgKGdoLTIxMDEpXG5cdFx0cm9vdCA9IHJvb3QgfHwgcm9vdGpRdWVyeTtcblxuXHRcdC8vIEhhbmRsZSBIVE1MIHN0cmluZ3Ncblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGlmICggc2VsZWN0b3JbIDAgXSA9PT0gXCI8XCIgJiZcblx0XHRcdFx0c2VsZWN0b3JbIHNlbGVjdG9yLmxlbmd0aCAtIDEgXSA9PT0gXCI+XCIgJiZcblx0XHRcdFx0c2VsZWN0b3IubGVuZ3RoID49IDMgKSB7XG5cblx0XHRcdFx0Ly8gQXNzdW1lIHRoYXQgc3RyaW5ncyB0aGF0IHN0YXJ0IGFuZCBlbmQgd2l0aCA8PiBhcmUgSFRNTCBhbmQgc2tpcCB0aGUgcmVnZXggY2hlY2tcblx0XHRcdFx0bWF0Y2ggPSBbIG51bGwsIHNlbGVjdG9yLCBudWxsIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYXRjaCBodG1sIG9yIG1ha2Ugc3VyZSBubyBjb250ZXh0IGlzIHNwZWNpZmllZCBmb3IgI2lkXG5cdFx0XHRpZiAoIG1hdGNoICYmICggbWF0Y2hbIDEgXSB8fCAhY29udGV4dCApICkge1xuXG5cdFx0XHRcdC8vIEhBTkRMRTogJChodG1sKSAtPiAkKGFycmF5KVxuXHRcdFx0XHRpZiAoIG1hdGNoWyAxIF0gKSB7XG5cdFx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnkgPyBjb250ZXh0WyAwIF0gOiBjb250ZXh0O1xuXG5cdFx0XHRcdFx0Ly8gT3B0aW9uIHRvIHJ1biBzY3JpcHRzIGlzIHRydWUgZm9yIGJhY2stY29tcGF0XG5cdFx0XHRcdFx0Ly8gSW50ZW50aW9uYWxseSBsZXQgdGhlIGVycm9yIGJlIHRocm93biBpZiBwYXJzZUhUTUwgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMsIGpRdWVyeS5wYXJzZUhUTUwoXG5cdFx0XHRcdFx0XHRtYXRjaFsgMSBdLFxuXHRcdFx0XHRcdFx0Y29udGV4dCAmJiBjb250ZXh0Lm5vZGVUeXBlID8gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQgOiBkb2N1bWVudCxcblx0XHRcdFx0XHRcdHRydWVcblx0XHRcdFx0XHQpICk7XG5cblx0XHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCwgcHJvcHMpXG5cdFx0XHRcdFx0aWYgKCByc2luZ2xlVGFnLnRlc3QoIG1hdGNoWyAxIF0gKSAmJiBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29udGV4dCApICkge1xuXHRcdFx0XHRcdFx0Zm9yICggbWF0Y2ggaW4gY29udGV4dCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBQcm9wZXJ0aWVzIG9mIGNvbnRleHQgYXJlIGNhbGxlZCBhcyBtZXRob2RzIGlmIHBvc3NpYmxlXG5cdFx0XHRcdFx0XHRcdGlmICggaXNGdW5jdGlvbiggdGhpc1sgbWF0Y2ggXSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHRoaXNbIG1hdGNoIF0oIGNvbnRleHRbIG1hdGNoIF0gKTtcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgb3RoZXJ3aXNlIHNldCBhcyBhdHRyaWJ1dGVzXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpcy5hdHRyKCBtYXRjaCwgY29udGV4dFsgbWF0Y2ggXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKCNpZClcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIG1hdGNoWyAyIF0gKTtcblxuXHRcdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSW5qZWN0IHRoZSBlbGVtZW50IGRpcmVjdGx5IGludG8gdGhlIGpRdWVyeSBvYmplY3Rcblx0XHRcdFx0XHRcdHRoaXNbIDAgXSA9IGVsZW07XG5cdFx0XHRcdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIEhBTkRMRTogJChleHByLCAkKC4uLikpXG5cdFx0XHR9IGVsc2UgaWYgKCAhY29udGV4dCB8fCBjb250ZXh0LmpxdWVyeSApIHtcblx0XHRcdFx0cmV0dXJuICggY29udGV4dCB8fCByb290ICkuZmluZCggc2VsZWN0b3IgKTtcblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsIGNvbnRleHQpXG5cdFx0XHQvLyAod2hpY2ggaXMganVzdCBlcXVpdmFsZW50IHRvOiAkKGNvbnRleHQpLmZpbmQoZXhwcilcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmNvbnN0cnVjdG9yKCBjb250ZXh0ICkuZmluZCggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdC8vIEhBTkRMRTogJChET01FbGVtZW50KVxuXHRcdH0gZWxzZSBpZiAoIHNlbGVjdG9yLm5vZGVUeXBlICkge1xuXHRcdFx0dGhpc1sgMCBdID0gc2VsZWN0b3I7XG5cdFx0XHR0aGlzLmxlbmd0aCA9IDE7XG5cdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdC8vIEhBTkRMRTogJChmdW5jdGlvbilcblx0XHQvLyBTaG9ydGN1dCBmb3IgZG9jdW1lbnQgcmVhZHlcblx0XHR9IGVsc2UgaWYgKCBpc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRpZiAoIHR5cGVvZiBlbGVtLmNvbnRlbnREb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRcdHJldHVybiBlbGVtLmNvbnRlbnREb2N1bWVudDtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcblx0XHQvLyBUcmVhdCB0aGUgdGVtcGxhdGUgZWxlbWVudCBhcyBhIHJlZ3VsYXIgb25lIGluIGJyb3dzZXJzIHRoYXRcblx0XHQvLyBkb24ndCBzdXBwb3J0IGl0LlxuXHRcdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuXHRcdFx0ZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoICFvcHRpb25zLnVuaXF1ZSB8fCAhc2VsZi5oYXMoIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0bGlzdC5wdXNoKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGFyZyAmJiBhcmcubGVuZ3RoICYmIHRvVHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS5wcm9taXNlICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSApLmRvbmUoIHJlc29sdmUgKS5mYWlsKCByZWplY3QgKTtcblxuXHRcdC8vIE90aGVyIHRoZW5hYmxlc1xuXHRcdH0gZWxzZSBpZiAoIHZhbHVlICYmIGlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUudGhlbiApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUsIHJlc29sdmUsIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgbm9uLXRoZW5hYmxlc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvbnRyb2wgYHJlc29sdmVgIGFyZ3VtZW50cyBieSBsZXR0aW5nIEFycmF5I3NsaWNlIGNhc3QgYm9vbGVhbiBgbm9WYWx1ZWAgdG8gaW50ZWdlcjpcblx0XHRcdC8vICogZmFsc2U6IFsgdmFsdWUgXS5zbGljZSggMCApID0+IHJlc29sdmUoIHZhbHVlIClcblx0XHRcdC8vICogdHJ1ZTogWyB2YWx1ZSBdLnNsaWNlKCAxICkgPT4gcmVzb2x2ZSgpXG5cdFx0XHRyZXNvbHZlLmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXS5zbGljZSggbm9WYWx1ZSApICk7XG5cdFx0fVxuXG5cdC8vIEZvciBQcm9taXNlcy9BKywgY29udmVydCBleGNlcHRpb25zIGludG8gcmVqZWN0aW9uc1xuXHQvLyBTaW5jZSBqUXVlcnkud2hlbiBkb2Vzbid0IHVud3JhcCB0aGVuYWJsZXMsIHdlIGNhbiBza2lwIHRoZSBleHRyYSBjaGVja3MgYXBwZWFyaW5nIGluXG5cdC8vIERlZmVycmVkI3RoZW4gdG8gY29uZGl0aW9uYWxseSBzdXBwcmVzcyByZWplY3Rpb24uXG5cdH0gY2F0Y2ggKCB2YWx1ZSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIG9ubHlcblx0XHQvLyBTdHJpY3QgbW9kZSBmdW5jdGlvbnMgaW52b2tlZCB3aXRob3V0IC5jYWxsLy5hcHBseSBnZXQgZ2xvYmFsLW9iamVjdCBjb250ZXh0XG5cdFx0cmVqZWN0LmFwcGx5KCB1bmRlZmluZWQsIFsgdmFsdWUgXSApO1xuXHR9XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHREZWZlcnJlZDogZnVuY3Rpb24oIGZ1bmMgKSB7XG5cdFx0dmFyIHR1cGxlcyA9IFtcblxuXHRcdFx0XHQvLyBhY3Rpb24sIGFkZCBsaXN0ZW5lciwgY2FsbGJhY2tzLFxuXHRcdFx0XHQvLyAuLi4gLnRoZW4gaGFuZGxlcnMsIGFyZ3VtZW50IGluZGV4LCBbZmluYWwgc3RhdGVdXG5cdFx0XHRcdFsgXCJub3RpZnlcIiwgXCJwcm9ncmVzc1wiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJtZW1vcnlcIiApLCAyIF0sXG5cdFx0XHRcdFsgXCJyZXNvbHZlXCIsIFwiZG9uZVwiLCBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSwgMCwgXCJyZXNvbHZlZFwiIF0sXG5cdFx0XHRcdFsgXCJyZWplY3RcIiwgXCJmYWlsXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAxLCBcInJlamVjdGVkXCIgXVxuXHRcdFx0XSxcblx0XHRcdHN0YXRlID0gXCJwZW5kaW5nXCIsXG5cdFx0XHRwcm9taXNlID0ge1xuXHRcdFx0XHRzdGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHN0YXRlO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRhbHdheXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGRlZmVycmVkLmRvbmUoIGFyZ3VtZW50cyApLmZhaWwoIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRcImNhdGNoXCI6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcHJvbWlzZS50aGVuKCBudWxsLCBmbiApO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEtlZXAgcGlwZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0cGlwZTogZnVuY3Rpb24oIC8qIGZuRG9uZSwgZm5GYWlsLCBmblByb2dyZXNzICovICkge1xuXHRcdFx0XHRcdHZhciBmbnMgPSBhcmd1bWVudHM7XG5cblx0XHRcdFx0XHRyZXR1cm4galF1ZXJ5LkRlZmVycmVkKCBmdW5jdGlvbiggbmV3RGVmZXIgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggdHVwbGVzLCBmdW5jdGlvbiggaSwgdHVwbGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTWFwIHR1cGxlcyAocHJvZ3Jlc3MsIGRvbmUsIGZhaWwpIHRvIGFyZ3VtZW50cyAoZG9uZSwgZmFpbCwgcHJvZ3Jlc3MpXG5cdFx0XHRcdFx0XHRcdHZhciBmbiA9IGlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBpc0Z1bmN0aW9uKCByZXR1cm5lZC5wcm9taXNlICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC5wcm9taXNlKClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LnByb2dyZXNzKCBuZXdEZWZlci5ub3RpZnkgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZG9uZSggbmV3RGVmZXIucmVzb2x2ZSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5mYWlsKCBuZXdEZWZlci5yZWplY3QgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXJbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRmbiA/IFsgcmV0dXJuZWQgXSA6IGFyZ3VtZW50c1xuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRcdGZucyA9IG51bGw7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblx0XHRcdFx0dGhlbjogZnVuY3Rpb24oIG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBvblByb2dyZXNzICkge1xuXHRcdFx0XHRcdHZhciBtYXhEZXB0aCA9IDA7XG5cdFx0XHRcdFx0ZnVuY3Rpb24gcmVzb2x2ZSggZGVwdGgsIGRlZmVycmVkLCBoYW5kbGVyLCBzcGVjaWFsICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdGhhdCA9IHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0YXJncyA9IGFyZ3VtZW50cyxcblx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQsIHRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4zXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01OVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSWdub3JlIGRvdWJsZS1yZXNvbHV0aW9uIGF0dGVtcHRzXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoIDwgbWF4RGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQgPSBoYW5kbGVyLmFwcGx5KCB0aGF0LCBhcmdzICk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjFcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTQ4XG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkID09PSBkZWZlcnJlZC5wcm9taXNlKCkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoIFwiVGhlbmFibGUgc2VsZi1yZXNvbHV0aW9uXCIgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbnMgMi4zLjMuMSwgMy41XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01NFxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNzVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFJldHJpZXZlIGB0aGVuYCBvbmx5IG9uY2Vcblx0XHRcdFx0XHRcdFx0XHRcdHRoZW4gPSByZXR1cm5lZCAmJlxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBjaGVjayBvYmplY3RzIGFuZCBmdW5jdGlvbnMgZm9yIHRoZW5hYmlsaXR5XG5cdFx0XHRcdFx0XHRcdFx0XHRcdCggdHlwZW9mIHJldHVybmVkID09PSBcIm9iamVjdFwiIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHJldHVybmVkID09PSBcImZ1bmN0aW9uXCIgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZC50aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBIYW5kbGUgYSByZXR1cm5lZCB0aGVuYWJsZVxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGVuICkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BlY2lhbCBwcm9jZXNzb3JzIChub3RpZnkpIGp1c3Qgd2FpdCBmb3IgcmVzb2x1dGlvblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gTm9ybWFsIHByb2Nlc3NvcnMgKHJlc29sdmUpIGFsc28gaG9vayBpbnRvIHByb2dyZXNzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyAuLi5hbmQgZGlzcmVnYXJkIG9sZGVyIHJlc29sdXRpb24gdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0bWF4RGVwdGgrKztcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoZW4uY2FsbChcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBJZGVudGl0eSwgc3BlY2lhbCApLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmVzb2x2ZSggbWF4RGVwdGgsIGRlZmVycmVkLCBUaHJvd2VyLCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhbGwgb3RoZXIgcmV0dXJuZWQgdmFsdWVzXG5cdFx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgc3Vic3RpdHV0ZSBoYW5kbGVycyBwYXNzIG9uIGNvbnRleHRcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gSWRlbnRpdHkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRhcmdzID0gWyByZXR1cm5lZCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gUHJvY2VzcyB0aGUgdmFsdWUocylcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRGVmYXVsdCBwcm9jZXNzIGlzIHJlc29sdmVcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCBzcGVjaWFsIHx8IGRlZmVycmVkLnJlc29sdmVXaXRoICkoIHRoYXQsIGFyZ3MgKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBub3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgY2F0Y2ggYW5kIHJlamVjdCBleGNlcHRpb25zXG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcyA9IHNwZWNpYWwgP1xuXHRcdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93KCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rKCBlLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuNC4xXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgcG9zdC1yZXNvbHV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGRlcHRoICsgMSA+PSBtYXhEZXB0aCApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gYW5kIG11bHRpcGxlIHZhbHVlcyAobm9uLXNwZWMgYmVoYXZpb3IpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGhhbmRsZXIgIT09IFRocm93ZXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHRoYXQgPSB1bmRlZmluZWQ7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIGUgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuMVxuXHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC01N1xuXHRcdFx0XHRcdFx0XHQvLyBSZS1yZXNvbHZlIHByb21pc2VzIGltbWVkaWF0ZWx5IHRvIGRvZGdlIGZhbHNlIHJlamVjdGlvbiBmcm9tXG5cdFx0XHRcdFx0XHRcdC8vIHN1YnNlcXVlbnQgZXJyb3JzXG5cdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0cHJvY2VzcygpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ2FsbCBhbiBvcHRpb25hbCBob29rIHRvIHJlY29yZCB0aGUgc3RhY2ssIGluIGNhc2Ugb2YgZXhjZXB0aW9uXG5cdFx0XHRcdFx0XHRcdFx0Ly8gc2luY2UgaXQncyBvdGhlcndpc2UgbG9zdCB3aGVuIGV4ZWN1dGlvbiBnb2VzIGFzeW5jXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cHJvY2Vzcy5zdGFja1RyYWNlID0galF1ZXJ5LkRlZmVycmVkLmdldFN0YWNrSG9vaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR3aW5kb3cuc2V0VGltZW91dCggcHJvY2VzcyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblxuXHRcdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uRnVsZmlsbGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25GdWxmaWxsZWQgOlxuXHRcdFx0XHRcdFx0XHRcdFx0SWRlbnRpdHlcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuYWRkKCAuLi4gKVxuXHRcdFx0XHRcdFx0dHVwbGVzWyAyIF1bIDMgXS5hZGQoXG5cdFx0XHRcdFx0XHRcdHJlc29sdmUoXG5cdFx0XHRcdFx0XHRcdFx0MCxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlcixcblx0XHRcdFx0XHRcdFx0XHRpc0Z1bmN0aW9uKCBvblJlamVjdGVkICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25SZWplY3RlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRUaHJvd2VyXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0fSApLnByb21pc2UoKTtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBHZXQgYSBwcm9taXNlIGZvciB0aGlzIGRlZmVycmVkXG5cdFx0XHRcdC8vIElmIG9iaiBpcyBwcm92aWRlZCwgdGhlIHByb21pc2UgYXNwZWN0IGlzIGFkZGVkIHRvIHRoZSBvYmplY3Rcblx0XHRcdFx0cHJvbWlzZTogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRcdFx0XHRyZXR1cm4gb2JqICE9IG51bGwgPyBqUXVlcnkuZXh0ZW5kKCBvYmosIHByb21pc2UgKSA6IHByb21pc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cdFx0XHRkZWZlcnJlZCA9IHt9O1xuXG5cdFx0Ly8gQWRkIGxpc3Qtc3BlY2lmaWMgbWV0aG9kc1xuXHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblx0XHRcdHZhciBsaXN0ID0gdHVwbGVbIDIgXSxcblx0XHRcdFx0c3RhdGVTdHJpbmcgPSB0dXBsZVsgNSBdO1xuXG5cdFx0XHQvLyBwcm9taXNlLnByb2dyZXNzID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZG9uZSA9IGxpc3QuYWRkXG5cdFx0XHQvLyBwcm9taXNlLmZhaWwgPSBsaXN0LmFkZFxuXHRcdFx0cHJvbWlzZVsgdHVwbGVbIDEgXSBdID0gbGlzdC5hZGQ7XG5cblx0XHRcdC8vIEhhbmRsZSBzdGF0ZVxuXHRcdFx0aWYgKCBzdGF0ZVN0cmluZyApIHtcblx0XHRcdFx0bGlzdC5hZGQoXG5cdFx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZXNvbHZlZFwiIChpLmUuLCBmdWxmaWxsZWQpXG5cdFx0XHRcdFx0XHQvLyBzdGF0ZSA9IFwicmVqZWN0ZWRcIlxuXHRcdFx0XHRcdFx0c3RhdGUgPSBzdGF0ZVN0cmluZztcblx0XHRcdFx0XHR9LFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHQvLyBmdWxmaWxsZWRfY2FsbGJhY2tzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDIgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0dHVwbGVzWyAzIC0gaSBdWyAzIF0uZGlzYWJsZSxcblxuXHRcdFx0XHRcdC8vIHByb2dyZXNzX2NhbGxiYWNrcy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDIgXS5sb2NrLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfaGFuZGxlcnMubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAzIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0aXNGdW5jdGlvbiggcmVzb2x2ZVZhbHVlc1sgaSBdICYmIHJlc29sdmVWYWx1ZXNbIGkgXS50aGVuICkgKSB7XG5cblx0XHRcdFx0cmV0dXJuIG1hc3Rlci50aGVuKCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTXVsdGlwbGUgYXJndW1lbnRzIGFyZSBhZ2dyZWdhdGVkIGxpa2UgUHJvbWlzZS5hbGwgYXJyYXkgZWxlbWVudHNcblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHJlc29sdmVWYWx1ZXNbIGkgXSwgdXBkYXRlRnVuYyggaSApLCBtYXN0ZXIucmVqZWN0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hc3Rlci5wcm9taXNlKCk7XG5cdH1cbn0gKTtcblxuXG4vLyBUaGVzZSB1c3VhbGx5IGluZGljYXRlIGEgcHJvZ3JhbW1lciBtaXN0YWtlIGR1cmluZyBkZXZlbG9wbWVudCxcbi8vIHdhcm4gYWJvdXQgdGhlbSBBU0FQIHJhdGhlciB0aGFuIHN3YWxsb3dpbmcgdGhlbSBieSBkZWZhdWx0LlxudmFyIHJlcnJvck5hbWVzID0gL14oRXZhbHxJbnRlcm5hbHxSYW5nZXxSZWZlcmVuY2V8U3ludGF4fFR5cGV8VVJJKUVycm9yJC87XG5cbmpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rID0gZnVuY3Rpb24oIGVycm9yLCBzdGFjayApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA4IC0gOSBvbmx5XG5cdC8vIENvbnNvbGUgZXhpc3RzIHdoZW4gZGV2IHRvb2xzIGFyZSBvcGVuLCB3aGljaCBjYW4gaGFwcGVuIGF0IGFueSB0aW1lXG5cdGlmICggd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUud2FybiAmJiBlcnJvciAmJiByZXJyb3JOYW1lcy50ZXN0KCBlcnJvci5uYW1lICkgKSB7XG5cdFx0d2luZG93LmNvbnNvbGUud2FybiggXCJqUXVlcnkuRGVmZXJyZWQgZXhjZXB0aW9uOiBcIiArIGVycm9yLm1lc3NhZ2UsIGVycm9yLnN0YWNrLCBzdGFjayApO1xuXHR9XG59O1xuXG5cblxuXG5qUXVlcnkucmVhZHlFeGNlcHRpb24gPSBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHR0aHJvdyBlcnJvcjtcblx0fSApO1xufTtcblxuXG5cblxuLy8gVGhlIGRlZmVycmVkIHVzZWQgb24gRE9NIHJlYWR5XG52YXIgcmVhZHlMaXN0ID0galF1ZXJ5LkRlZmVycmVkKCk7XG5cbmpRdWVyeS5mbi5yZWFkeSA9IGZ1bmN0aW9uKCBmbiApIHtcblxuXHRyZWFkeUxpc3Rcblx0XHQudGhlbiggZm4gKVxuXG5cdFx0Ly8gV3JhcCBqUXVlcnkucmVhZHlFeGNlcHRpb24gaW4gYSBmdW5jdGlvbiBzbyB0aGF0IHRoZSBsb29rdXBcblx0XHQvLyBoYXBwZW5zIGF0IHRoZSB0aW1lIG9mIGVycm9yIGhhbmRsaW5nIGluc3RlYWQgb2YgY2FsbGJhY2tcblx0XHQvLyByZWdpc3RyYXRpb24uXG5cdFx0LmNhdGNoKCBmdW5jdGlvbiggZXJyb3IgKSB7XG5cdFx0XHRqUXVlcnkucmVhZHlFeGNlcHRpb24oIGVycm9yICk7XG5cdFx0fSApO1xuXG5cdHJldHVybiB0aGlzO1xufTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIElzIHRoZSBET00gcmVhZHkgdG8gYmUgdXNlZD8gU2V0IHRvIHRydWUgb25jZSBpdCBvY2N1cnMuXG5cdGlzUmVhZHk6IGZhbHNlLFxuXG5cdC8vIEEgY291bnRlciB0byB0cmFjayBob3cgbWFueSBpdGVtcyB0byB3YWl0IGZvciBiZWZvcmVcblx0Ly8gdGhlIHJlYWR5IGV2ZW50IGZpcmVzLiBTZWUgIzY3ODFcblx0cmVhZHlXYWl0OiAxLFxuXG5cdC8vIEhhbmRsZSB3aGVuIHRoZSBET00gaXMgcmVhZHlcblx0cmVhZHk6IGZ1bmN0aW9uKCB3YWl0ICkge1xuXG5cdFx0Ly8gQWJvcnQgaWYgdGhlcmUgYXJlIHBlbmRpbmcgaG9sZHMgb3Igd2UncmUgYWxyZWFkeSByZWFkeVxuXHRcdGlmICggd2FpdCA9PT0gdHJ1ZSA/IC0talF1ZXJ5LnJlYWR5V2FpdCA6IGpRdWVyeS5pc1JlYWR5ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFJlbWVtYmVyIHRoYXQgdGhlIERPTSBpcyByZWFkeVxuXHRcdGpRdWVyeS5pc1JlYWR5ID0gdHJ1ZTtcblxuXHRcdC8vIElmIGEgbm9ybWFsIERPTSBSZWFkeSBldmVudCBmaXJlZCwgZGVjcmVtZW50LCBhbmQgd2FpdCBpZiBuZWVkIGJlXG5cdFx0aWYgKCB3YWl0ICE9PSB0cnVlICYmIC0talF1ZXJ5LnJlYWR5V2FpdCA+IDAgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gSWYgdGhlcmUgYXJlIGZ1bmN0aW9ucyBib3VuZCwgdG8gZXhlY3V0ZVxuXHRcdHJlYWR5TGlzdC5yZXNvbHZlV2l0aCggZG9jdW1lbnQsIFsgalF1ZXJ5IF0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkucmVhZHkudGhlbiA9IHJlYWR5TGlzdC50aGVuO1xuXG4vLyBUaGUgcmVhZHkgZXZlbnQgaGFuZGxlciBhbmQgc2VsZiBjbGVhbnVwIG1ldGhvZFxuZnVuY3Rpb24gY29tcGxldGVkKCkge1xuXHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG5cdGpRdWVyeS5yZWFkeSgpO1xufVxuXG4vLyBDYXRjaCBjYXNlcyB3aGVyZSAkKGRvY3VtZW50KS5yZWFkeSgpIGlzIGNhbGxlZFxuLy8gYWZ0ZXIgdGhlIGJyb3dzZXIgZXZlbnQgaGFzIGFscmVhZHkgb2NjdXJyZWQuXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMCBvbmx5XG4vLyBPbGRlciBJRSBzb21ldGltZXMgc2lnbmFscyBcImludGVyYWN0aXZlXCIgdG9vIHNvb25cbmlmICggZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gXCJjb21wbGV0ZVwiIHx8XG5cdCggZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIgJiYgIWRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5kb1Njcm9sbCApICkge1xuXG5cdC8vIEhhbmRsZSBpdCBhc3luY2hyb25vdXNseSB0byBhbGxvdyBzY3JpcHRzIHRoZSBvcHBvcnR1bml0eSB0byBkZWxheSByZWFkeVxuXHR3aW5kb3cuc2V0VGltZW91dCggalF1ZXJ5LnJlYWR5ICk7XG5cbn0gZWxzZSB7XG5cblx0Ly8gVXNlIHRoZSBoYW5keSBldmVudCBjYWxsYmFja1xuXHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCBcIkRPTUNvbnRlbnRMb2FkZWRcIiwgY29tcGxldGVkICk7XG5cblx0Ly8gQSBmYWxsYmFjayB0byB3aW5kb3cub25sb2FkLCB0aGF0IHdpbGwgYWx3YXlzIHdvcmtcblx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcbn1cblxuXG5cblxuLy8gTXVsdGlmdW5jdGlvbmFsIG1ldGhvZCB0byBnZXQgYW5kIHNldCB2YWx1ZXMgb2YgYSBjb2xsZWN0aW9uXG4vLyBUaGUgdmFsdWUvcyBjYW4gb3B0aW9uYWxseSBiZSBleGVjdXRlZCBpZiBpdCdzIGEgZnVuY3Rpb25cbnZhciBhY2Nlc3MgPSBmdW5jdGlvbiggZWxlbXMsIGZuLCBrZXksIHZhbHVlLCBjaGFpbmFibGUsIGVtcHR5R2V0LCByYXcgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBlbGVtcy5sZW5ndGgsXG5cdFx0YnVsayA9IGtleSA9PSBudWxsO1xuXG5cdC8vIFNldHMgbWFueSB2YWx1ZXNcblx0aWYgKCB0b1R5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJhdyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBidWxrICkge1xuXG5cdFx0XHQvLyBCdWxrIG9wZXJhdGlvbnMgcnVuIGFnYWluc3QgdGhlIGVudGlyZSBzZXRcblx0XHRcdGlmICggcmF3ICkge1xuXHRcdFx0XHRmbi5jYWxsKCBlbGVtcywgdmFsdWUgKTtcblx0XHRcdFx0Zm4gPSBudWxsO1xuXG5cdFx0XHQvLyAuLi5leGNlcHQgd2hlbiBleGVjdXRpbmcgZnVuY3Rpb24gdmFsdWVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRidWxrID0gZm47XG5cdFx0XHRcdGZuID0gZnVuY3Rpb24oIGVsZW0sIGtleSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGJ1bGsuY2FsbCggalF1ZXJ5KCBlbGVtICksIHZhbHVlICk7XG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRmbihcblx0XHRcdFx0XHRlbGVtc1sgaSBdLCBrZXksIHJhdyA/XG5cdFx0XHRcdFx0dmFsdWUgOlxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIGVsZW1zWyBpIF0sIGksIGZuKCBlbGVtc1sgaSBdLCBrZXkgKSApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBjaGFpbmFibGUgKSB7XG5cdFx0cmV0dXJuIGVsZW1zO1xuXHR9XG5cblx0Ly8gR2V0c1xuXHRpZiAoIGJ1bGsgKSB7XG5cdFx0cmV0dXJuIGZuLmNhbGwoIGVsZW1zICk7XG5cdH1cblxuXHRyZXR1cm4gbGVuID8gZm4oIGVsZW1zWyAwIF0sIGtleSApIDogZW1wdHlHZXQ7XG59O1xuXG5cbi8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xudmFyIHJtc1ByZWZpeCA9IC9eLW1zLS8sXG5cdHJkYXNoQWxwaGEgPSAvLShbYS16XSkvZztcblxuLy8gVXNlZCBieSBjYW1lbENhc2UgYXMgY2FsbGJhY2sgdG8gcmVwbGFjZSgpXG5mdW5jdGlvbiBmY2FtZWxDYXNlKCBhbGwsIGxldHRlciApIHtcblx0cmV0dXJuIGxldHRlci50b1VwcGVyQ2FzZSgpO1xufVxuXG4vLyBDb252ZXJ0IGRhc2hlZCB0byBjYW1lbENhc2U7IHVzZWQgYnkgdGhlIGNzcyBhbmQgZGF0YSBtb2R1bGVzXG4vLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSwgRWRnZSAxMiAtIDE1XG4vLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5mdW5jdGlvbiBjYW1lbENhc2UoIHN0cmluZyApIHtcblx0cmV0dXJuIHN0cmluZy5yZXBsYWNlKCBybXNQcmVmaXgsIFwibXMtXCIgKS5yZXBsYWNlKCByZGFzaEFscGhhLCBmY2FtZWxDYXNlICk7XG59XG52YXIgYWNjZXB0RGF0YSA9IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHQvLyBBY2NlcHRzIG9ubHk6XG5cdC8vICAtIE5vZGVcblx0Ly8gICAgLSBOb2RlLkVMRU1FTlRfTk9ERVxuXHQvLyAgICAtIE5vZGUuRE9DVU1FTlRfTk9ERVxuXHQvLyAgLSBPYmplY3Rcblx0Ly8gICAgLSBBbnlcblx0cmV0dXJuIG93bmVyLm5vZGVUeXBlID09PSAxIHx8IG93bmVyLm5vZGVUeXBlID09PSA5IHx8ICEoICtvd25lci5ub2RlVHlwZSApO1xufTtcblxuXG5cblxuZnVuY3Rpb24gRGF0YSgpIHtcblx0dGhpcy5leHBhbmRvID0galF1ZXJ5LmV4cGFuZG8gKyBEYXRhLnVpZCsrO1xufVxuXG5EYXRhLnVpZCA9IDE7XG5cbkRhdGEucHJvdG90eXBlID0ge1xuXG5cdGNhY2hlOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cblx0XHQvLyBDaGVjayBpZiB0aGUgb3duZXIgb2JqZWN0IGFscmVhZHkgaGFzIGEgY2FjaGVcblx0XHR2YXIgdmFsdWUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHQvLyBJZiBub3QsIGNyZWF0ZSBvbmVcblx0XHRpZiAoICF2YWx1ZSApIHtcblx0XHRcdHZhbHVlID0ge307XG5cblx0XHRcdC8vIFdlIGNhbiBhY2NlcHQgZGF0YSBmb3Igbm9uLWVsZW1lbnQgbm9kZXMgaW4gbW9kZXJuIGJyb3dzZXJzLFxuXHRcdFx0Ly8gYnV0IHdlIHNob3VsZCBub3QsIHNlZSAjODMzNS5cblx0XHRcdC8vIEFsd2F5cyByZXR1cm4gYW4gZW1wdHkgb2JqZWN0LlxuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBvd25lciApICkge1xuXG5cdFx0XHRcdC8vIElmIGl0IGlzIGEgbm9kZSB1bmxpa2VseSB0byBiZSBzdHJpbmdpZnktZWQgb3IgbG9vcGVkIG92ZXJcblx0XHRcdFx0Ly8gdXNlIHBsYWluIGFzc2lnbm1lbnRcblx0XHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB2YWx1ZTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2Ugc2VjdXJlIGl0IGluIGEgbm9uLWVudW1lcmFibGUgcHJvcGVydHlcblx0XHRcdFx0Ly8gY29uZmlndXJhYmxlIG11c3QgYmUgdHJ1ZSB0byBhbGxvdyB0aGUgcHJvcGVydHkgdG8gYmVcblx0XHRcdFx0Ly8gZGVsZXRlZCB3aGVuIGRhdGEgaXMgcmVtb3ZlZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggb3duZXIsIHRoaXMuZXhwYW5kbywge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlXG5cdFx0XHRcdFx0fSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKCBvd25lciwgZGF0YSwgdmFsdWUgKSB7XG5cdFx0dmFyIHByb3AsXG5cdFx0XHRjYWNoZSA9IHRoaXMuY2FjaGUoIG93bmVyICk7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIGtleSwgdmFsdWUgXSBhcmdzXG5cdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgY2FtZWxDYXNlKCBwcm9wICkgXSA9IGRhdGFbIHByb3AgXTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGNhY2hlO1xuXHR9LFxuXHRnZXQ6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHJldHVybiBrZXkgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHR0aGlzLmNhY2hlKCBvd25lciApIDpcblxuXHRcdFx0Ly8gQWx3YXlzIHVzZSBjYW1lbENhc2Uga2V5IChnaC0yMjU3KVxuXHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdICYmIG93bmVyWyB0aGlzLmV4cGFuZG8gXVsgY2FtZWxDYXNlKCBrZXkgKSBdO1xuXHR9LFxuXHRhY2Nlc3M6IGZ1bmN0aW9uKCBvd25lciwga2V5LCB2YWx1ZSApIHtcblxuXHRcdC8vIEluIGNhc2VzIHdoZXJlIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gTm8ga2V5IHdhcyBzcGVjaWZpZWRcblx0XHQvLyAgIDIuIEEgc3RyaW5nIGtleSB3YXMgc3BlY2lmaWVkLCBidXQgbm8gdmFsdWUgcHJvdmlkZWRcblx0XHQvL1xuXHRcdC8vIFRha2UgdGhlIFwicmVhZFwiIHBhdGggYW5kIGFsbG93IHRoZSBnZXQgbWV0aG9kIHRvIGRldGVybWluZVxuXHRcdC8vIHdoaWNoIHZhbHVlIHRvIHJldHVybiwgcmVzcGVjdGl2ZWx5IGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gVGhlIGVudGlyZSBjYWNoZSBvYmplY3Rcblx0XHQvLyAgIDIuIFRoZSBkYXRhIHN0b3JlZCBhdCB0aGUga2V5XG5cdFx0Ly9cblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8XG5cdFx0XHRcdCggKCBrZXkgJiYgdHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIiApICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSApIHtcblxuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0KCBvd25lciwga2V5ICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2hlbiB0aGUga2V5IGlzIG5vdCBhIHN0cmluZywgb3IgYm90aCBhIGtleSBhbmQgdmFsdWVcblx0XHQvLyBhcmUgc3BlY2lmaWVkLCBzZXQgb3IgZXh0ZW5kIChleGlzdGluZyBvYmplY3RzKSB3aXRoIGVpdGhlcjpcblx0XHQvL1xuXHRcdC8vICAgMS4gQW4gb2JqZWN0IG9mIHByb3BlcnRpZXNcblx0XHQvLyAgIDIuIEEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vXG5cdFx0dGhpcy5zZXQoIG93bmVyLCBrZXksIHZhbHVlICk7XG5cblx0XHQvLyBTaW5jZSB0aGUgXCJzZXRcIiBwYXRoIGNhbiBoYXZlIHR3byBwb3NzaWJsZSBlbnRyeSBwb2ludHNcblx0XHQvLyByZXR1cm4gdGhlIGV4cGVjdGVkIGRhdGEgYmFzZWQgb24gd2hpY2ggcGF0aCB3YXMgdGFrZW5bKl1cblx0XHRyZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoga2V5O1xuXHR9LFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBvd25lciwga2V5ICkge1xuXHRcdHZhciBpLFxuXHRcdFx0Y2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cblx0XHRpZiAoIGNhY2hlID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBrZXkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydCBhcnJheSBvciBzcGFjZSBzZXBhcmF0ZWQgc3RyaW5nIG9mIGtleXNcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSgga2V5ICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYga2V5IGlzIGFuIGFycmF5IG9mIGtleXMuLi5cblx0XHRcdFx0Ly8gV2UgYWx3YXlzIHNldCBjYW1lbENhc2Uga2V5cywgc28gcmVtb3ZlIHRoYXQuXG5cdFx0XHRcdGtleSA9IGtleS5tYXAoIGNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0gY2FtZWxDYXNlKCBrZXkgKTtcblxuXHRcdFx0XHQvLyBJZiBhIGtleSB3aXRoIHRoZSBzcGFjZXMgZXhpc3RzLCB1c2UgaXQuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgY3JlYXRlIGFuIGFycmF5IGJ5IG1hdGNoaW5nIG5vbi13aGl0ZXNwYWNlXG5cdFx0XHRcdGtleSA9IGtleSBpbiBjYWNoZSA/XG5cdFx0XHRcdFx0WyBrZXkgXSA6XG5cdFx0XHRcdFx0KCBrZXkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpID0ga2V5Lmxlbmd0aDtcblxuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGRlbGV0ZSBjYWNoZVsga2V5WyBpIF0gXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgdGhlIGV4cGFuZG8gaWYgdGhlcmUncyBubyBtb3JlIGRhdGFcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkIHx8IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1XG5cdFx0XHQvLyBXZWJraXQgJiBCbGluayBwZXJmb3JtYW5jZSBzdWZmZXJzIHdoZW4gZGVsZXRpbmcgcHJvcGVydGllc1xuXHRcdFx0Ly8gZnJvbSBET00gbm9kZXMsIHNvIHNldCB0byB1bmRlZmluZWQgaW5zdGVhZFxuXHRcdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9Mzc4NjA3IChidWcgcmVzdHJpY3RlZClcblx0XHRcdGlmICggb3duZXIubm9kZVR5cGUgKSB7XG5cdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXHRoYXNEYXRhOiBmdW5jdGlvbiggb3duZXIgKSB7XG5cdFx0dmFyIGNhY2hlID0gb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdHJldHVybiBjYWNoZSAhPT0gdW5kZWZpbmVkICYmICFqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKTtcblx0fVxufTtcbnZhciBkYXRhUHJpdiA9IG5ldyBEYXRhKCk7XG5cbnZhciBkYXRhVXNlciA9IG5ldyBEYXRhKCk7XG5cblxuXG4vL1x0SW1wbGVtZW50YXRpb24gU3VtbWFyeVxuLy9cbi8vXHQxLiBFbmZvcmNlIEFQSSBzdXJmYWNlIGFuZCBzZW1hbnRpYyBjb21wYXRpYmlsaXR5IHdpdGggMS45LnggYnJhbmNoXG4vL1x0Mi4gSW1wcm92ZSB0aGUgbW9kdWxlJ3MgbWFpbnRhaW5hYmlsaXR5IGJ5IHJlZHVjaW5nIHRoZSBzdG9yYWdlXG4vL1x0XHRwYXRocyB0byBhIHNpbmdsZSBtZWNoYW5pc20uXG4vL1x0My4gVXNlIHRoZSBzYW1lIHNpbmdsZSBtZWNoYW5pc20gdG8gc3VwcG9ydCBcInByaXZhdGVcIiBhbmQgXCJ1c2VyXCIgZGF0YS5cbi8vXHQ0LiBfTmV2ZXJfIGV4cG9zZSBcInByaXZhdGVcIiBkYXRhIHRvIHVzZXIgY29kZSAoVE9ETzogRHJvcCBfZGF0YSwgX3JlbW92ZURhdGEpXG4vL1x0NS4gQXZvaWQgZXhwb3NpbmcgaW1wbGVtZW50YXRpb24gZGV0YWlscyBvbiB1c2VyIG9iamVjdHMgKGVnLiBleHBhbmRvIHByb3BlcnRpZXMpXG4vL1x0Ni4gUHJvdmlkZSBhIGNsZWFyIHBhdGggZm9yIGltcGxlbWVudGF0aW9uIHVwZ3JhZGUgdG8gV2Vha01hcCBpbiAyMDE0XG5cbnZhciByYnJhY2UgPSAvXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8sXG5cdHJtdWx0aURhc2ggPSAvW0EtWl0vZztcblxuZnVuY3Rpb24gZ2V0RGF0YSggZGF0YSApIHtcblx0aWYgKCBkYXRhID09PSBcInRydWVcIiApIHtcblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJmYWxzZVwiICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGlmICggZGF0YSA9PT0gXCJudWxsXCIgKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvLyBPbmx5IGNvbnZlcnQgdG8gYSBudW1iZXIgaWYgaXQgZG9lc24ndCBjaGFuZ2UgdGhlIHN0cmluZ1xuXHRpZiAoIGRhdGEgPT09ICtkYXRhICsgXCJcIiApIHtcblx0XHRyZXR1cm4gK2RhdGE7XG5cdH1cblxuXHRpZiAoIHJicmFjZS50ZXN0KCBkYXRhICkgKSB7XG5cdFx0cmV0dXJuIEpTT04ucGFyc2UoIGRhdGEgKTtcblx0fVxuXG5cdHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBkYXRhQXR0ciggZWxlbSwga2V5LCBkYXRhICkge1xuXHR2YXIgbmFtZTtcblxuXHQvLyBJZiBub3RoaW5nIHdhcyBmb3VuZCBpbnRlcm5hbGx5LCB0cnkgdG8gZmV0Y2ggYW55XG5cdC8vIGRhdGEgZnJvbSB0aGUgSFRNTDUgZGF0YS0qIGF0dHJpYnV0ZVxuXHRpZiAoIGRhdGEgPT09IHVuZGVmaW5lZCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdG5hbWUgPSBcImRhdGEtXCIgKyBrZXkucmVwbGFjZSggcm11bHRpRGFzaCwgXCItJCZcIiApLnRvTG93ZXJDYXNlKCk7XG5cdFx0ZGF0YSA9IGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICk7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0ZGF0YSA9IGdldERhdGEoIGRhdGEgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge31cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHdlIHNldCB0aGUgZGF0YSBzbyBpdCBpc24ndCBjaGFuZ2VkIGxhdGVyXG5cdFx0XHRkYXRhVXNlci5zZXQoIGVsZW0sIGtleSwgZGF0YSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRoYXNEYXRhOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuaGFzRGF0YSggZWxlbSApIHx8IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKTtcblx0fSxcblxuXHRkYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVVzZXIucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH0sXG5cblx0Ly8gVE9ETzogTm93IHRoYXQgYWxsIGNhbGxzIHRvIF9kYXRhIGFuZCBfcmVtb3ZlRGF0YSBoYXZlIGJlZW4gcmVwbGFjZWRcblx0Ly8gd2l0aCBkaXJlY3QgY2FsbHMgdG8gZGF0YVByaXYgbWV0aG9kcywgdGhlc2UgY2FuIGJlIGRlcHJlY2F0ZWQuXG5cdF9kYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBuYW1lLCBkYXRhICk7XG5cdH0sXG5cblx0X3JlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGF0YTogZnVuY3Rpb24oIGtleSwgdmFsdWUgKSB7XG5cdFx0dmFyIGksIG5hbWUsIGRhdGEsXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdLFxuXHRcdFx0YXR0cnMgPSBlbGVtICYmIGVsZW0uYXR0cmlidXRlcztcblxuXHRcdC8vIEdldHMgYWxsIHZhbHVlc1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIHRoaXMubGVuZ3RoICkge1xuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtICk7XG5cblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmICFkYXRhUHJpdi5nZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIgKSApIHtcblx0XHRcdFx0XHRpID0gYXR0cnMubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBUaGUgYXR0cnMgZWxlbWVudHMgY2FuIGJlIG51bGwgKCMxNDg5NClcblx0XHRcdFx0XHRcdGlmICggYXR0cnNbIGkgXSApIHtcblx0XHRcdFx0XHRcdFx0bmFtZSA9IGF0dHJzWyBpIF0ubmFtZTtcblx0XHRcdFx0XHRcdFx0aWYgKCBuYW1lLmluZGV4T2YoIFwiZGF0YS1cIiApID09PSAwICkge1xuXHRcdFx0XHRcdFx0XHRcdG5hbWUgPSBjYW1lbENhc2UoIG5hbWUuc2xpY2UoIDUgKSApO1xuXHRcdFx0XHRcdFx0XHRcdGRhdGFBdHRyKCBlbGVtLCBuYW1lLCBkYXRhWyBuYW1lIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiaGFzRGF0YUF0dHJzXCIsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZGF0YTtcblx0XHR9XG5cblx0XHQvLyBTZXRzIG11bHRpcGxlIHZhbHVlc1xuXHRcdGlmICggdHlwZW9mIGtleSA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhVXNlci5zZXQoIHRoaXMsIGtleSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBkYXRhO1xuXG5cdFx0XHQvLyBUaGUgY2FsbGluZyBqUXVlcnkgb2JqZWN0IChlbGVtZW50IG1hdGNoZXMpIGlzIG5vdCBlbXB0eVxuXHRcdFx0Ly8gKGFuZCB0aGVyZWZvcmUgaGFzIGFuIGVsZW1lbnQgYXBwZWFycyBhdCB0aGlzWyAwIF0pIGFuZCB0aGVcblx0XHRcdC8vIGB2YWx1ZWAgcGFyYW1ldGVyIHdhcyBub3QgdW5kZWZpbmVkLiBBbiBlbXB0eSBqUXVlcnkgb2JqZWN0XG5cdFx0XHQvLyB3aWxsIHJlc3VsdCBpbiBgdW5kZWZpbmVkYCBmb3IgZWxlbSA9IHRoaXNbIDAgXSB3aGljaCB3aWxsXG5cdFx0XHQvLyB0aHJvdyBhbiBleGNlcHRpb24gaWYgYW4gYXR0ZW1wdCB0byByZWFkIGEgZGF0YSBjYWNoZSBpcyBtYWRlLlxuXHRcdFx0aWYgKCBlbGVtICYmIHZhbHVlID09PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0Ly8gQXR0ZW1wdCB0byBnZXQgZGF0YSBmcm9tIHRoZSBjYWNoZVxuXHRcdFx0XHQvLyBUaGUga2V5IHdpbGwgYWx3YXlzIGJlIGNhbWVsQ2FzZWQgaW4gRGF0YVxuXHRcdFx0XHRkYXRhID0gZGF0YVVzZXIuZ2V0KCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIFwiZGlzY292ZXJcIiB0aGUgZGF0YSBpblxuXHRcdFx0XHQvLyBIVE1MNSBjdXN0b20gZGF0YS0qIGF0dHJzXG5cdFx0XHRcdGRhdGEgPSBkYXRhQXR0ciggZWxlbSwga2V5ICk7XG5cdFx0XHRcdGlmICggZGF0YSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gV2UgdHJpZWQgcmVhbGx5IGhhcmQsIGJ1dCB0aGUgZGF0YSBkb2Vzbid0IGV4aXN0LlxuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCB0aGUgZGF0YS4uLlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc3RvcmUgdGhlIGNhbWVsQ2FzZWQga2V5XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5LCB2YWx1ZSApO1xuXHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSwgbnVsbCwgdHJ1ZSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkYXRhVXNlci5yZW1vdmUoIHRoaXMsIGtleSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBxdWV1ZTtcblxuXHRcdGlmICggZWxlbSApIHtcblx0XHRcdHR5cGUgPSAoIHR5cGUgfHwgXCJmeFwiICkgKyBcInF1ZXVlXCI7XG5cdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmdldCggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHQvLyBTcGVlZCB1cCBkZXF1ZXVlIGJ5IGdldHRpbmcgb3V0IHF1aWNrbHkgaWYgdGhpcyBpcyBqdXN0IGEgbG9va3VwXG5cdFx0XHRpZiAoIGRhdGEgKSB7XG5cdFx0XHRcdGlmICggIXF1ZXVlIHx8IEFycmF5LmlzQXJyYXkoIGRhdGEgKSApIHtcblx0XHRcdFx0XHRxdWV1ZSA9IGRhdGFQcml2LmFjY2VzcyggZWxlbSwgdHlwZSwgalF1ZXJ5Lm1ha2VBcnJheSggZGF0YSApICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cXVldWUucHVzaCggZGF0YSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcXVldWUgfHwgW107XG5cdFx0fVxuXHR9LFxuXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblxuXHRcdHZhciBxdWV1ZSA9IGpRdWVyeS5xdWV1ZSggZWxlbSwgdHlwZSApLFxuXHRcdFx0c3RhcnRMZW5ndGggPSBxdWV1ZS5sZW5ndGgsXG5cdFx0XHRmbiA9IHF1ZXVlLnNoaWZ0KCksXG5cdFx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgdHlwZSApLFxuXHRcdFx0bmV4dCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggZWxlbSwgdHlwZSApO1xuXHRcdFx0fTtcblxuXHRcdC8vIElmIHRoZSBmeCBxdWV1ZSBpcyBkZXF1ZXVlZCwgYWx3YXlzIHJlbW92ZSB0aGUgcHJvZ3Jlc3Mgc2VudGluZWxcblx0XHRpZiAoIGZuID09PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKTtcblx0XHRcdHN0YXJ0TGVuZ3RoLS07XG5cdFx0fVxuXG5cdFx0aWYgKCBmbiApIHtcblxuXHRcdFx0Ly8gQWRkIGEgcHJvZ3Jlc3Mgc2VudGluZWwgdG8gcHJldmVudCB0aGUgZnggcXVldWUgZnJvbSBiZWluZ1xuXHRcdFx0Ly8gYXV0b21hdGljYWxseSBkZXF1ZXVlZFxuXHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgKSB7XG5cdFx0XHRcdHF1ZXVlLnVuc2hpZnQoIFwiaW5wcm9ncmVzc1wiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENsZWFyIHVwIHRoZSBsYXN0IHF1ZXVlIHN0b3AgZnVuY3Rpb25cblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0Zm4uY2FsbCggZWxlbSwgbmV4dCwgaG9va3MgKTtcblx0XHR9XG5cblx0XHRpZiAoICFzdGFydExlbmd0aCAmJiBob29rcyApIHtcblx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTm90IHB1YmxpYyAtIGdlbmVyYXRlIGEgcXVldWVIb29rcyBvYmplY3QsIG9yIHJldHVybiB0aGUgY3VycmVudCBvbmVcblx0X3F1ZXVlSG9va3M6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlICkge1xuXHRcdHZhciBrZXkgPSB0eXBlICsgXCJxdWV1ZUhvb2tzXCI7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmdldCggZWxlbSwga2V5ICkgfHwgZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBrZXksIHtcblx0XHRcdGVtcHR5OiBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKS5hZGQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFsgdHlwZSArIFwicXVldWVcIiwga2V5IF0gKTtcblx0XHRcdH0gKVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHF1ZXVlOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgc2V0dGVyID0gMjtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRkYXRhID0gdHlwZTtcblx0XHRcdHR5cGUgPSBcImZ4XCI7XG5cdFx0XHRzZXR0ZXItLTtcblx0XHR9XG5cblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggPCBzZXR0ZXIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnF1ZXVlKCB0aGlzWyAwIF0sIHR5cGUgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMgOlxuXHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBkYXRhICk7XG5cblx0XHRcdFx0Ly8gRW5zdXJlIGEgaG9va3MgZm9yIHRoaXMgcXVldWVcblx0XHRcdFx0alF1ZXJ5Ll9xdWV1ZUhvb2tzKCB0aGlzLCB0eXBlICk7XG5cblx0XHRcdFx0aWYgKCB0eXBlID09PSBcImZ4XCIgJiYgcXVldWVbIDAgXSAhPT0gXCJpbnByb2dyZXNzXCIgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHR9LFxuXHRkZXF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCB0eXBlICk7XG5cdFx0fSApO1xuXHR9LFxuXHRjbGVhclF1ZXVlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRyZXR1cm4gdGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdH0sXG5cblx0Ly8gR2V0IGEgcHJvbWlzZSByZXNvbHZlZCB3aGVuIHF1ZXVlcyBvZiBhIGNlcnRhaW4gdHlwZVxuXHQvLyBhcmUgZW1wdGllZCAoZnggaXMgdGhlIHR5cGUgYnkgZGVmYXVsdClcblx0cHJvbWlzZTogZnVuY3Rpb24oIHR5cGUsIG9iaiApIHtcblx0XHR2YXIgdG1wLFxuXHRcdFx0Y291bnQgPSAxLFxuXHRcdFx0ZGVmZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGVsZW1lbnRzID0gdGhpcyxcblx0XHRcdGkgPSB0aGlzLmxlbmd0aCxcblx0XHRcdHJlc29sdmUgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCAhKCAtLWNvdW50ICkgKSB7XG5cdFx0XHRcdFx0ZGVmZXIucmVzb2x2ZVdpdGgoIGVsZW1lbnRzLCBbIGVsZW1lbnRzIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRvYmogPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHR0bXAgPSBkYXRhUHJpdi5nZXQoIGVsZW1lbnRzWyBpIF0sIHR5cGUgKyBcInF1ZXVlSG9va3NcIiApO1xuXHRcdFx0aWYgKCB0bXAgJiYgdG1wLmVtcHR5ICkge1xuXHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR0bXAuZW1wdHkuYWRkKCByZXNvbHZlICk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlc29sdmUoKTtcblx0XHRyZXR1cm4gZGVmZXIucHJvbWlzZSggb2JqICk7XG5cdH1cbn0gKTtcbnZhciBwbnVtID0gKCAvWystXT8oPzpcXGQqXFwufClcXGQrKD86W2VFXVsrLV0/XFxkK3wpLyApLnNvdXJjZTtcblxudmFyIHJjc3NOdW0gPSBuZXcgUmVnRXhwKCBcIl4oPzooWystXSk9fCkoXCIgKyBwbnVtICsgXCIpKFthLXolXSopJFwiLCBcImlcIiApO1xuXG5cbnZhciBjc3NFeHBhbmQgPSBbIFwiVG9wXCIsIFwiUmlnaHRcIiwgXCJCb3R0b21cIiwgXCJMZWZ0XCIgXTtcblxudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cblx0dmFyIGlzQXR0YWNoZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXHRcdH0sXG5cdFx0Y29tcG9zZWQgPSB7IGNvbXBvc2VkOiB0cnVlIH07XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExKywgRWRnZSAxMiAtIDE4KywgaU9TIDEwLjAgLSAxMC4yIG9ubHlcblx0Ly8gQ2hlY2sgYXR0YWNobWVudCBhY3Jvc3Mgc2hhZG93IERPTSBib3VuZGFyaWVzIHdoZW4gcG9zc2libGUgKGdoLTM1MDQpXG5cdC8vIFN1cHBvcnQ6IGlPUyAxMC4wLTEwLjIgb25seVxuXHQvLyBFYXJseSBpT1MgMTAgdmVyc2lvbnMgc3VwcG9ydCBgYXR0YWNoU2hhZG93YCBidXQgbm90IGBnZXRSb290Tm9kZWAsXG5cdC8vIGxlYWRpbmcgdG8gZXJyb3JzLiBXZSBuZWVkIHRvIGNoZWNrIGZvciBgZ2V0Um9vdE5vZGVgLlxuXHRpZiAoIGRvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSApIHtcblx0XHRpc0F0dGFjaGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSB8fFxuXHRcdFx0XHRlbGVtLmdldFJvb3ROb2RlKCBjb21wb3NlZCApID09PSBlbGVtLm93bmVyRG9jdW1lbnQ7XG5cdFx0fTtcblx0fVxudmFyIGlzSGlkZGVuV2l0aGluVHJlZSA9IGZ1bmN0aW9uKCBlbGVtLCBlbCApIHtcblxuXHRcdC8vIGlzSGlkZGVuV2l0aGluVHJlZSBtaWdodCBiZSBjYWxsZWQgZnJvbSBqUXVlcnkjZmlsdGVyIGZ1bmN0aW9uO1xuXHRcdC8vIGluIHRoYXQgY2FzZSwgZWxlbWVudCB3aWxsIGJlIHNlY29uZCBhcmd1bWVudFxuXHRcdGVsZW0gPSBlbCB8fCBlbGVtO1xuXG5cdFx0Ly8gSW5saW5lIHN0eWxlIHRydW1wcyBhbGxcblx0XHRyZXR1cm4gZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIm5vbmVcIiB8fFxuXHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID09PSBcIlwiICYmXG5cblx0XHRcdC8vIE90aGVyd2lzZSwgY2hlY2sgY29tcHV0ZWQgc3R5bGVcblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MyAtIDQ1XG5cdFx0XHQvLyBEaXNjb25uZWN0ZWQgZWxlbWVudHMgY2FuIGhhdmUgY29tcHV0ZWQgZGlzcGxheTogbm9uZSwgc28gZmlyc3QgY29uZmlybSB0aGF0IGVsZW0gaXNcblx0XHRcdC8vIGluIHRoZSBkb2N1bWVudC5cblx0XHRcdGlzQXR0YWNoZWQoIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSBlbGVtLm5vZGVUeXBlICYmXG5cdFx0XHQoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBhdHRhY2hlZCwgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0YXR0YWNoZWQgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnRcblx0XHR0bXAgPSBnZXRBbGwoIGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICksIFwic2NyaXB0XCIgKTtcblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRpZiAoIGF0dGFjaGVkICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggdG1wICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FwdHVyZSBleGVjdXRhYmxlc1xuXHRcdGlmICggc2NyaXB0cyApIHtcblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0bXBbIGorKyBdICkgKSB7XG5cdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlIHx8IFwiXCIgKSApIHtcblx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmcmFnbWVudDtcbn1cblxuXG4oIGZ1bmN0aW9uKCkge1xuXHR2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0ZGl2ID0gZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApLFxuXHRcdGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seVxuXHQvLyBDaGVjayBzdGF0ZSBsb3N0IGlmIHRoZSBuYW1lIGlzIHNldCAoIzExMjE3KVxuXHQvLyBTdXBwb3J0OiBXaW5kb3dzIFdlYiBBcHBzIChXV0EpXG5cdC8vIGBuYW1lYCBhbmQgYHR5cGVgIG11c3QgdXNlIC5zZXRBdHRyaWJ1dGUgZm9yIFdXQSAoIzE0OTAxKVxuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcInJhZGlvXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcImNoZWNrZWRcIiwgXCJjaGVja2VkXCIgKTtcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcIm5hbWVcIiwgXCJ0XCIgKTtcblxuXHRkaXYuYXBwZW5kQ2hpbGQoIGlucHV0ICk7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSBvbmx5XG5cdC8vIE9sZGVyIFdlYktpdCBkb2Vzbid0IGNsb25lIGNoZWNrZWQgc3RhdGUgY29ycmVjdGx5IGluIGZyYWdtZW50c1xuXHRzdXBwb3J0LmNoZWNrQ2xvbmUgPSBkaXYuY2xvbmVOb2RlKCB0cnVlICkuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmNoZWNrZWQ7XG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdC8vIE1ha2Ugc3VyZSB0ZXh0YXJlYSAoYW5kIGNoZWNrYm94KSBkZWZhdWx0VmFsdWUgaXMgcHJvcGVybHkgY2xvbmVkXG5cdGRpdi5pbm5lckhUTUwgPSBcIjx0ZXh0YXJlYT54PC90ZXh0YXJlYT5cIjtcblx0c3VwcG9ydC5ub0Nsb25lQ2hlY2tlZCA9ICEhZGl2LmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5kZWZhdWx0VmFsdWU7XG59ICkoKTtcblxuXG52YXJcblx0cmtleUV2ZW50ID0gL15rZXkvLFxuXHRybW91c2VFdmVudCA9IC9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxcblx0cnR5cGVuYW1lc3BhY2UgPSAvXihbXi5dKikoPzpcXC4oLispfCkvO1xuXG5mdW5jdGlvbiByZXR1cm5UcnVlKCkge1xuXHRyZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gcmV0dXJuRmFsc2UoKSB7XG5cdHJldHVybiBmYWxzZTtcbn1cblxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTErXG4vLyBmb2N1cygpIGFuZCBibHVyKCkgYXJlIGFzeW5jaHJvbm91cywgZXhjZXB0IHdoZW4gdGhleSBhcmUgbm8tb3AuXG4vLyBTbyBleHBlY3QgZm9jdXMgdG8gYmUgc3luY2hyb25vdXMgd2hlbiB0aGUgZWxlbWVudCBpcyBhbHJlYWR5IGFjdGl2ZSxcbi8vIGFuZCBibHVyIHRvIGJlIHN5bmNocm9ub3VzIHdoZW4gdGhlIGVsZW1lbnQgaXMgbm90IGFscmVhZHkgYWN0aXZlLlxuLy8gKGZvY3VzIGFuZCBibHVyIGFyZSBhbHdheXMgc3luY2hyb25vdXMgaW4gb3RoZXIgc3VwcG9ydGVkIGJyb3dzZXJzLFxuLy8gdGhpcyBqdXN0IGRlZmluZXMgd2hlbiB3ZSBjYW4gY291bnQgb24gaXQpLlxuZnVuY3Rpb24gZXhwZWN0U3luYyggZWxlbSwgdHlwZSApIHtcblx0cmV0dXJuICggZWxlbSA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSApID09PSAoIHR5cGUgPT09IFwiZm9jdXNcIiApO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gQWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgY2FuIHRocm93IHVuZXhwZWN0ZWRseVxuLy8gaHR0cHM6Ly9idWdzLmpxdWVyeS5jb20vdGlja2V0LzEzMzkzXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZSBldmVudCBpcyBuYW1lc3BhY2VkLCB0aGVuIGVhY2ggaGFuZGxlciBpcyBvbmx5IGludm9rZWQgaWYgaXQgaXNcblx0XHRcdFx0Ly8gc3BlY2lhbGx5IHVuaXZlcnNhbCBvciBpdHMgbmFtZXNwYWNlcyBhcmUgYSBzdXBlcnNldCBvZiB0aGUgZXZlbnQncy5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBoYW5kbGVPYmoubmFtZXNwYWNlID09PSBmYWxzZSB8fFxuXHRcdFx0XHRcdGV2ZW50LnJuYW1lc3BhY2UudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkge1xuXG5cdFx0XHRcdFx0ZXZlbnQuaGFuZGxlT2JqID0gaGFuZGxlT2JqO1xuXHRcdFx0XHRcdGV2ZW50LmRhdGEgPSBoYW5kbGVPYmouZGF0YTtcblxuXHRcdFx0XHRcdHJldCA9ICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgaGFuZGxlT2JqLm9yaWdUeXBlIF0gfHwge30gKS5oYW5kbGUgfHxcblx0XHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyICkuYXBwbHkoIG1hdGNoZWQuZWxlbSwgYXJncyApO1xuXG5cdFx0XHRcdFx0aWYgKCByZXQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdGlmICggKCBldmVudC5yZXN1bHQgPSByZXQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGwgdGhlIHBvc3REaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGVcblx0XHRpZiAoIHNwZWNpYWwucG9zdERpc3BhdGNoICkge1xuXHRcdFx0c3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdGhhbmRsZXJzOiBmdW5jdGlvbiggZXZlbnQsIGhhbmRsZXJzICkge1xuXHRcdHZhciBpLCBoYW5kbGVPYmosIHNlbCwgbWF0Y2hlZEhhbmRsZXJzLCBtYXRjaGVkU2VsZWN0b3JzLFxuXHRcdFx0aGFuZGxlclF1ZXVlID0gW10sXG5cdFx0XHRkZWxlZ2F0ZUNvdW50ID0gaGFuZGxlcnMuZGVsZWdhdGVDb3VudCxcblx0XHRcdGN1ciA9IGV2ZW50LnRhcmdldDtcblxuXHRcdC8vIEZpbmQgZGVsZWdhdGUgaGFuZGxlcnNcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05XG5cdFx0XHQvLyBCbGFjay1ob2xlIFNWRyA8dXNlPiBpbnN0YW5jZSB0cmVlcyAodHJhYy0xMzE4MClcblx0XHRcdGN1ci5ub2RlVHlwZSAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NDJcblx0XHRcdC8vIFN1cHByZXNzIHNwZWMtdmlvbGF0aW5nIGNsaWNrcyBpbmRpY2F0aW5nIGEgbm9uLXByaW1hcnkgcG9pbnRlciBidXR0b24gKHRyYWMtMzg2MSlcblx0XHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2V2ZW50LXR5cGUtY2xpY2tcblx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdC8vIC4uLmJ1dCBub3QgYXJyb3cga2V5IFwiY2xpY2tzXCIgb2YgcmFkaW8gaW5wdXRzLCB3aGljaCBjYW4gaGF2ZSBgYnV0dG9uYCAtMSAoZ2gtMjM0Mylcblx0XHRcdCEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBldmVudC5idXR0b24gPj0gMSApICkge1xuXG5cdFx0XHRmb3IgKCA7IGN1ciAhPT0gdGhpczsgY3VyID0gY3VyLnBhcmVudE5vZGUgfHwgdGhpcyApIHtcblxuXHRcdFx0XHQvLyBEb24ndCBjaGVjayBub24tZWxlbWVudHMgKCMxMzIwOClcblx0XHRcdFx0Ly8gRG9uJ3QgcHJvY2VzcyBjbGlja3Mgb24gZGlzYWJsZWQgZWxlbWVudHMgKCM2OTExLCAjODE2NSwgIzExMzgyLCAjMTE3NjQpXG5cdFx0XHRcdGlmICggY3VyLm5vZGVUeXBlID09PSAxICYmICEoIGV2ZW50LnR5cGUgPT09IFwiY2xpY2tcIiAmJiBjdXIuZGlzYWJsZWQgPT09IHRydWUgKSApIHtcblx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMgPSBbXTtcblx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzID0ge307XG5cdFx0XHRcdFx0Zm9yICggaSA9IDA7IGkgPCBkZWxlZ2F0ZUNvdW50OyBpKysgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaSBdO1xuXG5cdFx0XHRcdFx0XHQvLyBEb24ndCBjb25mbGljdCB3aXRoIE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoIzEzMjAzKVxuXHRcdFx0XHRcdFx0c2VsID0gaGFuZGxlT2JqLnNlbGVjdG9yICsgXCIgXCI7XG5cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gPSBoYW5kbGVPYmoubmVlZHNDb250ZXh0ID9cblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkoIHNlbCwgdGhpcyApLmluZGV4KCBjdXIgKSA+IC0xIDpcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkuZmluZCggc2VsLCB0aGlzLCBudWxsLCBbIGN1ciBdICkubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSApIHtcblx0XHRcdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIG1hdGNoZWRIYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBtYXRjaGVkSGFuZGxlcnMgfSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFkZCB0aGUgcmVtYWluaW5nIChkaXJlY3RseS1ib3VuZCkgaGFuZGxlcnNcblx0XHRjdXIgPSB0aGlzO1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCA8IGhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IGhhbmRsZXJzLnNsaWNlKCBkZWxlZ2F0ZUNvdW50ICkgfSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBoYW5kbGVyUXVldWU7XG5cdH0sXG5cblx0YWRkUHJvcDogZnVuY3Rpb24oIG5hbWUsIGhvb2sgKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBqUXVlcnkuRXZlbnQucHJvdG90eXBlLCBuYW1lLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXG5cdFx0XHRnZXQ6IGlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCB0byBlbnN1cmUgY29ycmVjdCBzdGF0ZSBmb3IgY2hlY2thYmxlIGlucHV0c1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCBkYXRhICkge1xuXG5cdFx0XHRcdC8vIEZvciBtdXR1YWwgY29tcHJlc3NpYmlsaXR5IHdpdGggX2RlZmF1bHQsIHJlcGxhY2UgYHRoaXNgIGFjY2VzcyB3aXRoIGEgbG9jYWwgdmFyLlxuXHRcdFx0XHQvLyBgfHwgZGF0YWAgaXMgZGVhZCBjb2RlIG1lYW50IG9ubHkgdG8gcHJlc2VydmUgdGhlIHZhcmlhYmxlIHRocm91Z2ggbWluaWZpY2F0aW9uLlxuXHRcdFx0XHR2YXIgZWwgPSB0aGlzIHx8IGRhdGE7XG5cblx0XHRcdFx0Ly8gQ2xhaW0gdGhlIGZpcnN0IGhhbmRsZXJcblx0XHRcdFx0aWYgKCByY2hlY2thYmxlVHlwZS50ZXN0KCBlbC50eXBlICkgJiZcblx0XHRcdFx0XHRlbC5jbGljayAmJiBub2RlTmFtZSggZWwsIFwiaW5wdXRcIiApICkge1xuXG5cdFx0XHRcdFx0Ly8gZGF0YVByaXYuc2V0KCBlbCwgXCJjbGlja1wiLCAuLi4gKVxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiLCByZXR1cm5UcnVlICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oIGRhdGEgKSB7XG5cblx0XHRcdFx0Ly8gRm9yIG11dHVhbCBjb21wcmVzc2liaWxpdHkgd2l0aCBfZGVmYXVsdCwgcmVwbGFjZSBgdGhpc2AgYWNjZXNzIHdpdGggYSBsb2NhbCB2YXIuXG5cdFx0XHRcdC8vIGB8fCBkYXRhYCBpcyBkZWFkIGNvZGUgbWVhbnQgb25seSB0byBwcmVzZXJ2ZSB0aGUgdmFyaWFibGUgdGhyb3VnaCBtaW5pZmljYXRpb24uXG5cdFx0XHRcdHZhciBlbCA9IHRoaXMgfHwgZGF0YTtcblxuXHRcdFx0XHQvLyBGb3JjZSBzZXR1cCBiZWZvcmUgdHJpZ2dlcmluZyBhIGNsaWNrXG5cdFx0XHRcdGlmICggcmNoZWNrYWJsZVR5cGUudGVzdCggZWwudHlwZSApICYmXG5cdFx0XHRcdFx0ZWwuY2xpY2sgJiYgbm9kZU5hbWUoIGVsLCBcImlucHV0XCIgKSApIHtcblxuXHRcdFx0XHRcdGxldmVyYWdlTmF0aXZlKCBlbCwgXCJjbGlja1wiICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIHN1cHByZXNzIG5hdGl2ZSAuY2xpY2soKSBvbiBsaW5rc1xuXHRcdFx0Ly8gQWxzbyBwcmV2ZW50IGl0IGlmIHdlJ3JlIGN1cnJlbnRseSBpbnNpZGUgYSBsZXZlcmFnZWQgbmF0aXZlLWV2ZW50IHN0YWNrXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuXHRcdFx0XHRyZXR1cm4gcmNoZWNrYWJsZVR5cGUudGVzdCggdGFyZ2V0LnR5cGUgKSAmJlxuXHRcdFx0XHRcdHRhcmdldC5jbGljayAmJiBub2RlTmFtZSggdGFyZ2V0LCBcImlucHV0XCIgKSAmJlxuXHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGFyZ2V0LCBcImNsaWNrXCIgKSB8fFxuXHRcdFx0XHRcdG5vZGVOYW1lKCB0YXJnZXQsIFwiYVwiICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGJlZm9yZXVubG9hZDoge1xuXHRcdFx0cG9zdERpc3BhdGNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCAyMCtcblx0XHRcdFx0Ly8gRmlyZWZveCBkb2Vzbid0IGFsZXJ0IGlmIHRoZSByZXR1cm5WYWx1ZSBmaWVsZCBpcyBub3Qgc2V0LlxuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCAhPT0gdW5kZWZpbmVkICYmIGV2ZW50Lm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0ZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZSA9IGV2ZW50LnJlc3VsdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gRW5zdXJlIHRoZSBwcmVzZW5jZSBvZiBhbiBldmVudCBsaXN0ZW5lciB0aGF0IGhhbmRsZXMgbWFudWFsbHktdHJpZ2dlcmVkXG4vLyBzeW50aGV0aWMgZXZlbnRzIGJ5IGludGVycnVwdGluZyBwcm9ncmVzcyB1bnRpbCByZWludm9rZWQgaW4gcmVzcG9uc2UgdG9cbi8vICpuYXRpdmUqIGV2ZW50cyB0aGF0IGl0IGZpcmVzIGRpcmVjdGx5LCBlbnN1cmluZyB0aGF0IHN0YXRlIGNoYW5nZXMgaGF2ZVxuLy8gYWxyZWFkeSBvY2N1cnJlZCBiZWZvcmUgb3RoZXIgbGlzdGVuZXJzIGFyZSBpbnZva2VkLlxuZnVuY3Rpb24gbGV2ZXJhZ2VOYXRpdmUoIGVsLCB0eXBlLCBleHBlY3RTeW5jICkge1xuXG5cdC8vIE1pc3NpbmcgZXhwZWN0U3luYyBpbmRpY2F0ZXMgYSB0cmlnZ2VyIGNhbGwsIHdoaWNoIG11c3QgZm9yY2Ugc2V0dXAgdGhyb3VnaCBqUXVlcnkuZXZlbnQuYWRkXG5cdGlmICggIWV4cGVjdFN5bmMgKSB7XG5cdFx0aWYgKCBkYXRhUHJpdi5nZXQoIGVsLCB0eXBlICkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGVsLCB0eXBlLCByZXR1cm5UcnVlICk7XG5cdFx0fVxuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFJlZ2lzdGVyIHRoZSBjb250cm9sbGVyIGFzIGEgc3BlY2lhbCB1bml2ZXJzYWwgaGFuZGxlciBmb3IgYWxsIGV2ZW50IG5hbWVzcGFjZXNcblx0ZGF0YVByaXYuc2V0KCBlbCwgdHlwZSwgZmFsc2UgKTtcblx0alF1ZXJ5LmV2ZW50LmFkZCggZWwsIHR5cGUsIHtcblx0XHRuYW1lc3BhY2U6IGZhbHNlLFxuXHRcdGhhbmRsZXI6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciBub3RBc3luYywgcmVzdWx0LFxuXHRcdFx0XHRzYXZlZCA9IGRhdGFQcml2LmdldCggdGhpcywgdHlwZSApO1xuXG5cdFx0XHRpZiAoICggZXZlbnQuaXNUcmlnZ2VyICYgMSApICYmIHRoaXNbIHR5cGUgXSApIHtcblxuXHRcdFx0XHQvLyBJbnRlcnJ1cHQgcHJvY2Vzc2luZyBvZiB0aGUgb3V0ZXIgc3ludGhldGljIC50cmlnZ2VyKCllZCBldmVudFxuXHRcdFx0XHQvLyBTYXZlZCBkYXRhIHNob3VsZCBiZSBmYWxzZSBpbiBzdWNoIGNhc2VzLCBidXQgbWlnaHQgYmUgYSBsZWZ0b3ZlciBjYXB0dXJlIG9iamVjdFxuXHRcdFx0XHQvLyBmcm9tIGFuIGFzeW5jIG5hdGl2ZSBoYW5kbGVyIChnaC00MzUwKVxuXHRcdFx0XHRpZiAoICFzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBhcmd1bWVudHMgZm9yIHVzZSB3aGVuIGhhbmRsaW5nIHRoZSBpbm5lciBuYXRpdmUgZXZlbnRcblx0XHRcdFx0XHQvLyBUaGVyZSB3aWxsIGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgYXJndW1lbnQgKGFuIGV2ZW50IG9iamVjdCksIHNvIHRoaXMgYXJyYXlcblx0XHRcdFx0XHQvLyB3aWxsIG5vdCBiZSBjb25mdXNlZCB3aXRoIGEgbGVmdG92ZXIgY2FwdHVyZSBvYmplY3QuXG5cdFx0XHRcdFx0c2F2ZWQgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHNhdmVkICk7XG5cblx0XHRcdFx0XHQvLyBUcmlnZ2VyIHRoZSBuYXRpdmUgZXZlbnQgYW5kIGNhcHR1cmUgaXRzIHJlc3VsdFxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdC8vIGZvY3VzKCkgYW5kIGJsdXIoKSBhcmUgYXN5bmNocm9ub3VzXG5cdFx0XHRcdFx0bm90QXN5bmMgPSBleHBlY3RTeW5jKCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0dGhpc1sgdHlwZSBdKCk7XG5cdFx0XHRcdFx0cmVzdWx0ID0gZGF0YVByaXYuZ2V0KCB0aGlzLCB0eXBlICk7XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0IHx8IG5vdEFzeW5jICkge1xuXHRcdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCB0eXBlLCBmYWxzZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRyZXN1bHQgPSB7fTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBzYXZlZCAhPT0gcmVzdWx0ICkge1xuXG5cdFx0XHRcdFx0XHQvLyBDYW5jZWwgdGhlIG91dGVyIHN5bnRoZXRpYyBldmVudFxuXHRcdFx0XHRcdFx0ZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdC52YWx1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhpcyBpcyBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgZm9yIGFuIGV2ZW50IHdpdGggYSBidWJibGluZyBzdXJyb2dhdGVcblx0XHRcdFx0Ly8gKGZvY3VzIG9yIGJsdXIpLCBhc3N1bWUgdGhhdCB0aGUgc3Vycm9nYXRlIGFscmVhZHkgcHJvcGFnYXRlZCBmcm9tIHRyaWdnZXJpbmcgdGhlXG5cdFx0XHRcdC8vIG5hdGl2ZSBldmVudCBhbmQgcHJldmVudCB0aGF0IGZyb20gaGFwcGVuaW5nIGFnYWluIGhlcmUuXG5cdFx0XHRcdC8vIFRoaXMgdGVjaG5pY2FsbHkgZ2V0cyB0aGUgb3JkZXJpbmcgd3Jvbmcgdy5yLnQuIHRvIGAudHJpZ2dlcigpYCAoaW4gd2hpY2ggdGhlXG5cdFx0XHRcdC8vIGJ1YmJsaW5nIHN1cnJvZ2F0ZSBwcm9wYWdhdGVzICphZnRlciogdGhlIG5vbi1idWJibGluZyBiYXNlKSwgYnV0IHRoYXQgc2VlbXNcblx0XHRcdFx0Ly8gbGVzcyBiYWQgdGhhbiBkdXBsaWNhdGlvbi5cblx0XHRcdFx0fSBlbHNlIGlmICggKCBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9ICkuZGVsZWdhdGVUeXBlICkge1xuXHRcdFx0XHRcdGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBuYXRpdmUgZXZlbnQgdHJpZ2dlcmVkIGFib3ZlLCBldmVyeXRoaW5nIGlzIG5vdyBpbiBvcmRlclxuXHRcdFx0Ly8gRmlyZSBhbiBpbm5lciBzeW50aGV0aWMgZXZlbnQgd2l0aCB0aGUgb3JpZ2luYWwgYXJndW1lbnRzXG5cdFx0XHR9IGVsc2UgaWYgKCBzYXZlZC5sZW5ndGggKSB7XG5cblx0XHRcdFx0Ly8gLi4uYW5kIGNhcHR1cmUgdGhlIHJlc3VsdFxuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIHR5cGUsIHtcblx0XHRcdFx0XHR2YWx1ZTogalF1ZXJ5LmV2ZW50LnRyaWdnZXIoXG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExK1xuXHRcdFx0XHRcdFx0Ly8gRXh0ZW5kIHdpdGggdGhlIHByb3RvdHlwZSB0byByZXNldCB0aGUgYWJvdmUgc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKClcblx0XHRcdFx0XHRcdGpRdWVyeS5leHRlbmQoIHNhdmVkWyAwIF0sIGpRdWVyeS5FdmVudC5wcm90b3R5cGUgKSxcblx0XHRcdFx0XHRcdHNhdmVkLnNsaWNlKCAxICksXG5cdFx0XHRcdFx0XHR0aGlzXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHR9ICk7XG5cblx0XHRcdFx0Ly8gQWJvcnQgaGFuZGxpbmcgb2YgdGhlIG5hdGl2ZSBldmVudFxuXHRcdFx0XHRldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gKTtcbn1cblxualF1ZXJ5LnJlbW92ZUV2ZW50ID0gZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGhhbmRsZSApIHtcblxuXHQvLyBUaGlzIFwiaWZcIiBpcyBuZWVkZWQgZm9yIHBsYWluIG9iamVjdHNcblx0aWYgKCBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyKCB0eXBlLCBoYW5kbGUgKTtcblx0fVxufTtcblxualF1ZXJ5LkV2ZW50ID0gZnVuY3Rpb24oIHNyYywgcHJvcHMgKSB7XG5cblx0Ly8gQWxsb3cgaW5zdGFudGlhdGlvbiB3aXRob3V0IHRoZSAnbmV3JyBrZXl3b3JkXG5cdGlmICggISggdGhpcyBpbnN0YW5jZW9mIGpRdWVyeS5FdmVudCApICkge1xuXHRcdHJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KCBzcmMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBFdmVudCBvYmplY3Rcblx0aWYgKCBzcmMgJiYgc3JjLnR5cGUgKSB7XG5cdFx0dGhpcy5vcmlnaW5hbEV2ZW50ID0gc3JjO1xuXHRcdHRoaXMudHlwZSA9IHNyYy50eXBlO1xuXG5cdFx0Ly8gRXZlbnRzIGJ1YmJsaW5nIHVwIHRoZSBkb2N1bWVudCBtYXkgaGF2ZSBiZWVuIG1hcmtlZCBhcyBwcmV2ZW50ZWRcblx0XHQvLyBieSBhIGhhbmRsZXIgbG93ZXIgZG93biB0aGUgdHJlZTsgcmVmbGVjdCB0aGUgY29ycmVjdCB2YWx1ZS5cblx0XHR0aGlzLmlzRGVmYXVsdFByZXZlbnRlZCA9IHNyYy5kZWZhdWx0UHJldmVudGVkIHx8XG5cdFx0XHRcdHNyYy5kZWZhdWx0UHJldmVudGVkID09PSB1bmRlZmluZWQgJiZcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHlcblx0XHRcdFx0c3JjLnJldHVyblZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRyZXR1cm5UcnVlIDpcblx0XHRcdHJldHVybkZhbHNlO1xuXG5cdFx0Ly8gQ3JlYXRlIHRhcmdldCBwcm9wZXJ0aWVzXG5cdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDw9NiAtIDcgb25seVxuXHRcdC8vIFRhcmdldCBzaG91bGQgbm90IGJlIGEgdGV4dCBub2RlICgjNTA0LCAjMTMxNDMpXG5cdFx0dGhpcy50YXJnZXQgPSAoIHNyYy50YXJnZXQgJiYgc3JjLnRhcmdldC5ub2RlVHlwZSA9PT0gMyApID9cblx0XHRcdHNyYy50YXJnZXQucGFyZW50Tm9kZSA6XG5cdFx0XHRzcmMudGFyZ2V0O1xuXG5cdFx0dGhpcy5jdXJyZW50VGFyZ2V0ID0gc3JjLmN1cnJlbnRUYXJnZXQ7XG5cdFx0dGhpcy5yZWxhdGVkVGFyZ2V0ID0gc3JjLnJlbGF0ZWRUYXJnZXQ7XG5cblx0Ly8gRXZlbnQgdHlwZVxuXHR9IGVsc2Uge1xuXHRcdHRoaXMudHlwZSA9IHNyYztcblx0fVxuXG5cdC8vIFB1dCBleHBsaWNpdGx5IHByb3ZpZGVkIHByb3BlcnRpZXMgb250byB0aGUgZXZlbnQgb2JqZWN0XG5cdGlmICggcHJvcHMgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdGhpcywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIENyZWF0ZSBhIHRpbWVzdGFtcCBpZiBpbmNvbWluZyBldmVudCBkb2Vzbid0IGhhdmUgb25lXG5cdHRoaXMudGltZVN0YW1wID0gc3JjICYmIHNyYy50aW1lU3RhbXAgfHwgRGF0ZS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjb2RlOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbmpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCB0eXBlLCBkZWxlZ2F0ZVR5cGUgKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gPSB7XG5cblx0XHQvLyBVdGlsaXplIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENsYWltIHRoZSBmaXJzdCBoYW5kbGVyXG5cdFx0XHQvLyBkYXRhUHJpdi5zZXQoIHRoaXMsIFwiZm9jdXNcIiwgLi4uIClcblx0XHRcdC8vIGRhdGFQcml2LnNldCggdGhpcywgXCJibHVyXCIsIC4uLiApXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSwgZXhwZWN0U3luYyApO1xuXG5cdFx0XHQvLyBSZXR1cm4gZmFsc2UgdG8gYWxsb3cgbm9ybWFsIHByb2Nlc3NpbmcgaW4gdGhlIGNhbGxlclxuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEZvcmNlIHNldHVwIGJlZm9yZSB0cmlnZ2VyXG5cdFx0XHRsZXZlcmFnZU5hdGl2ZSggdGhpcywgdHlwZSApO1xuXG5cdFx0XHQvLyBSZXR1cm4gbm9uLWZhbHNlIHRvIGFsbG93IG5vcm1hbCBldmVudC1wYXRoIHByb3BhZ2F0aW9uXG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0ZGVsZWdhdGVUeXBlOiBkZWxlZ2F0ZVR5cGVcblx0fTtcbn0gKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgJiYgIW5vZGUubm9Nb2R1bGUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYywge1xuXHRcdFx0XHRcdFx0XHRcdFx0bm9uY2U6IG5vZGUubm9uY2UgfHwgbm9kZS5nZXRBdHRyaWJ1dGUoIFwibm9uY2VcIiApXG5cdFx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBub2RlLCBkb2MgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGlzQXR0YWNoZWQoIG5vZGUgKSApIHtcblx0XHRcdFx0c2V0R2xvYmFsRXZhbCggZ2V0QWxsKCBub2RlLCBcInNjcmlwdFwiICkgKTtcblx0XHRcdH1cblx0XHRcdG5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggbm9kZSApO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGh0bWxQcmVmaWx0ZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHJldHVybiBodG1sLnJlcGxhY2UoIHJ4aHRtbFRhZywgXCI8JDE+PC8kMj5cIiApO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZWxlbSwgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0dmFyIGksIGwsIHNyY0VsZW1lbnRzLCBkZXN0RWxlbWVudHMsXG5cdFx0XHRjbG9uZSA9IGVsZW0uY2xvbmVOb2RlKCB0cnVlICksXG5cdFx0XHRpblBhZ2UgPSBpc0F0dGFjaGVkKCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm51bW5vbnB4ID0gbmV3IFJlZ0V4cCggXCJeKFwiICsgcG51bSArIFwiKSg/IXB4KVthLXolXSskXCIsIFwiaVwiICk7XG5cbnZhciBnZXRTdHlsZXMgPSBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seSwgRmlyZWZveCA8PTMwICgjMTUwOTgsICMxNDE1MClcblx0XHQvLyBJRSB0aHJvd3Mgb24gZWxlbWVudHMgY3JlYXRlZCBpbiBwb3B1cHNcblx0XHQvLyBGRiBtZWFud2hpbGUgdGhyb3dzIG9uIGZyYW1lIGVsZW1lbnRzIHRocm91Z2ggXCJkZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlXCJcblx0XHR2YXIgdmlldyA9IGVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztcblxuXHRcdGlmICggIXZpZXcgfHwgIXZpZXcub3BlbmVyICkge1xuXHRcdFx0dmlldyA9IHdpbmRvdztcblx0XHR9XG5cblx0XHRyZXR1cm4gdmlldy5nZXRDb21wdXRlZFN0eWxlKCBlbGVtICk7XG5cdH07XG5cbnZhciByYm94U3R5bGUgPSBuZXcgUmVnRXhwKCBjc3NFeHBhbmQuam9pbiggXCJ8XCIgKSwgXCJpXCIgKTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IFwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotMTExMTFweDt3aWR0aDo2MHB4O1wiICtcblx0XHRcdFwibWFyZ2luLXRvcDoxcHg7cGFkZGluZzowO2JvcmRlcjowXCI7XG5cdFx0ZGl2LnN0eWxlLmNzc1RleHQgPVxuXHRcdFx0XCJwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDtvdmVyZmxvdzpzY3JvbGw7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwid2lkdGg6NjAlO3RvcDoxJVwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICkuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdFx0dmFyIGRpdlN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoIGRpdiApO1xuXHRcdHBpeGVsUG9zaXRpb25WYWwgPSBkaXZTdHlsZS50b3AgIT09IFwiMSVcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIEZpcmVmb3ggPD0zIC0gNDRcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnRWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLm1hcmdpbkxlZnQgKSA9PT0gMTI7XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5LCBTYWZhcmkgPD05LjEgLSAxMC4xLCBpT1MgPD03LjAgLSA5LjNcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUucmlnaHQgPSBcIjYwJVwiO1xuXHRcdHBpeGVsQm94U3R5bGVzVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS5yaWdodCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgLSAxMSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG1pc3JlcG9ydGluZyBvZiBjb250ZW50IGRpbWVuc2lvbnMgZm9yIGJveC1zaXppbmc6Ym9yZGVyLWJveCBlbGVtZW50c1xuXHRcdGJveFNpemluZ1JlbGlhYmxlVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXZTdHlsZS53aWR0aCApID09PSAzNjtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdC8vIERldGVjdCBvdmVyZmxvdzpzY3JvbGwgc2NyZXdpbmVzcyAoZ2gtMzY5OSlcblx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD02NFxuXHRcdC8vIERvbid0IGdldCB0cmlja2VkIHdoZW4gem9vbSBhZmZlY3RzIG9mZnNldFdpZHRoIChnaC00MDI5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gcm91bmRQaXhlbE1lYXN1cmVzKCBkaXYub2Zmc2V0V2lkdGggLyAzICkgPT09IDEyO1xuXG5cdFx0ZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKCBjb250YWluZXIgKTtcblxuXHRcdC8vIE51bGxpZnkgdGhlIGRpdiBzbyBpdCB3b3VsZG4ndCBiZSBzdG9yZWQgaW4gdGhlIG1lbW9yeSBhbmRcblx0XHQvLyBpdCB3aWxsIGFsc28gYmUgYSBzaWduIHRoYXQgY2hlY2tzIGFscmVhZHkgcGVyZm9ybWVkXG5cdFx0ZGl2ID0gbnVsbDtcblx0fVxuXG5cdGZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyggbWVhc3VyZSApIHtcblx0XHRyZXR1cm4gTWF0aC5yb3VuZCggcGFyc2VGbG9hdCggbWVhc3VyZSApICk7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHNjcm9sbGJveFNpemVWYWwsIHBpeGVsQm94U3R5bGVzVmFsLFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRib3hTaXppbmdSZWxpYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIGJveFNpemluZ1JlbGlhYmxlVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxCb3hTdHlsZXM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbEJveFN0eWxlc1ZhbDtcblx0XHR9LFxuXHRcdHBpeGVsUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiBwaXhlbFBvc2l0aW9uVmFsO1xuXHRcdH0sXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcmVsaWFibGVNYXJnaW5MZWZ0VmFsO1xuXHRcdH0sXG5cdFx0c2Nyb2xsYm94U2l6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHNjcm9sbGJveFNpemVWYWw7XG5cdFx0fVxuXHR9ICk7XG59ICkoKTtcblxuXG5mdW5jdGlvbiBjdXJDU1MoIGVsZW0sIG5hbWUsIGNvbXB1dGVkICkge1xuXHR2YXIgd2lkdGgsIG1pbldpZHRoLCBtYXhXaWR0aCwgcmV0LFxuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA1MStcblx0XHQvLyBSZXRyaWV2aW5nIHN0eWxlIGJlZm9yZSBjb21wdXRlZCBzb21laG93XG5cdFx0Ly8gZml4ZXMgYW4gaXNzdWUgd2l0aCBnZXR0aW5nIHdyb25nIHZhbHVlc1xuXHRcdC8vIG9uIGRldGFjaGVkIGVsZW1lbnRzXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdGNvbXB1dGVkID0gY29tcHV0ZWQgfHwgZ2V0U3R5bGVzKCBlbGVtICk7XG5cblx0Ly8gZ2V0UHJvcGVydHlWYWx1ZSBpcyBuZWVkZWQgZm9yOlxuXHQvLyAgIC5jc3MoJ2ZpbHRlcicpIChJRSA5IG9ubHksICMxMjUzNylcblx0Ly8gICAuY3NzKCctLWN1c3RvbVByb3BlcnR5KSAoIzMxNDQpXG5cdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0cmV0ID0gY29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZSggbmFtZSApIHx8IGNvbXB1dGVkWyBuYW1lIF07XG5cblx0XHRpZiAoIHJldCA9PT0gXCJcIiAmJiAhaXNBdHRhY2hlZCggZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXIgY3NzUHJlZml4ZXMgPSBbIFwiV2Via2l0XCIsIFwiTW96XCIsIFwibXNcIiBdLFxuXHRlbXB0eVN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApLnN0eWxlLFxuXHR2ZW5kb3JQcm9wcyA9IHt9O1xuXG4vLyBSZXR1cm4gYSB2ZW5kb3ItcHJlZml4ZWQgcHJvcGVydHkgb3IgdW5kZWZpbmVkXG5mdW5jdGlvbiB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHtcblxuXHQvLyBDaGVjayBmb3IgdmVuZG9yIHByZWZpeGVkIG5hbWVzXG5cdHZhciBjYXBOYW1lID0gbmFtZVsgMCBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnNsaWNlKCAxICksXG5cdFx0aSA9IGNzc1ByZWZpeGVzLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRuYW1lID0gY3NzUHJlZml4ZXNbIGkgXSArIGNhcE5hbWU7XG5cdFx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0XHRyZXR1cm4gbmFtZTtcblx0XHR9XG5cdH1cbn1cblxuLy8gUmV0dXJuIGEgcG90ZW50aWFsbHktbWFwcGVkIGpRdWVyeS5jc3NQcm9wcyBvciB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUoIG5hbWUgKSB7XG5cdHZhciBmaW5hbCA9IGpRdWVyeS5jc3NQcm9wc1sgbmFtZSBdIHx8IHZlbmRvclByb3BzWyBuYW1lIF07XG5cblx0aWYgKCBmaW5hbCApIHtcblx0XHRyZXR1cm4gZmluYWw7XG5cdH1cblx0aWYgKCBuYW1lIGluIGVtcHR5U3R5bGUgKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblx0cmV0dXJuIHZlbmRvclByb3BzWyBuYW1lIF0gPSB2ZW5kb3JQcm9wTmFtZSggbmFtZSApIHx8IG5hbWU7XG59XG5cblxudmFyXG5cblx0Ly8gU3dhcHBhYmxlIGlmIGRpc3BsYXkgaXMgbm9uZSBvciBzdGFydHMgd2l0aCB0YWJsZVxuXHQvLyBleGNlcHQgXCJ0YWJsZVwiLCBcInRhYmxlLWNlbGxcIiwgb3IgXCJ0YWJsZS1jYXB0aW9uXCJcblx0Ly8gU2VlIGhlcmUgZm9yIGRpc3BsYXkgdmFsdWVzOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL0NTUy9kaXNwbGF5XG5cdHJkaXNwbGF5c3dhcCA9IC9eKG5vbmV8dGFibGUoPyEtY1tlYV0pLispLyxcblx0cmN1c3RvbVByb3AgPSAvXi0tLyxcblx0Y3NzU2hvdyA9IHsgcG9zaXRpb246IFwiYWJzb2x1dGVcIiwgdmlzaWJpbGl0eTogXCJoaWRkZW5cIiwgZGlzcGxheTogXCJibG9ja1wiIH0sXG5cdGNzc05vcm1hbFRyYW5zZm9ybSA9IHtcblx0XHRsZXR0ZXJTcGFjaW5nOiBcIjBcIixcblx0XHRmb250V2VpZ2h0OiBcIjQwMFwiXG5cdH07XG5cbmZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKCBlbGVtLCB2YWx1ZSwgc3VidHJhY3QgKSB7XG5cblx0Ly8gQW55IHJlbGF0aXZlICgrLy0pIHZhbHVlcyBoYXZlIGFscmVhZHkgYmVlblxuXHQvLyBub3JtYWxpemVkIGF0IHRoaXMgcG9pbnRcblx0dmFyIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICk7XG5cdHJldHVybiBtYXRjaGVzID9cblxuXHRcdC8vIEd1YXJkIGFnYWluc3QgdW5kZWZpbmVkIFwic3VidHJhY3RcIiwgZS5nLiwgd2hlbiB1c2VkIGFzIGluIGNzc0hvb2tzXG5cdFx0TWF0aC5tYXgoIDAsIG1hdGNoZXNbIDIgXSAtICggc3VidHJhY3QgfHwgMCApICkgKyAoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSA6XG5cdFx0dmFsdWU7XG59XG5cbmZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBib3gsIGlzQm9yZGVyQm94LCBzdHlsZXMsIGNvbXB1dGVkVmFsICkge1xuXHR2YXIgaSA9IGRpbWVuc2lvbiA9PT0gXCJ3aWR0aFwiID8gMSA6IDAsXG5cdFx0ZXh0cmEgPSAwLFxuXHRcdGRlbHRhID0gMDtcblxuXHQvLyBBZGp1c3RtZW50IG1heSBub3QgYmUgbmVjZXNzYXJ5XG5cdGlmICggYm94ID09PSAoIGlzQm9yZGVyQm94ID8gXCJib3JkZXJcIiA6IFwiY29udGVudFwiICkgKSB7XG5cdFx0cmV0dXJuIDA7XG5cdH1cblxuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgKSB7XG5cblx0XHQvLyBCb3RoIGJveCBtb2RlbHMgZXhjbHVkZSBtYXJnaW5cblx0XHRpZiAoIGJveCA9PT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdGRlbHRhICs9IGpRdWVyeS5jc3MoIGVsZW0sIGJveCArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgY29udGVudC1ib3gsIHdlJ3JlIHNlZWtpbmcgXCJwYWRkaW5nXCIgb3IgXCJib3JkZXJcIiBvciBcIm1hcmdpblwiXG5cdFx0aWYgKCAhaXNCb3JkZXJCb3ggKSB7XG5cblx0XHRcdC8vIEFkZCBwYWRkaW5nXG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gRm9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIiwgYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBib3ggIT09IFwicGFkZGluZ1wiICkge1xuXHRcdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXG5cdFx0XHQvLyBCdXQgc3RpbGwga2VlcCB0cmFjayBvZiBpdCBvdGhlcndpc2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4dHJhICs9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHQvLyBJZiB3ZSBnZXQgaGVyZSB3aXRoIGEgYm9yZGVyLWJveCAoY29udGVudCArIHBhZGRpbmcgKyBib3JkZXIpLCB3ZSdyZSBzZWVraW5nIFwiY29udGVudFwiIG9yXG5cdFx0Ly8gXCJwYWRkaW5nXCIgb3IgXCJtYXJnaW5cIlxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiwgc3VidHJhY3QgcGFkZGluZ1xuXHRcdFx0aWYgKCBib3ggPT09IFwiY29udGVudFwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yIFwiY29udGVudFwiIG9yIFwicGFkZGluZ1wiLCBzdWJ0cmFjdCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcIm1hcmdpblwiICkge1xuXHRcdFx0XHRkZWx0YSAtPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIEFjY291bnQgZm9yIHBvc2l0aXZlIGNvbnRlbnQtYm94IHNjcm9sbCBndXR0ZXIgd2hlbiByZXF1ZXN0ZWQgYnkgcHJvdmlkaW5nIGNvbXB1dGVkVmFsXG5cdGlmICggIWlzQm9yZGVyQm94ICYmIGNvbXB1dGVkVmFsID49IDAgKSB7XG5cblx0XHQvLyBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgYSByb3VuZGVkIHN1bSBvZiBjb250ZW50LCBwYWRkaW5nLCBzY3JvbGwgZ3V0dGVyLCBhbmQgYm9yZGVyXG5cdFx0Ly8gQXNzdW1pbmcgaW50ZWdlciBzY3JvbGwgZ3V0dGVyLCBzdWJ0cmFjdCB0aGUgcmVzdCBhbmQgcm91bmQgZG93blxuXHRcdGRlbHRhICs9IE1hdGgubWF4KCAwLCBNYXRoLmNlaWwoXG5cdFx0XHRlbGVtWyBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApIF0gLVxuXHRcdFx0Y29tcHV0ZWRWYWwgLVxuXHRcdFx0ZGVsdGEgLVxuXHRcdFx0ZXh0cmEgLVxuXHRcdFx0MC41XG5cblx0XHQvLyBJZiBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgaXMgdW5rbm93biwgdGhlbiB3ZSBjYW4ndCBkZXRlcm1pbmUgY29udGVudC1ib3ggc2Nyb2xsIGd1dHRlclxuXHRcdC8vIFVzZSBhbiBleHBsaWNpdCB6ZXJvIHRvIGF2b2lkIE5hTiAoZ2gtMzk2NClcblx0XHQpICkgfHwgMDtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTQzMjIpLlxuXHRcdC8vIEZha2UgY29udGVudC1ib3ggdW50aWwgd2Uga25vdyBpdCdzIG5lZWRlZCB0byBrbm93IHRoZSB0cnVlIHZhbHVlLlxuXHRcdGJveFNpemluZ05lZWRlZCA9ICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgZXh0cmEsXG5cdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCIsXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94LFxuXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBkaW1lbnNpb24sIHN0eWxlcyApLFxuXHRcdG9mZnNldFByb3AgPSBcIm9mZnNldFwiICsgZGltZW5zaW9uWyAwIF0udG9VcHBlckNhc2UoKSArIGRpbWVuc2lvbi5zbGljZSggMSApO1xuXG5cdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD01NFxuXHQvLyBSZXR1cm4gYSBjb25mb3VuZGluZyBub24tcGl4ZWwgdmFsdWUgb3IgZmVpZ24gaWdub3JhbmNlLCBhcyBhcHByb3ByaWF0ZS5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0aWYgKCAhZXh0cmEgKSB7XG5cdFx0XHRyZXR1cm4gdmFsO1xuXHRcdH1cblx0XHR2YWwgPSBcImF1dG9cIjtcblx0fVxuXG5cblx0Ly8gRmFsbCBiYWNrIHRvIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCB3aGVuIHZhbHVlIGlzIFwiYXV0b1wiXG5cdC8vIFRoaXMgaGFwcGVucyBmb3IgaW5saW5lIGVsZW1lbnRzIHdpdGggbm8gZXhwbGljaXQgc2V0dGluZyAoZ2gtMzU3MSlcblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMSAtIDQuMyBvbmx5XG5cdC8vIEFsc28gdXNlIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBmb3IgbWlzcmVwb3J0ZWQgaW5saW5lIGRpbWVuc2lvbnMgKGdoLTM2MDIpXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIHdoZW4gYm94IHNpemluZyBpcyB1bnJlbGlhYmxlXG5cdC8vIFdlIHVzZSBnZXRDbGllbnRSZWN0cygpIHRvIGNoZWNrIGZvciBoaWRkZW4vZGlzY29ubmVjdGVkLlxuXHQvLyBJbiB0aG9zZSBjYXNlcywgdGhlIGNvbXB1dGVkIHZhbHVlIGNhbiBiZSB0cnVzdGVkIHRvIGJlIGJvcmRlci1ib3hcblx0aWYgKCAoICFzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgJiYgaXNCb3JkZXJCb3ggfHxcblx0XHR2YWwgPT09IFwiYXV0b1wiIHx8XG5cdFx0IXBhcnNlRmxvYXQoIHZhbCApICYmIGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiaW5saW5lXCIgKSAmJlxuXHRcdGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0XHQvLyBXaGVyZSBhdmFpbGFibGUsIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBhcHByb3hpbWF0ZSBib3JkZXIgYm94IGRpbWVuc2lvbnMuXG5cdFx0Ly8gV2hlcmUgbm90IGF2YWlsYWJsZSAoZS5nLiwgU1ZHKSwgYXNzdW1lIHVucmVsaWFibGUgYm94LXNpemluZyBhbmQgaW50ZXJwcmV0IHRoZVxuXHRcdC8vIHJldHJpZXZlZCB2YWx1ZSBhcyBhIGNvbnRlbnQgYm94IGRpbWVuc2lvbi5cblx0XHR2YWx1ZUlzQm9yZGVyQm94ID0gb2Zmc2V0UHJvcCBpbiBlbGVtO1xuXHRcdGlmICggdmFsdWVJc0JvcmRlckJveCApIHtcblx0XHRcdHZhbCA9IGVsZW1bIG9mZnNldFByb3AgXTtcblx0XHR9XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwiZ3JpZEFyZWFcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5cIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5FbmRcIjogdHJ1ZSxcblx0XHRcImdyaWRDb2x1bW5TdGFydFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1wiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd0VuZFwiOiB0cnVlLFxuXHRcdFwiZ3JpZFJvd1N0YXJ0XCI6IHRydWUsXG5cdFx0XCJsaW5lSGVpZ2h0XCI6IHRydWUsXG5cdFx0XCJvcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJvcmRlclwiOiB0cnVlLFxuXHRcdFwib3JwaGFuc1wiOiB0cnVlLFxuXHRcdFwid2lkb3dzXCI6IHRydWUsXG5cdFx0XCJ6SW5kZXhcIjogdHJ1ZSxcblx0XHRcInpvb21cIjogdHJ1ZVxuXHR9LFxuXG5cdC8vIEFkZCBpbiBwcm9wZXJ0aWVzIHdob3NlIG5hbWVzIHlvdSB3aXNoIHRvIGZpeCBiZWZvcmVcblx0Ly8gc2V0dGluZyBvciBnZXR0aW5nIHRoZSB2YWx1ZVxuXHRjc3NQcm9wczoge30sXG5cblx0Ly8gR2V0IGFuZCBzZXQgdGhlIHN0eWxlIHByb3BlcnR5IG9uIGEgRE9NIE5vZGVcblx0c3R5bGU6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgZXh0cmEgKSB7XG5cblx0XHQvLyBEb24ndCBzZXQgc3R5bGVzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoICFlbGVtIHx8IGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCB8fCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWVcblx0XHR2YXIgcmV0LCB0eXBlLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICksXG5cdFx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBxdWVyeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIEdldHMgaG9vayBmb3IgdGhlIHByZWZpeGVkIHZlcnNpb24sIHRoZW4gdW5wcmVmaXhlZCB2ZXJzaW9uXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBDaGVjayBpZiB3ZSdyZSBzZXR0aW5nIGEgdmFsdWVcblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR0eXBlID0gdHlwZW9mIHZhbHVlO1xuXG5cdFx0XHQvLyBDb252ZXJ0IFwiKz1cIiBvciBcIi09XCIgdG8gcmVsYXRpdmUgbnVtYmVycyAoIzczNDUpXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgJiYgKCByZXQgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJiByZXRbIDEgXSApIHtcblx0XHRcdFx0dmFsdWUgPSBhZGp1c3RDU1MoIGVsZW0sIG5hbWUsIHJldCApO1xuXG5cdFx0XHRcdC8vIEZpeGVzIGJ1ZyAjOTIzN1xuXHRcdFx0XHR0eXBlID0gXCJudW1iZXJcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbnVsbCBhbmQgTmFOIHZhbHVlcyBhcmVuJ3Qgc2V0ICgjNzExNilcblx0XHRcdGlmICggdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSAhPT0gdmFsdWUgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBudW1iZXIgd2FzIHBhc3NlZCBpbiwgYWRkIHRoZSB1bml0IChleGNlcHQgZm9yIGNlcnRhaW4gQ1NTIHByb3BlcnRpZXMpXG5cdFx0XHQvLyBUaGUgaXNDdXN0b21Qcm9wIGNoZWNrIGNhbiBiZSByZW1vdmVkIGluIGpRdWVyeSA0LjAgd2hlbiB3ZSBvbmx5IGF1dG8tYXBwZW5kXG5cdFx0XHQvLyBcInB4XCIgdG8gYSBmZXcgaGFyZGNvZGVkIHZhbHVlcy5cblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiAmJiAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblxuXHRcdFx0XHQvLyBPbmx5IHJlYWQgc3R5bGVzLnBvc2l0aW9uIGlmIHRoZSB0ZXN0IGhhcyBhIGNoYW5jZSB0byBmYWlsXG5cdFx0XHRcdC8vIHRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3cuXG5cdFx0XHRcdHNjcm9sbGJveFNpemVCdWdneSA9ICFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSAmJlxuXHRcdFx0XHRcdHN0eWxlcy5wb3NpdGlvbiA9PT0gXCJhYnNvbHV0ZVwiLFxuXG5cdFx0XHRcdC8vIFRvIGF2b2lkIGZvcmNpbmcgYSByZWZsb3csIG9ubHkgZmV0Y2ggYm94U2l6aW5nIGlmIHdlIG5lZWQgaXQgKGdoLTM5OTEpXG5cdFx0XHRcdGJveFNpemluZ05lZWRlZCA9IHNjcm9sbGJveFNpemVCdWdneSB8fCBleHRyYSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBib3hTaXppbmdOZWVkZWQgJiZcblx0XHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhID9cblx0XHRcdFx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRcdHN0eWxlc1xuXHRcdFx0XHRcdCkgOlxuXHRcdFx0XHRcdDA7XG5cblx0XHRcdC8vIEFjY291bnQgZm9yIHVucmVsaWFibGUgYm9yZGVyLWJveCBkaW1lbnNpb25zIGJ5IGNvbXBhcmluZyBvZmZzZXQqIHRvIGNvbXB1dGVkIGFuZFxuXHRcdFx0Ly8gZmFraW5nIGEgY29udGVudC1ib3ggdG8gZ2V0IGJvcmRlciBhbmQgcGFkZGluZyAoZ2gtMzY5OSlcblx0XHRcdGlmICggaXNCb3JkZXJCb3ggJiYgc2Nyb2xsYm94U2l6ZUJ1Z2d5ICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdIHx8XG5cdFx0XHRcdFx0dHdlZW4uZWxlbS5zdHlsZVsgZmluYWxQcm9wTmFtZSggdHdlZW4ucHJvcCApIF0gIT0gbnVsbCApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0gRGF0ZS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0aWYgKCBhID09IG51bGwgKSB7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvLyBJZiBhbiBhcnJheSB3YXMgcGFzc2VkIGluLCBhc3N1bWUgdGhhdCBpdCBpcyBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzLlxuXHRpZiAoIEFycmF5LmlzQXJyYXkoIGEgKSB8fCAoIGEuanF1ZXJ5ICYmICFqUXVlcnkuaXNQbGFpbk9iamVjdCggYSApICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgdGhlIGZvcm0gZWxlbWVudHNcblx0XHRqUXVlcnkuZWFjaCggYSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRhZGQoIHRoaXMubmFtZSwgdGhpcy52YWx1ZSApO1xuXHRcdH0gKTtcblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gSWYgdHJhZGl0aW9uYWwsIGVuY29kZSB0aGUgXCJvbGRcIiB3YXkgKHRoZSB3YXkgMS4zLjIgb3Igb2xkZXJcblx0XHQvLyBkaWQgaXQpLCBvdGhlcndpc2UgZW5jb2RlIHBhcmFtcyByZWN1cnNpdmVseS5cblx0XHRmb3IgKCBwcmVmaXggaW4gYSApIHtcblx0XHRcdGJ1aWxkUGFyYW1zKCBwcmVmaXgsIGFbIHByZWZpeCBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmV0dXJuIHRoZSByZXN1bHRpbmcgc2VyaWFsaXphdGlvblxuXHRyZXR1cm4gcy5qb2luKCBcIiZcIiApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzZXJpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBqUXVlcnkucGFyYW0oIHRoaXMuc2VyaWFsaXplQXJyYXkoKSApO1xuXHR9LFxuXHRzZXJpYWxpemVBcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gQ2FuIGFkZCBwcm9wSG9vayBmb3IgXCJlbGVtZW50c1wiIHRvIGZpbHRlciBvciBhZGQgZm9ybSBlbGVtZW50c1xuXHRcdFx0dmFyIGVsZW1lbnRzID0galF1ZXJ5LnByb3AoIHRoaXMsIFwiZWxlbWVudHNcIiApO1xuXHRcdFx0cmV0dXJuIGVsZW1lbnRzID8galF1ZXJ5Lm1ha2VBcnJheSggZWxlbWVudHMgKSA6IHRoaXM7XG5cdFx0fSApXG5cdFx0LmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgdHlwZSA9IHRoaXMudHlwZTtcblxuXHRcdFx0Ly8gVXNlIC5pcyggXCI6ZGlzYWJsZWRcIiApIHNvIHRoYXQgZmllbGRzZXRbZGlzYWJsZWRdIHdvcmtzXG5cdFx0XHRyZXR1cm4gdGhpcy5uYW1lICYmICFqUXVlcnkoIHRoaXMgKS5pcyggXCI6ZGlzYWJsZWRcIiApICYmXG5cdFx0XHRcdHJzdWJtaXR0YWJsZS50ZXN0KCB0aGlzLm5vZGVOYW1lICkgJiYgIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KCB0eXBlICkgJiZcblx0XHRcdFx0KCB0aGlzLmNoZWNrZWQgfHwgIXJjaGVja2FibGVUeXBlLnRlc3QoIHR5cGUgKSApO1xuXHRcdH0gKVxuXHRcdC5tYXAoIGZ1bmN0aW9uKCBpLCBlbGVtICkge1xuXHRcdFx0dmFyIHZhbCA9IGpRdWVyeSggdGhpcyApLnZhbCgpO1xuXG5cdFx0XHRpZiAoIHZhbCA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0cmV0dXJuIGpRdWVyeS5tYXAoIHZhbCwgZnVuY3Rpb24oIHZhbCApIHtcblx0XHRcdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB7IG5hbWU6IGVsZW0ubmFtZSwgdmFsdWU6IHZhbC5yZXBsYWNlKCByQ1JMRiwgXCJcXHJcXG5cIiApIH07XG5cdFx0fSApLmdldCgpO1xuXHR9XG59ICk7XG5cblxudmFyXG5cdHIyMCA9IC8lMjAvZyxcblx0cmhhc2ggPSAvIy4qJC8sXG5cdHJhbnRpQ2FjaGUgPSAvKFs/Jl0pXz1bXiZdKi8sXG5cdHJoZWFkZXJzID0gL14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9tZyxcblxuXHQvLyAjNzY1MywgIzgxMjUsICM4MTUyOiBsb2NhbCBwcm90b2NvbCBkZXRlY3Rpb25cblx0cmxvY2FsUHJvdG9jb2wgPSAvXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxcblx0cm5vQ29udGVudCA9IC9eKD86R0VUfEhFQUQpJC8sXG5cdHJwcm90b2NvbCA9IC9eXFwvXFwvLyxcblxuXHQvKiBQcmVmaWx0ZXJzXG5cdCAqIDEpIFRoZXkgYXJlIHVzZWZ1bCB0byBpbnRyb2R1Y2UgY3VzdG9tIGRhdGFUeXBlcyAoc2VlIGFqYXgvanNvbnAuanMgZm9yIGFuIGV4YW1wbGUpXG5cdCAqIDIpIFRoZXNlIGFyZSBjYWxsZWQ6XG5cdCAqICAgIC0gQkVGT1JFIGFza2luZyBmb3IgYSB0cmFuc3BvcnRcblx0ICogICAgLSBBRlRFUiBwYXJhbSBzZXJpYWxpemF0aW9uIChzLmRhdGEgaXMgYSBzdHJpbmcgaWYgcy5wcm9jZXNzRGF0YSBpcyB0cnVlKVxuXHQgKiAzKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDQpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogNSkgZXhlY3V0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gY29udGludWUgZG93biB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHByZWZpbHRlcnMgPSB7fSxcblxuXHQvKiBUcmFuc3BvcnRzIGJpbmRpbmdzXG5cdCAqIDEpIGtleSBpcyB0aGUgZGF0YVR5cGVcblx0ICogMikgdGhlIGNhdGNoYWxsIHN5bWJvbCBcIipcIiBjYW4gYmUgdXNlZFxuXHQgKiAzKSBzZWxlY3Rpb24gd2lsbCBzdGFydCB3aXRoIHRyYW5zcG9ydCBkYXRhVHlwZSBhbmQgVEhFTiBnbyB0byBcIipcIiBpZiBuZWVkZWRcblx0ICovXG5cdHRyYW5zcG9ydHMgPSB7fSxcblxuXHQvLyBBdm9pZCBjb21tZW50LXByb2xvZyBjaGFyIHNlcXVlbmNlICgjMTAwOTgpOyBtdXN0IGFwcGVhc2UgbGludCBhbmQgZXZhZGUgY29tcHJlc3Npb25cblx0YWxsVHlwZXMgPSBcIiovXCIuY29uY2F0KCBcIipcIiApLFxuXG5cdC8vIEFuY2hvciB0YWcgZm9yIHBhcnNpbmcgdGhlIGRvY3VtZW50IG9yaWdpblxuXHRvcmlnaW5BbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXHRvcmlnaW5BbmNob3IuaHJlZiA9IGxvY2F0aW9uLmhyZWY7XG5cbi8vIEJhc2UgXCJjb25zdHJ1Y3RvclwiIGZvciBqUXVlcnkuYWpheFByZWZpbHRlciBhbmQgalF1ZXJ5LmFqYXhUcmFuc3BvcnRcbmZ1bmN0aW9uIGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlICkge1xuXG5cdC8vIGRhdGFUeXBlRXhwcmVzc2lvbiBpcyBvcHRpb25hbCBhbmQgZGVmYXVsdHMgdG8gXCIqXCJcblx0cmV0dXJuIGZ1bmN0aW9uKCBkYXRhVHlwZUV4cHJlc3Npb24sIGZ1bmMgKSB7XG5cblx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24gIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRmdW5jID0gZGF0YVR5cGVFeHByZXNzaW9uO1xuXHRcdFx0ZGF0YVR5cGVFeHByZXNzaW9uID0gXCIqXCI7XG5cdFx0fVxuXG5cdFx0dmFyIGRhdGFUeXBlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRkYXRhVHlwZXMgPSBkYXRhVHlwZUV4cHJlc3Npb24udG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBmdW5jICkgKSB7XG5cblx0XHRcdC8vIEZvciBlYWNoIGRhdGFUeXBlIGluIHRoZSBkYXRhVHlwZUV4cHJlc3Npb25cblx0XHRcdHdoaWxlICggKCBkYXRhVHlwZSA9IGRhdGFUeXBlc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHQvLyBQcmVwZW5kIGlmIHJlcXVlc3RlZFxuXHRcdFx0XHRpZiAoIGRhdGFUeXBlWyAwIF0gPT09IFwiK1wiICkge1xuXHRcdFx0XHRcdGRhdGFUeXBlID0gZGF0YVR5cGUuc2xpY2UoIDEgKSB8fCBcIipcIjtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnVuc2hpZnQoIGZ1bmMgKTtcblxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYXBwZW5kXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS5wdXNoKCBmdW5jICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbi8vIEJhc2UgaW5zcGVjdGlvbiBmdW5jdGlvbiBmb3IgcHJlZmlsdGVycyBhbmQgdHJhbnNwb3J0c1xuZnVuY3Rpb24gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSwgb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApIHtcblxuXHR2YXIgaW5zcGVjdGVkID0ge30sXG5cdFx0c2Vla2luZ1RyYW5zcG9ydCA9ICggc3RydWN0dXJlID09PSB0cmFuc3BvcnRzICk7XG5cblx0ZnVuY3Rpb24gaW5zcGVjdCggZGF0YVR5cGUgKSB7XG5cdFx0dmFyIHNlbGVjdGVkO1xuXHRcdGluc3BlY3RlZFsgZGF0YVR5cGUgXSA9IHRydWU7XG5cdFx0alF1ZXJ5LmVhY2goIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSwgZnVuY3Rpb24oIF8sIHByZWZpbHRlck9yRmFjdG9yeSApIHtcblx0XHRcdHZhciBkYXRhVHlwZU9yVHJhbnNwb3J0ID0gcHJlZmlsdGVyT3JGYWN0b3J5KCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICk7XG5cdFx0XHRpZiAoIHR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0ID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzZWVraW5nVHJhbnNwb3J0ICYmICFpbnNwZWN0ZWRbIGRhdGFUeXBlT3JUcmFuc3BvcnQgXSApIHtcblxuXHRcdFx0XHRvcHRpb25zLmRhdGFUeXBlcy51bnNoaWZ0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdGluc3BlY3QoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0fSBlbHNlIGlmICggc2Vla2luZ1RyYW5zcG9ydCApIHtcblx0XHRcdFx0cmV0dXJuICEoIHNlbGVjdGVkID0gZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0XHRyZXR1cm4gc2VsZWN0ZWQ7XG5cdH1cblxuXHRyZXR1cm4gaW5zcGVjdCggb3B0aW9ucy5kYXRhVHlwZXNbIDAgXSApIHx8ICFpbnNwZWN0ZWRbIFwiKlwiIF0gJiYgaW5zcGVjdCggXCIqXCIgKTtcbn1cblxuLy8gQSBzcGVjaWFsIGV4dGVuZCBmb3IgYWpheCBvcHRpb25zXG4vLyB0aGF0IHRha2VzIFwiZmxhdFwiIG9wdGlvbnMgKG5vdCB0byBiZSBkZWVwIGV4dGVuZGVkKVxuLy8gRml4ZXMgIzk4ODdcbmZ1bmN0aW9uIGFqYXhFeHRlbmQoIHRhcmdldCwgc3JjICkge1xuXHR2YXIga2V5LCBkZWVwLFxuXHRcdGZsYXRPcHRpb25zID0galF1ZXJ5LmFqYXhTZXR0aW5ncy5mbGF0T3B0aW9ucyB8fCB7fTtcblxuXHRmb3IgKCBrZXkgaW4gc3JjICkge1xuXHRcdGlmICggc3JjWyBrZXkgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0KCBmbGF0T3B0aW9uc1sga2V5IF0gPyB0YXJnZXQgOiAoIGRlZXAgfHwgKCBkZWVwID0ge30gKSApIClbIGtleSBdID0gc3JjWyBrZXkgXTtcblx0XHR9XG5cdH1cblx0aWYgKCBkZWVwICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRydWUsIHRhcmdldCwgZGVlcCApO1xuXHR9XG5cblx0cmV0dXJuIHRhcmdldDtcbn1cblxuLyogSGFuZGxlcyByZXNwb25zZXMgdG8gYW4gYWpheCByZXF1ZXN0OlxuICogLSBmaW5kcyB0aGUgcmlnaHQgZGF0YVR5cGUgKG1lZGlhdGVzIGJldHdlZW4gY29udGVudC10eXBlIGFuZCBleHBlY3RlZCBkYXRhVHlwZSlcbiAqIC0gcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuICovXG5mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICkge1xuXG5cdHZhciBjdCwgdHlwZSwgZmluYWxEYXRhVHlwZSwgZmlyc3REYXRhVHlwZSxcblx0XHRjb250ZW50cyA9IHMuY29udGVudHMsXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXM7XG5cblx0Ly8gUmVtb3ZlIGF1dG8gZGF0YVR5cGUgYW5kIGdldCBjb250ZW50LXR5cGUgaW4gdGhlIHByb2Nlc3Ncblx0d2hpbGUgKCBkYXRhVHlwZXNbIDAgXSA9PT0gXCIqXCIgKSB7XG5cdFx0ZGF0YVR5cGVzLnNoaWZ0KCk7XG5cdFx0aWYgKCBjdCA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0Y3QgPSBzLm1pbWVUeXBlIHx8IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkNvbnRlbnQtVHlwZVwiICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgd2UncmUgZGVhbGluZyB3aXRoIGEga25vd24gY29udGVudC10eXBlXG5cdGlmICggY3QgKSB7XG5cdFx0Zm9yICggdHlwZSBpbiBjb250ZW50cyApIHtcblx0XHRcdGlmICggY29udGVudHNbIHR5cGUgXSAmJiBjb250ZW50c1sgdHlwZSBdLnRlc3QoIGN0ICkgKSB7XG5cdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0eXBlICk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGEgcmVzcG9uc2UgZm9yIHRoZSBleHBlY3RlZCBkYXRhVHlwZVxuXHRpZiAoIGRhdGFUeXBlc1sgMCBdIGluIHJlc3BvbnNlcyApIHtcblx0XHRmaW5hbERhdGFUeXBlID0gZGF0YVR5cGVzWyAwIF07XG5cdH0gZWxzZSB7XG5cblx0XHQvLyBUcnkgY29udmVydGlibGUgZGF0YVR5cGVzXG5cdFx0Zm9yICggdHlwZSBpbiByZXNwb25zZXMgKSB7XG5cdFx0XHRpZiAoICFkYXRhVHlwZXNbIDAgXSB8fCBzLmNvbnZlcnRlcnNbIHR5cGUgKyBcIiBcIiArIGRhdGFUeXBlc1sgMCBdIF0gKSB7XG5cdFx0XHRcdGZpbmFsRGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggIWZpcnN0RGF0YVR5cGUgKSB7XG5cdFx0XHRcdGZpcnN0RGF0YVR5cGUgPSB0eXBlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE9yIGp1c3QgdXNlIGZpcnN0IG9uZVxuXHRcdGZpbmFsRGF0YVR5cGUgPSBmaW5hbERhdGFUeXBlIHx8IGZpcnN0RGF0YVR5cGU7XG5cdH1cblxuXHQvLyBJZiB3ZSBmb3VuZCBhIGRhdGFUeXBlXG5cdC8vIFdlIGFkZCB0aGUgZGF0YVR5cGUgdG8gdGhlIGxpc3QgaWYgbmVlZGVkXG5cdC8vIGFuZCByZXR1cm4gdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2Vcblx0aWYgKCBmaW5hbERhdGFUeXBlICkge1xuXHRcdGlmICggZmluYWxEYXRhVHlwZSAhPT0gZGF0YVR5cGVzWyAwIF0gKSB7XG5cdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggZmluYWxEYXRhVHlwZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gcmVzcG9uc2VzWyBmaW5hbERhdGFUeXBlIF07XG5cdH1cbn1cblxuLyogQ2hhaW4gY29udmVyc2lvbnMgZ2l2ZW4gdGhlIHJlcXVlc3QgYW5kIHRoZSBvcmlnaW5hbCByZXNwb25zZVxuICogQWxzbyBzZXRzIHRoZSByZXNwb25zZVhYWCBmaWVsZHMgb24gdGhlIGpxWEhSIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhDb252ZXJ0KCBzLCByZXNwb25zZSwganFYSFIsIGlzU3VjY2VzcyApIHtcblx0dmFyIGNvbnYyLCBjdXJyZW50LCBjb252LCB0bXAsIHByZXYsXG5cdFx0Y29udmVydGVycyA9IHt9LFxuXG5cdFx0Ly8gV29yayB3aXRoIGEgY29weSBvZiBkYXRhVHlwZXMgaW4gY2FzZSB3ZSBuZWVkIHRvIG1vZGlmeSBpdCBmb3IgY29udmVyc2lvblxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzLnNsaWNlKCk7XG5cblx0Ly8gQ3JlYXRlIGNvbnZlcnRlcnMgbWFwIHdpdGggbG93ZXJjYXNlZCBrZXlzXG5cdGlmICggZGF0YVR5cGVzWyAxIF0gKSB7XG5cdFx0Zm9yICggY29udiBpbiBzLmNvbnZlcnRlcnMgKSB7XG5cdFx0XHRjb252ZXJ0ZXJzWyBjb252LnRvTG93ZXJDYXNlKCkgXSA9IHMuY29udmVydGVyc1sgY29udiBdO1xuXHRcdH1cblx0fVxuXG5cdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHQvLyBDb252ZXJ0IHRvIGVhY2ggc2VxdWVudGlhbCBkYXRhVHlwZVxuXHR3aGlsZSAoIGN1cnJlbnQgKSB7XG5cblx0XHRpZiAoIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSApIHtcblx0XHRcdGpxWEhSWyBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gXSA9IHJlc3BvbnNlO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHRoZSBkYXRhRmlsdGVyIGlmIHByb3ZpZGVkXG5cdFx0aWYgKCAhcHJldiAmJiBpc1N1Y2Nlc3MgJiYgcy5kYXRhRmlsdGVyICkge1xuXHRcdFx0cmVzcG9uc2UgPSBzLmRhdGFGaWx0ZXIoIHJlc3BvbnNlLCBzLmRhdGFUeXBlICk7XG5cdFx0fVxuXG5cdFx0cHJldiA9IGN1cnJlbnQ7XG5cdFx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdFx0aWYgKCBjdXJyZW50ICkge1xuXG5cdFx0XHQvLyBUaGVyZSdzIG9ubHkgd29yayB0byBkbyBpZiBjdXJyZW50IGRhdGFUeXBlIGlzIG5vbi1hdXRvXG5cdFx0XHRpZiAoIGN1cnJlbnQgPT09IFwiKlwiICkge1xuXG5cdFx0XHRcdGN1cnJlbnQgPSBwcmV2O1xuXG5cdFx0XHQvLyBDb252ZXJ0IHJlc3BvbnNlIGlmIHByZXYgZGF0YVR5cGUgaXMgbm9uLWF1dG8gYW5kIGRpZmZlcnMgZnJvbSBjdXJyZW50XG5cdFx0XHR9IGVsc2UgaWYgKCBwcmV2ICE9PSBcIipcIiAmJiBwcmV2ICE9PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdC8vIFNlZWsgYSBkaXJlY3QgY29udmVydGVyXG5cdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyBjdXJyZW50IF0gfHwgY29udmVydGVyc1sgXCIqIFwiICsgY3VycmVudCBdO1xuXG5cdFx0XHRcdC8vIElmIG5vbmUgZm91bmQsIHNlZWsgYSBwYWlyXG5cdFx0XHRcdGlmICggIWNvbnYgKSB7XG5cdFx0XHRcdFx0Zm9yICggY29udjIgaW4gY29udmVydGVycyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSWYgY29udjIgb3V0cHV0cyBjdXJyZW50XG5cdFx0XHRcdFx0XHR0bXAgPSBjb252Mi5zcGxpdCggXCIgXCIgKTtcblx0XHRcdFx0XHRcdGlmICggdG1wWyAxIF0gPT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gSWYgcHJldiBjYW4gYmUgY29udmVydGVkIHRvIGFjY2VwdGVkIGlucHV0XG5cdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBwcmV2ICsgXCIgXCIgKyB0bXBbIDAgXSBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0Y29udmVydGVyc1sgXCIqIFwiICsgdG1wWyAwIF0gXTtcblx0XHRcdFx0XHRcdFx0aWYgKCBjb252ICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gQ29uZGVuc2UgZXF1aXZhbGVuY2UgY29udmVydGVyc1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY29udiA9PT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnYgPSBjb252ZXJ0ZXJzWyBjb252MiBdO1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBpbnNlcnQgdGhlIGludGVybWVkaWF0ZSBkYXRhVHlwZVxuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIGNvbnZlcnRlcnNbIGNvbnYyIF0gIT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjdXJyZW50ID0gdG1wWyAwIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdG1wWyAxIF0gKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBBcHBseSBjb252ZXJ0ZXIgKGlmIG5vdCBhbiBlcXVpdmFsZW5jZSlcblx0XHRcdFx0aWYgKCBjb252ICE9PSB0cnVlICkge1xuXG5cdFx0XHRcdFx0Ly8gVW5sZXNzIGVycm9ycyBhcmUgYWxsb3dlZCB0byBidWJibGUsIGNhdGNoIGFuZCByZXR1cm4gdGhlbVxuXHRcdFx0XHRcdGlmICggY29udiAmJiBzLnRocm93cyApIHtcblx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdGU6IFwicGFyc2VyZXJyb3JcIixcblx0XHRcdFx0XHRcdFx0XHRlcnJvcjogY29udiA/IGUgOiBcIk5vIGNvbnZlcnNpb24gZnJvbSBcIiArIHByZXYgKyBcIiB0byBcIiArIGN1cnJlbnRcblx0XHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4geyBzdGF0ZTogXCJzdWNjZXNzXCIsIGRhdGE6IHJlc3BvbnNlIH07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBDb3VudGVyIGZvciBob2xkaW5nIHRoZSBudW1iZXIgb2YgYWN0aXZlIHF1ZXJpZXNcblx0YWN0aXZlOiAwLFxuXG5cdC8vIExhc3QtTW9kaWZpZWQgaGVhZGVyIGNhY2hlIGZvciBuZXh0IHJlcXVlc3Rcblx0bGFzdE1vZGlmaWVkOiB7fSxcblx0ZXRhZzoge30sXG5cblx0YWpheFNldHRpbmdzOiB7XG5cdFx0dXJsOiBsb2NhdGlvbi5ocmVmLFxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0aXNMb2NhbDogcmxvY2FsUHJvdG9jb2wudGVzdCggbG9jYXRpb24ucHJvdG9jb2wgKSxcblx0XHRnbG9iYWw6IHRydWUsXG5cdFx0cHJvY2Vzc0RhdGE6IHRydWUsXG5cdFx0YXN5bmM6IHRydWUsXG5cdFx0Y29udGVudFR5cGU6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkOyBjaGFyc2V0PVVURi04XCIsXG5cblx0XHQvKlxuXHRcdHRpbWVvdXQ6IDAsXG5cdFx0ZGF0YTogbnVsbCxcblx0XHRkYXRhVHlwZTogbnVsbCxcblx0XHR1c2VybmFtZTogbnVsbCxcblx0XHRwYXNzd29yZDogbnVsbCxcblx0XHRjYWNoZTogbnVsbCxcblx0XHR0aHJvd3M6IGZhbHNlLFxuXHRcdHRyYWRpdGlvbmFsOiBmYWxzZSxcblx0XHRoZWFkZXJzOiB7fSxcblx0XHQqL1xuXG5cdFx0YWNjZXB0czoge1xuXHRcdFx0XCIqXCI6IGFsbFR5cGVzLFxuXHRcdFx0dGV4dDogXCJ0ZXh0L3BsYWluXCIsXG5cdFx0XHRodG1sOiBcInRleHQvaHRtbFwiLFxuXHRcdFx0eG1sOiBcImFwcGxpY2F0aW9uL3htbCwgdGV4dC94bWxcIixcblx0XHRcdGpzb246IFwiYXBwbGljYXRpb24vanNvbiwgdGV4dC9qYXZhc2NyaXB0XCJcblx0XHR9LFxuXG5cdFx0Y29udGVudHM6IHtcblx0XHRcdHhtbDogL1xcYnhtbFxcYi8sXG5cdFx0XHRodG1sOiAvXFxiaHRtbC8sXG5cdFx0XHRqc29uOiAvXFxianNvblxcYi9cblx0XHR9LFxuXG5cdFx0cmVzcG9uc2VGaWVsZHM6IHtcblx0XHRcdHhtbDogXCJyZXNwb25zZVhNTFwiLFxuXHRcdFx0dGV4dDogXCJyZXNwb25zZVRleHRcIixcblx0XHRcdGpzb246IFwicmVzcG9uc2VKU09OXCJcblx0XHR9LFxuXG5cdFx0Ly8gRGF0YSBjb252ZXJ0ZXJzXG5cdFx0Ly8gS2V5cyBzZXBhcmF0ZSBzb3VyY2UgKG9yIGNhdGNoYWxsIFwiKlwiKSBhbmQgZGVzdGluYXRpb24gdHlwZXMgd2l0aCBhIHNpbmdsZSBzcGFjZVxuXHRcdGNvbnZlcnRlcnM6IHtcblxuXHRcdFx0Ly8gQ29udmVydCBhbnl0aGluZyB0byB0ZXh0XG5cdFx0XHRcIiogdGV4dFwiOiBTdHJpbmcsXG5cblx0XHRcdC8vIFRleHQgdG8gaHRtbCAodHJ1ZSA9IG5vIHRyYW5zZm9ybWF0aW9uKVxuXHRcdFx0XCJ0ZXh0IGh0bWxcIjogdHJ1ZSxcblxuXHRcdFx0Ly8gRXZhbHVhdGUgdGV4dCBhcyBhIGpzb24gZXhwcmVzc2lvblxuXHRcdFx0XCJ0ZXh0IGpzb25cIjogSlNPTi5wYXJzZSxcblxuXHRcdFx0Ly8gUGFyc2UgdGV4dCBhcyB4bWxcblx0XHRcdFwidGV4dCB4bWxcIjogalF1ZXJ5LnBhcnNlWE1MXG5cdFx0fSxcblxuXHRcdC8vIEZvciBvcHRpb25zIHRoYXQgc2hvdWxkbid0IGJlIGRlZXAgZXh0ZW5kZWQ6XG5cdFx0Ly8geW91IGNhbiBhZGQgeW91ciBvd24gY3VzdG9tIG9wdGlvbnMgaGVyZSBpZlxuXHRcdC8vIGFuZCB3aGVuIHlvdSBjcmVhdGUgb25lIHRoYXQgc2hvdWxkbid0IGJlXG5cdFx0Ly8gZGVlcCBleHRlbmRlZCAoc2VlIGFqYXhFeHRlbmQpXG5cdFx0ZmxhdE9wdGlvbnM6IHtcblx0XHRcdHVybDogdHJ1ZSxcblx0XHRcdGNvbnRleHQ6IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQ3JlYXRlcyBhIGZ1bGwgZmxlZGdlZCBzZXR0aW5ncyBvYmplY3QgaW50byB0YXJnZXRcblx0Ly8gd2l0aCBib3RoIGFqYXhTZXR0aW5ncyBhbmQgc2V0dGluZ3MgZmllbGRzLlxuXHQvLyBJZiB0YXJnZXQgaXMgb21pdHRlZCwgd3JpdGVzIGludG8gYWpheFNldHRpbmdzLlxuXHRhamF4U2V0dXA6IGZ1bmN0aW9uKCB0YXJnZXQsIHNldHRpbmdzICkge1xuXHRcdHJldHVybiBzZXR0aW5ncyA/XG5cblx0XHRcdC8vIEJ1aWxkaW5nIGEgc2V0dGluZ3Mgb2JqZWN0XG5cdFx0XHRhamF4RXh0ZW5kKCBhamF4RXh0ZW5kKCB0YXJnZXQsIGpRdWVyeS5hamF4U2V0dGluZ3MgKSwgc2V0dGluZ3MgKSA6XG5cblx0XHRcdC8vIEV4dGVuZGluZyBhamF4U2V0dGluZ3Ncblx0XHRcdGFqYXhFeHRlbmQoIGpRdWVyeS5hamF4U2V0dGluZ3MsIHRhcmdldCApO1xuXHR9LFxuXG5cdGFqYXhQcmVmaWx0ZXI6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycyApLFxuXHRhamF4VHJhbnNwb3J0OiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMgKSxcblxuXHQvLyBNYWluIG1ldGhvZFxuXHRhamF4OiBmdW5jdGlvbiggdXJsLCBvcHRpb25zICkge1xuXG5cdFx0Ly8gSWYgdXJsIGlzIGFuIG9iamVjdCwgc2ltdWxhdGUgcHJlLTEuNSBzaWduYXR1cmVcblx0XHRpZiAoIHR5cGVvZiB1cmwgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0XHRvcHRpb25zID0gdXJsO1xuXHRcdFx0dXJsID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIEZvcmNlIG9wdGlvbnMgdG8gYmUgYW4gb2JqZWN0XG5cdFx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0XHR2YXIgdHJhbnNwb3J0LFxuXG5cdFx0XHQvLyBVUkwgd2l0aG91dCBhbnRpLWNhY2hlIHBhcmFtXG5cdFx0XHRjYWNoZVVSTCxcblxuXHRcdFx0Ly8gUmVzcG9uc2UgaGVhZGVyc1xuXHRcdFx0cmVzcG9uc2VIZWFkZXJzU3RyaW5nLFxuXHRcdFx0cmVzcG9uc2VIZWFkZXJzLFxuXG5cdFx0XHQvLyB0aW1lb3V0IGhhbmRsZVxuXHRcdFx0dGltZW91dFRpbWVyLFxuXG5cdFx0XHQvLyBVcmwgY2xlYW51cCB2YXJcblx0XHRcdHVybEFuY2hvcixcblxuXHRcdFx0Ly8gUmVxdWVzdCBzdGF0ZSAoYmVjb21lcyBmYWxzZSB1cG9uIHNlbmQgYW5kIHRydWUgdXBvbiBjb21wbGV0aW9uKVxuXHRcdFx0Y29tcGxldGVkLFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIGdsb2JhbCBldmVudHMgYXJlIHRvIGJlIGRpc3BhdGNoZWRcblx0XHRcdGZpcmVHbG9iYWxzLFxuXG5cdFx0XHQvLyBMb29wIHZhcmlhYmxlXG5cdFx0XHRpLFxuXG5cdFx0XHQvLyB1bmNhY2hlZCBwYXJ0IG9mIHRoZSB1cmxcblx0XHRcdHVuY2FjaGVkLFxuXG5cdFx0XHQvLyBDcmVhdGUgdGhlIGZpbmFsIG9wdGlvbnMgb2JqZWN0XG5cdFx0XHRzID0galF1ZXJ5LmFqYXhTZXR1cCgge30sIG9wdGlvbnMgKSxcblxuXHRcdFx0Ly8gQ2FsbGJhY2tzIGNvbnRleHRcblx0XHRcdGNhbGxiYWNrQ29udGV4dCA9IHMuY29udGV4dCB8fCBzLFxuXG5cdFx0XHQvLyBDb250ZXh0IGZvciBnbG9iYWwgZXZlbnRzIGlzIGNhbGxiYWNrQ29udGV4dCBpZiBpdCBpcyBhIERPTSBub2RlIG9yIGpRdWVyeSBjb2xsZWN0aW9uXG5cdFx0XHRnbG9iYWxFdmVudENvbnRleHQgPSBzLmNvbnRleHQgJiZcblx0XHRcdFx0KCBjYWxsYmFja0NvbnRleHQubm9kZVR5cGUgfHwgY2FsbGJhY2tDb250ZXh0LmpxdWVyeSApID9cblx0XHRcdFx0XHRqUXVlcnkoIGNhbGxiYWNrQ29udGV4dCApIDpcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQsXG5cblx0XHRcdC8vIERlZmVycmVkc1xuXHRcdFx0ZGVmZXJyZWQgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQgPSBqUXVlcnkuQ2FsbGJhY2tzKCBcIm9uY2UgbWVtb3J5XCIgKSxcblxuXHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdHN0YXR1c0NvZGUgPSBzLnN0YXR1c0NvZGUgfHwge30sXG5cblx0XHRcdC8vIEhlYWRlcnMgKHRoZXkgYXJlIHNlbnQgYWxsIGF0IG9uY2UpXG5cdFx0XHRyZXF1ZXN0SGVhZGVycyA9IHt9LFxuXHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lcyA9IHt9LFxuXG5cdFx0XHQvLyBEZWZhdWx0IGFib3J0IG1lc3NhZ2Vcblx0XHRcdHN0ckFib3J0ID0gXCJjYW5jZWxlZFwiLFxuXG5cdFx0XHQvLyBGYWtlIHhoclxuXHRcdFx0anFYSFIgPSB7XG5cdFx0XHRcdHJlYWR5U3RhdGU6IDAsXG5cblx0XHRcdFx0Ly8gQnVpbGRzIGhlYWRlcnMgaGFzaHRhYmxlIGlmIG5lZWRlZFxuXHRcdFx0XHRnZXRSZXNwb25zZUhlYWRlcjogZnVuY3Rpb24oIGtleSApIHtcblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZUhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVycyA9IHt9O1xuXHRcdFx0XHRcdFx0XHR3aGlsZSAoICggbWF0Y2ggPSByaGVhZGVycy5leGVjKCByZXNwb25zZUhlYWRlcnNTdHJpbmcgKSApICkge1xuXHRcdFx0XHRcdFx0XHRcdHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSA9XG5cdFx0XHRcdFx0XHRcdFx0XHQoIHJlc3BvbnNlSGVhZGVyc1sgbWF0Y2hbIDEgXS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXSB8fCBbXSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5jb25jYXQoIG1hdGNoWyAyIF0gKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpICsgXCIgXCIgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoID09IG51bGwgPyBudWxsIDogbWF0Y2guam9pbiggXCIsIFwiICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gUmF3IHN0cmluZ1xuXHRcdFx0XHRnZXRBbGxSZXNwb25zZUhlYWRlcnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHJldHVybiBjb21wbGV0ZWQgPyByZXNwb25zZUhlYWRlcnNTdHJpbmcgOiBudWxsO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhY2hlcyB0aGUgaGVhZGVyXG5cdFx0XHRcdHNldFJlcXVlc3RIZWFkZXI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0bmFtZSA9IHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdID1cblx0XHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHwgbmFtZTtcblx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGVzIHJlc3BvbnNlIGNvbnRlbnQtdHlwZSBoZWFkZXJcblx0XHRcdFx0b3ZlcnJpZGVNaW1lVHlwZTogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdHMubWltZVR5cGUgPSB0eXBlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0XHRzdGF0dXNDb2RlOiBmdW5jdGlvbiggbWFwICkge1xuXHRcdFx0XHRcdHZhciBjb2RlO1xuXHRcdFx0XHRcdGlmICggbWFwICkge1xuXHRcdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gRXhlY3V0ZSB0aGUgYXBwcm9wcmlhdGUgY2FsbGJhY2tzXG5cdFx0XHRcdFx0XHRcdGpxWEhSLmFsd2F5cyggbWFwWyBqcVhIUi5zdGF0dXMgXSApO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBMYXp5LWFkZCB0aGUgbmV3IGNhbGxiYWNrcyBpbiBhIHdheSB0aGF0IHByZXNlcnZlcyBvbGQgb25lc1xuXHRcdFx0XHRcdFx0XHRmb3IgKCBjb2RlIGluIG1hcCApIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0dXNDb2RlWyBjb2RlIF0gPSBbIHN0YXR1c0NvZGVbIGNvZGUgXSwgbWFwWyBjb2RlIF0gXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYW5jZWwgdGhlIHJlcXVlc3Rcblx0XHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCBzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHZhciBmaW5hbFRleHQgPSBzdGF0dXNUZXh0IHx8IHN0ckFib3J0O1xuXHRcdFx0XHRcdGlmICggdHJhbnNwb3J0ICkge1xuXHRcdFx0XHRcdFx0dHJhbnNwb3J0LmFib3J0KCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZG9uZSggMCwgZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHQvLyBBdHRhY2ggZGVmZXJyZWRzXG5cdFx0ZGVmZXJyZWQucHJvbWlzZSgganFYSFIgKTtcblxuXHRcdC8vIEFkZCBwcm90b2NvbCBpZiBub3QgcHJvdmlkZWQgKHByZWZpbHRlcnMgbWlnaHQgZXhwZWN0IGl0KVxuXHRcdC8vIEhhbmRsZSBmYWxzeSB1cmwgaW4gdGhlIHNldHRpbmdzIG9iamVjdCAoIzEwMDkzOiBjb25zaXN0ZW5jeSB3aXRoIG9sZCBzaWduYXR1cmUpXG5cdFx0Ly8gV2UgYWxzbyB1c2UgdGhlIHVybCBwYXJhbWV0ZXIgaWYgYXZhaWxhYmxlXG5cdFx0cy51cmwgPSAoICggdXJsIHx8IHMudXJsIHx8IGxvY2F0aW9uLmhyZWYgKSArIFwiXCIgKVxuXHRcdFx0LnJlcGxhY2UoIHJwcm90b2NvbCwgbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKTtcblxuXHRcdC8vIEFsaWFzIG1ldGhvZCBvcHRpb24gdG8gdHlwZSBhcyBwZXIgdGlja2V0ICMxMjAwNFxuXHRcdHMudHlwZSA9IG9wdGlvbnMubWV0aG9kIHx8IG9wdGlvbnMudHlwZSB8fCBzLm1ldGhvZCB8fCBzLnR5cGU7XG5cblx0XHQvLyBFeHRyYWN0IGRhdGFUeXBlcyBsaXN0XG5cdFx0cy5kYXRhVHlwZXMgPSAoIHMuZGF0YVR5cGUgfHwgXCIqXCIgKS50b0xvd2VyQ2FzZSgpLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cblx0XHQvLyBBIGNyb3NzLWRvbWFpbiByZXF1ZXN0IGlzIGluIG9yZGVyIHdoZW4gdGhlIG9yaWdpbiBkb2Vzbid0IG1hdGNoIHRoZSBjdXJyZW50IG9yaWdpbi5cblx0XHRpZiAoIHMuY3Jvc3NEb21haW4gPT0gbnVsbCApIHtcblx0XHRcdHVybEFuY2hvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiYVwiICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExLCBFZGdlIDEyIC0gMTVcblx0XHRcdC8vIElFIHRocm93cyBleGNlcHRpb24gb24gYWNjZXNzaW5nIHRoZSBocmVmIHByb3BlcnR5IGlmIHVybCBpcyBtYWxmb3JtZWQsXG5cdFx0XHQvLyBlLmcuIGh0dHA6Ly9leGFtcGxlLmNvbTo4MHgvXG5cdFx0XHR0cnkge1xuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHMudXJsO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OCAtIDExIG9ubHlcblx0XHRcdFx0Ly8gQW5jaG9yJ3MgaG9zdCBwcm9wZXJ0eSBpc24ndCBjb3JyZWN0bHkgc2V0IHdoZW4gcy51cmwgaXMgcmVsYXRpdmVcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSB1cmxBbmNob3IuaHJlZjtcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IG9yaWdpbkFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIG9yaWdpbkFuY2hvci5ob3N0ICE9PVxuXHRcdFx0XHRcdHVybEFuY2hvci5wcm90b2NvbCArIFwiLy9cIiArIHVybEFuY2hvci5ob3N0O1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlcmUgaXMgYW4gZXJyb3IgcGFyc2luZyB0aGUgVVJMLCBhc3N1bWUgaXQgaXMgY3Jvc3NEb21haW4sXG5cdFx0XHRcdC8vIGl0IGNhbiBiZSByZWplY3RlZCBieSB0aGUgdHJhbnNwb3J0IGlmIGl0IGlzIGludmFsaWRcblx0XHRcdFx0cy5jcm9zc0RvbWFpbiA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBkYXRhIGlmIG5vdCBhbHJlYWR5IGEgc3RyaW5nXG5cdFx0aWYgKCBzLmRhdGEgJiYgcy5wcm9jZXNzRGF0YSAmJiB0eXBlb2Ygcy5kYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cy5kYXRhID0galF1ZXJ5LnBhcmFtKCBzLmRhdGEsIHMudHJhZGl0aW9uYWwgKTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSBwcmVmaWx0ZXJzXG5cdFx0aW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhIHByZWZpbHRlciwgc3RvcCB0aGVyZVxuXHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdH1cblxuXHRcdC8vIFdlIGNhbiBmaXJlIGdsb2JhbCBldmVudHMgYXMgb2Ygbm93IGlmIGFza2VkIHRvXG5cdFx0Ly8gRG9uJ3QgZmlyZSBldmVudHMgaWYgalF1ZXJ5LmV2ZW50IGlzIHVuZGVmaW5lZCBpbiBhbiBBTUQtdXNhZ2Ugc2NlbmFyaW8gKCMxNTExOClcblx0XHRmaXJlR2xvYmFscyA9IGpRdWVyeS5ldmVudCAmJiBzLmdsb2JhbDtcblxuXHRcdC8vIFdhdGNoIGZvciBhIG5ldyBzZXQgb2YgcmVxdWVzdHNcblx0XHRpZiAoIGZpcmVHbG9iYWxzICYmIGpRdWVyeS5hY3RpdmUrKyA9PT0gMCApIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdGFydFwiICk7XG5cdFx0fVxuXG5cdFx0Ly8gVXBwZXJjYXNlIHRoZSB0eXBlXG5cdFx0cy50eXBlID0gcy50eXBlLnRvVXBwZXJDYXNlKCk7XG5cblx0XHQvLyBEZXRlcm1pbmUgaWYgcmVxdWVzdCBoYXMgY29udGVudFxuXHRcdHMuaGFzQ29udGVudCA9ICFybm9Db250ZW50LnRlc3QoIHMudHlwZSApO1xuXG5cdFx0Ly8gU2F2ZSB0aGUgVVJMIGluIGNhc2Ugd2UncmUgdG95aW5nIHdpdGggdGhlIElmLU1vZGlmaWVkLVNpbmNlXG5cdFx0Ly8gYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyIGxhdGVyIG9uXG5cdFx0Ly8gUmVtb3ZlIGhhc2ggdG8gc2ltcGxpZnkgdXJsIG1hbmlwdWxhdGlvblxuXHRcdGNhY2hlVVJMID0gcy51cmwucmVwbGFjZSggcmhhc2gsIFwiXCIgKTtcblxuXHRcdC8vIE1vcmUgb3B0aW9ucyBoYW5kbGluZyBmb3IgcmVxdWVzdHMgd2l0aCBubyBjb250ZW50XG5cdFx0aWYgKCAhcy5oYXNDb250ZW50ICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgaGFzaCBzbyB3ZSBjYW4gcHV0IGl0IGJhY2tcblx0XHRcdHVuY2FjaGVkID0gcy51cmwuc2xpY2UoIGNhY2hlVVJMLmxlbmd0aCApO1xuXG5cdFx0XHQvLyBJZiBkYXRhIGlzIGF2YWlsYWJsZSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZCwgYXBwZW5kIGRhdGEgdG8gdXJsXG5cdFx0XHRpZiAoIHMuZGF0YSAmJiAoIHMucHJvY2Vzc0RhdGEgfHwgdHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiApICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggaXNGdW5jdGlvbiggZGF0YSApICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgY2FsbGJhY2s7XG5cdFx0XHRjYWxsYmFjayA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFRoZSB1cmwgY2FuIGJlIGFuIG9wdGlvbnMgb2JqZWN0ICh3aGljaCB0aGVuIG11c3QgaGF2ZSAudXJsKVxuXHRcdHJldHVybiBqUXVlcnkuYWpheCggalF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cdFx0XHR0eXBlOiBtZXRob2QsXG5cdFx0XHRkYXRhVHlwZTogdHlwZSxcblx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRzdWNjZXNzOiBjYWxsYmFja1xuXHRcdH0sIGpRdWVyeS5pc1BsYWluT2JqZWN0KCB1cmwgKSAmJiB1cmwgKSApO1xuXHR9O1xufSApO1xuXG5cbmpRdWVyeS5fZXZhbFVybCA9IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cdHJldHVybiBqUXVlcnkuYWpheCgge1xuXHRcdHVybDogdXJsLFxuXG5cdFx0Ly8gTWFrZSB0aGlzIGV4cGxpY2l0LCBzaW5jZSB1c2VyIGNhbiBvdmVycmlkZSB0aGlzIHRocm91Z2ggYWpheFNldHVwICgjMTEyNjQpXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRkYXRhVHlwZTogXCJzY3JpcHRcIixcblx0XHRjYWNoZTogdHJ1ZSxcblx0XHRhc3luYzogZmFsc2UsXG5cdFx0Z2xvYmFsOiBmYWxzZSxcblxuXHRcdC8vIE9ubHkgZXZhbHVhdGUgdGhlIHJlc3BvbnNlIGlmIGl0IGlzIHN1Y2Nlc3NmdWwgKGdoLTQxMjYpXG5cdFx0Ly8gZGF0YUZpbHRlciBpcyBub3QgaW52b2tlZCBmb3IgZmFpbHVyZSByZXNwb25zZXMsIHNvIHVzaW5nIGl0IGluc3RlYWRcblx0XHQvLyBvZiB0aGUgZGVmYXVsdCBjb252ZXJ0ZXIgaXMga2x1ZGd5IGJ1dCBpdCB3b3Jrcy5cblx0XHRjb252ZXJ0ZXJzOiB7XG5cdFx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCkge31cblx0XHR9LFxuXHRcdGRhdGFGaWx0ZXI6IGZ1bmN0aW9uKCByZXNwb25zZSApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCByZXNwb25zZSwgb3B0aW9ucyApO1xuXHRcdH1cblx0fSApO1xufTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHdyYXBBbGw6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciB3cmFwO1xuXG5cdFx0aWYgKCB0aGlzWyAwIF0gKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBJbm5lciggaHRtbC5jYWxsKCB0aGlzLCBpICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBzZWxmID0galF1ZXJ5KCB0aGlzICksXG5cdFx0XHRcdGNvbnRlbnRzID0gc2VsZi5jb250ZW50cygpO1xuXG5cdFx0XHRpZiAoIGNvbnRlbnRzLmxlbmd0aCApIHtcblx0XHRcdFx0Y29udGVudHMud3JhcEFsbCggaHRtbCApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRzZWxmLmFwcGVuZCggaHRtbCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHR3cmFwOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHR2YXIgaHRtbElzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCBodG1sICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLndyYXBBbGwoIGh0bWxJc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9udGltZW91dCA9XG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gbnVsbDtcblxuXHRcdFx0XHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiYWJvcnRcIiApIHtcblx0XHRcdFx0XHRcdFx0XHR4aHIuYWJvcnQoKTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggdHlwZSA9PT0gXCJlcnJvclwiICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHQvLyBPbiBhIG1hbnVhbCBuYXRpdmUgYWJvcnQsIElFOSB0aHJvd3Ncblx0XHRcdFx0XHRcdFx0XHQvLyBlcnJvcnMgb24gYW55IHByb3BlcnR5IGFjY2VzcyB0aGF0IGlzIG5vdCByZWFkeVN0YXRlXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlb2YgeGhyLnN0YXR1cyAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCAwLCBcImVycm9yXCIgKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gRmlsZTogcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgMDsgc2VlICM4NjA1LCAjMTQyMDdcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHRcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyU3VjY2Vzc1N0YXR1c1sgeGhyLnN0YXR1cyBdIHx8IHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dCxcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElFOSBoYXMgbm8gWEhSMiBidXQgdGhyb3dzIG9uIGJpbmFyeSAodHJhYy0xMTQyNilcblx0XHRcdFx0XHRcdFx0XHRcdC8vIEZvciBYSFIyIG5vbi10ZXh0LCBsZXQgdGhlIGNhbGxlciBoYW5kbGUgaXQgKGdoLTI0OTgpXG5cdFx0XHRcdFx0XHRcdFx0XHQoIHhoci5yZXNwb25zZVR5cGUgfHwgXCJ0ZXh0XCIgKSAhPT0gXCJ0ZXh0XCIgIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgeGhyLnJlc3BvbnNlVGV4dCAhPT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgYmluYXJ5OiB4aHIucmVzcG9uc2UgfSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHsgdGV4dDogeGhyLnJlc3BvbnNlVGV4dCB9LFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpXG5cdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0Ly8gTGlzdGVuIHRvIGV2ZW50c1xuXHRcdFx0XHR4aHIub25sb2FkID0gY2FsbGJhY2soKTtcblx0XHRcdFx0ZXJyb3JDYWxsYmFjayA9IHhoci5vbmVycm9yID0geGhyLm9udGltZW91dCA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiBvciBmb3JjZWQtYnktYXR0cnMgcmVxdWVzdHNcblx0aWYgKCBzLmNyb3NzRG9tYWluIHx8IHMuc2NyaXB0QXR0cnMgKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKVxuXHRcdFx0XHRcdC5hdHRyKCBzLnNjcmlwdEF0dHJzIHx8IHt9IClcblx0XHRcdFx0XHQucHJvcCggeyBjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsIHNyYzogcy51cmwgfSApXG5cdFx0XHRcdFx0Lm9uKCBcImxvYWQgZXJyb3JcIiwgY2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0gKTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHZhciBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcbiAgICBpZiAoaGFzaG1hcmtJbmRleCAhPT0gLTEpIHtcbiAgICAgIHVybCA9IHVybC5zbGljZSgwLCBoYXNobWFya0luZGV4KTtcbiAgICB9XG5cbiAgICB1cmwgKz0gKHVybC5pbmRleE9mKCc/JykgPT09IC0xID8gJz8nIDogJyYnKSArIHNlcmlhbGl6ZWRQYXJhbXM7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0NhbmNlbCh2YWx1ZSkge1xuICByZXR1cm4gISEodmFsdWUgJiYgdmFsdWUuX19DQU5DRUxfXyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgbm9ybWFsaXplSGVhZGVyTmFtZSA9IHJlcXVpcmUoJy4vaGVscGVycy9ub3JtYWxpemVIZWFkZXJOYW1lJyk7XG5cbnZhciBERUZBVUxUX0NPTlRFTlRfVFlQRSA9IHtcbiAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnXG59O1xuXG5mdW5jdGlvbiBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgdmFsdWUpIHtcbiAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzKSAmJiB1dGlscy5pc1VuZGVmaW5lZChoZWFkZXJzWydDb250ZW50LVR5cGUnXSkpIHtcbiAgICBoZWFkZXJzWydDb250ZW50LVR5cGUnXSA9IHZhbHVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldERlZmF1bHRBZGFwdGVyKCkge1xuICB2YXIgYWRhcHRlcjtcbiAgaWYgKHR5cGVvZiBYTUxIdHRwUmVxdWVzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBGb3IgYnJvd3NlcnMgdXNlIFhIUiBhZGFwdGVyXG4gICAgYWRhcHRlciA9IHJlcXVpcmUoJy4vYWRhcHRlcnMveGhyJyk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChwcm9jZXNzKSA9PT0gJ1tvYmplY3QgcHJvY2Vzc10nKSB7XG4gICAgLy8gRm9yIG5vZGUgdXNlIEhUVFAgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL2h0dHAnKTtcbiAgfVxuICByZXR1cm4gYWRhcHRlcjtcbn1cblxudmFyIGRlZmF1bHRzID0ge1xuICBhZGFwdGVyOiBnZXREZWZhdWx0QWRhcHRlcigpLFxuXG4gIHRyYW5zZm9ybVJlcXVlc3Q6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXF1ZXN0KGRhdGEsIGhlYWRlcnMpIHtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdBY2NlcHQnKTtcbiAgICBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsICdDb250ZW50LVR5cGUnKTtcbiAgICBpZiAodXRpbHMuaXNGb3JtRGF0YShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBkYXRhLnRvU3RyaW5nKCk7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc09iamVjdChkYXRhKSkge1xuICAgICAgc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsICdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnKTtcbiAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIHRyYW5zZm9ybVJlc3BvbnNlOiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVzcG9uc2UoZGF0YSkge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgfSBjYXRjaCAoZSkgeyAvKiBJZ25vcmUgKi8gfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgLyoqXG4gICAqIEEgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgdG8gYWJvcnQgYSByZXF1ZXN0LiBJZiBzZXQgdG8gMCAoZGVmYXVsdCkgYVxuICAgKiB0aW1lb3V0IGlzIG5vdCBjcmVhdGVkLlxuICAgKi9cbiAgdGltZW91dDogMCxcblxuICB4c3JmQ29va2llTmFtZTogJ1hTUkYtVE9LRU4nLFxuICB4c3JmSGVhZGVyTmFtZTogJ1gtWFNSRi1UT0tFTicsXG5cbiAgbWF4Q29udGVudExlbmd0aDogLTEsXG5cbiAgdmFsaWRhdGVTdGF0dXM6IGZ1bmN0aW9uIHZhbGlkYXRlU3RhdHVzKHN0YXR1cykge1xuICAgIHJldHVybiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMDtcbiAgfVxufTtcblxuZGVmYXVsdHMuaGVhZGVycyA9IHtcbiAgY29tbW9uOiB7XG4gICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L3BsYWluLCAqLyonXG4gIH1cbn07XG5cbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0ge307XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgZGVmYXVsdHMuaGVhZGVyc1ttZXRob2RdID0gdXRpbHMubWVyZ2UoREVGQVVMVF9DT05URU5UX1RZUEUpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBzZXR0bGUgPSByZXF1aXJlKCcuLy4uL2NvcmUvc2V0dGxlJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvYnVpbGRVUkwnKTtcbnZhciBidWlsZEZ1bGxQYXRoID0gcmVxdWlyZSgnLi4vY29yZS9idWlsZEZ1bGxQYXRoJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblxuICAgIC8vIEhUVFAgYmFzaWMgYXV0aGVudGljYXRpb25cbiAgICBpZiAoY29uZmlnLmF1dGgpIHtcbiAgICAgIHZhciB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgdmFyIHBhc3N3b3JkID0gY29uZmlnLmF1dGgucGFzc3dvcmQgfHwgJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVzZXJuYW1lICsgJzonICsgcGFzc3dvcmQpO1xuICAgIH1cblxuICAgIHZhciBmdWxsUGF0aCA9IGJ1aWxkRnVsbFBhdGgoY29uZmlnLmJhc2VVUkwsIGNvbmZpZy51cmwpO1xuICAgIHJlcXVlc3Qub3Blbihjb25maWcubWV0aG9kLnRvVXBwZXJDYXNlKCksIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QgfHwgcmVxdWVzdC5yZWFkeVN0YXRlICE9PSA0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIHN0YXR1czogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzVGV4dCxcbiAgICAgICAgaGVhZGVyczogcmVzcG9uc2VIZWFkZXJzLFxuICAgICAgICBjb25maWc6IGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdDogcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHZhciB0aW1lb3V0RXJyb3JNZXNzYWdlID0gJ3RpbWVvdXQgb2YgJyArIGNvbmZpZy50aW1lb3V0ICsgJ21zIGV4Y2VlZGVkJztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QoY3JlYXRlRXJyb3IodGltZW91dEVycm9yTWVzc2FnZSwgY29uZmlnLCAnRUNPTk5BQk9SVEVEJyxcbiAgICAgICAgcmVxdWVzdCkpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgLy8gVGhpcyBpcyBvbmx5IGRvbmUgaWYgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnQuXG4gICAgLy8gU3BlY2lmaWNhbGx5IG5vdCBpZiB3ZSdyZSBpbiBhIHdlYiB3b3JrZXIsIG9yIHJlYWN0LW5hdGl2ZS5cbiAgICBpZiAodXRpbHMuaXNTdGFuZGFyZEJyb3dzZXJFbnYoKSkge1xuICAgICAgdmFyIGNvb2tpZXMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29va2llcycpO1xuXG4gICAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAgIHZhciB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKSAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgP1xuICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgaWYgKHhzcmZWYWx1ZSkge1xuICAgICAgICByZXF1ZXN0SGVhZGVyc1tjb25maWcueHNyZkhlYWRlck5hbWVdID0geHNyZlZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIGlmICh0eXBlb2YgcmVxdWVzdERhdGEgPT09ICd1bmRlZmluZWQnICYmIGtleS50b0xvd2VyQ2FzZSgpID09PSAnY29udGVudC10eXBlJykge1xuICAgICAgICAgIC8vIFJlbW92ZSBDb250ZW50LVR5cGUgaWYgZGF0YSBpcyB1bmRlZmluZWRcbiAgICAgICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNba2V5XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBPdGhlcndpc2UgYWRkIGhlYWRlciB0byB0aGUgcmVxdWVzdFxuICAgICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIEFkZCB3aXRoQ3JlZGVudGlhbHMgdG8gcmVxdWVzdCBpZiBuZWVkZWRcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGNvbmZpZy53aXRoQ3JlZGVudGlhbHMpKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9ICEhY29uZmlnLndpdGhDcmVkZW50aWFscztcbiAgICB9XG5cbiAgICAvLyBBZGQgcmVzcG9uc2VUeXBlIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gRXhwZWN0ZWQgRE9NRXhjZXB0aW9uIHRocm93biBieSBicm93c2VycyBub3QgY29tcGF0aWJsZSBYTUxIdHRwUmVxdWVzdCBMZXZlbCAyLlxuICAgICAgICAvLyBCdXQsIHRoaXMgY2FuIGJlIHN1cHByZXNzZWQgZm9yICdqc29uJyB0eXBlIGFzIGl0IGNhbiBiZSBwYXJzZWQgYnkgZGVmYXVsdCAndHJhbnNmb3JtUmVzcG9uc2UnIGZ1bmN0aW9uLlxuICAgICAgICBpZiAoY29uZmlnLnJlc3BvbnNlVHlwZSAhPT0gJ2pzb24nKSB7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEhhbmRsZSBwcm9ncmVzcyBpZiBuZWVkZWRcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vbkRvd25sb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHJlcXVlc3QuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBjb25maWcub25Eb3dubG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICAvLyBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgdXBsb2FkIGV2ZW50c1xuICAgIGlmICh0eXBlb2YgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MgPT09ICdmdW5jdGlvbicgJiYgcmVxdWVzdC51cGxvYWQpIHtcbiAgICAgIHJlcXVlc3QudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uVXBsb2FkUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgIC8vIEhhbmRsZSBjYW5jZWxsYXRpb25cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbi5wcm9taXNlLnRoZW4oZnVuY3Rpb24gb25DYW5jZWxlZChjYW5jZWwpIHtcbiAgICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZWplY3QoY2FuY2VsKTtcbiAgICAgICAgLy8gQ2xlYW4gdXAgcmVxdWVzdFxuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChyZXF1ZXN0RGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXF1ZXN0RGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gU2VuZCB0aGUgcmVxdWVzdFxuICAgIHJlcXVlc3Quc2VuZChyZXF1ZXN0RGF0YSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGVuaGFuY2VFcnJvciA9IHJlcXVpcmUoJy4vZW5oYW5jZUVycm9yJyk7XG5cbi8qKlxuICogQ3JlYXRlIGFuIEVycm9yIHdpdGggdGhlIHNwZWNpZmllZCBtZXNzYWdlLCBjb25maWcsIGVycm9yIGNvZGUsIHJlcXVlc3QgYW5kIHJlc3BvbnNlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlIFRoZSBlcnJvciBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnLlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb2RlXSBUaGUgZXJyb3IgY29kZSAoZm9yIGV4YW1wbGUsICdFQ09OTkFCT1JURUQnKS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbcmVxdWVzdF0gVGhlIHJlcXVlc3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW3Jlc3BvbnNlXSBUaGUgcmVzcG9uc2UuXG4gKiBAcmV0dXJucyB7RXJyb3J9IFRoZSBjcmVhdGVkIGVycm9yLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNyZWF0ZUVycm9yKG1lc3NhZ2UsIGNvbmZpZywgY29kZSwgcmVxdWVzdCwgcmVzcG9uc2UpIHtcbiAgdmFyIGVycm9yID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4uL3V0aWxzJyk7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICogQHJldHVybnMge09iamVjdH0gTmV3IG9iamVjdCByZXN1bHRpbmcgZnJvbSBtZXJnaW5nIGNvbmZpZzIgdG8gY29uZmlnMVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG1lcmdlQ29uZmlnKGNvbmZpZzEsIGNvbmZpZzIpIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIGNvbmZpZzIgPSBjb25maWcyIHx8IHt9O1xuICB2YXIgY29uZmlnID0ge307XG5cbiAgdmFyIHZhbHVlRnJvbUNvbmZpZzJLZXlzID0gWyd1cmwnLCAnbWV0aG9kJywgJ3BhcmFtcycsICdkYXRhJ107XG4gIHZhciBtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cyA9IFsnaGVhZGVycycsICdhdXRoJywgJ3Byb3h5J107XG4gIHZhciBkZWZhdWx0VG9Db25maWcyS2V5cyA9IFtcbiAgICAnYmFzZVVSTCcsICd1cmwnLCAndHJhbnNmb3JtUmVxdWVzdCcsICd0cmFuc2Zvcm1SZXNwb25zZScsICdwYXJhbXNTZXJpYWxpemVyJyxcbiAgICAndGltZW91dCcsICd3aXRoQ3JlZGVudGlhbHMnLCAnYWRhcHRlcicsICdyZXNwb25zZVR5cGUnLCAneHNyZkNvb2tpZU5hbWUnLFxuICAgICd4c3JmSGVhZGVyTmFtZScsICdvblVwbG9hZFByb2dyZXNzJywgJ29uRG93bmxvYWRQcm9ncmVzcycsXG4gICAgJ21heENvbnRlbnRMZW5ndGgnLCAndmFsaWRhdGVTdGF0dXMnLCAnbWF4UmVkaXJlY3RzJywgJ2h0dHBBZ2VudCcsXG4gICAgJ2h0dHBzQWdlbnQnLCAnY2FuY2VsVG9rZW4nLCAnc29ja2V0UGF0aCdcbiAgXTtcblxuICB1dGlscy5mb3JFYWNoKHZhbHVlRnJvbUNvbmZpZzJLZXlzLCBmdW5jdGlvbiB2YWx1ZUZyb21Db25maWcyKHByb3ApIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZzJbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcyW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChtZXJnZURlZXBQcm9wZXJ0aWVzS2V5cywgZnVuY3Rpb24gbWVyZ2VEZWVwUHJvcGVydGllcyhwcm9wKSB7XG4gICAgaWYgKHV0aWxzLmlzT2JqZWN0KGNvbmZpZzJbcHJvcF0pKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSB1dGlscy5kZWVwTWVyZ2UoY29uZmlnMVtwcm9wXSwgY29uZmlnMltwcm9wXSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc09iamVjdChjb25maWcxW3Byb3BdKSkge1xuICAgICAgY29uZmlnW3Byb3BdID0gdXRpbHMuZGVlcE1lcmdlKGNvbmZpZzFbcHJvcF0pO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGNvbmZpZzFbcHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25maWdbcHJvcF0gPSBjb25maWcxW3Byb3BdO1xuICAgIH1cbiAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChkZWZhdWx0VG9Db25maWcyS2V5cywgZnVuY3Rpb24gZGVmYXVsdFRvQ29uZmlnMihwcm9wKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWcyW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMltwcm9wXTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBjb25maWcxW3Byb3BdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnW3Byb3BdID0gY29uZmlnMVtwcm9wXTtcbiAgICB9XG4gIH0pO1xuXG4gIHZhciBheGlvc0tleXMgPSB2YWx1ZUZyb21Db25maWcyS2V5c1xuICAgIC5jb25jYXQobWVyZ2VEZWVwUHJvcGVydGllc0tleXMpXG4gICAgLmNvbmNhdChkZWZhdWx0VG9Db25maWcyS2V5cyk7XG5cbiAgdmFyIG90aGVyS2V5cyA9IE9iamVjdFxuICAgIC5rZXlzKGNvbmZpZzIpXG4gICAgLmZpbHRlcihmdW5jdGlvbiBmaWx0ZXJBeGlvc0tleXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXhpb3NLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gICAgfSk7XG5cbiAgdXRpbHMuZm9yRWFjaChvdGhlcktleXMsIGZ1bmN0aW9uIG90aGVyS2V5c0RlZmF1bHRUb0NvbmZpZzIocHJvcCkge1xuICAgIGlmICh0eXBlb2YgY29uZmlnMltwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzJbcHJvcF07XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29uZmlnMVtwcm9wXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbmZpZ1twcm9wXSA9IGNvbmZpZzFbcHJvcF07XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY29uZmlnO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktZm9yLWVhY2gnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4kKHsgdGFyZ2V0OiAnQXJyYXknLCBwcm90bzogdHJ1ZSwgZm9yY2VkOiBbXS5mb3JFYWNoICE9IGZvckVhY2ggfSwge1xuICBmb3JFYWNoOiBmb3JFYWNoXG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2xvYmFsO1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxudmFyIGhpZGRlbktleXMgPSBlbnVtQnVnS2V5cy5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRvd25wcm9wZXJ0eW5hbWVzXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBoaWRkZW5LZXlzKTtcbn07XG4iLCJ2YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tbGVuZ3RoJyk7XG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4Jyk7XG5cbi8vIGBBcnJheS5wcm90b3R5cGUueyBpbmRleE9mLCBpbmNsdWRlcyB9YCBtZXRob2RzIGltcGxlbWVudGF0aW9uXG52YXIgY3JlYXRlTWV0aG9kID0gZnVuY3Rpb24gKElTX0lOQ0xVREVTKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgTyA9IHRvSW5kZXhlZE9iamVjdCgkdGhpcyk7XG4gICAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICAvLyBBcnJheSNpbmNsdWRlcyB1c2VzIFNhbWVWYWx1ZVplcm8gZXF1YWxpdHkgYWxnb3JpdGhtXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YWx1ZSA9IE9baW5kZXgrK107XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIC8vIEFycmF5I2luZGV4T2YgaWdub3JlcyBob2xlcywgQXJyYXkjaW5jbHVkZXMgLSBub3RcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcbiAgICAgIGlmICgoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykgJiYgT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcbiAgICB9IHJldHVybiAhSVNfSU5DTFVERVMgJiYgLTE7XG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmNsdWRlc2AgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmNsdWRlc1xuICBpbmNsdWRlczogY3JlYXRlTWV0aG9kKHRydWUpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmluZGV4T2ZgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5kZXhvZlxuICBpbmRleE9mOiBjcmVhdGVNZXRob2QoZmFsc2UpXG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJGZvckVhY2ggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktaXRlcmF0aW9uJykuZm9yRWFjaDtcbnZhciBhcnJheU1ldGhvZElzU3RyaWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LW1ldGhvZC1pcy1zdHJpY3QnKTtcbnZhciBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1tZXRob2QtdXNlcy10by1sZW5ndGgnKTtcblxudmFyIFNUUklDVF9NRVRIT0QgPSBhcnJheU1ldGhvZElzU3RyaWN0KCdmb3JFYWNoJyk7XG52YXIgVVNFU19UT19MRU5HVEggPSBhcnJheU1ldGhvZFVzZXNUb0xlbmd0aCgnZm9yRWFjaCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmZvckVhY2hgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZvcmVhY2hcbm1vZHVsZS5leHBvcnRzID0gKCFTVFJJQ1RfTUVUSE9EIHx8ICFVU0VTX1RPX0xFTkdUSCkgPyBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XG4gIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XG59IDogW10uZm9yRWFjaDtcbiIsInZhciBiaW5kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Z1bmN0aW9uLWJpbmQtY29udGV4dCcpO1xudmFyIEluZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcblxudmFyIHB1c2ggPSBbXS5wdXNoO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgZm9yRWFjaCwgbWFwLCBmaWx0ZXIsIHNvbWUsIGV2ZXJ5LCBmaW5kLCBmaW5kSW5kZXggfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChUWVBFKSB7XG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XG4gIHZhciBJU19GSUxURVIgPSBUWVBFID09IDI7XG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XG4gIHZhciBJU19GSU5EX0lOREVYID0gVFlQRSA9PSA2O1xuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCwgc3BlY2lmaWNDcmVhdGUpIHtcbiAgICB2YXIgTyA9IHRvT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgc2VsZiA9IEluZGV4ZWRPYmplY3QoTyk7XG4gICAgdmFyIGJvdW5kRnVuY3Rpb24gPSBiaW5kKGNhbGxiYWNrZm4sIHRoYXQsIDMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gMDtcbiAgICB2YXIgY3JlYXRlID0gc3BlY2lmaWNDcmVhdGUgfHwgYXJyYXlTcGVjaWVzQ3JlYXRlO1xuICAgIHZhciB0YXJnZXQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xuICAgIHZhciB2YWx1ZSwgcmVzdWx0O1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoTk9fSE9MRVMgfHwgaW5kZXggaW4gc2VsZikge1xuICAgICAgdmFsdWUgPSBzZWxmW2luZGV4XTtcbiAgICAgIHJlc3VsdCA9IGJvdW5kRnVuY3Rpb24odmFsdWUsIGluZGV4LCBPKTtcbiAgICAgIGlmIChUWVBFKSB7XG4gICAgICAgIGlmIChJU19NQVApIHRhcmdldFtpbmRleF0gPSByZXN1bHQ7IC8vIG1hcFxuICAgICAgICBlbHNlIGlmIChyZXN1bHQpIHN3aXRjaCAoVFlQRSkge1xuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgICAvLyBzb21lXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsdWU7ICAgICAgICAgICAgIC8vIGZpbmRcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBpbmRleDsgICAgICAgICAgICAgLy8gZmluZEluZGV4XG4gICAgICAgICAgY2FzZSAyOiBwdXNoLmNhbGwodGFyZ2V0LCB2YWx1ZSk7IC8vIGZpbHRlclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7ICAvLyBldmVyeVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogdGFyZ2V0O1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZm9yRWFjaGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5mb3JlYWNoXG4gIGZvckVhY2g6IGNyZWF0ZU1ldGhvZCgwKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5tYXBgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUubWFwXG4gIG1hcDogY3JlYXRlTWV0aG9kKDEpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbHRlcmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5maWx0ZXJcbiAgZmlsdGVyOiBjcmVhdGVNZXRob2QoMiksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuc29tZWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5zb21lXG4gIHNvbWU6IGNyZWF0ZU1ldGhvZCgzKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5ldmVyeWAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5ldmVyeVxuICBldmVyeTogY3JlYXRlTWV0aG9kKDQpLFxuICAvLyBgQXJyYXkucHJvdG90eXBlLmZpbmRgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuZmluZFxuICBmaW5kOiBjcmVhdGVNZXRob2QoNSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuZmluZEluZGV4YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmZpbmRJbmRleFxuICBmaW5kSW5kZXg6IGNyZWF0ZU1ldGhvZCg2KVxufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG5cbi8vIGBBcnJheVNwZWNpZXNDcmVhdGVgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXlzcGVjaWVzY3JlYXRlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcmlnaW5hbEFycmF5LCBsZW5ndGgpIHtcbiAgdmFyIEM7XG4gIGlmIChpc0FycmF5KG9yaWdpbmFsQXJyYXkpKSB7XG4gICAgQyA9IG9yaWdpbmFsQXJyYXkuY29uc3RydWN0b3I7XG4gICAgLy8gY3Jvc3MtcmVhbG0gZmFsbGJhY2tcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xuICAgIGVsc2UgaWYgKGlzT2JqZWN0KEMpKSB7XG4gICAgICBDID0gQ1tTUEVDSUVTXTtcbiAgICAgIGlmIChDID09PSBudWxsKSBDID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSByZXR1cm4gbmV3IChDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEMpKGxlbmd0aCA9PT0gMCA/IDAgOiBsZW5ndGgpO1xufTtcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG5cbi8vIGBJc0FycmF5YCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWlzYXJyYXlcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xuICByZXR1cm4gY2xhc3NvZihhcmcpID09ICdBcnJheSc7XG59O1xuIiwidmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmICFTeW1ib2wuc2hhbVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgYXJndW1lbnQpIHtcbiAgdmFyIG1ldGhvZCA9IFtdW01FVEhPRF9OQU1FXTtcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsLG5vLXRocm93LWxpdGVyYWxcbiAgICBtZXRob2QuY2FsbChudWxsLCBhcmd1bWVudCB8fCBmdW5jdGlvbiAoKSB7IHRocm93IDE7IH0sIDEpO1xuICB9KTtcbn07XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGNhY2hlID0ge307XG5cbnZhciB0aHJvd2VyID0gZnVuY3Rpb24gKGl0KSB7IHRocm93IGl0OyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChNRVRIT0RfTkFNRSwgb3B0aW9ucykge1xuICBpZiAoaGFzKGNhY2hlLCBNRVRIT0RfTkFNRSkpIHJldHVybiBjYWNoZVtNRVRIT0RfTkFNRV07XG4gIGlmICghb3B0aW9ucykgb3B0aW9ucyA9IHt9O1xuICB2YXIgbWV0aG9kID0gW11bTUVUSE9EX05BTUVdO1xuICB2YXIgQUNDRVNTT1JTID0gaGFzKG9wdGlvbnMsICdBQ0NFU1NPUlMnKSA/IG9wdGlvbnMuQUNDRVNTT1JTIDogZmFsc2U7XG4gIHZhciBhcmd1bWVudDAgPSBoYXMob3B0aW9ucywgMCkgPyBvcHRpb25zWzBdIDogdGhyb3dlcjtcbiAgdmFyIGFyZ3VtZW50MSA9IGhhcyhvcHRpb25zLCAxKSA/IG9wdGlvbnNbMV0gOiB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIGNhY2hlW01FVEhPRF9OQU1FXSA9ICEhbWV0aG9kICYmICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gICAgaWYgKEFDQ0VTU09SUyAmJiAhREVTQ1JJUFRPUlMpIHJldHVybiB0cnVlO1xuICAgIHZhciBPID0geyBsZW5ndGg6IC0xIH07XG5cbiAgICBpZiAoQUNDRVNTT1JTKSBkZWZpbmVQcm9wZXJ0eShPLCAxLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogdGhyb3dlciB9KTtcbiAgICBlbHNlIE9bMV0gPSAxO1xuXG4gICAgbWV0aG9kLmNhbGwoTywgYXJndW1lbnQwLCBhcmd1bWVudDEpO1xuICB9KTtcbn07XG4iLCJ2YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBmcm9tID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FycmF5LWZyb20nKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG5cbnZhciBJTkNPUlJFQ1RfSVRFUkFUSU9OID0gIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgQXJyYXkuZnJvbShpdGVyYWJsZSk7XG59KTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxuJCh7IHRhcmdldDogJ0FycmF5Jywgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJTkNPUlJFQ1RfSVRFUkFUSU9OIH0sIHtcbiAgZnJvbTogZnJvbVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mdW5jdGlvbi1iaW5kLWNvbnRleHQnKTtcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1vYmplY3QnKTtcbnZhciBjYWxsV2l0aFNhZmVJdGVyYXRpb25DbG9zaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NhbGwtd2l0aC1zYWZlLWl0ZXJhdGlvbi1jbG9zaW5nJyk7XG52YXIgaXNBcnJheUl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWFycmF5LWl0ZXJhdG9yLW1ldGhvZCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eScpO1xudmFyIGdldEl0ZXJhdG9yTWV0aG9kID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1pdGVyYXRvci1tZXRob2QnKTtcblxuLy8gYEFycmF5LmZyb21gIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkuZnJvbVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XG4gIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcbiAgdmFyIEMgPSB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5O1xuICB2YXIgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgdmFyIG1hcGZuID0gYXJndW1lbnRzTGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcbiAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xuICB2YXIgaXRlcmF0b3JNZXRob2QgPSBnZXRJdGVyYXRvck1ldGhvZChPKTtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvciwgbmV4dCwgdmFsdWU7XG4gIGlmIChtYXBwaW5nKSBtYXBmbiA9IGJpbmQobWFwZm4sIGFyZ3VtZW50c0xlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xuICAvLyBpZiB0aGUgdGFyZ2V0IGlzIG5vdCBpdGVyYWJsZSBvciBpdCdzIGFuIGFycmF5IHdpdGggdGhlIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2UgYSBzaW1wbGUgY2FzZVxuICBpZiAoaXRlcmF0b3JNZXRob2QgIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcmF0b3JNZXRob2QoaXRlcmF0b3JNZXRob2QpKSkge1xuICAgIGl0ZXJhdG9yID0gaXRlcmF0b3JNZXRob2QuY2FsbChPKTtcbiAgICBuZXh0ID0gaXRlcmF0b3IubmV4dDtcbiAgICByZXN1bHQgPSBuZXcgQygpO1xuICAgIGZvciAoOyEoc3RlcCA9IG5leHQuY2FsbChpdGVyYXRvcikpLmRvbmU7IGluZGV4KyspIHtcbiAgICAgIHZhbHVlID0gbWFwcGluZyA/IGNhbGxXaXRoU2FmZUl0ZXJhdGlvbkNsb3NpbmcoaXRlcmF0b3IsIG1hcGZuLCBbc3RlcC52YWx1ZSwgaW5kZXhdLCB0cnVlKSA6IHN0ZXAudmFsdWU7XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcbiAgICByZXN1bHQgPSBuZXcgQyhsZW5ndGgpO1xuICAgIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICB2YWx1ZSA9IG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF07XG4gICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCB2YWx1ZSk7XG4gICAgfVxuICB9XG4gIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcbiAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tcHJpbWl0aXZlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUoa2V5KTtcbiAgaWYgKHByb3BlcnR5S2V5IGluIG9iamVjdCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihvYmplY3QsIHByb3BlcnR5S2V5LCBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMCwgdmFsdWUpKTtcbiAgZWxzZSBvYmplY3RbcHJvcGVydHlLZXldID0gdmFsdWU7XG59O1xuIiwidmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHRvU3RyaW5nID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC10by1zdHJpbmcnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xuaWYgKCFUT19TVFJJTkdfVEFHX1NVUFBPUlQpIHtcbiAgcmVkZWZpbmUoT2JqZWN0LnByb3RvdHlwZSwgJ3RvU3RyaW5nJywgdG9TdHJpbmcsIHsgdW5zYWZlOiB0cnVlIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIFRPX1NUUklOR19UQUdfU1VQUE9SVCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1zdHJpbmctdGFnLXN1cHBvcnQnKTtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YnKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZ1xubW9kdWxlLmV4cG9ydHMgPSBUT19TVFJJTkdfVEFHX1NVUFBPUlQgPyB7fS50b1N0cmluZyA6IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ1tvYmplY3QgJyArIGNsYXNzb2YodGhpcykgKyAnXSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUtYWxsJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1zcGVjaWVzJyk7XG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLWluc3RhbmNlJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcbnZhciBjaGVja0NvcnJlY3RuZXNzT2ZJdGVyYXRpb24gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2hlY2stY29ycmVjdG5lc3Mtb2YtaXRlcmF0aW9uJyk7XG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NwZWNpZXMtY29uc3RydWN0b3InKTtcbnZhciB0YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL21pY3JvdGFzaycpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIGhvc3RSZXBvcnRFcnJvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaG9zdC1yZXBvcnQtZXJyb3JzJyk7XG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGVyZm9ybScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBpc0ZvcmNlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1mb3JjZWQnKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBWOF9WRVJTSU9OID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS12OC12ZXJzaW9uJyk7XG5cbnZhciBTUEVDSUVTID0gd2VsbEtub3duU3ltYm9sKCdzcGVjaWVzJyk7XG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXQ7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsUHJvbWlzZVN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoUFJPTUlTRSk7XG52YXIgUHJvbWlzZUNvbnN0cnVjdG9yID0gTmF0aXZlUHJvbWlzZTtcbnZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciAkZmV0Y2ggPSBnZXRCdWlsdEluKCdmZXRjaCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcbnZhciBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eTtcbnZhciBJU19OT0RFID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XG52YXIgRElTUEFUQ0hfRVZFTlQgPSAhIShkb2N1bWVudCAmJiBkb2N1bWVudC5jcmVhdGVFdmVudCAmJiBnbG9iYWwuZGlzcGF0Y2hFdmVudCk7XG52YXIgVU5IQU5ETEVEX1JFSkVDVElPTiA9ICd1bmhhbmRsZWRyZWplY3Rpb24nO1xudmFyIFJFSkVDVElPTl9IQU5ETEVEID0gJ3JlamVjdGlvbmhhbmRsZWQnO1xudmFyIFBFTkRJTkcgPSAwO1xudmFyIEZVTEZJTExFRCA9IDE7XG52YXIgUkVKRUNURUQgPSAyO1xudmFyIEhBTkRMRUQgPSAxO1xudmFyIFVOSEFORExFRCA9IDI7XG52YXIgSW50ZXJuYWwsIE93blByb21pc2VDYXBhYmlsaXR5LCBQcm9taXNlV3JhcHBlciwgbmF0aXZlVGhlbjtcblxudmFyIEZPUkNFRCA9IGlzRm9yY2VkKFBST01JU0UsIGZ1bmN0aW9uICgpIHtcbiAgdmFyIEdMT0JBTF9DT1JFX0pTX1BST01JU0UgPSBpbnNwZWN0U291cmNlKFByb21pc2VDb25zdHJ1Y3RvcikgIT09IFN0cmluZyhQcm9taXNlQ29uc3RydWN0b3IpO1xuICBpZiAoIUdMT0JBTF9DT1JFX0pTX1BST01JU0UpIHtcbiAgICAvLyBWOCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXG4gICAgLy8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9ODMwNTY1XG4gICAgLy8gV2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcbiAgICBpZiAoVjhfVkVSU0lPTiA9PT0gNjYpIHJldHVybiB0cnVlO1xuICAgIC8vIFVuaGFuZGxlZCByZWplY3Rpb25zIHRyYWNraW5nIHN1cHBvcnQsIE5vZGVKUyBQcm9taXNlIHdpdGhvdXQgaXQgZmFpbHMgQEBzcGVjaWVzIHRlc3RcbiAgICBpZiAoIUlTX05PREUgJiYgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCAhPSAnZnVuY3Rpb24nKSByZXR1cm4gdHJ1ZTtcbiAgfVxuICAvLyBXZSBuZWVkIFByb21pc2UjZmluYWxseSBpbiB0aGUgcHVyZSB2ZXJzaW9uIGZvciBwcmV2ZW50aW5nIHByb3RvdHlwZSBwb2xsdXRpb25cbiAgaWYgKElTX1BVUkUgJiYgIVByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGVbJ2ZpbmFsbHknXSkgcmV0dXJuIHRydWU7XG4gIC8vIFdlIGNhbid0IHVzZSBAQHNwZWNpZXMgZmVhdHVyZSBkZXRlY3Rpb24gaW4gVjggc2luY2UgaXQgY2F1c2VzXG4gIC8vIGRlb3B0aW1pemF0aW9uIGFuZCBwZXJmb3JtYW5jZSBkZWdyYWRhdGlvblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvNjc5XG4gIGlmIChWOF9WRVJTSU9OID49IDUxICYmIC9uYXRpdmUgY29kZS8udGVzdChQcm9taXNlQ29uc3RydWN0b3IpKSByZXR1cm4gZmFsc2U7XG4gIC8vIERldGVjdCBjb3JyZWN0bmVzcyBvZiBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZUNvbnN0cnVjdG9yLnJlc29sdmUoMSk7XG4gIHZhciBGYWtlUHJvbWlzZSA9IGZ1bmN0aW9uIChleGVjKSB7XG4gICAgZXhlYyhmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG4gIH07XG4gIHZhciBjb25zdHJ1Y3RvciA9IHByb21pc2UuY29uc3RydWN0b3IgPSB7fTtcbiAgY29uc3RydWN0b3JbU1BFQ0lFU10gPSBGYWtlUHJvbWlzZTtcbiAgcmV0dXJuICEocHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZSk7XG59KTtcblxudmFyIElOQ09SUkVDVF9JVEVSQVRJT04gPSBGT1JDRUQgfHwgIWNoZWNrQ29ycmVjdG5lc3NPZkl0ZXJhdGlvbihmdW5jdGlvbiAoaXRlcmFibGUpIHtcbiAgUHJvbWlzZUNvbnN0cnVjdG9yLmFsbChpdGVyYWJsZSlbJ2NhdGNoJ10oZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcbn0pO1xuXG4vLyBoZWxwZXJzXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xuICB2YXIgdGhlbjtcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xufTtcblxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgaXNSZWplY3QpIHtcbiAgaWYgKHN0YXRlLm5vdGlmaWVkKSByZXR1cm47XG4gIHN0YXRlLm5vdGlmaWVkID0gdHJ1ZTtcbiAgdmFyIGNoYWluID0gc3RhdGUucmVhY3Rpb25zO1xuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xuICAgIHZhciB2YWx1ZSA9IHN0YXRlLnZhbHVlO1xuICAgIHZhciBvayA9IHN0YXRlLnN0YXRlID09IEZVTEZJTExFRDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXG4gICAgd2hpbGUgKGNoYWluLmxlbmd0aCA+IGluZGV4KSB7XG4gICAgICB2YXIgcmVhY3Rpb24gPSBjaGFpbltpbmRleCsrXTtcbiAgICAgIHZhciBoYW5kbGVyID0gb2sgPyByZWFjdGlvbi5vayA6IHJlYWN0aW9uLmZhaWw7XG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xuICAgICAgdmFyIGRvbWFpbiA9IHJlYWN0aW9uLmRvbWFpbjtcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChoYW5kbGVyKSB7XG4gICAgICAgICAgaWYgKCFvaykge1xuICAgICAgICAgICAgaWYgKHN0YXRlLnJlamVjdGlvbiA9PT0gVU5IQU5ETEVEKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlLCBzdGF0ZSk7XG4gICAgICAgICAgICBzdGF0ZS5yZWplY3Rpb24gPSBIQU5ETEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZG9tYWluKSBkb21haW4uZW50ZXIoKTtcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBjYW4gdGhyb3dcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgICAgICAgZG9tYWluLmV4aXQoKTtcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSBlbHNlIHJlamVjdCh2YWx1ZSk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBpZiAoZG9tYWluICYmICFleGl0ZWQpIGRvbWFpbi5leGl0KCk7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRlLnJlYWN0aW9ucyA9IFtdO1xuICAgIHN0YXRlLm5vdGlmaWVkID0gZmFsc2U7XG4gICAgaWYgKGlzUmVqZWN0ICYmICFzdGF0ZS5yZWplY3Rpb24pIG9uVW5oYW5kbGVkKHByb21pc2UsIHN0YXRlKTtcbiAgfSk7XG59O1xuXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBwcm9taXNlLCByZWFzb24pIHtcbiAgdmFyIGV2ZW50LCBoYW5kbGVyO1xuICBpZiAoRElTUEFUQ0hfRVZFTlQpIHtcbiAgICBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGV2ZW50LnByb21pc2UgPSBwcm9taXNlO1xuICAgIGV2ZW50LnJlYXNvbiA9IHJlYXNvbjtcbiAgICBldmVudC5pbml0RXZlbnQobmFtZSwgZmFsc2UsIHRydWUpO1xuICAgIGdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgfSBlbHNlIGV2ZW50ID0geyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHJlYXNvbiB9O1xuICBpZiAoaGFuZGxlciA9IGdsb2JhbFsnb24nICsgbmFtZV0pIGhhbmRsZXIoZXZlbnQpO1xuICBlbHNlIGlmIChuYW1lID09PSBVTkhBTkRMRURfUkVKRUNUSU9OKSBob3N0UmVwb3J0RXJyb3JzKCdVbmhhbmRsZWQgcHJvbWlzZSByZWplY3Rpb24nLCByZWFzb24pO1xufTtcblxudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlKSB7XG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdmFsdWUgPSBzdGF0ZS52YWx1ZTtcbiAgICB2YXIgSVNfVU5IQU5ETEVEID0gaXNVbmhhbmRsZWQoc3RhdGUpO1xuICAgIHZhciByZXN1bHQ7XG4gICAgaWYgKElTX1VOSEFORExFRCkge1xuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmIChJU19OT0RFKSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFVOSEFORExFRF9SRUpFQ1RJT04sIHByb21pc2UsIHZhbHVlKTtcbiAgICAgIH0pO1xuICAgICAgLy8gQnJvd3NlcnMgc2hvdWxkIG5vdCB0cmlnZ2VyIGByZWplY3Rpb25IYW5kbGVkYCBldmVudCBpZiBpdCB3YXMgaGFuZGxlZCBoZXJlLCBOb2RlSlMgLSBzaG91bGRcbiAgICAgIHN0YXRlLnJlamVjdGlvbiA9IElTX05PREUgfHwgaXNVbmhhbmRsZWQoc3RhdGUpID8gVU5IQU5ETEVEIDogSEFORExFRDtcbiAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHRocm93IHJlc3VsdC52YWx1ZTtcbiAgICB9XG4gIH0pO1xufTtcblxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHN0YXRlKSB7XG4gIHJldHVybiBzdGF0ZS5yZWplY3Rpb24gIT09IEhBTkRMRUQgJiYgIXN0YXRlLnBhcmVudDtcbn07XG5cbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSkge1xuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKElTX05PREUpIHtcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xuICAgIH0gZWxzZSBkaXNwYXRjaEV2ZW50KFJFSkVDVElPTl9IQU5ETEVELCBwcm9taXNlLCBzdGF0ZS52YWx1ZSk7XG4gIH0pO1xufTtcblxudmFyIGJpbmQgPSBmdW5jdGlvbiAoZm4sIHByb21pc2UsIHN0YXRlLCB1bndyYXApIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGZuKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKTtcbiAgfTtcbn07XG5cbnZhciBpbnRlcm5hbFJlamVjdCA9IGZ1bmN0aW9uIChwcm9taXNlLCBzdGF0ZSwgdmFsdWUsIHVud3JhcCkge1xuICBpZiAoc3RhdGUuZG9uZSkgcmV0dXJuO1xuICBzdGF0ZS5kb25lID0gdHJ1ZTtcbiAgaWYgKHVud3JhcCkgc3RhdGUgPSB1bndyYXA7XG4gIHN0YXRlLnZhbHVlID0gdmFsdWU7XG4gIHN0YXRlLnN0YXRlID0gUkVKRUNURUQ7XG4gIG5vdGlmeShwcm9taXNlLCBzdGF0ZSwgdHJ1ZSk7XG59O1xuXG52YXIgaW50ZXJuYWxSZXNvbHZlID0gZnVuY3Rpb24gKHByb21pc2UsIHN0YXRlLCB2YWx1ZSwgdW53cmFwKSB7XG4gIGlmIChzdGF0ZS5kb25lKSByZXR1cm47XG4gIHN0YXRlLmRvbmUgPSB0cnVlO1xuICBpZiAodW53cmFwKSBzdGF0ZSA9IHVud3JhcDtcbiAgdHJ5IHtcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xuICAgIHZhciB0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSk7XG4gICAgaWYgKHRoZW4pIHtcbiAgICAgIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB3cmFwcGVyID0geyBkb25lOiBmYWxzZSB9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSxcbiAgICAgICAgICAgIGJpbmQoaW50ZXJuYWxSZXNvbHZlLCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSksXG4gICAgICAgICAgICBiaW5kKGludGVybmFsUmVqZWN0LCBwcm9taXNlLCB3cmFwcGVyLCBzdGF0ZSlcbiAgICAgICAgICApO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGludGVybmFsUmVqZWN0KHByb21pc2UsIHdyYXBwZXIsIGVycm9yLCBzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS52YWx1ZSA9IHZhbHVlO1xuICAgICAgc3RhdGUuc3RhdGUgPSBGVUxGSUxMRUQ7XG4gICAgICBub3RpZnkocHJvbWlzZSwgc3RhdGUsIGZhbHNlKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaW50ZXJuYWxSZWplY3QocHJvbWlzZSwgeyBkb25lOiBmYWxzZSB9LCBlcnJvciwgc3RhdGUpO1xuICB9XG59O1xuXG4vLyBjb25zdHJ1Y3RvciBwb2x5ZmlsbFxuaWYgKEZPUkNFRCkge1xuICAvLyAyNS40LjMuMSBQcm9taXNlKGV4ZWN1dG9yKVxuICBQcm9taXNlQ29uc3RydWN0b3IgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XG4gICAgYW5JbnN0YW5jZSh0aGlzLCBQcm9taXNlQ29uc3RydWN0b3IsIFBST01JU0UpO1xuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XG4gICAgSW50ZXJuYWwuY2FsbCh0aGlzKTtcbiAgICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICAgIHRyeSB7XG4gICAgICBleGVjdXRvcihiaW5kKGludGVybmFsUmVzb2x2ZSwgdGhpcywgc3RhdGUpLCBiaW5kKGludGVybmFsUmVqZWN0LCB0aGlzLCBzdGF0ZSkpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBpbnRlcm5hbFJlamVjdCh0aGlzLCBzdGF0ZSwgZXJyb3IpO1xuICAgIH1cbiAgfTtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgICAgdHlwZTogUFJPTUlTRSxcbiAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgbm90aWZpZWQ6IGZhbHNlLFxuICAgICAgcGFyZW50OiBmYWxzZSxcbiAgICAgIHJlYWN0aW9uczogW10sXG4gICAgICByZWplY3Rpb246IGZhbHNlLFxuICAgICAgc3RhdGU6IFBFTkRJTkcsXG4gICAgICB2YWx1ZTogdW5kZWZpbmVkXG4gICAgfSk7XG4gIH07XG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKFByb21pc2VDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHtcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUudGhlbmAgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUudGhlblxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsUHJvbWlzZVN0YXRlKHRoaXMpO1xuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIFByb21pc2VDb25zdHJ1Y3RvcikpO1xuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XG4gICAgICByZWFjdGlvbi5kb21haW4gPSBJU19OT0RFID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XG4gICAgICBzdGF0ZS5wYXJlbnQgPSB0cnVlO1xuICAgICAgc3RhdGUucmVhY3Rpb25zLnB1c2gocmVhY3Rpb24pO1xuICAgICAgaWYgKHN0YXRlLnN0YXRlICE9IFBFTkRJTkcpIG5vdGlmeSh0aGlzLCBzdGF0ZSwgZmFsc2UpO1xuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XG4gICAgfSxcbiAgICAvLyBgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2hgIG1ldGhvZFxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucHJvdG90eXBlLmNhdGNoXG4gICAgJ2NhdGNoJzogZnVuY3Rpb24gKG9uUmVqZWN0ZWQpIHtcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcbiAgICB9XG4gIH0pO1xuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xuICAgIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUocHJvbWlzZSk7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnJlc29sdmUgPSBiaW5kKGludGVybmFsUmVzb2x2ZSwgcHJvbWlzZSwgc3RhdGUpO1xuICAgIHRoaXMucmVqZWN0ID0gYmluZChpbnRlcm5hbFJlamVjdCwgcHJvbWlzZSwgc3RhdGUpO1xuICB9O1xuICBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoQykge1xuICAgIHJldHVybiBDID09PSBQcm9taXNlQ29uc3RydWN0b3IgfHwgQyA9PT0gUHJvbWlzZVdyYXBwZXJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgfTtcblxuICBpZiAoIUlTX1BVUkUgJiYgdHlwZW9mIE5hdGl2ZVByb21pc2UgPT0gJ2Z1bmN0aW9uJykge1xuICAgIG5hdGl2ZVRoZW4gPSBOYXRpdmVQcm9taXNlLnByb3RvdHlwZS50aGVuO1xuXG4gICAgLy8gd3JhcCBuYXRpdmUgUHJvbWlzZSN0aGVuIGZvciBuYXRpdmUgYXN5bmMgZnVuY3Rpb25zXG4gICAgcmVkZWZpbmUoTmF0aXZlUHJvbWlzZS5wcm90b3R5cGUsICd0aGVuJywgZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlQ29uc3RydWN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBuYXRpdmVUaGVuLmNhbGwodGhhdCwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgIH0pLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy82NDBcbiAgICB9LCB7IHVuc2FmZTogdHJ1ZSB9KTtcblxuICAgIC8vIHdyYXAgZmV0Y2ggcmVzdWx0XG4gICAgaWYgKHR5cGVvZiAkZmV0Y2ggPT0gJ2Z1bmN0aW9uJykgJCh7IGdsb2JhbDogdHJ1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgZm9yY2VkOiB0cnVlIH0sIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuICAgICAgZmV0Y2g6IGZ1bmN0aW9uIGZldGNoKGlucHV0IC8qICwgaW5pdCAqLykge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoUHJvbWlzZUNvbnN0cnVjdG9yLCAkZmV0Y2guYXBwbHkoZ2xvYmFsLCBhcmd1bWVudHMpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG4kKHsgZ2xvYmFsOiB0cnVlLCB3cmFwOiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIFByb21pc2U6IFByb21pc2VDb25zdHJ1Y3RvclxufSk7XG5cbnNldFRvU3RyaW5nVGFnKFByb21pc2VDb25zdHJ1Y3RvciwgUFJPTUlTRSwgZmFsc2UsIHRydWUpO1xuc2V0U3BlY2llcyhQUk9NSVNFKTtcblxuUHJvbWlzZVdyYXBwZXIgPSBnZXRCdWlsdEluKFBST01JU0UpO1xuXG4vLyBzdGF0aWNzXG4kKHsgdGFyZ2V0OiBQUk9NSVNFLCBzdGF0OiB0cnVlLCBmb3JjZWQ6IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlamVjdGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UucmVqZWN0XG4gIHJlamVjdDogZnVuY3Rpb24gcmVqZWN0KHIpIHtcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xuICAgIGNhcGFiaWxpdHkucmVqZWN0LmNhbGwodW5kZWZpbmVkLCByKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcblxuJCh7IHRhcmdldDogUFJPTUlTRSwgc3RhdDogdHJ1ZSwgZm9yY2VkOiBJU19QVVJFIHx8IEZPUkNFRCB9LCB7XG4gIC8vIGBQcm9taXNlLnJlc29sdmVgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1wcm9taXNlLnJlc29sdmVcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XG4gICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKElTX1BVUkUgJiYgdGhpcyA9PT0gUHJvbWlzZVdyYXBwZXIgPyBQcm9taXNlQ29uc3RydWN0b3IgOiB0aGlzLCB4KTtcbiAgfVxufSk7XG5cbiQoeyB0YXJnZXQ6IFBST01JU0UsIHN0YXQ6IHRydWUsIGZvcmNlZDogSU5DT1JSRUNUX0lURVJBVElPTiB9LCB7XG4gIC8vIGBQcm9taXNlLmFsbGAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXByb21pc2UuYWxsXG4gIGFsbDogZnVuY3Rpb24gYWxsKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciAkcHJvbWlzZVJlc29sdmUgPSBhRnVuY3Rpb24oQy5yZXNvbHZlKTtcbiAgICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICAgIHZhciBjb3VudGVyID0gMDtcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gY291bnRlcisrO1xuICAgICAgICB2YXIgYWxyZWFkeUNhbGxlZCA9IGZhbHNlO1xuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xuICAgICAgICByZW1haW5pbmcrKztcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XG4gICAgICAgIH0sIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9LFxuICAvLyBgUHJvbWlzZS5yYWNlYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5yYWNlXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcbiAgICB2YXIgQyA9IHRoaXM7XG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyICRwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgaXRlcmF0ZShpdGVyYWJsZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcbiAgICAgICAgJHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsInZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgb3B0aW9ucykge1xuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIG9wdGlvbnMpO1xuICByZXR1cm4gdGFyZ2V0O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xuXG52YXIgU1BFQ0lFUyA9IHdlbGxLbm93blN5bWJvbCgnc3BlY2llcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT05TVFJVQ1RPUl9OQU1FKSB7XG4gIHZhciBDb25zdHJ1Y3RvciA9IGdldEJ1aWx0SW4oQ09OU1RSVUNUT1JfTkFNRSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG5cbiAgaWYgKERFU0NSSVBUT1JTICYmIENvbnN0cnVjdG9yICYmICFDb25zdHJ1Y3RvcltTUEVDSUVTXSkge1xuICAgIGRlZmluZVByb3BlcnR5KENvbnN0cnVjdG9yLCBTUEVDSUVTLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICB9KTtcbiAgfVxufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBDb25zdHJ1Y3RvciwgbmFtZSkge1xuICBpZiAoIShpdCBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkge1xuICAgIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0ICcgKyAobmFtZSA/IG5hbWUgKyAnICcgOiAnJykgKyAnaW52b2NhdGlvbicpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NsYXNzb2YtcmF3Jyk7XG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Rhc2snKS5zZXQ7XG52YXIgSVNfSU9TID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VuZ2luZS1pcy1pb3MnKTtcblxudmFyIE11dGF0aW9uT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XG52YXIgUHJvbWlzZSA9IGdsb2JhbC5Qcm9taXNlO1xudmFyIElTX05PREUgPSBjbGFzc29mKHByb2Nlc3MpID09ICdwcm9jZXNzJztcbi8vIE5vZGUuanMgMTEgc2hvd3MgRXhwZXJpbWVudGFsV2FybmluZyBvbiBnZXR0aW5nIGBxdWV1ZU1pY3JvdGFza2BcbnZhciBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZ2xvYmFsLCAncXVldWVNaWNyb3Rhc2snKTtcbnZhciBxdWV1ZU1pY3JvdGFzayA9IHF1ZXVlTWljcm90YXNrRGVzY3JpcHRvciAmJiBxdWV1ZU1pY3JvdGFza0Rlc2NyaXB0b3IudmFsdWU7XG5cbnZhciBmbHVzaCwgaGVhZCwgbGFzdCwgbm90aWZ5LCB0b2dnbGUsIG5vZGUsIHByb21pc2UsIHRoZW47XG5cbi8vIG1vZGVybiBlbmdpbmVzIGhhdmUgcXVldWVNaWNyb3Rhc2sgbWV0aG9kXG5pZiAoIXF1ZXVlTWljcm90YXNrKSB7XG4gIGZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBwYXJlbnQsIGZuO1xuICAgIGlmIChJU19OT0RFICYmIChwYXJlbnQgPSBwcm9jZXNzLmRvbWFpbikpIHBhcmVudC5leGl0KCk7XG4gICAgd2hpbGUgKGhlYWQpIHtcbiAgICAgIGZuID0gaGVhZC5mbjtcbiAgICAgIGhlYWQgPSBoZWFkLm5leHQ7XG4gICAgICB0cnkge1xuICAgICAgICBmbigpO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xuICAgICAgICBlbHNlIGxhc3QgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcbiAgfTtcblxuICAvLyBOb2RlLmpzXG4gIGlmIChJU19OT0RFKSB7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgcHJvY2Vzcy5uZXh0VGljayhmbHVzaCk7XG4gICAgfTtcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxuICB9IGVsc2UgaWYgKE11dGF0aW9uT2JzZXJ2ZXIgJiYgIUlTX0lPUykge1xuICAgIHRvZ2dsZSA9IHRydWU7XG4gICAgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBuZXcgTXV0YXRpb25PYnNlcnZlcihmbHVzaCkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcbiAgICB9O1xuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XG4gICAgLy8gUHJvbWlzZS5yZXNvbHZlIHdpdGhvdXQgYW4gYXJndW1lbnQgdGhyb3dzIGFuIGVycm9yIGluIExHIFdlYk9TIDJcbiAgICBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgdGhlbiA9IHByb21pc2UudGhlbjtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGVuLmNhbGwocHJvbWlzZSwgZmx1c2gpO1xuICAgIH07XG4gIC8vIGZvciBvdGhlciBlbnZpcm9ubWVudHMgLSBtYWNyb3Rhc2sgYmFzZWQgb246XG4gIC8vIC0gc2V0SW1tZWRpYXRlXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcbiAgLy8gLSB3aW5kb3cucG9zdE1lc3NhZ1xuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxuICAvLyAtIHNldFRpbWVvdXRcbiAgfSBlbHNlIHtcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXG4gICAgICBtYWNyb3Rhc2suY2FsbChnbG9iYWwsIGZsdXNoKTtcbiAgICB9O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcXVldWVNaWNyb3Rhc2sgfHwgZnVuY3Rpb24gKGZuKSB7XG4gIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xuICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcbiAgaWYgKCFoZWFkKSB7XG4gICAgaGVhZCA9IHRhc2s7XG4gICAgbm90aWZ5KCk7XG4gIH0gbGFzdCA9IHRhc2s7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICB2YXIgY29uc29sZSA9IGdsb2JhbC5jb25zb2xlO1xuICBpZiAoY29uc29sZSAmJiBjb25zb2xlLmVycm9yKSB7XG4gICAgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGNvbnNvbGUuZXJyb3IoYSkgOiBjb25zb2xlLmVycm9yKGEsIGIpO1xuICB9XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW5naW5lLXVzZXItYWdlbnQnKTtcblxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcbnZhciB2OCA9IHZlcnNpb25zICYmIHZlcnNpb25zLnY4O1xudmFyIG1hdGNoLCB2ZXJzaW9uO1xuXG5pZiAodjgpIHtcbiAgbWF0Y2ggPSB2OC5zcGxpdCgnLicpO1xuICB2ZXJzaW9uID0gbWF0Y2hbMF0gKyBtYXRjaFsxXTtcbn0gZWxzZSBpZiAodXNlckFnZW50KSB7XG4gIG1hdGNoID0gdXNlckFnZW50Lm1hdGNoKC9FZGdlXFwvKFxcZCspLyk7XG4gIGlmICghbWF0Y2ggfHwgbWF0Y2hbMV0gPj0gNzQpIHtcbiAgICBtYXRjaCA9IHVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoKSB2ZXJzaW9uID0gbWF0Y2hbMV07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSB2ZXJzaW9uICYmICt2ZXJzaW9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgTmF0aXZlUHJvbWlzZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtcHJvbWlzZS1jb25zdHJ1Y3RvcicpO1xudmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3Byb21pc2UtcmVzb2x2ZScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG5cbi8vIFNhZmFyaSBidWcgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTIwMDgyOVxudmFyIE5PTl9HRU5FUklDID0gISFOYXRpdmVQcm9taXNlICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgTmF0aXZlUHJvbWlzZS5wcm90b3R5cGVbJ2ZpbmFsbHknXS5jYWxsKHsgdGhlbjogZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9IH0sIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XG59KTtcblxuLy8gYFByb21pc2UucHJvdG90eXBlLmZpbmFsbHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcHJvbWlzZS5wcm90b3R5cGUuZmluYWxseVxuJCh7IHRhcmdldDogJ1Byb21pc2UnLCBwcm90bzogdHJ1ZSwgcmVhbDogdHJ1ZSwgZm9yY2VkOiBOT05fR0VORVJJQyB9LCB7XG4gICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xuICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGdldEJ1aWx0SW4oJ1Byb21pc2UnKSk7XG4gICAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XG4gICAgcmV0dXJuIHRoaXMudGhlbihcbiAgICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xuICAgICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XG4gICAgICB9IDogb25GaW5hbGx5LFxuICAgICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xuICAgICAgfSA6IG9uRmluYWxseVxuICAgICk7XG4gIH1cbn0pO1xuXG4vLyBwYXRjaCBuYXRpdmUgUHJvbWlzZS5wcm90b3R5cGUgZm9yIG5hdGl2ZSBhc3luYyBmdW5jdGlvbnNcbmlmICghSVNfUFVSRSAmJiB0eXBlb2YgTmF0aXZlUHJvbWlzZSA9PSAnZnVuY3Rpb24nICYmICFOYXRpdmVQcm9taXNlLnByb3RvdHlwZVsnZmluYWxseSddKSB7XG4gIHJlZGVmaW5lKE5hdGl2ZVByb21pc2UucHJvdG90eXBlLCAnZmluYWxseScsIGdldEJ1aWx0SW4oJ1Byb21pc2UnKS5wcm90b3R5cGVbJ2ZpbmFsbHknXSk7XG59XG4iLCIndXNlIHN0cmljdCc7XG52YXIgY2hhckF0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3N0cmluZy1tdWx0aWJ5dGUnKS5jaGFyQXQ7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgU1RSSU5HX0lURVJBVE9SID0gJ1N0cmluZyBJdGVyYXRvcic7XG52YXIgc2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuc2V0O1xudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcihTVFJJTkdfSVRFUkFUT1IpO1xuXG4vLyBgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLUBAaXRlcmF0b3JcbmRlZmluZUl0ZXJhdG9yKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBTVFJJTkdfSVRFUkFUT1IsXG4gICAgc3RyaW5nOiBTdHJpbmcoaXRlcmF0ZWQpLFxuICAgIGluZGV4OiAwXG4gIH0pO1xuLy8gYCVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lc3RyaW5naXRlcmF0b3Jwcm90b3R5cGUlLm5leHRcbn0sIGZ1bmN0aW9uIG5leHQoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciBzdHJpbmcgPSBzdGF0ZS5zdHJpbmc7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4O1xuICB2YXIgcG9pbnQ7XG4gIGlmIChpbmRleCA+PSBzdHJpbmcubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIHBvaW50ID0gY2hhckF0KHN0cmluZywgaW5kZXgpO1xuICBzdGF0ZS5pbmRleCArPSBwb2ludC5sZW5ndGg7XG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcbn0pO1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxuLy8gYFN0cmluZy5wcm90b3R5cGUueyBjb2RlUG9pbnRBdCwgYXQgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChDT05WRVJUX1RPX1NUUklORykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBwb3MpIHtcbiAgICB2YXIgUyA9IFN0cmluZyhyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKCR0aGlzKSk7XG4gICAgdmFyIHBvc2l0aW9uID0gdG9JbnRlZ2VyKHBvcyk7XG4gICAgdmFyIHNpemUgPSBTLmxlbmd0aDtcbiAgICB2YXIgZmlyc3QsIHNlY29uZDtcbiAgICBpZiAocG9zaXRpb24gPCAwIHx8IHBvc2l0aW9uID49IHNpemUpIHJldHVybiBDT05WRVJUX1RPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xuICAgIGZpcnN0ID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uKTtcbiAgICByZXR1cm4gZmlyc3QgPCAweEQ4MDAgfHwgZmlyc3QgPiAweERCRkYgfHwgcG9zaXRpb24gKyAxID09PSBzaXplXG4gICAgICB8fCAoc2Vjb25kID0gUy5jaGFyQ29kZUF0KHBvc2l0aW9uICsgMSkpIDwgMHhEQzAwIHx8IHNlY29uZCA+IDB4REZGRlxuICAgICAgICA/IENPTlZFUlRfVE9fU1RSSU5HID8gUy5jaGFyQXQocG9zaXRpb24pIDogZmlyc3RcbiAgICAgICAgOiBDT05WRVJUX1RPX1NUUklORyA/IFMuc2xpY2UocG9zaXRpb24sIHBvc2l0aW9uICsgMikgOiAoZmlyc3QgLSAweEQ4MDAgPDwgMTApICsgKHNlY29uZCAtIDB4REMwMCkgKyAweDEwMDAwO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5jb2RlcG9pbnRhdFxuICBjb2RlQXQ6IGNyZWF0ZU1ldGhvZChmYWxzZSksXG4gIC8vIGBTdHJpbmcucHJvdG90eXBlLmF0YCBtZXRob2RcbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxuICBjaGFyQXQ6IGNyZWF0ZU1ldGhvZCh0cnVlKVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIG9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMnKTtcblxuLy8gYE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0aWVzXG5tb2R1bGUuZXhwb3J0cyA9IERFU0NSSVBUT1JTID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIHZhciBrZXlzID0gb2JqZWN0S2V5cyhQcm9wZXJ0aWVzKTtcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIga2V5O1xuICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoTywga2V5ID0ga2V5c1tpbmRleCsrXSwgUHJvcGVydGllc1trZXldKTtcbiAgcmV0dXJuIE87XG59O1xuIiwidmFyIGludGVybmFsT2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2VudW0tYnVnLWtleXMnKTtcblxuLy8gYE9iamVjdC5rZXlzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5rZXlzXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGVudW1CdWdLZXlzKTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpICYmIGl0ICE9PSBudWxsKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3Qgc2V0IFwiICsgU3RyaW5nKGl0KSArICcgYXMgYSBwcm90b3R5cGUnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1zZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbEFnZ3JlZ2F0ZUVycm9yU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldHRlckZvcignQWdncmVnYXRlRXJyb3InKTtcblxudmFyICRBZ2dyZWdhdGVFcnJvciA9IGZ1bmN0aW9uIEFnZ3JlZ2F0ZUVycm9yKGVycm9ycywgbWVzc2FnZSkge1xuICB2YXIgdGhhdCA9IHRoaXM7XG4gIGlmICghKHRoYXQgaW5zdGFuY2VvZiAkQWdncmVnYXRlRXJyb3IpKSByZXR1cm4gbmV3ICRBZ2dyZWdhdGVFcnJvcihlcnJvcnMsIG1lc3NhZ2UpO1xuICBpZiAoc2V0UHJvdG90eXBlT2YpIHtcbiAgICB0aGF0ID0gc2V0UHJvdG90eXBlT2YobmV3IEVycm9yKG1lc3NhZ2UpLCBnZXRQcm90b3R5cGVPZih0aGF0KSk7XG4gIH1cbiAgdmFyIGVycm9yc0FycmF5ID0gW107XG4gIGl0ZXJhdGUoZXJyb3JzLCBlcnJvcnNBcnJheS5wdXNoLCBlcnJvcnNBcnJheSk7XG4gIGlmIChERVNDUklQVE9SUykgc2V0SW50ZXJuYWxTdGF0ZSh0aGF0LCB7IGVycm9yczogZXJyb3JzQXJyYXksIHR5cGU6ICdBZ2dyZWdhdGVFcnJvcicgfSk7XG4gIGVsc2UgdGhhdC5lcnJvcnMgPSBlcnJvcnNBcnJheTtcbiAgaWYgKG1lc3NhZ2UgIT09IHVuZGVmaW5lZCkgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHRoYXQsICdtZXNzYWdlJywgU3RyaW5nKG1lc3NhZ2UpKTtcbiAgcmV0dXJuIHRoYXQ7XG59O1xuXG4kQWdncmVnYXRlRXJyb3IucHJvdG90eXBlID0gY3JlYXRlKEVycm9yLnByb3RvdHlwZSwge1xuICBjb25zdHJ1Y3RvcjogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDUsICRBZ2dyZWdhdGVFcnJvciksXG4gIG1lc3NhZ2U6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcig1LCAnJyksXG4gIG5hbWU6IGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcig1LCAnQWdncmVnYXRlRXJyb3InKVxufSk7XG5cbmlmIChERVNDUklQVE9SUykgZGVmaW5lUHJvcGVydHkuZigkQWdncmVnYXRlRXJyb3IucHJvdG90eXBlLCAnZXJyb3JzJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZ2V0SW50ZXJuYWxBZ2dyZWdhdGVFcnJvclN0YXRlKHRoaXMpLmVycm9ycztcbiAgfSxcbiAgY29uZmlndXJhYmxlOiB0cnVlXG59KTtcblxuJCh7IGdsb2JhbDogdHJ1ZSB9LCB7XG4gIEFnZ3JlZ2F0ZUVycm9yOiAkQWdncmVnYXRlRXJyb3Jcbn0pO1xuIiwiLy8gVE9ETzogUmVtb3ZlIGZyb20gYGNvcmUtanNANGBcbnJlcXVpcmUoJy4vZXMucHJvbWlzZS5hbGwtc2V0dGxlZC5qcycpO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9wZXJmb3JtJyk7XG52YXIgaXRlcmF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRlJyk7XG5cbi8vIGBQcm9taXNlLmFsbFNldHRsZWRgIG1ldGhvZFxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1hbGxTZXR0bGVkXG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHN0YXQ6IHRydWUgfSwge1xuICBhbGxTZXR0bGVkOiBmdW5jdGlvbiBhbGxTZXR0bGVkKGl0ZXJhYmxlKSB7XG4gICAgdmFyIEMgPSB0aGlzO1xuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZihDKTtcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHByb21pc2VSZXNvbHZlID0gYUZ1bmN0aW9uKEMucmVzb2x2ZSk7XG4gICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICB2YXIgY291bnRlciA9IDA7XG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcbiAgICAgIGl0ZXJhdGUoaXRlcmFibGUsIGZ1bmN0aW9uIChwcm9taXNlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGNvdW50ZXIrKztcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB7IHN0YXR1czogJ2Z1bGZpbGxlZCcsIHZhbHVlOiB2YWx1ZSB9O1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeUNhbGxlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xuICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSB7IHN0YXR1czogJ3JlamVjdGVkJywgcmVhc29uOiBlIH07XG4gICAgICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xuICAgIH0pO1xuICAgIGlmIChyZXN1bHQuZXJyb3IpIHJlamVjdChyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XG4gIH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyICQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZXhwb3J0Jyk7XG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtZnVuY3Rpb24nKTtcbnZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcbnZhciBpdGVyYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdGUnKTtcblxudmFyIFBST01JU0VfQU5ZX0VSUk9SID0gJ05vIG9uZSBwcm9taXNlIHJlc29sdmVkJztcblxuLy8gYFByb21pc2UuYW55YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtYW55XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHN0YXQ6IHRydWUgfSwge1xuICBhbnk6IGZ1bmN0aW9uIGFueShpdGVyYWJsZSkge1xuICAgIHZhciBDID0gdGhpcztcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYoQyk7XG4gICAgdmFyIHJlc29sdmUgPSBjYXBhYmlsaXR5LnJlc29sdmU7XG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBwcm9taXNlUmVzb2x2ZSA9IGFGdW5jdGlvbihDLnJlc29sdmUpO1xuICAgICAgdmFyIGVycm9ycyA9IFtdO1xuICAgICAgdmFyIGNvdW50ZXIgPSAwO1xuICAgICAgdmFyIHJlbWFpbmluZyA9IDE7XG4gICAgICB2YXIgYWxyZWFkeVJlc29sdmVkID0gZmFsc2U7XG4gICAgICBpdGVyYXRlKGl0ZXJhYmxlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgICAgICB2YXIgaW5kZXggPSBjb3VudGVyKys7XG4gICAgICAgIHZhciBhbHJlYWR5UmVqZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgZXJyb3JzLnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgcmVtYWluaW5nKys7XG4gICAgICAgIHByb21pc2VSZXNvbHZlLmNhbGwoQywgcHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBpZiAoYWxyZWFkeVJlamVjdGVkIHx8IGFscmVhZHlSZXNvbHZlZCkgcmV0dXJuO1xuICAgICAgICAgIGFscmVhZHlSZXNvbHZlZCA9IHRydWU7XG4gICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgaWYgKGFscmVhZHlSZWplY3RlZCB8fCBhbHJlYWR5UmVzb2x2ZWQpIHJldHVybjtcbiAgICAgICAgICBhbHJlYWR5UmVqZWN0ZWQgPSB0cnVlO1xuICAgICAgICAgIGVycm9yc1tpbmRleF0gPSBlO1xuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlamVjdChuZXcgKGdldEJ1aWx0SW4oJ0FnZ3JlZ2F0ZUVycm9yJykpKGVycm9ycywgUFJPTUlTRV9BTllfRVJST1IpKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlamVjdChuZXcgKGdldEJ1aWx0SW4oJ0FnZ3JlZ2F0ZUVycm9yJykpKGVycm9ycywgUFJPTUlTRV9BTllfRVJST1IpKTtcbiAgICB9KTtcbiAgICBpZiAocmVzdWx0LmVycm9yKSByZWplY3QocmVzdWx0LnZhbHVlKTtcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcbnZhciBwZXJmb3JtID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3BlcmZvcm0nKTtcblxuLy8gYFByb21pc2UudHJ5YCBtZXRob2Rcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtdHJ5XG4kKHsgdGFyZ2V0OiAnUHJvbWlzZScsIHN0YXQ6IHRydWUgfSwge1xuICAndHJ5JzogZnVuY3Rpb24gKGNhbGxiYWNrZm4pIHtcbiAgICB2YXIgcHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mKHRoaXMpO1xuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGNhbGxiYWNrZm4pO1xuICAgIChyZXN1bHQuZXJyb3IgPyBwcm9taXNlQ2FwYWJpbGl0eS5yZWplY3QgOiBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlKShyZXN1bHQudmFsdWUpO1xuICAgIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xuICB9XG59KTtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgRE9NSXRlcmFibGVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RvbS1pdGVyYWJsZXMnKTtcbnZhciBBcnJheUl0ZXJhdG9yTWV0aG9kcyA9IHJlcXVpcmUoJy4uL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3InKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG5cbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBUT19TVFJJTkdfVEFHID0gd2VsbEtub3duU3ltYm9sKCd0b1N0cmluZ1RhZycpO1xudmFyIEFycmF5VmFsdWVzID0gQXJyYXlJdGVyYXRvck1ldGhvZHMudmFsdWVzO1xuXG5mb3IgKHZhciBDT0xMRUNUSU9OX05BTUUgaW4gRE9NSXRlcmFibGVzKSB7XG4gIHZhciBDb2xsZWN0aW9uID0gZ2xvYmFsW0NPTExFQ1RJT05fTkFNRV07XG4gIHZhciBDb2xsZWN0aW9uUHJvdG90eXBlID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcbiAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGUpIHtcbiAgICAvLyBzb21lIENocm9tZSB2ZXJzaW9ucyBoYXZlIG5vbi1jb25maWd1cmFibGUgbWV0aG9kcyBvbiBET01Ub2tlbkxpc3RcbiAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gIT09IEFycmF5VmFsdWVzKSB0cnkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbSVRFUkFUT1JdID0gQXJyYXlWYWx1ZXM7XG4gICAgfVxuICAgIGlmICghQ29sbGVjdGlvblByb3RvdHlwZVtUT19TVFJJTkdfVEFHXSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIFRPX1NUUklOR19UQUcsIENPTExFQ1RJT05fTkFNRSk7XG4gICAgfVxuICAgIGlmIChET01JdGVyYWJsZXNbQ09MTEVDVElPTl9OQU1FXSkgZm9yICh2YXIgTUVUSE9EX05BTUUgaW4gQXJyYXlJdGVyYXRvck1ldGhvZHMpIHtcbiAgICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgICAgaWYgKENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdICE9PSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pIHRyeSB7XG4gICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDb2xsZWN0aW9uUHJvdG90eXBlLCBNRVRIT0RfTkFNRSwgQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIENvbGxlY3Rpb25Qcm90b3R5cGVbTUVUSE9EX05BTUVdID0gQXJyYXlJdGVyYXRvck1ldGhvZHNbTUVUSE9EX05BTUVdO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgQVJSQVlfSVRFUkFUT1IgPSAnQXJyYXkgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoQVJSQVlfSVRFUkFUT1IpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUua2V5c1xuLy8gYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnZhbHVlc1xuLy8gYEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtY3JlYXRlYXJyYXlpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVJdGVyYXRvcihBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLFxuICAgIHRhcmdldDogdG9JbmRleGVkT2JqZWN0KGl0ZXJhdGVkKSwgLy8gdGFyZ2V0XG4gICAgaW5kZXg6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gICAga2luZDoga2luZCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gIH0pO1xuLy8gYCVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVhcnJheWl0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciB0YXJnZXQgPSBzdGF0ZS50YXJnZXQ7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgrKztcbiAgaWYgKCF0YXJnZXQgfHwgaW5kZXggPj0gdGFyZ2V0Lmxlbmd0aCkge1xuICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4geyB2YWx1ZTogaW5kZXgsIGRvbmU6IGZhbHNlIH07XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4geyB2YWx1ZTogdGFyZ2V0W2luZGV4XSwgZG9uZTogZmFsc2UgfTtcbiAgcmV0dXJuIHsgdmFsdWU6IFtpbmRleCwgdGFyZ2V0W2luZGV4XV0sIGRvbmU6IGZhbHNlIH07XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZW1hcHBlZGFyZ3VtZW50c29iamVjdFxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwiLy8gUG9seWZpbGwgZm9yIGNyZWF0aW5nIEN1c3RvbUV2ZW50cyBvbiBJRTkvMTAvMTFcblxuLy8gY29kZSBwdWxsZWQgZnJvbTpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kNHRvY2NoaW5pL2N1c3RvbWV2ZW50LXBvbHlmaWxsXG4vLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3VzdG9tRXZlbnQjUG9seWZpbGxcblxudHJ5IHtcbiAgICB2YXIgY2UgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KCd0ZXN0Jyk7XG4gICAgY2UucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoY2UuZGVmYXVsdFByZXZlbnRlZCAhPT0gdHJ1ZSkge1xuICAgICAgICAvLyBJRSBoYXMgcHJvYmxlbXMgd2l0aCAucHJldmVudERlZmF1bHQoKSBvbiBjdXN0b20gZXZlbnRzXG4gICAgICAgIC8vIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjMzNDkxOTFcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgcHJldmVudCBkZWZhdWx0Jyk7XG4gICAgfVxufSBjYXRjaChlKSB7XG4gIHZhciBDdXN0b21FdmVudCA9IGZ1bmN0aW9uKGV2ZW50LCBwYXJhbXMpIHtcbiAgICB2YXIgZXZ0LCBvcmlnUHJldmVudDtcbiAgICBwYXJhbXMgPSBwYXJhbXMgfHwge1xuICAgICAgYnViYmxlczogZmFsc2UsXG4gICAgICBjYW5jZWxhYmxlOiBmYWxzZSxcbiAgICAgIGRldGFpbDogdW5kZWZpbmVkXG4gICAgfTtcblxuICAgIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7XG4gICAgZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgICBvcmlnUHJldmVudCA9IGV2dC5wcmV2ZW50RGVmYXVsdDtcbiAgICBldnQucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBvcmlnUHJldmVudC5jYWxsKHRoaXMpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdkZWZhdWx0UHJldmVudGVkJywge1xuICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICB0aGlzLmRlZmF1bHRQcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIGV2dDtcbiAgfTtcblxuICBDdXN0b21FdmVudC5wcm90b3R5cGUgPSB3aW5kb3cuRXZlbnQucHJvdG90eXBlO1xuICB3aW5kb3cuQ3VzdG9tRXZlbnQgPSBDdXN0b21FdmVudDsgLy8gZXhwb3NlIGRlZmluaXRpb24gdG8gd2luZG93XG59XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xyXG4oZnVuY3Rpb24gKEVsZW1lbnRQcm90bykge1xyXG4gIGlmICh0eXBlb2YgRWxlbWVudFByb3RvLm1hdGNoZXMgIT09ICdmdW5jdGlvbicpIHtcclxuICAgIEVsZW1lbnRQcm90by5tYXRjaGVzID0gRWxlbWVudFByb3RvLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnRQcm90by5tb3pNYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudFByb3RvLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBmdW5jdGlvbiBtYXRjaGVzKHNlbGVjdG9yKSB7XHJcbiAgICAgIHZhciBlbGVtZW50ID0gdGhpcztcclxuICAgICAgdmFyIGVsZW1lbnRzID0gKGVsZW1lbnQuZG9jdW1lbnQgfHwgZWxlbWVudC5vd25lckRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKTtcclxuICAgICAgdmFyIGluZGV4ID0gMDtcclxuXHJcbiAgICAgIHdoaWxlIChlbGVtZW50c1tpbmRleF0gJiYgZWxlbWVudHNbaW5kZXhdICE9PSBlbGVtZW50KSB7XHJcbiAgICAgICAgKytpbmRleDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIEJvb2xlYW4oZWxlbWVudHNbaW5kZXhdKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBpZiAodHlwZW9mIEVsZW1lbnRQcm90by5jbG9zZXN0ICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICBFbGVtZW50UHJvdG8uY2xvc2VzdCA9IGZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcclxuICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzO1xyXG5cclxuICAgICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMSkge1xyXG4gICAgICAgIGlmIChlbGVtZW50Lm1hdGNoZXMoc2VsZWN0b3IpKSB7XHJcbiAgICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICB9XHJcbn0pKHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZSk7IiwiY29uc3QgcmVxID0gcmVxdWlyZS5jb250ZXh0KCcuLi9pbWFnZXMvc3ZnLXNwcml0ZScsIGZhbHNlLCAvXFwuc3ZnJC8pO1xyXG5jb25zdCByZXF1aXJlQWxsID0gcmVxdWlyZUNvbnRleHQgPT4gcmVxdWlyZUNvbnRleHQua2V5cygpLm1hcChyZXF1aXJlQ29udGV4dCk7XHJcbnJlcXVpcmVBbGwocmVxKTtcclxuIiwidmFyIG1hcCA9IHtcblx0XCIuL2Fycm93LW5leHQtaWNvbi5zdmdcIjogMTI3LFxuXHRcIi4vYXJyb3ctcHJldi1pY29uLnN2Z1wiOiAxMjgsXG5cdFwiLi9jYWxlbmRhci1pY29uLnN2Z1wiOiAxMjksXG5cdFwiLi9jYXItaWNvbi5zdmdcIjogMTMwLFxuXHRcIi4vY2hlY2tlZC1pY29uLnN2Z1wiOiAxMzEsXG5cdFwiLi9jaGVja2xpc3QtaWNvbi5zdmdcIjogMTMyLFxuXHRcIi4vZnJhbWUtaWNvbi5zdmdcIjogMTMzLFxuXHRcIi4vaWQtY2FyZC1pY29uLnN2Z1wiOiAxMzQsXG5cdFwiLi9sb2dvLWljb24uc3ZnXCI6IDEzNSxcblx0XCIuL21haWwtaWNvbi5zdmdcIjogMTM2LFxuXHRcIi4vbWFwLWljb24uc3ZnXCI6IDEzNyxcblx0XCIuL3Bhc3Nwb3J0LWljb24uc3ZnXCI6IDEzOCxcblx0XCIuL3Bpbi1pY29uLnN2Z1wiOiAxMzksXG5cdFwiLi9zbWFydHBob25lLWNhbGwtaWNvbi5zdmdcIjogMTQwLFxuXHRcIi4vc3BhcmUtaWNvbi5zdmdcIjogMTQxLFxuXHRcIi4vc3RvcHdhdGNoLWljb24uc3ZnXCI6IDE0Mixcblx0XCIuL3N1cHBvcnQtaWNvbi5zdmdcIjogMTQzLFxuXHRcIi4vdHJhc3Nlci1pY29uLnN2Z1wiOiAxNDQsXG5cdFwiLi90cnVjay1pY29uLnN2Z1wiOiAxNDUsXG5cdFwiLi93YXktaWNvbi5zdmdcIjogMTQ2LFxuXHRcIi4vd2VpZ2hpbmctaWNvbi5zdmdcIjogMTQ3XG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKG1hcCwgcmVxKSkge1xuXHRcdHZhciBlID0gbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIiArIHJlcSArIFwiJ1wiKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gbWFwW3JlcV07XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMTI2OyIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJhcnJvdy1uZXh0LWljb25cIixcbiAgXCJ1c2VcIjogXCJhcnJvdy1uZXh0LWljb24tdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDUzIDMwXCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgZmlsbD1cXFwibm9uZVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNTMgMzBcXFwiIGlkPVxcXCJhcnJvdy1uZXh0LWljb25cXFwiPjxnIGNsaXAtcGF0aD1cXFwidXJsKCNhcnJvdy1uZXh0LWljb25fY2xpcDApXFxcIj48cGF0aCBkPVxcXCJNMzQuMTUgMTQuMzg2Yy0uMzMgMS41Mi0xLjA5MiAyLjY3OC0yLjI0IDMuNjU0bDIxLjI0OC00LjMyOC4wMDItLjA4My0yMS4yMjctNC4zMjZjMS4xMzUuOTggMS44ODUgMi4xMzggMi4yMTIgMy42MjZIMHYxLjQ1N2gzNC4xNTJ6XFxcIiBmaWxsPVxcXCIjMDUzRTdDXFxcIiAvPjwvZz48ZGVmcz48Y2xpcFBhdGggaWQ9XFxcImFycm93LW5leHQtaWNvbl9jbGlwMFxcXCI+PHBhdGggZmlsbD1cXFwiI2ZmZlxcXCIgZD1cXFwiTTAgMGg1M3YzMEgwelxcXCIgLz48L2NsaXBQYXRoPjwvZGVmcz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwic3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2xcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcInN2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGRcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcImFycm93LXByZXYtaWNvblwiLFxuICBcInVzZVwiOiBcImFycm93LXByZXYtaWNvbi11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgNTMgMzBcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCBmaWxsPVxcXCJub25lXFxcIiB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA1MyAzMFxcXCIgaWQ9XFxcImFycm93LXByZXYtaWNvblxcXCI+PGcgY2xpcC1wYXRoPVxcXCJ1cmwoI2Fycm93LXByZXYtaWNvbl9jbGlwMClcXFwiPjxwYXRoIGQ9XFxcIk0xOC44NSAxNC4zODZjLjMzIDEuNTIgMS4wOTIgMi42NzggMi4yNCAzLjY1NEwtLjE1OSAxMy43MTJ2LS4wODNsMjEuMjI2LTQuMzI2Yy0xLjEzNS45OC0xLjg4NSAyLjEzOC0yLjIxMiAzLjYyNkg1M3YxLjQ1N0gxOC44NDl6XFxcIiBmaWxsPVxcXCIjMDUzRTdDXFxcIiAvPjwvZz48ZGVmcz48Y2xpcFBhdGggaWQ9XFxcImFycm93LXByZXYtaWNvbl9jbGlwMFxcXCI+PHBhdGggdHJhbnNmb3JtPVxcXCJtYXRyaXgoLTEgMCAwIDEgNTMgMClcXFwiIGZpbGw9XFxcIiNmZmZcXFwiIGQ9XFxcIk0wIDBoNTN2MzBIMHpcXFwiIC8+PC9jbGlwUGF0aD48L2RlZnM+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJjYWxlbmRhci1pY29uXCIsXG4gIFwidXNlXCI6IFwiY2FsZW5kYXItaWNvbi11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgNDMgNDNcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA0MyA0M1xcXCIgaWQ9XFxcImNhbGVuZGFyLWljb25cXFwiPjxnIGNsaXAtcGF0aD1cXFwidXJsKCNjYWxlbmRhci1pY29uX2NsaXAwKVxcXCI+PHBhdGggZD1cXFwiTTQxLjY1MyA0MC45MTZsLTMuMzYtMzIuOTIyYS42NzIuNjcyIDAgMDAtLjY2OC0uNjAzaC0xLjM0NHYtLjY3MkE1LjM3MyA1LjM3MyAwIDAwMjYuMjAzIDQuMTJhNS4zNyA1LjM3IDAgMDAtOS40MDYgMCA1LjM3NCA1LjM3NCAwIDAwLTEwLjA3OCAyLjZ2LjY3Mkg1LjM3NWEuNjcyLjY3MiAwIDAwLS42NjguNjAzbC0zLjM2IDMyLjkyMmEuNjcyLjY3MiAwIDAwLjY2OS43NGgzOC45NjhhLjY3MS42NzEgMCAwMC42NjktLjc0em0tMS41MDgtMS41MzZsLTMuNDI3LTIuOTM3YS42NzEuNjcxIDAgMDAtLjQzNy0uMTYyaC0zLjU0OGwyLjgxMS0yNy41NDdoMS40NzRsMy4xMjcgMzAuNjQ2em0tNy41NDktMS43NTVoMS44NjlsLTIuMDQ4IDEuNzU1LjE4LTEuNzU1em0zLjY4NS4yMTNsMi44ODcgMi40NzRoLTUuNzc0bDIuODg3LTIuNDc0em0tNS4zNzUtMzUuMTVhNC4wMzYgNC4wMzYgMCAwMTQuMDMyIDQuMDN2LjY3M2gtMS4zNDR2LS42NzJhMi42ODcgMi42ODcgMCAxMC01LjM3NSAwdjIuNjg3YTIuNjkzIDIuNjkzIDAgMDAyLjAxNSAyLjYwM3YxLjM3M2E0LjAzOSA0LjAzOSAwIDAxLTMuMzU5LTMuOTc2VjYuNzJhNC4wMzYgNC4wMzYgMCAwMTQuMDMxLTQuMDMyek0yOS41NjMgNy4zOXYtLjY3MmExLjM0NCAxLjM0NCAwIDAxMi42ODcgMHYuNjcyaC0yLjY4OHpNMjEuNSAyLjY4N2E0LjAzNiA0LjAzNiAwIDAxNC4wMzEgNC4wMzJ2LjY3MmgtMS4zNDN2LS42NzJhMi42ODggMi42ODggMCAwMC01LjM3NSAwdjIuNjg3YTIuNjkzIDIuNjkzIDAgMDAyLjAxNSAyLjYwM3YxLjM3M2E0LjAzOCA0LjAzOCAwIDAxLTMuMzYtMy45NzZWNi43MkE0LjAzNiA0LjAzNiAwIDAxMjEuNSAyLjY4N3ptLTEuMzQ0IDQuNzA0di0uNjcyYTEuMzQ0IDEuMzQ0IDAgMDEyLjY4OCAwdi42NzJoLTIuNjg4ek04LjA2MiA2LjcxOWE0LjAzMSA0LjAzMSAwIDExOC4wNjMgMHYuNjcyaC0xLjM0NHYtLjY3MmEyLjY4NyAyLjY4NyAwIDEwLTUuMzc1IDB2Mi42ODdhMi42OTMgMi42OTMgMCAwMDIuMDE2IDIuNjAzdjEuMzczYTQuMDM4IDQuMDM4IDAgMDEtMy4zNi0zLjk3NlY2Ljcyem0yLjY4OC42NzJ2LS42NzJhMS4zNDQgMS4zNDQgMCAwMTIuNjg4IDB2LjY3MkgxMC43NXpNMi43NiA0MC4zMTJMNS45ODIgOC43MzRoLjczN3YuNjcyYTUuMzgxIDUuMzgxIDAgMDA1LjM3NSA1LjM3NS42NzQuNjc0IDAgMDAuNjcyLS42NzJ2LTIuNjg3YS42NzMuNjczIDAgMDAtLjY3Mi0uNjcyIDEuMzQ1IDEuMzQ1IDAgMDEtMS4zNDQtMS4zNDR2LS42NzJoNS4zNzV2LjY3MmE1LjM4MSA1LjM4MSAwIDAwNS4zNzUgNS4zNzUuNjczLjY3MyAwIDAwLjY3Mi0uNjcydi0yLjY4N2EuNjcxLjY3MSAwIDAwLS42NzItLjY3MiAxLjM0NSAxLjM0NSAwIDAxLTEuMzQ0LTEuMzQ0di0uNjcyaDUuMzc1di42NzJhNS4zODIgNS4zODIgMCAwMDUuMzc1IDUuMzc1LjY3NC42NzQgMCAwMC42NzItLjY3MnYtMi42ODdhLjY3My42NzMgMCAwMC0uNjcyLS42NzIgMS4zNDUgMS4zNDUgMCAwMS0xLjM0My0xLjM0NHYtLjY3Mmg0LjYzbC0zLjIyMiAzMS41NzhIMi43NnpcXFwiIC8+PHBhdGggZD1cXFwiTTIxLjUgMTYuMTI1aC01LjM3NWEuNjczLjY3MyAwIDAwLS42NzIuNjcydjUuMzc1YS42NzEuNjcxIDAgMDAuNjcyLjY3MkgyMS41YS42NzEuNjcxIDAgMDAuNjcyLS42NzJ2LTUuMzc1YS42Ny42NyAwIDAwLS42NzItLjY3MnptLS42NzIgNS4zNzVoLTQuMDMxdi00LjAzMWg0LjAzMVYyMS41em04LjczNS01LjM3NWgtNS4zNzVhLjY3My42NzMgMCAwMC0uNjcyLjY3MnY1LjM3NWEuNjcxLjY3MSAwIDAwLjY3Mi42NzJoNS4zNzVhLjY3MS42NzEgMCAwMC42NzEtLjY3MnYtNS4zNzVhLjY3LjY3IDAgMDAtLjY3Mi0uNjcyek0yOC44OSAyMS41aC00LjAzMnYtNC4wMzFoNC4wMzJWMjEuNXptLTE2Ljc5NiAyLjY4OEg2LjcxOWEuNjczLjY3MyAwIDAwLS42NzIuNjcxdjUuMzc1YS42NzIuNjcyIDAgMDAuNjcyLjY3Mmg1LjM3NWEuNjcuNjcgMCAwMC42NzItLjY3MlYyNC44NmEuNjcuNjcgMCAwMC0uNjcyLS42NzJ6bS0uNjcyIDUuMzc1SDcuMzlWMjUuNTNoNC4wM3Y0LjAzMnptOC43MzQtNS4zNzVoLTUuMzc1YS42NzMuNjczIDAgMDAtLjY3Mi42NzF2NS4zNzVhLjY3MS42NzEgMCAwMC42NzIuNjcyaDUuMzc1YS42Ny42NyAwIDAwLjY3Mi0uNjcyVjI0Ljg2YS42Ny42NyAwIDAwLS42NzItLjY3MnptLS42NzIgNS4zNzVoLTQuMDNWMjUuNTNoNC4wM3Y0LjAzMnptLTguMDYyIDIuNjg3SDYuMDQ3YS42NzEuNjcxIDAgMDAtLjY3Mi42NzJ2NS4zNzVhLjY3Mi42NzIgMCAwMC42NzIuNjcyaDUuMzc1YS42NzEuNjcxIDAgMDAuNjcyLS42NzJ2LTUuMzc1YS42NzEuNjcxIDAgMDAtLjY3Mi0uNjcyem0tLjY3MiA1LjM3NUg2LjcxOXYtNC4wMzFoNC4wMzF2NC4wM3ptOC43MzQtNS4zNzVIMTQuMTFhLjY3LjY3IDAgMDAtLjY3MS42NzJ2NS4zNzVhLjY3My42NzMgMCAwMC42NzEuNjcyaDUuMzc1YS42NzEuNjcxIDAgMDAuNjcyLS42NzJ2LTUuMzc1YS42Ny42NyAwIDAwLS42NzItLjY3MnptLS42NzIgNS4zNzVoLTQuMDN2LTQuMDMxaDQuMDN2NC4wM3ptOC45MzItMTMuMjQxbC0yLjIxMyAyLjIxMy0yLjIxMi0yLjIxMy0uOTUuOTUgMi4yMTIgMi4yMTMtMi4yMTIgMi4yMTIuOTUuOTUgMi4yMTItMi4yMTIgMi4yMTMgMi4yMTIuOTUtLjk1LTIuMjEzLTIuMjEyIDIuMjEzLTIuMjEzLS45NS0uOTV6XFxcIiAvPjwvZz48ZGVmcz48Y2xpcFBhdGggaWQ9XFxcImNhbGVuZGFyLWljb25fY2xpcDBcXFwiPjxwYXRoIGQ9XFxcIk0wIDBoNDN2NDNIMHpcXFwiIC8+PC9jbGlwUGF0aD48L2RlZnM+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJjYXItaWNvblwiLFxuICBcInVzZVwiOiBcImNhci1pY29uLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA0MyA0M1wiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDQzIDQzXFxcIiBpZD1cXFwiY2FyLWljb25cXFwiPjxnIGNsaXAtcGF0aD1cXFwidXJsKCNjYXItaWNvbl9jbGlwMClcXFwiPjxwYXRoIGQ9XFxcIk0zOC41ODYgMjQuNzJhLjg0NC44NDQgMCAwMS0uODI1LTEuMDA0Ljg2Ljg2IDAgMDEuMjMtLjQzLjkuOSAwIDAxLjEyNy0uMTA0LjkwOC45MDggMCAwMS4zMDMtLjEyNS44MjUuODI1IDAgMDEuNjMuMTI1Ljg3OC44NzggMCAwMS4zMDkuMzc3LjgzOC44MzggMCAwMS0uNzc0IDEuMTYyem0tMy4wNTIgMEgxNC41MzdhLjg0Ljg0IDAgMTEwLTEuNjhoMjAuOTk3YS44NC44NCAwIDExMCAxLjY4em0tMy44ODUgNEgxNC41MzdhLjg0Ljg0IDAgMTEwLTEuNjhoMTcuMTEyYS44NC44NCAwIDAxMCAxLjY4elxcXCIgLz48cGF0aCBkPVxcXCJNNDIuOTk2IDMzLjc5MmMuMDAzLS4wMjggMC0uMDU2IDAtLjA4NFYxLjUxMmEuODQuODQgMCAwMC0uODQtLjg0SDExLjUxYS44NC44NCAwIDAwLS44NC44NHYzOS45MmEuODQuODQgMCAwMC44NC44MzlIMzQuNmEuODQuODQgMCAwMC41OTQtLjI0Nmw3LjU1Ni03LjU1NmEuODQ0Ljg0NCAwIDAwLjI0Ni0uNjc3ek0zMy45NyAxNi44MTNhMy4yNTYgMy4yNTYgMCAwMC0zLjE0LTIuNDEgMy4yNTYgMy4yNTYgMCAwMC0zLjAyNSAyLjA2di00LjM3Mmg1LjkyOWMuNTMzIDAgLjk2Ny40MzQuOTY3Ljk2N3YzLjc1NWgtLjczem0tMS41Ny44NGMwIC44NjYtLjcwNCAxLjU3LTEuNTcgMS41Ny0uODY2IDAtMS41Ny0uNzA0LTEuNTctMS41NyAwLS44NjYuNzA0LTEuNTcgMS41Ny0xLjU3Ljg2NiAwIDEuNTcuNzA0IDEuNTcgMS41N3ptLTQuNTk1LTcuMjQydi0zLjE0aDIuMTI4Yy43ODggMCAxLjQ3OC41MDUgMS43MTYgMS4yNThsLjU5NiAxLjg4MmgtNC40NHpNMTIuMzUgMi4zNTFoMTMuNzc3djE0LjQ2MkgyMC43NWEzLjI1NiAzLjI1NiAwIDAwLTMuMTQtMi40MSAzLjI1NiAzLjI1NiAwIDAwLTMuMTQgMi40MWgtMi4xMlYyLjM1MnptNi44MzEgMTUuMzAyYTEuNTcyIDEuNTcyIDAgMDEtMy4xNDEgMCAxLjU3MSAxLjU3MSAwIDAxMy4xNDEgMHptLTYuODMuODRoMi4xMmEzLjI1NiAzLjI1NiAwIDAwMy4xNCAyLjQxIDMuMjU2IDMuMjU2IDAgMDAzLjE0LTIuNDFoNi45NGEzLjI1NiAzLjI1NiAwIDAwMy4xNCAyLjQxIDMuMjU2IDMuMjU2IDAgMDAzLjE0LTIuNDFoMS41N2EuODQuODQgMCAwMC44NC0uODR2LTQuNTk1YTIuNjUgMi42NSAwIDAwLTIuMzctMi42MzJsLS43Ni0yLjQwNGEzLjQ2NiAzLjQ2NiAwIDAwLTMuMzE3LTIuNDNoLTIuMTI4di0zLjI0aDEzLjUxMXYzMC42ODRoLTYuNzE1YS44NC44NCAwIDAwLS44NC44NHY2LjcxNkgxMi4zNDlWMTguNDkzem0yMy4wOSAyMC45MTF2LTQuNjg5aDQuNjg5bC00LjY4OSA0LjY5elxcXCIgLz48cGF0aCBkPVxcXCJNMzAgMzYuMzk1SDE0LjUzN2EuODQuODQgMCAwMS0uODQtLjg0di0zLjM1OWEuODQuODQgMCAwMS44NC0uODRIMzBhLjg0Ljg0IDAgMDEuODQuODR2My4zNmEuODQuODQgMCAwMS0uODQuODM5em0tMTQuNjIzLTEuNjhIMjkuMTZ2LTEuNjhIMTUuMzc2djEuNjh6TTYuNjkyIDEuNzE0SDUuMDQzYTIuNjEgMi42MSAwIDAwLTIuNjA4IDIuNjA4djIuMjA1SC44NGEuODQuODQgMCAwMC0uODQuODR2MTQuMTc3YS44NC44NCAwIDAwMS42OCAwVjguMjA3aC43NTV2MjUuMTY4YzAgLjY2NC4wODUgMS4zMjguMjUyIDEuOTc0bC4wMDEuMDA1LjAwMi4wMDhhLjg0Ljg0IDAgMDAuMDQ3LjEyOWMuMi41MDQuOTcgMi4xMDUgMi4yOSA0Ljc3MXYuOTY4YS44NC44NCAwIDEwMS42OCAwdi0uOTY4YzEuMzIyLTIuNjY1IDIuMDktNC4yNjYgMi4yOTEtNC43N2EuODcyLjg3MiAwIDAwLjA0OS0uMTM4IDcuODY3IDcuODY3IDAgMDAuMjU0LTEuOTc5VjQuMzIyYTIuNjEgMi42MSAwIDAwLTIuNjA5LTIuNjA5ek00LjExNCAzMy4zNzVWMTAuNjg5aDMuNTA3djIyLjY4NmMwIC4zMS0uMDIzLjYyLS4wNy45MjhINC4xODVhNi4xNTEgNi4xNTEgMCAwMS0uMDctLjkyOHptMC0yOS4wNTNhLjkzLjkzIDAgMDEuOTI5LS45M2gxLjY1YS45My45MyAwIDAxLjkyOC45M1Y5LjAxSDQuMTE0VjQuMzIyem0xLjc1NCAzMy44NDZhMjY4Ljk5IDI2OC45OSAwIDAxLTEuMDYzLTIuMTg1SDYuOTNjLS4yODQuNTk1LS42NjEgMS4zNy0xLjA2MiAyLjE4NXpcXFwiIC8+PC9nPjxkZWZzPjxjbGlwUGF0aCBpZD1cXFwiY2FyLWljb25fY2xpcDBcXFwiPjxwYXRoIGQ9XFxcIk0wIDBoNDN2NDNIMHpcXFwiIC8+PC9jbGlwUGF0aD48L2RlZnM+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJjaGVja2VkLWljb25cIixcbiAgXCJ1c2VcIjogXCJjaGVja2VkLWljb24tdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDIwIDIwXCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjAgMjBcXFwiIGlkPVxcXCJjaGVja2VkLWljb25cXFwiPjxnIGNsaXAtcGF0aD1cXFwidXJsKCNjaGVja2VkLWljb25fY2xpcDApXFxcIj48cGF0aCBkPVxcXCJNMCAxMC42MzhMNi44NDkgMTcuNSAyMCA0LjM2MiAxOC4xMTIgMi41IDYuODQ5IDEzLjc1IDEuODYyIDguNzYzIDAgMTAuNjM4elxcXCIgLz48L2c+PGRlZnM+PGNsaXBQYXRoIGlkPVxcXCJjaGVja2VkLWljb25fY2xpcDBcXFwiPjxwYXRoIGQ9XFxcIk0wIDBoMjB2MjBIMHpcXFwiIC8+PC9jbGlwUGF0aD48L2RlZnM+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJjaGVja2xpc3QtaWNvblwiLFxuICBcInVzZVwiOiBcImNoZWNrbGlzdC1pY29uLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA0MyA0M1wiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDQzIDQzXFxcIiBpZD1cXFwiY2hlY2tsaXN0LWljb25cXFwiPjxwYXRoIGQ9XFxcIk0zNC4yNjYgNi4wNDdoLTkuOGwtLjY1LS42NWEyLjY3IDIuNjcgMCAwMC4zNzItMS4zNjYgMi42OTkgMi42OTkgMCAwMC0xLjc3Ni0yLjUzIDIuNjg3IDIuNjg3IDAgMDAtMy4yMjcgMy44OTVsLS42NS42NWgtOS44YS42NzIuNjcyIDAgMDAtLjY3Mi42NzN2MzQuMjY1YS42NzIuNjcyIDAgMDAuNjcxLjY3MmgyNS41MzJhLjY3Mi42NzIgMCAwMC42NzItLjY3MlY2LjcyYS42NzIuNjcyIDAgMDAtLjY3Mi0uNjcyek0xOS4yODggNy4xOTRsMS4yNjItMS4yNjJhLjY3Mi42NzIgMCAwMDAtLjk1IDEuMzQ1IDEuMzQ1IDAgMTExLjkgMCAuNjcyLjY3MiAwIDAwMCAuOTVsMS4yNjIgMS4yNjJhLjY3Mi42NzIgMCAwMC40NzYuMTk3IDMuMzY1IDMuMzY1IDAgMDEzLjI5MSAyLjY4N0gxNS41MjFhMy4zNjUgMy4zNjUgMCAwMTMuMjkxLTIuNjg3Yy4xNzkgMCAuMzUtLjA3MS40NzYtLjE5N3ptOC45NTkgNC4yMjhhLjY3MS42NzEgMCAwMC42NC0uODc5IDQuNjggNC42OCAwIDAwLS4wNDUtLjQ2NWgyLjA2NHYyNi44NzVIMTIuMDk0VjEwLjA3OGgyLjA2NGE0LjcyIDQuNzIgMCAwMC0uMDQ5LjY3Mi42NzIuNjcyIDAgMDAuNjcyLjY3MmgxMy40NjZ6bTUuMzQ3IDI4Ljg5SDkuNDA2VjcuMzkyaDYuMTJhNC43MjUgNC43MjUgMCAwMC0uOTYxIDEuMzQzaC0zLjE0M2EuNjcyLjY3MiAwIDAwLS42NzIuNjcydjI4LjIyYS42NzIuNjcyIDAgMDAuNjcyLjY3aDIwLjE1NmEuNjcyLjY3MiAwIDAwLjY3Mi0uNjdWOS40MDVhLjY3Mi42NzIgMCAwMC0uNjcyLS42NzJoLTMuMTQzYTQuNzIzIDQuNzIzIDAgMDAtLjk2LTEuMzQzaDYuMTE5djMyLjkyMnpcXFwiIC8+PHBhdGggZD1cXFwiTTE4LjE0IDIzLjUxNmgtNC4wM2EuNjcyLjY3MiAwIDAwLS42NzIuNjcydjQuMDNhLjY3Mi42NzIgMCAwMC42NzEuNjczaDQuMDMyYS42NzIuNjcyIDAgMDAuNjcyLS42NzJ2LTQuMDMyYS42NzIuNjcyIDAgMDAtLjY3Mi0uNjcxem0tLjY3MSA0LjAzSDE0Ljc4VjI0Ljg2aDIuNjg4djIuNjg4em0uNjcxIDIuNjg4aC00LjAzYS42NzIuNjcyIDAgMDAtLjY3Mi42NzJ2NC4wMzJhLjY3Mi42NzIgMCAwMC42NzEuNjcxaDQuMDMyYS42NzIuNjcyIDAgMDAuNjcyLS42NzJ2LTQuMDNhLjY3Mi42NzIgMCAwMC0uNjcyLS42NzN6bS0uNjcxIDQuMDMySDE0Ljc4di0yLjY4OGgyLjY4OHYyLjY4OHptLjY3MS0yMS41aDYuNzJ2MS4zNDNoLTYuNzJ2LTEuMzQzem0zLjM2IDQuNzAzaDQuMDMxdjEuMzQzSDIxLjVWMTcuNDd6bTUuMzc1IDBoMi42ODh2MS4zNDNoLTIuNjg4VjE3LjQ3em0tNi43MTkgMi42ODdoMi42ODhWMjEuNWgtMi42ODh2LTEuMzQ0em00LjAzMiAwaDQuMDNWMjEuNWgtNC4wM3YtMS4zNDR6TTIxLjUgMjQuMTg4aDQuMDMxdjEuMzQzSDIxLjV2LTEuMzQzem01LjM3NSAwaDIuNjg4djEuMzQzaC0yLjY4OHYtMS4zNDN6bS02LjcxOSAyLjY4N2gyLjY4OHYxLjM0NGgtMi42ODh2LTEuMzQ0em00LjAzMiAwaDQuMDN2MS4zNDRoLTQuMDN2LTEuMzQ0ek0yMS41IDMwLjkwNmg0LjAzMXYxLjM0NEgyMS41di0xLjM0NHptNS4zNzUgMGgyLjY4OHYxLjM0NGgtMi42ODh2LTEuMzQ0em0tNi43MTkgMi42ODhoMi42ODh2MS4zNDNoLTIuNjg4di0xLjM0M3ptNC4wMzIgMGg0LjAzdjEuMzQzaC00LjAzdi0xLjM0M3pNMTkuMDEgMTUuNjVsLTEuMTQ4IDEuMTQ3SDE0LjExYS42NzIuNjcyIDAgMDAtLjY3MS42NzJWMjEuNWEuNjcyLjY3MiAwIDAwLjY3MS42NzJoNC4wMzJhLjY3Mi42NzIgMCAwMC42NzItLjY3MnYtMy43NTNMMTkuOTYgMTYuNmwtLjk1LS45NXptLTEuNTQxIDUuMTc4SDE0Ljc4di0yLjY4N2gxLjczOGwtLjg3Ljg2OC45NTEuOTUuODY5LS44Njh2MS43Mzd6XFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2wiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCJzdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbFwiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwic3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZFwiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwiZnJhbWUtaWNvblwiLFxuICBcInVzZVwiOiBcImZyYW1lLWljb24tdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDQwIDQ0XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgZmlsbD1cXFwibm9uZVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNDAgNDRcXFwiIGlkPVxcXCJmcmFtZS1pY29uXFxcIj48cGF0aCBmaWxsLXJ1bGU9XFxcImV2ZW5vZGRcXFwiIGNsaXAtcnVsZT1cXFwiZXZlbm9kZFxcXCIgZD1cXFwiTTQwIDBIMHY0NGg0MFYwek0xMSAxNmExIDEgMCAxMDAgMmgxOGExIDEgMCAxMDAtMkgxMXptMCA2LjY2N2ExIDEgMCAxMDAgMmgxOGExIDEgMCAxMDAtMkgxMXptLTEgNy42NjZhMSAxIDAgMDExLTFoMThhMSAxIDAgMTEwIDJIMTFhMSAxIDAgMDEtMS0xelxcXCIgZmlsbD1cXFwiIzA1M0U3Q1xcXCIgLz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwic3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2xcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcInN2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGRcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcImlkLWNhcmQtaWNvblwiLFxuICBcInVzZVwiOiBcImlkLWNhcmQtaWNvbi11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgNDMgNDRcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCB4bWxucz1cXFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcXFwiIHZpZXdCb3g9XFxcIjAgMCA0MyA0NFxcXCIgaWQ9XFxcImlkLWNhcmQtaWNvblxcXCI+PGcgY2xpcC1wYXRoPVxcXCJ1cmwoI2lkLWNhcmQtaWNvbl9jbGlwMClcXFwiPjxwYXRoIGQ9XFxcIk0yMS41IDMuNDEyYTIuMDggMi4wOCAwIDAwLTIuMDggMi4wNzYgMi4wODEgMi4wODEgMCAwMDQuMTYgMCAyLjA4MSAyLjA4MSAwIDAwLTIuMDgtMi4wNzd6bTAgMi43NjhhLjY5NC42OTQgMCAwMS0uNjk0LS42OTIuNjk0LjY5NCAwIDAxMS4zODggMCAuNjkzLjY5MyAwIDAxLS42OTQuNjkyelxcXCIgLz48cGF0aCBkPVxcXCJNMzkuNTMyIDExLjcxOEgyNi4zNTVWLjY0M2gtOS43MXYxMS4wNzVIMy40NjhBMy40NjggMy40NjggMCAwMDAgMTUuMThWNDAuMWEzLjQ2OCAzLjQ2OCAwIDAwMy40NjggMy40NjJoMzYuMDY0QTMuNDY4IDMuNDY4IDAgMDA0MyA0MC4xVjE1LjE4YTMuNDY4IDMuNDY4IDAgMDAtMy40NjgtMy40NjJ6bS0yMS41LTkuNjkxaDYuOTM2djEzLjg0NWgtNi45MzZWMi4wMjd6TTQxLjYxMiA0MC4xYTIuMDgxIDIuMDgxIDAgMDEtMi4wOCAyLjA3NkgzLjQ2OGEyLjA4MSAyLjA4MSAwIDAxLTIuMDgtMi4wNzZWMTUuMThhMi4wOCAyLjA4IDAgMDEyLjA4LTIuMDc3aDEzLjE3N3YyLjc2OWgtMy40Njh2MS4zODRoMTYuNjQ2di0xLjM4NGgtMy40Njh2LTIuNzdoMTMuMTc3YzEuMTQ3IDAgMi4wOC45MzIgMi4wOCAyLjA3N1Y0MC4xelxcXCIgLz48cGF0aCBkPVxcXCJNMi43NzQgNDAuNzkyaDE4LjAzM1YxOC42NEgyLjc3NHYyMi4xNXptMTMuMTc4LTEuMzg1SDcuNjI5VjM2LjY0YTQuMTYyIDQuMTYyIDAgMDE4LjMyMyAwdjIuNzY4em0tOC4zMjMtMTIuNDZhNC4xNjIgNC4xNjIgMCAwMTguMzIzIDAgNC4xNjIgNC4xNjIgMCAwMS04LjMyMyAwem0tMy40NjctNi45MjJIMTkuNDJ2MTkuMzgzaC0yLjA4MXYtMi43N2E1LjU0IDUuNTQgMCAwMC0yLjg2OS00Ljg0NSA1LjU0IDUuNTQgMCAwMDIuODY5LTQuODQ2YzAtMy4wNTMtMi40OS01LjUzNy01LjU0OC01LjUzNy0zLjA2IDAtNS41NDkgMi40ODQtNS41NDkgNS41MzdhNS41NCA1LjU0IDAgMDAyLjg2OSA0Ljg0NiA1LjU0IDUuNTQgMCAwMC0yLjg2OSA0Ljg0NnYyLjc2OGgtMi4wOFYyMC4wMjV6bTM2LjA2NCAyLjc2OUgyMi4xOTN2MS4zODRoMTguMDMzdi0xLjM4NHptMCAyLjc2OUgyMi4xOTN2MS4zODRoMTguMDMzdi0xLjM4NHptMCAyLjc2OUgyMi4xOTN2MS4zODRoMTguMDMzdi0xLjM4NHptMCAyLjc2OEgyMi4xOTN2MS4zODVoMTguMDMzdi0xLjM4NHptMCAyLjc3aC0xLjM4N3YxLjM4NGgxLjM4N1YzMy44N3ptLTIuNzc0IDBIMzMuMjl2MS4zODRoNC4xNlYzMy44N3pcXFwiIC8+PC9nPjxkZWZzPjxjbGlwUGF0aCBpZD1cXFwiaWQtY2FyZC1pY29uX2NsaXAwXFxcIj48cGF0aCBkPVxcXCJNMCAuNjQzaDQzdjQyLjkxOEgwelxcXCIgLz48L2NsaXBQYXRoPjwvZGVmcz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwic3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2xcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcInN2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGRcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcImxvZ28taWNvblwiLFxuICBcInVzZVwiOiBcImxvZ28taWNvbi11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgMjYyIDQ1XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgZmlsbD1cXFwibm9uZVxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjYyIDQ1XFxcIiBpZD1cXFwibG9nby1pY29uXFxcIj48cGF0aCBkPVxcXCJNMTEuNTYgMTguMDY0SDYuNDcyTDUuNDg4IDIySC44OEw1LjQxNiA2LjYxNmMuMDgtLjM1Mi4yNTYtLjYzMi41MjgtLjg0YTEuNTYgMS41NiAwIDAxLjk4NC0uMzM2aDQuMTc2Yy4zNjggMCAuNjg4LjExMi45Ni4zMzYuMjg4LjIwOC40OC40ODguNTc2Ljg0TDE3LjE1MiAyMmgtNC42MDhsLS45ODQtMy45MzZ6bS0uODE2LTMuMjY0bC0xLjA4LTQuMjQ4Yy0uMTc2LS44MzItLjI4LTEuNDA4LS4zMTItMS43MjhoLS42NDhhODQuNTAyIDg0LjUwMiAwIDAxLS4zMzYgMS43MjhMNy4yODggMTQuOGgzLjQ1NnptMTcuNjQtMS4zMmMxLjI0Ny4xMTIgMi4xMzUuNTI4IDIuNjYzIDEuMjQ4LjU0NC43Mi44MTYgMS43NjguODE2IDMuMTQ0IDAgMS4xMi0uMiAxLjk5Mi0uNiAyLjYxNi0uNC42MjQtMS4wMTYgMS4wNjQtMS44NDggMS4zMi0uODMyLjI1Ni0xLjk1Mi4zODQtMy4zNi4zODQtMS44NCAwLTMuMjg4LS4wMTYtNC4zNDQtLjA0OEE1Mi40NDYgNTIuNDQ2IDAgMDExOC41NDMgMjJWNS40NGMuOTQ0LS4wOCAxLjg5Ni0uMTI4IDIuODU2LS4xNDQuOTYtLjAzMiAyLjI1Ni0uMDQ4IDMuODg4LS4wNDggMS41MzYgMCAyLjczNi4xMjggMy42LjM4NC44NjQuMjQgMS40ODguNjcyIDEuODcyIDEuMjk2LjM4NC42MjQuNTc2IDEuNTA0LjU3NiAyLjY0IDAgMS4yLS4yMzIgMi4xMDQtLjY5NiAyLjcxMi0uNDY0LjYwOC0xLjIxNi45Ni0yLjI1NiAxLjA1NnYuMTQ0em0tMS4zNDUtMy4yODhjMC0uNzItLjEzNi0xLjE5Mi0uNDA4LTEuNDE2LS4yNzItLjI0LS44LS4zNi0xLjU4NC0uMzZoLTIuMTEydjMuNjI0aDIuMjMyYy43MzYgMCAxLjIzMi0uMTIgMS40ODgtLjM2LjI1Ni0uMjU2LjM4NC0uNzUyLjM4NC0xLjQ4OHptLTEuNzc2IDguODMyYy41NzYgMCAxLjAwOC0uMDU2IDEuMjk2LS4xNjhhMS4wMSAxLjAxIDAgMDAuNjI0LS42Yy4xMjgtLjI4OC4xOTItLjcxMi4xOTItMS4yNzIgMC0uNjA4LS4wNjQtMS4wNjQtLjE5Mi0xLjM2OGExLjAwNyAxLjAwNyAwIDAwLS42MjQtLjYyNGMtLjMwNC0uMTI4LS43NTItLjE5Mi0xLjM0NC0uMTkyaC0yLjI4djQuMjI0aDIuMzI4ek00Ni45NyA4LjkyaC00Ljc3NlYyMmgtNC41MTJWOC45MkgzMi45M1Y1LjQ0aDE0LjA0djMuNDh6bTguNTU0LTMuODE2YzEuODg4IDAgMy4zNi4yNTYgNC40MTYuNzY4IDEuMDU2LjQ5NiAxLjgyNCAxLjM2OCAyLjMwNCAyLjYxNi40OCAxLjIzMi43MiAyLjk3Ni43MiA1LjIzMiAwIDIuMjU2LS4yNCA0LjAwOC0uNzIgNS4yNTYtLjQ4IDEuMjMyLTEuMjQ4IDIuMTA0LTIuMzA0IDIuNjE2LTEuMDU2LjQ5Ni0yLjUyOC43NDQtNC40MTYuNzQ0LTEuODg4IDAtMy4zNi0uMjQ4LTQuNDE2LS43NDQtMS4wNTYtLjUxMi0xLjgyNC0xLjM4NC0yLjMwNC0yLjYxNi0uNDY0LTEuMjQ4LS42OTYtMy0uNjk2LTUuMjU2IDAtMi4yNTYuMjMyLTQgLjY5Ni01LjIzMi40OC0xLjI0OCAxLjI0OC0yLjEyIDIuMzA0LTIuNjE2IDEuMDU2LS41MTIgMi41MjgtLjc2OCA0LjQxNi0uNzY4em0wIDMuNDU2Yy0uNzIgMC0xLjI3Mi4xNTItMS42NTYuNDU2LS4zODQuMjg4LS42NTYuOC0uODE2IDEuNTM2LS4xNDQuNzItLjIxNiAxLjc3Ni0uMjE2IDMuMTY4IDAgMS4zOTIuMDcyIDIuNDU2LjIxNiAzLjE5Mi4xNi43Mi40MzIgMS4yMzIuODE2IDEuNTM2LjM4NC4yODguOTM2LjQzMiAxLjY1Ni40MzIuNzIgMCAxLjI3Mi0uMTQ0IDEuNjU2LS40MzIuMzg0LS4zMDQuNjQ4LS44MTYuNzkyLTEuNTM2LjE2LS43MzYuMjQtMS44LjI0LTMuMTkyIDAtMS4zOTItLjA4LTIuNDQ4LS4yNC0zLjE2OC0uMTQ0LS43MzYtLjQwOC0xLjI0OC0uNzkyLTEuNTM2LS4zODQtLjMwNC0uOTM2LS40NTYtMS42NTYtLjQ1NnpNNzguODY0IDIySDc0LjM1VjguNTEyaC0xLjUxYy0uODY0IDAtMS4zMi40MDgtMS4zNjggMS4yMjQtLjE3NiAyLjA2NC0uMzYgMy43NzYtLjU1MiA1LjEzNi0uMTc2IDEuMzQ0LS40MTYgMi40NzItLjcyIDMuMzg0LS40NDggMS4zNzYtMS4wOCAyLjM4NC0xLjg5NiAzLjAyNC0uOC42MjQtMS43ODQuOTM2LTIuOTUyLjkzNmE4Ljg1IDguODUgMCAwMS0xLjM0NC0uMTJsLS4zMTItMy40OGMuNjQtLjA5NiAxLjE0NC0uMjQ4IDEuNTEyLS40NTYuMzY4LS4yMjQuNjQ4LS42Ljg0LTEuMTI4LjI3Mi0uNzUyLjQ5Ni0xLjcyOC42NzItMi45MjguMTc2LTEuMjE2LjMyOC0yLjguNDU2LTQuNzUyLjE5Mi0yLjYwOCAxLjU3Ni0zLjkxMiA0LjE1Mi0zLjkxMmg3LjUzNlYyMnptOS44OTQtMTYuODk2YzEuODg4IDAgMy4zNi4yNTYgNC40MTYuNzY4IDEuMDU2LjQ5NiAxLjgyNCAxLjM2OCAyLjMwNCAyLjYxNi40OCAxLjIzMi43MiAyLjk3Ni43MiA1LjIzMiAwIDIuMjU2LS4yNCA0LjAwOC0uNzIgNS4yNTYtLjQ4IDEuMjMyLTEuMjQ4IDIuMTA0LTIuMzA0IDIuNjE2LTEuMDU2LjQ5Ni0yLjUyOC43NDQtNC40MTYuNzQ0LTEuODg4IDAtMy4zNi0uMjQ4LTQuNDE2LS43NDQtMS4wNTYtLjUxMi0xLjgyNC0xLjM4NC0yLjMwNC0yLjYxNi0uNDY0LTEuMjQ4LS42OTYtMy0uNjk2LTUuMjU2IDAtMi4yNTYuMjMyLTQgLjY5Ni01LjIzMi40OC0xLjI0OCAxLjI0OC0yLjEyIDIuMzA0LTIuNjE2IDEuMDU2LS41MTIgMi41MjgtLjc2OCA0LjQxNi0uNzY4em0wIDMuNDU2Yy0uNzIgMC0xLjI3Mi4xNTItMS42NTYuNDU2LS4zODQuMjg4LS42NTYuOC0uODE2IDEuNTM2LS4xNDQuNzItLjIxNiAxLjc3Ni0uMjE2IDMuMTY4IDAgMS4zOTIuMDcyIDIuNDU2LjIxNiAzLjE5Mi4xNi43Mi40MzIgMS4yMzIuODE2IDEuNTM2LjM4NC4yODguOTM2LjQzMiAxLjY1Ni40MzIuNzIgMCAxLjI3Mi0uMTQ0IDEuNjU2LS40MzIuMzg0LS4zMDQuNjQ4LS44MTYuNzkyLTEuNTM2LjE2LS43MzYuMjQtMS44LjI0LTMuMTkyIDAtMS4zOTItLjA4LTIuNDQ4LS4yNC0zLjE2OC0uMTQ0LS43MzYtLjQwOC0xLjI0OC0uNzkyLTEuNTM2LS4zODQtLjMwNC0uOTM2LS40NTYtMS42NTYtLjQ1NnptMTMuNTQzLTMuMTkyYzEuNzc2IDAgMy4yNTYuMDE2IDQuNDQuMDQ4IDEuMi4wMzIgMi4yODguMTEyIDMuMjY0LjI0bC0uMTkyIDMuMjE2aC01LjU2OGMtLjc1MiAwLTEuMTI4LjM2LTEuMTI4IDEuMDhWMjJoLTQuNTEyVjkuMDE2YzAtMS4wNzIuMzQ0LTEuOTQ0IDEuMDMyLTIuNjE2LjY4OC0uNjg4IDEuNTc2LTEuMDMyIDIuNjY0LTEuMDMyek0xMjYuMDM1IDIyaC00LjI5NnYtOC42NGMwLS43MDQuMDgtMS41MTIuMjQtMi40MjRoLS4xNjhjLS4yODguOTEyLS42MTYgMS43MDQtLjk4NCAyLjM3NkwxMTYuMDc1IDIyaC00LjM0NFY1LjQ0aDQuMjcydjguNDI0YzAgLjcyLS4wOCAxLjU2LS4yNCAyLjUyaC4xNjhjLjMwNC0uOTEyLjY0LTEuNzA0IDEuMDA4LTIuMzc2bDQuNzUyLTguNTY4aDQuMzQ0VjIyem05LjcxMi0xNi44NDhjMS4yIDAgMi4xNjguMDQ4IDIuOTA0LjE0NC43MzYuMDggMS41MTIuMjMyIDIuMzI4LjQ1NmwtLjMzNiAzLjMxMmExNjYuNTI3IDE2Ni41MjcgMCAwMC00Ljg5Ni0uMDcyYy0uNjcyIDAtMS4xOTIuMTM2LTEuNTYuNDA4LS4zNTIuMjcyLS42Ljc0NC0uNzQ0IDEuNDE2LS4xNDQuNjcyLS4yMTYgMS42NC0uMjE2IDIuOTA0cy4wNzIgMi4yMzIuMjE2IDIuOTA0Yy4xNDQuNjcyLjM5MiAxLjE0NC43NDQgMS40MTYuMzY4LjI3Mi44ODguNDA4IDEuNTYuNDA4IDEuMjY0IDAgMi4yNzItLjAwOCAzLjAyNC0uMDI0YTMyLjUwOCAzMi41MDggMCAwMDIuMjA4LS4xNjhsLjM2IDMuMjg4Yy0uOC4yNzItMS42MjQuNDY0LTIuNDcyLjU3Ni0uODMyLjExMi0xLjg3Mi4xNjgtMy4xMi4xNjgtMS43OTIgMC0zLjIxNi0uMjcyLTQuMjcyLS44MTYtMS4wNC0uNTYtMS44LTEuNDU2LTIuMjgtMi42ODgtLjQ2NC0xLjI0OC0uNjk2LTIuOTM2LS42OTYtNS4wNjRzLjIzMi0zLjgwOC42OTYtNS4wNGMuNDgtMS4yNDggMS4yNC0yLjE0NCAyLjI4LTIuNjg4IDEuMDU2LS41NiAyLjQ4LS44NCA0LjI3Mi0uODR6bTIwLjQ4OCAzLjc2OGgtNC43NzZWMjJoLTQuNTEyVjguOTJoLTQuNzUyVjUuNDRoMTQuMDR2My40OHpNMTcyLjQxOCAyMmgtNC4yOTZ2LTguNjRjMC0uNzA0LjA4LTEuNTEyLjI0LTIuNDI0aC0uMTY4Yy0uMjg4LjkxMi0uNjE2IDEuNzA0LS45ODQgMi4zNzZMMTYyLjQ1OCAyMmgtNC4zNDRWNS40NGg0LjI3MnY4LjQyNGMwIC43Mi0uMDggMS41Ni0uMjQgMi41MmguMTY4Yy4zMDQtLjkxMi42NC0xLjcwNCAxLjAwOC0yLjM3Nmw0Ljc1Mi04LjU2OGg0LjM0NFYyMnptMTEuNDYzLTguNTY4YzEuMDg4LjE2IDEuOTA0LjQ0OCAyLjQ0OC44NjRzLjk5MiAxLjA3MiAxLjM0NCAxLjk2OGMuMzY4Ljg4Ljg5NiAyLjQ2NCAxLjU4NCA0Ljc1MmwuMjg4Ljk4NGgtNC43MDRhNi42MDYgNi42MDYgMCAwMC0uMjQtLjgxNmMtLjU3Ni0yLjAxNi0xLjAwOC0zLjQwOC0xLjI5Ni00LjE3Ni0uMjcyLS43ODQtLjYtMS4zMjgtLjk4NC0xLjYzMi0uMzg0LS4zMDQtLjk1Mi0uNDU2LTEuNzA0LS40NTZoLS44NGE2Ljk0IDYuOTQgMCAwMS4xOTIgMS41MzZWMjJoLTQuNDg4VjUuNDRoNC40ODh2NC4zOTJjMCAuNzA0LS4wNzIgMS4zOTItLjIxNiAyLjA2NGguODE2Yy43NjggMCAxLjM1Mi0uMTg0IDEuNzUyLS41NTIuNC0uMzg0LjcyOC0uOTYuOTg0LTEuNzI4LjI3Mi0uNzY4LjY3Mi0yLjE2IDEuMi00LjE3Nmg0LjU4NGwtLjUwNCAxLjY1NmMtLjUyOCAxLjc3Ni0uOTUyIDMuMDMyLTEuMjcyIDMuNzY4LS4zMDQuNzM2LS43MTIgMS4yOTYtMS4yMjQgMS42OC0uNDk2LjM2OC0xLjIzMi42MTYtMi4yMDguNzQ0di4xNDR6XFxcIiBmaWxsPVxcXCIjRDYxNjIyXFxcIiAvPjxwYXRoIGQ9XFxcIk03Ljg4NSAzMi4zOTVINS4xNDNWNDBoLTEuMTJ2LTcuNjA1SDEuMjg3di0uOTI2aDYuNTk4di45MjV6TTEzLjY5IDM2LjljMCAuOTY1LS4yMiAxLjc0My0uNjYyIDIuMzMyLS40NDEuNTktMS4wMzkuODg1LTEuNzkzLjg4NS0uNzcgMC0xLjM3NS0uMjQ0LTEuODE2LS43MzJ2My4wNTNIOC4zMzZWMzMuNjZoLjk5bC4wNTMuNzAzYy40NDEtLjU0NyAxLjA1NS0uODIgMS44NC0uODIuNzYxIDAgMS4zNjMuMjg3IDEuODA0Ljg2MS40NDYuNTc0LjY2OCAxLjM3My42NjggMi4zOTd2LjF6bS0xLjA4NC0uMTIzYzAtLjcxNS0uMTUyLTEuMjc5LS40NTctMS42OTMtLjMwNC0uNDE0LS43MjItLjYyMS0xLjI1NC0uNjIxLS42NTYgMC0xLjE0OC4yOS0xLjQ3Ni44NzN2My4wM2MuMzI0LjU3Ny44Mi44NjYgMS40ODguODY2LjUyIDAgLjkzMi0uMjA1IDEuMjM3LS42MTUuMzA4LS40MTQuNDYyLTEuMDI3LjQ2Mi0xLjg0ek0xOC45ODggNDBjLS4wNjItLjEyNS0uMTEzLS4zNDgtLjE1Mi0uNjY4LS41MDQuNTIzLTEuMTA1Ljc4NS0xLjgwNS43ODUtLjYyNSAwLTEuMTM4LS4xNzYtMS41NC0uNTI3YTEuNzI4IDEuNzI4IDAgMDEtLjU5OC0xLjM0OGMwLS42Ni4yNS0xLjE3Mi43NS0xLjUzNS41MDMtLjM2NyAxLjIxLS41NSAyLjEyLS41NWgxLjA1NXYtLjQ5OWMwLS4zNzktLjExMy0uNjgtLjM0LS45MDItLjIyNi0uMjI3LS41Ni0uMzQtMS4wMDEtLjM0LS4zODcgMC0uNzExLjA5OC0uOTczLjI5My0uMjYyLjE5NS0uMzkzLjQzMi0uMzkzLjcwOWgtMS4wOWMwLS4zMTYuMTEyLS42MjEuMzM0LS45MTRhMi4zMiAyLjMyIDAgMDEuOTE1LS43MDNjLjM4Ni0uMTcyLjgxLS4yNTggMS4yNzEtLjI1OC43MyAwIDEuMzAzLjE4NCAxLjcxNy41NS40MTQuMzY0LjYyOS44NjYuNjQ0IDEuNTA3djIuOTE4YzAgLjU4Mi4wNzUgMS4wNDQuMjIzIDEuMzg4VjQwaC0xLjEzN3ptLTEuNzk5LS44MjZjLjM0IDAgLjY2My0uMDg4Ljk2Ny0uMjY0YTEuNTkgMS41OSAwIDAwLjY2Mi0uNjg1di0xLjMwMWgtLjg1Yy0xLjMyNyAwLTEuOTkxLjM4OS0xLjk5MSAxLjE2NiAwIC4zNC4xMTMuNjA1LjM0Ljc5Ny4yMjYuMTkxLjUxNy4yODcuODcyLjI4N3ptOS41OTIuODI2aC0xLjA4NHYtMi43MDdoLTIuOTEyVjQwaC0xLjA5di02LjM0aDEuMDl2Mi43NDhoMi45MTJWMzMuNjZoMS4wODRWNDB6bTQuMjktLjc2OGMuMzg2IDAgLjcyNC0uMTE3IDEuMDEzLS4zNTEuMjg5LS4yMzQuNDUtLjUyOC40OC0uODc5aDEuMDI2Yy0uMDIuMzYzLS4xNDUuNzA5LS4zNzUgMS4wMzctLjIzLjMyOC0uNTQuNTktLjkyNi43ODVhMi42MzcgMi42MzcgMCAwMS0xLjIxOS4yOTNjLS44NjMgMC0xLjU1LS4yODctMi4wNjItLjg2MS0uNTA4LS41NzgtLjc2Mi0xLjM2Ny0uNzYyLTIuMzY3di0uMTgyYzAtLjYxNy4xMTMtMS4xNjYuMzQtMS42NDcuMjI3LS40OC41NS0uODUzLjk3My0xLjExOS40MjUtLjI2NS45MjctLjM5OCAxLjUwNS0uMzk4LjcxMSAwIDEuMzAxLjIxMyAxLjc3LjYzOS40NzMuNDI1LjcyNS45NzguNzU2IDEuNjU4aC0xLjAyNmExLjQ3OCAxLjQ3OCAwIDAwLS40NjgtMS4wMDggMS40MzMgMS40MzMgMCAwMC0xLjAzMS0uMzk4Yy0uNTUxIDAtLjk4LjE5OS0xLjI4NC41OTctLjMuMzk1LS40NS45NjctLjQ1IDEuNzE3di4yMDVjMCAuNzMuMTUgMS4yOTMuNDUgMS42ODguMzAxLjM5NC43My41OTEgMS4yOS41OTF6bTguOTIzLjc2OEgzOC45MXYtNS40NDNoLTIuOTE4VjQwaC0xLjA5di02LjM0aDUuMDkyVjQwem0xLjQ1My0zLjIyOGMwLS42MjIuMTIxLTEuMTguMzYzLTEuNjc2YTIuNzU4IDIuNzU4IDAgMDExLjAyLTEuMTQ5IDIuNzkgMi43OSAwIDAxMS40OTQtLjQwNGMuODY0IDAgMS41Ni4yOTkgMi4wOTIuODk3LjUzNS41OTcuODAzIDEuMzkyLjgwMyAyLjM4NHYuMDc2YzAgLjYxOC0uMTIgMS4xNzItLjM1OCAxLjY2NWEyLjY3IDIuNjcgMCAwMS0xLjAxMyAxLjE0MmMtLjQzOC4yNzMtLjk0Mi40MS0xLjUxMi40MS0uODYgMC0xLjU1Ny0uMjk5LTIuMDkyLS44OTYtLjUzMS0uNTk4LS43OTctMS4zODktLjc5Ny0yLjM3M3YtLjA3NnptMS4wOS4xMjhjMCAuNzAzLjE2MiAxLjI2OC40ODYgMS42OTQuMzI5LjQyNS43NjYuNjM4IDEuMzEzLjYzOC41NSAwIC45ODgtLjIxNCAxLjMxMi0uNjQ0LjMyNS0uNDM0LjQ4Ny0xLjA0LjQ4Ny0xLjgxNiAwLS42OTYtLjE2Ni0xLjI1OC0uNDk4LTEuNjg4YTEuNTY0IDEuNTY0IDAgMDAtMS4zMTMtLjY1Yy0uNTM1IDAtLjk2Ny4yMTMtMS4yOTUuNjM4LS4zMjguNDI2LS40OTIgMS4wMzUtLjQ5MiAxLjgyOHptMTEuMzk3IDBjMCAuOTY1LS4yMjEgMS43NDMtLjY2MiAyLjMzMi0uNDQyLjU5LTEuMDQuODg1LTEuNzk0Ljg4NS0uNzY5IDAtMS4zNzUtLjI0NC0xLjgxNi0uNzMydjMuMDUzaC0xLjA4NFYzMy42NmguOTlsLjA1My43MDNjLjQ0MS0uNTQ3IDEuMDU1LS44MiAxLjg0LS44Mi43NjIgMCAxLjM2My4yODcgMS44MDUuODYxLjQ0NS41NzQuNjY4IDEuMzczLjY2OCAyLjM5N3YuMXptLTEuMDg0LS4xMjNjMC0uNzE1LS4xNTMtMS4yNzktLjQ1Ny0xLjY5My0uMzA1LS40MTQtLjcyMy0uNjIxLTEuMjU0LS42MjEtLjY1NyAwLTEuMTQ5LjI5LTEuNDc3Ljg3M3YzLjAzYy4zMjQuNTc3LjgyLjg2NiAxLjQ4OC44NjYuNTIgMCAuOTMyLS4yMDUgMS4yMzctLjYxNS4zMDgtLjQxNC40NjMtMS4wMjcuNDYzLTEuODR6bTYuNzA5LTIuMjM4aC0yLjEyN1Y0MGgtMS4wODR2LTUuNDZoLTIuMDg2di0uODhoNS4yOTd2Ljg4ek02NS43OTMgNDBoLTEuMDg0di0yLjcwN2gtMi45MTJWNDBoLTEuMDl2LTYuMzRoMS4wOXYyLjc0OGgyLjkxMlYzMy42NmgxLjA4NFY0MHptMi45My00LjE1NGgxLjY0NmMuNzE5LjAwOCAxLjI4Ny4xOTUgMS43MDUuNTYyLjQxOC4zNjcuNjI3Ljg2NS42MjcgMS40OTQgMCAuNjMzLS4yMTUgMS4xNDEtLjY0NCAxLjUyNC0uNDMuMzgzLTEuMDA4LjU3NC0xLjczNS41NzRINjcuNjR2LTYuMzRoMS4wODR2Mi4xODZ6TTc0Ljk2MyA0MGgtMS4wOXYtNi4zNGgxLjA5VjQwem0tNi4yNC0zLjI3djIuMzg1aDEuNjExYy40MDYgMCAuNzItLjEwMy45NDMtLjMxLjIyMy0uMjExLjMzNC0uNDk4LjMzNC0uODYyIDAtLjM1MS0uMTA5LS42MzgtLjMyOC0uODYxLS4yMTUtLjIyNy0uNTE3LS4zNDQtLjkwOC0uMzUyaC0xLjY1MnptMTAuNzYzIDMuMzg3Yy0uODU5IDAtMS41NTgtLjI4MS0yLjA5Ny0uODQ0LS41NC0uNTY2LS44MDktMS4zMjItLjgwOS0yLjI2N3YtLjJjMC0uNjI4LjEyLTEuMTg5LjM1OC0xLjY4MWEyLjgxNSAyLjgxNSAwIDAxMS4wMDctMS4xNiAyLjUzNiAyLjUzNiAwIDAxMS40MDctLjQyMmMuODI0IDAgMS40NjQuMjcyIDEuOTIxLjgxNC40NTguNTQzLjY4NiAxLjMyLjY4NiAyLjMzM3YuNDVoLTQuMjk1Yy4wMTYuNjI2LjE5NyAxLjEzMi41NDUgMS41MTguMzUyLjM4My43OTcuNTc0IDEuMzM2LjU3NC4zODMgMCAuNzA3LS4wNzguOTczLS4yMzQuMjY1LS4xNTYuNDk4LS4zNjMuNjk3LS42MjFsLjY2Mi41MTZjLS41MzEuODE2LTEuMzI4IDEuMjI0LTIuMzkgMS4yMjR6bS0uMTM0LTUuNjgzYy0uNDM4IDAtLjgwNS4xNi0xLjEwMi40OC0uMjk3LjMxNi0uNDguNzYyLS41NSAxLjMzNmgzLjE3NXYtLjA4MmMtLjAzMS0uNTUtLjE4LS45NzctLjQ0NS0xLjI3Ny0uMjY2LS4zMDUtLjYyNS0uNDU3LTEuMDc4LS40NTd6bTguOTE3IDMuOTc4bDEuNDc3LTQuNzUyaDEuMTZsLTIuNTQ5IDcuMzE5Yy0uMzk0IDEuMDU0LTEuMDIxIDEuNTgxLTEuODggMS41ODFsLS4yMDYtLjAxNy0uNDA0LS4wNzZ2LS44OGwuMjkzLjAyNGMuMzY3IDAgLjY1My0uMDc0Ljg1Ni0uMjIyLjIwNy0uMTQ5LjM3Ny0uNDIuNTEtLjgxNWwuMjQtLjY0NC0yLjI2Mi02LjI3aDEuMTgzbDEuNTgyIDQuNzUyem02LjA3LjgyYy4zODggMCAuNzI1LS4xMTcgMS4wMTQtLjM1MS4yOS0uMjM0LjQ1LS41MjguNDgxLS44NzloMS4wMjVjLS4wMi4zNjMtLjE0NC43MDktLjM3NSAxLjAzNy0uMjMuMzI4LS41MzkuNTktLjkyNS43ODUtLjM4My4xOTYtLjc5LjI5My0xLjIyLjI5My0uODYyIDAtMS41NS0uMjg3LTIuMDYyLS44NjEtLjUwOC0uNTc4LS43NjEtMS4zNjctLjc2MS0yLjM2N3YtLjE4MmMwLS42MTcuMTEzLTEuMTY2LjM0LTEuNjQ3LjIyNi0uNDguNTUtLjg1My45NzItMS4xMTkuNDI2LS4yNjUuOTI4LS4zOTggMS41MDYtLjM5OC43MSAwIDEuMy4yMTMgMS43Ny42MzkuNDcyLjQyNS43MjQuOTc4Ljc1NSAxLjY1OGgtMS4wMjVhMS40NzggMS40NzggMCAwMC0uNDY5LTEuMDA4IDEuNDMzIDEuNDMzIDAgMDAtMS4wMzEtLjM5OGMtLjU1IDAtLjk3OC4xOTktMS4yODMuNTk3LS4zMDEuMzk1LS40NTEuOTY3LS40NTEgMS43MTd2LjIwNWMwIC43My4xNSAxLjI5My40NSAxLjY4OC4zMDIuMzk0LjczMS41OTEgMS4yOS41OTF6bTguOTM2LTUuNTcyVjQwaC0xLjA4OXYtNS40NDNoLTIuMTU3TDk5LjkgMzYuOTNjLS4wNyAxLjA5LS4yNTQgMS44NjktLjU1IDIuMzM4LS4yOTMuNDY4LS43Ni43MTItMS40LjczMmgtLjQzNHYtLjk1NWwuMzEtLjAyM2MuMzUyLS4wNC42MDQtLjI0My43NTYtLjYxLjE1Mi0uMzY3LjI1LTEuMDQ3LjI5My0yLjAzOWwuMTE3LTIuNzEzaDQuMjgzem0zLjgxNSA0Ljc1MmwxLjQ3Ni00Ljc1MmgxLjE2MWwtMi41NDkgNy4zMTljLS4zOTUgMS4wNTQtMS4wMjIgMS41ODEtMS44ODEgMS41ODFsLS4yMDUtLjAxNy0uNDA0LS4wNzZ2LS44OGwuMjkyLjAyNGMuMzY4IDAgLjY1My0uMDc0Ljg1Ni0uMjIyLjIwNy0uMTQ5LjM3Ny0uNDIuNTEtLjgxNWwuMjQtLjY0NC0yLjI2Mi02LjI3aDEuMTg0bDEuNTgyIDQuNzUyem03LjcwNS0zLjg1NWgtMi45MjRWNDBoLTEuMDl2LTYuMzRoNC4wMTR2Ljg5N3ptNS4wNDUtLjg5N2gxLjA4NFY0MGgtMS4wODR2LTQuNjIzTDExNi45MTYgNDBoLTEuMDg0di02LjM0aDEuMDg0djQuNjNsMi45MjQtNC42M3ptNS43NDggNS40NTVsLjM3NS0uNDYzYy40MjItLjU0Ny42NjItMS4zNjcuNzIxLTIuNDZsLjA5OS0yLjUzMmg0LjA4NHY1LjQ1NWguODE1djIuNzQ4aC0xLjA4NFY0MGgtNC40MjR2MS44NjNoLTEuMDg0bC4wMDYtMi43NDhoLjQ5MnptMS4yODMgMGgyLjkxMnYtNC40NTNoLTEuOTUxbC0uMDY0IDEuNTEyYy0uMDY3IDEuMjYxLS4zNjYgMi4yNDItLjg5NyAyLjk0MXptMTEuMjA5LTUuNDU1VjQwaC0xLjA5di01LjQ0M2gtMi4xNTZsLS4xMjkgMi4zNzNjLS4wNyAxLjA5LS4yNTQgMS44NjktLjU1MSAyLjMzOC0uMjkzLjQ2OC0uNzU5LjcxMi0xLjQuNzMyaC0uNDM0di0uOTU1bC4zMTEtLjAyM2MuMzUxLS4wNC42MDMtLjI0My43NTYtLjYxLjE1Mi0uMzY3LjI1LTEuMDQ3LjI5My0yLjAzOWwuMTE3LTIuNzEzaDQuMjgzem02LjU4NiAwVjQwaC0xLjA5di0yLjQ2N2gtMS42MzVMMTQwLjQ0NyA0MGgtMS4xNzJsMS41OTQtMi42M2MtLjQwNi0uMTUtLjcxOS0uMzc4LS45MzctLjY4NmExLjg3NiAxLjg3NiAwIDAxLS4zMjMtMS4wOWMwLS41NzguMjE3LTEuMDQzLjY1MS0xLjM5NS40MzMtLjM1NSAxLjAxMy0uNTM1IDEuNzQtLjUzOWgyLjY2NnptLTMuOTY3IDEuOTQ2YzAgLjMwOC4xMDYuNTU4LjMxNy43NS4yMTEuMTg3LjQ5LjI4My44MzguMjg3aDEuNzIydi0yLjEwNGgtMS41NThjLS40MDMgMC0uNzIzLjEtLjk2MS4yOTlhLjk0My45NDMgMCAwMC0uMzU4Ljc2N3ptMTEuNDY3LTEuNTgzYy43OTcgMCAxLjQzNC4yNjggMS45MS44MDMuNDgxLjUzMS43MjEgMS4yMzMuNzIxIDIuMTA0di4xYzAgLjU5Ny0uMTE1IDEuMTMyLS4zNDYgMS42MDVhMi41OCAyLjU4IDAgMDEtLjk5NiAxLjA5NmMtLjQzLjI1Ny0uOTI2LjM4Ni0xLjQ4OC4zODYtLjg1MiAwLTEuNTM3LS4yODMtMi4wNTctLjg1LS41MTktLjU3LS43NzktMS4zMzMtLjc3OS0yLjI5di0uNTI4YzAtMS4zMzIuMjQ2LTIuMzkuNzM4LTMuMTc2LjQ5Ni0uNzg1IDEuMjI3LTEuMjYzIDIuMTkyLTEuNDM1LjU0Ni0uMDk4LjkxNi0uMjE3IDEuMTA3LS4zNThhLjY4MS42ODEgMCAwMC4yODctLjU4aC44OTFjMCAuNDg5LS4xMTIuODctLjMzNCAxLjE0My0uMjE5LjI3My0uNTcxLjQ2Ny0xLjA1NS41OGwtLjgwOS4xODJjLS42NDQuMTUyLTEuMTI4LjQxLTEuNDUzLjc3My0uMzIuMzYtLjUyOS44NC0uNjI3IDEuNDQxLjU3NS0uNjYzIDEuMjc0LS45OTYgMi4wOTgtLjk5NnptLS4yMTEuODkxYy0uNTMxIDAtLjk1My4xOC0xLjI2Ni41NC0uMzEyLjM1NS0uNDY4Ljg0OS0uNDY4IDEuNDgxdi4wOTRjMCAuNjguMTU2IDEuMjE5LjQ2OCAxLjYxNy4zMTcuMzk1Ljc0My41OTIgMS4yNzguNTkyLjUzOSAwIC45NjUtLjE5OSAxLjI3Ny0uNTk3LjMxMy0uMzk5LjQ2OS0uOTguNDY5LTEuNzQ2IDAtLjU5OC0uMTU4LTEuMDc3LS40NzUtMS40MzYtLjMxMi0uMzYzLS43NC0uNTQ1LTEuMjgzLS41NDV6bTguMDU3LTEuMjU0aDEuMDg0VjQwaC0xLjA4NHYtNC42MjNMMTU3LjA4OCA0MGgtMS4wODR2LTYuMzRoMS4wODR2NC42M2wyLjkyNC00LjYzem02LjMxIDEuNzM1YS44MzQuODM0IDAgMDAtLjM0LS43MDRjLS4yMjYtLjE3NS0uNTM3LS4yNjMtLjkzMS0uMjYzLS4zODMgMC0uNzAzLjEtLjk2MS4yOTktLjI1NC4xOTktLjM4MS40MzMtLjM4MS43MDNoLTEuMDc4YzAtLjU1MS4yMy0xLjAwMi42OTEtMS4zNTQuNDYxLS4zNTEgMS4wMzctLjUyNyAxLjcyOS0uNTI3Ljc0MiAwIDEuMzIuMTYgMS43MzQuNDguNDE0LjMxNy42MjEuNzcuNjIxIDEuMzYgMCAuMjg1LS4wODYuNTQ2LS4yNTguNzg1YTEuNzUyIDEuNzUyIDAgMDEtLjczMi41NjhjLjczOC4yNSAxLjEwNy43NDIgMS4xMDcgMS40NzcgMCAuNTgyLS4yMjQgMS4wNDMtLjY3MyAxLjM4My0uNDUuMzQtMS4wNDkuNTEtMS43OTkuNTEtLjczMSAwLTEuMzM0LS4xNzgtMS44MTEtLjUzNC0uNDcyLS4zNi0uNzA5LS44NDQtLjcwOS0xLjQ1M2gxLjA3OGMwIC4zMDkuMTM3LjU3NC40MTEuNzk3LjI3Ny4yMTkuNjIxLjMyOCAxLjAzMS4zMjguNDE0IDAgLjc0OC0uMDk2IDEuMDAyLS4yODdhLjg5Ljg5IDAgMDAuMzgxLS43NDRjMC0uMzU2LS4xMDgtLjYxLS4zMjMtLjc2Mi0uMjExLS4xNTYtLjU0MS0uMjM0LS45OS0uMjM0aC0xLjA4NHYtLjkxNGgxLjE3OGMuNzM4LS4wMiAxLjEwNy0uMzI1IDEuMTA3LS45MTR6TTE3NC4xMDkgNDBoLTEuMDg0di0yLjcwN2gtMi45MTJWNDBoLTEuMDl2LTYuMzRoMS4wOXYyLjc0OGgyLjkxMlYzMy42NmgxLjA4NFY0MHptNC4zNzcuMTE3Yy0uODU5IDAtMS41NTgtLjI4MS0yLjA5Ny0uODQ0LS41MzktLjU2Ni0uODA5LTEuMzIyLS44MDktMi4yNjd2LS4yYzAtLjYyOC4xMTktMS4xODkuMzU4LTEuNjgxYTIuODE3IDIuODE3IDAgMDExLjAwNy0xLjE2IDIuNTM5IDIuNTM5IDAgMDExLjQwNy0uNDIyYy44MjQgMCAxLjQ2NC4yNzIgMS45MjEuODE0LjQ1Ny41NDMuNjg2IDEuMzIuNjg2IDIuMzMzdi40NWgtNC4yOTVjLjAxNi42MjYuMTk3IDEuMTMyLjU0NSAxLjUxOC4zNTIuMzgzLjc5Ny41NzQgMS4zMzYuNTc0LjM4MyAwIC43MDctLjA3OC45NzMtLjIzNC4yNjUtLjE1Ni40OTgtLjM2My42OTctLjYyMWwuNjYyLjUxNmMtLjUzMS44MTYtMS4zMjggMS4yMjQtMi4zOTEgMS4yMjR6bS0uMTM0LTUuNjgzYy0uNDM4IDAtLjgwNS4xNi0xLjEwMi40OC0uMjk3LjMxNi0uNDguNzYyLS41NTEgMS4zMzZoMy4xNzZ2LS4wODJjLS4wMzEtLjU1LS4xOC0uOTc3LS40NDUtMS4yNzctLjI2Ni0uMzA1LS42MjUtLjQ1Ny0xLjA3OC0uNDU3em02LjQxIDQuNzk4Yy4zODYgMCAuNzI0LS4xMTcgMS4wMTMtLjM1MS4yODktLjIzNC40NS0uNTI4LjQ4MS0uODc5aDEuMDI1YTEuOTU3IDEuOTU3IDAgMDEtLjM3NSAxLjAzNyAyLjQ2IDIuNDYgMCAwMS0uOTI2Ljc4NSAyLjY0MiAyLjY0MiAwIDAxLTEuMjE4LjI5M2MtLjg2NCAwLTEuNTUxLS4yODctMi4wNjMtLjg2MS0uNTA4LS41NzgtLjc2MS0xLjM2Ny0uNzYxLTIuMzY3di0uMTgyYzAtLjYxNy4xMTMtMS4xNjYuMzM5LTEuNjQ3LjIyNy0uNDguNTUxLS44NTMuOTczLTEuMTE5LjQyNi0uMjY1LjkyOC0uMzk4IDEuNTA2LS4zOTguNzExIDAgMS4zMDEuMjEzIDEuNzY5LjYzOS40NzMuNDI1LjcyNS45NzguNzU2IDEuNjU4aC0xLjAyNWExLjQ3OCAxLjQ3OCAwIDAwLS40NjktMS4wMDggMS40MzIgMS40MzIgMCAwMC0xLjAzMS0uMzk4Yy0uNTUxIDAtLjk3OS4xOTktMS4yODMuNTk3LS4zMDEuMzk1LS40NTIuOTY3LS40NTIgMS43MTd2LjIwNWMwIC43My4xNTEgMS4yOTMuNDUyIDEuNjg4LjMuMzk0LjczLjU5MSAxLjI4OS41OTF6bTcuNjUyLjc2OGMtLjA2Mi0uMTI1LS4xMTMtLjM0OC0uMTUyLS42NjgtLjUwNC41MjMtMS4xMDYuNzg1LTEuODA1Ljc4NS0uNjI1IDAtMS4xMzktLjE3Ni0xLjU0MS0uNTI3YTEuNzMgMS43MyAwIDAxLS41OTgtMS4zNDhjMC0uNjYuMjUtMS4xNzIuNzUtMS41MzUuNTA0LS4zNjcgMS4yMTEtLjU1IDIuMTIxLS41NWgxLjA1NXYtLjQ5OWMwLS4zNzktLjExMy0uNjgtLjM0LS45MDItLjIyNi0uMjI3LS41Ni0uMzQtMS4wMDItLjM0LS4zODYgMC0uNzExLjA5OC0uOTcyLjI5My0uMjYyLjE5NS0uMzkzLjQzMi0uMzkzLjcwOWgtMS4wOWMwLS4zMTYuMTEyLS42MjEuMzM0LS45MTQuMjI3LS4yOTcuNTMxLS41MzEuOTE0LS43MDNhMy4wOTggMy4wOTggMCAwMTEuMjcyLS4yNThjLjczIDAgMS4zMDMuMTg0IDEuNzE3LjU1LjQxNC4zNjQuNjI4Ljg2Ni42NDQgMS41MDd2Mi45MThjMCAuNTgyLjA3NCAxLjA0NC4yMjMgMS4zODhWNDBoLTEuMTM3em0tMS43OTktLjgyNmMuMzQgMCAuNjYyLS4wODguOTY3LS4yNjQuMzA1LS4xNzYuNTI1LS40MDQuNjYyLS42ODV2LTEuMzAxaC0uODQ5Yy0xLjMyOSAwLTEuOTkzLjM4OS0xLjk5MyAxLjE2NiAwIC4zNC4xMTQuNjA1LjM0Ljc5Ny4yMjcuMTkxLjUxOC4yODcuODczLjI4N3ptOS45MzIuMDU4Yy4zODcgMCAuNzI0LS4xMTcgMS4wMTQtLjM1MS4yODktLjIzNC40NDktLjUyOC40OC0uODc5aDEuMDI1YTEuOTU3IDEuOTU3IDAgMDEtLjM3NSAxLjAzN2MtLjIzLjMyOC0uNTM5LjU5LS45MjUuNzg1YTIuNjQ2IDIuNjQ2IDAgMDEtMS4yMTkuMjkzYy0uODYzIDAtMS41NTEtLjI4Ny0yLjA2My0uODYxLS41MDctLjU3OC0uNzYxLTEuMzY3LS43NjEtMi4zNjd2LS4xODJjMC0uNjE3LjExMy0xLjE2Ni4zMzktMS42NDcuMjI3LS40OC41NTEtLjg1My45NzMtMS4xMTkuNDI2LS4yNjUuOTI4LS4zOTggMS41MDYtLjM5OC43MTEgMCAxLjMwMS4yMTMgMS43Ny42MzkuNDcyLjQyNS43MjQuOTc4Ljc1NSAxLjY1OGgtMS4wMjVhMS40NzQgMS40NzQgMCAwMC0uNDY5LTEuMDA4IDEuNDMyIDEuNDMyIDAgMDAtMS4wMzEtLjM5OGMtLjU1MSAwLS45NzkuMTk5LTEuMjgzLjU5Ny0uMzAxLjM5NS0uNDUxLjk2Ny0uNDUxIDEuNzE3di4yMDVjMCAuNzMuMTUgMS4yOTMuNDUxIDEuNjg4LjMwMS4zOTQuNzMuNTkxIDEuMjg5LjU5MXpNMjEyLjc0IDQwaC01LjU5di0uNzhsMi45NTQtMy4yOGMuNDM3LS40OTcuNzM4LS44OTkuOTAyLTEuMjA4LjE2OC0uMzEyLjI1Mi0uNjM0LjI1Mi0uOTY2IDAtLjQ0Ni0uMTM1LS44MS0uNDA0LTEuMDk2LS4yNy0uMjg1LS42MjktLjQyOC0xLjA3OS0uNDI4LS41MzkgMC0uOTU5LjE1NS0xLjI1OS40NjMtLjI5Ny4zMDUtLjQ0Ni43My0uNDQ2IDEuMjc3aC0xLjA4NGMwLS43ODUuMjUyLTEuNDIuNzU2LTEuOTA0LjUwOC0uNDg0IDEuMTg2LS43MjYgMi4wMzMtLjcyNi43OTMgMCAxLjQyLjIwOSAxLjg4MS42MjcuNDYxLjQxNC42OTIuOTY2LjY5MiAxLjY1OCAwIC44NC0uNTM2IDEuODQtMS42MDYgM2wtMi4yODUgMi40NzhoNC4yODNWNDB6bTYuNDk4LTMuNjM5YzAgMS4yNy0uMjE3IDIuMjEzLS42NSAyLjgzLS40MzQuNjE4LTEuMTExLjkyNi0yLjAzMy45MjYtLjkxIDAtMS41ODQtLjMtMi4wMjItLjkwMi0uNDM3LS42MDYtLjY2NC0xLjUwOC0uNjc5LTIuNzA3VjM1LjA2YzAtMS4yNTMuMjE2LTIuMTg1LjY1LTIuNzk0LjQzNC0uNjEgMS4xMTMtLjkxNCAyLjAzOS0uOTE0LjkxOCAwIDEuNTk0LjI5NCAyLjAyNy44ODQuNDM0LjU4Ni42NTcgMS40OTIuNjY4IDIuNzJ2MS40MDV6bS0xLjA4NC0xLjQ4MmMwLS45MTgtLjEyOS0xLjU4Ni0uMzg2LTIuMDA0LS4yNTgtLjQyMi0uNjY2LS42MzMtMS4yMjUtLjYzMy0uNTU1IDAtLjk1OS4yMS0xLjIxMy42MjctLjI1NC40MTgtLjM4NSAxLjA2LS4zOTIgMS45Mjh2MS43MzRjMCAuOTIyLjEzMiAxLjYwNC4zOTggMi4wNDUuMjY5LjQzOC42NzYuNjU2IDEuMjE5LjY1Ni41MzUgMCAuOTMxLS4yMDcgMS4xODktLjYyLjI2Mi0uNDE1LjM5OS0xLjA2Ny40MS0xLjk1OFYzNC44OHptNy44MjMgMS40ODJjMCAxLjI3LS4yMTcgMi4yMTMtLjY1MSAyLjgzLS40MzMuNjE4LTEuMTExLjkyNi0yLjAzMy45MjYtLjkxIDAtMS41ODQtLjMtMi4wMjItLjkwMi0uNDM3LS42MDYtLjY2NC0xLjUwOC0uNjc5LTIuNzA3VjM1LjA2YzAtMS4yNTMuMjE3LTIuMTg1LjY1LTIuNzk0LjQzNC0uNjEgMS4xMTMtLjkxNCAyLjAzOS0uOTE0LjkxOCAwIDEuNTk0LjI5NCAyLjAyOC44ODQuNDMzLjU4Ni42NTYgMS40OTIuNjY4IDIuNzJ2MS40MDV6bS0xLjA4NC0xLjQ4MmMwLS45MTgtLjEyOS0xLjU4Ni0uMzg3LTIuMDA0LS4yNTgtLjQyMi0uNjY2LS42MzMtMS4yMjUtLjYzMy0uNTU0IDAtLjk1OS4yMS0xLjIxMy42MjctLjI1NC40MTgtLjM4NCAxLjA2LS4zOTIgMS45Mjh2MS43MzRjMCAuOTIyLjEzMyAxLjYwNC4zOTggMi4wNDUuMjcuNDM4LjY3Ni42NTYgMS4yMTkuNjU2LjUzNSAwIC45MzItLjIwNyAxLjE4OS0uNjIuMjYyLS40MTUuMzk5LTEuMDY3LjQxMS0xLjk1OFYzNC44OHptMi45Ny44NDRsLjQzNC00LjI1NGg0LjM3MXYxLjAwMmgtMy40NTFsLS4yNTggMi4zMjZjLjQxOC0uMjQ2Ljg5My0uMzcgMS40MjQtLjM3Ljc3NyAwIDEuMzk0LjI1OCAxLjg1MS43NzQuNDU3LjUxMi42ODYgMS4yMDUuNjg2IDIuMDggMCAuODgtLjIzOCAxLjU3Mi0uNzE1IDIuMDgtLjQ3My41MDQtMS4xMzUuNzU2LTEuOTg2Ljc1Ni0uNzU0IDAtMS4zNjktLjIwOS0xLjg0Ni0uNjI3LS40NzctLjQxOC0uNzQ4LS45OTYtLjgxNC0xLjczNGgxLjAyNWMuMDY2LjQ4OC4yNC44NTcuNTIxIDEuMTA3LjI4Mi4yNDYuNjUzLjM3IDEuMTE0LjM3LjUwNCAwIC44OTgtLjE3MiAxLjE4My0uNTE2LjI4OS0uMzQ0LjQzNC0uODE5LjQzNC0xLjQyNCAwLS41Ny0uMTU2LTEuMDI3LS40NjktMS4zNzEtLjMwOC0uMzQ4LS43MjEtLjUyMi0xLjIzNi0uNTIyLS40NzMgMC0uODQ0LjEwNC0xLjExMy4zMWwtLjI4OC4yMzUtLjg2Ny0uMjIyem0xMy40MjQtMS4xNjZoLTIuOTI0VjQwaC0xLjA5di02LjM0aDQuMDE0di44OTd6bS41MzkgMi4yMTVjMC0uNjIyLjEyMS0xLjE4LjM2My0xLjY3NmEyLjc2MiAyLjc2MiAwIDAxMS4wMi0xLjE0OSAyLjc5IDIuNzkgMCAwMTEuNDk0LS40MDRjLjg2MyAwIDEuNTYxLjI5OSAyLjA5Mi44OTcuNTM1LjU5Ny44MDMgMS4zOTIuODAzIDIuMzg0di4wNzZjMCAuNjE4LS4xMTkgMS4xNzItLjM1OCAxLjY2NWEyLjY2NiAyLjY2NiAwIDAxLTEuMDEzIDEuMTQyYy0uNDM4LjI3My0uOTQyLjQxLTEuNTEyLjQxLS44NiAwLTEuNTU3LS4yOTktMi4wOTItLjg5Ni0uNTMxLS41OTgtLjc5Ny0xLjM4OS0uNzk3LTIuMzczdi0uMDc2em0xLjA5LjEyOGMwIC43MDMuMTYyIDEuMjY4LjQ4NiAxLjY5NC4zMjguNDI1Ljc2Ni42MzggMS4zMTMuNjM4LjU1MSAwIC45ODgtLjIxNCAxLjMxMi0uNjQ0LjMyNS0uNDM0LjQ4Ny0xLjA0LjQ4Ny0xLjgxNiAwLS42OTYtLjE2Ni0xLjI1OC0uNDk4LTEuNjg4YTEuNTY0IDEuNTY0IDAgMDAtMS4zMTMtLjY1Yy0uNTM1IDAtLjk2Ny4yMTMtMS4yOTUuNjM4LS4zMjguNDI2LS40OTIgMS4wMzUtLjQ5MiAxLjgyOHptNS41NjYgMi4yMTVsLjM3NS0uNDYzYy40MjItLjU0Ny42NjMtMS4zNjcuNzIxLTIuNDZsLjEtMi41MzJoNC4wODR2NS40NTVoLjgxNHYyLjc0OGgtMS4wODRWNDBoLTQuNDI0djEuODYzaC0xLjA4NGwuMDA2LTIuNzQ4aC40OTJ6bTEuMjg0IDBoMi45MTJ2LTQuNDUzaC0xLjk1MWwtLjA2NSAxLjUxMmMtLjA2NiAxLjI2MS0uMzY1IDIuMjQyLS44OTYgMi45NDF6bTkuOTI1Ljg4NWMtLjA2Mi0uMTI1LS4xMTMtLjM0OC0uMTUyLS42NjgtLjUwNC41MjMtMS4xMDUuNzg1LTEuODA1Ljc4NS0uNjI1IDAtMS4xMzgtLjE3Ni0xLjU0MS0uNTI3YTEuNzI5IDEuNzI5IDAgMDEtLjU5Ny0xLjM0OGMwLS42Ni4yNS0xLjE3Mi43NS0xLjUzNS41MDQtLjM2NyAxLjIxMS0uNTUgMi4xMjEtLjU1aDEuMDU0di0uNDk5YzAtLjM3OS0uMTEzLS42OC0uMzM5LS45MDItLjIyNy0uMjI3LS41NjEtLjM0LTEuMDAyLS4zNC0uMzg3IDAtLjcxMS4wOTgtLjk3My4yOTMtLjI2Mi4xOTUtLjM5My40MzItLjM5My43MDloLTEuMDg5YzAtLjMxNi4xMTEtLjYyMS4zMzQtLjkxNGEyLjMxIDIuMzEgMCAwMS45MTQtLjcwMyAzLjA5IDMuMDkgMCAwMTEuMjcxLS4yNThjLjczMSAwIDEuMzAzLjE4NCAxLjcxNy41NS40MTQuMzY0LjYyOS44NjYuNjQ0IDEuNTA3djIuOTE4YzAgLjU4Mi4wNzUgMS4wNDQuMjIzIDEuMzg4VjQwaC0xLjEzN3ptLTEuNzk4LS44MjZhMS45IDEuOSAwIDAwLjk2Ni0uMjY0IDEuNTkgMS41OSAwIDAwLjY2Mi0uNjg1di0xLjMwMWgtLjg0OWMtMS4zMjggMC0xLjk5Mi4zODktMS45OTIgMS4xNjYgMCAuMzQuMTEzLjYwNS4zNC43OTcuMjI2LjE5MS41MTcuMjg3Ljg3My4yODd6XFxcIiBmaWxsPVxcXCIjMDAwXFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2wiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCJzdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbFwiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwic3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZFwiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwibWFpbC1pY29uXCIsXG4gIFwidXNlXCI6IFwibWFpbC1pY29uLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCAyMSAyMVwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDIxIDIxXFxcIiBpZD1cXFwibWFpbC1pY29uXFxcIj48cGF0aCBkPVxcXCJNMTkuMTU0IDIuNjQzSDEuODQ2Qy44MjkgMi42NDMgMCAzLjQ0OCAwIDQuNDM2djExLjk1YzAgLjk4NC44MjYgMS43OTIgMS44NDYgMS43OTJoMTcuMzA4YzEuMDE0IDAgMS44NDYtLjgwMiAxLjg0Ni0xLjc5M1Y0LjQzNWMwLS45ODQtLjgyNi0xLjc5Mi0xLjg0Ni0xLjc5MnpNMTguOSAzLjgzOGwtOC4zNiA4LjEyLTguNDMyLTguMTJIMTguOXptLTE3LjY3IDEyLjNWNC42NzhsNS45MjYgNS43MDUtNS45MjYgNS43NTV6bS44Ny44NDVsNS45My01Ljc1OSAyLjA3OCAyYy4yNC4yMzIuNjI4LjIzMS44NjgtLjAwMWwyLjAyNi0xLjk2OCA1Ljg5NyA1LjcyOEgyLjEwMnptMTcuNjctLjg0NWwtNS44OTgtNS43MjggNS44OTgtNS43Mjd2MTEuNDU1elxcXCIgLz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwic3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2xcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcInN2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGRcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcIm1hcC1pY29uXCIsXG4gIFwidXNlXCI6IFwibWFwLWljb24tdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDQzIDQzXCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNDMgNDNcXFwiIGlkPVxcXCJtYXAtaWNvblxcXCI+PGcgY2xpcC1wYXRoPVxcXCJ1cmwoI21hcC1pY29uX2NsaXAwKVxcXCI+PHBhdGggZD1cXFwiTTI0Ljg2NiAzLjk1NUg0Mi4zN2EuNjMxLjYzMSAwIDEwMC0xLjI2MkgyNS40OTdWLjYzYS42MzEuNjMxIDAgMDAtMS4yNjIgMHYyLjY5M2MwIC4zNDguMjgzLjYzMS42MzEuNjMxek0zLjk5NyAzOS44MDJILjYzMWEuNjMxLjYzMSAwIDEwMCAxLjI2MmgyLjczNXYxLjMwNWEuNjMxLjYzMSAwIDEwMS4yNjIgMHYtMS45MzVhLjYzMS42MzEgMCAwMC0uNjMtLjYzMnptMC0xOC4yNkguNjMxYS42MzEuNjMxIDAgMTAwIDEuMjYyaDIuNzM1VjM1LjY4SC42M2EuNjMxLjYzMSAwIDEwMCAxLjI2MmgzLjM2NmEuNjMxLjYzMSAwIDAwLjYzMS0uNjN2LTE0LjE0YS42MzEuNjMxIDAgMDAtLjYzLS42MzF6bTExLjY1OS4yM2EuNjMyLjYzMiAwIDAwLS40ODctLjIzSDguMDM2YS42MzEuNjMxIDAgMDAtLjYzLjYzMVYzNi4zMWEuNjMuNjMgMCAwMC42My42MzFoMTIuNzkxYS42MzEuNjMxIDAgMDAuNjMxLS42M3YtNy4yNjRhLjYzLjYzIDAgMDAtLjE0NC0uNDAxbC01LjY1OC02Ljg3NHptNC41NCAxMy45MDdIOC42NjhWMjIuODA0aDYuMjAzbDUuMzI1IDYuNDd2Ni40MDV6bS42MzEgNC4wMzlIOC4wMzdhLjYzMS42MzEgMCAwMC0uNjMyLjYzMXYyLjAyYS42MzEuNjMxIDAgMTAxLjI2MyAwVjQwLjk4aDExLjUyOHYxLjM4OWEuNjMxLjYzMSAwIDAwMS4yNjIgMHYtMi4wMmEuNjMxLjYzMSAwIDAwLS42MzEtLjYzMXpcXFwiIC8+PHBhdGggZD1cXFwiTTQyLjM2OSAzNS42NzlIMzcuNzdjLjEzNS0uMTkyLjI3Mi0uMzkuNDA5LS41OTIgMS44NTktMi43NCAyLjgwMS00LjgyIDIuODAxLTYuMTgyYTYuMDI0IDYuMDI0IDAgMDAtNi4wMTYtNi4wMTcgNi4wMjQgNi4wMjQgMCAwMC02LjAxNyA2LjAxN2MwIDEuMzYyLjk0MyAzLjQ0MiAyLjgwMiA2LjE4Mi4xMzcuMjAyLjI3My40LjQwOS41OTJoLTYuNjZWMTYuNDIzYS42MzEuNjMxIDAgMDAtMS4yNjMgMFYzNi4zMWEuNjMuNjMgMCAwMC42My42MzFoOC4xNjRsLjA0My0uMDAyYy4yMS4yOC40MDUuNTM1LjU4Ljc2SDIzLjQ3N3YtOS40NjdhLjYzMi42MzIgMCAwMC0uMTQ3LS40MDRMMTYuNiAxOS43NWEuNjMxLjYzMSAwIDAwLS40ODUtLjIyOEg2LjY0OXYtMy4xODFjLjE1NS0uMTkuNDIxLS41MjIuNzU3LS45NTZ2Mi43NWMwIC4zNDguMjgzLjYzLjYzMS42M2g4LjcyNWwzLjU3NyA0LjM3MmEuNjM3LjYzNyAwIDAwLjc0Ni4xNzdjLjIyNS0uMS4zNzQtLjMzLjM3NC0uNTc2VjcuMzYzYS42MzEuNjMxIDAgMDAtLjYzMS0uNjMxaC04Ljc5NWwuMDAxLS4wNDJjMC0uOTg1LS4yNC0xLjkxNC0uNjYtMi43MzVoOS40NTRhLjYzMS42MzEgMCAwMC42MzEtLjYzMVYuNjNhLjYzMS42MzEgMCAwMC0xLjI2MiAwdjIuMDYySDEwLjU2YS42MTkuNjE5IDAgMDAtLjA1LjAwMkE2LjAwMyA2LjAwMyAwIDAwNi4wMTcuNjczIDYuMDIzIDYuMDIzIDAgMDAwIDYuNjljMCAxLjM2Mi45NDMgMy40NDIgMi44MDIgNi4xODIuMTkuMjguMzc5LjU1MS41NjQuODEydjMuODE5SC42M2EuNjMxLjYzMSAwIDEwMCAxLjI2MmgzLjM2NmEuNjMxLjYzMSAwIDAwLjYzMS0uNjN2LTIuNzVjLjMzNi40MzQuNjAzLjc2Ni43NTguOTU2djMuODEzYzAgLjM0OC4yODIuNjMuNjMuNjNoOS44MDNsNi4zOTYgNy42Nzd2OS44NjljMCAuMzQ4LjI4My42My42MzEuNjNoMTIuMTE4Yy4yMDIgMCAuMzQ4LS4wOTUuNDg3LS4yMy4wNTItLjA2LjYzMi0uNzYgMS40MDMtMS43ODloNS41MTVhLjYzMS42MzEgMCAxMDAtMS4yNjJ6TTIwLjE5NiA3Ljk5NFYyMC45N2wtMi42NDctMy4yMzVhLjYzLjYzIDAgMDAtLjQ4OS0uMjMySDguNjY3di0zLjgyYy4xODYtLjI2LjM3NS0uNTMyLjU2NS0uODExIDEuMzQtMS45NzcgMi4yMDUtMy42MSAyLjU4Mi00Ljg3OGg4LjM4MnpNMS4yNjIgNi42OWE0Ljc2IDQuNzYgMCAwMTQuNzU1LTQuNzU0QTQuNzYgNC43NiAwIDAxMTAuNzcgNi42OWMwIDIuMDMyLTMuMDgzIDYuMzI1LTQuNzU0IDguNDI1LTEuNjcxLTIuMS00Ljc1NS02LjM5My00Ljc1NS04LjQyNXpNMzAuMjEgMjguOTA1YTQuNzYgNC43NiAwIDAxNC43NTUtNC43NTQgNC43NiA0Ljc2IDAgMDE0Ljc1NCA0Ljc1NGMwIDEuNjE4LTEuOTUzIDQuNjY3LTMuNTk0IDYuOTA0YS42MzUuNjM1IDAgMDAtLjIxLjI4NCA0OC4zIDQ4LjMgMCAwMS0uOTUgMS4yMzdjLTEuNjcxLTIuMS00Ljc1NS02LjM5My00Ljc1NS04LjQyNXptMTIuMTU5IDEwLjgxM0gyNC44NjZhLjYzMS42MzEgMCAwMC0uNjMxLjYzMXYyLjAyYS42MzEuNjMxIDAgMDAxLjI2MiAwVjQwLjk4SDQyLjM3YS42MzEuNjMxIDAgMTAwLTEuMjYyelxcXCIgLz48cGF0aCBkPVxcXCJNNDIuMzY5IDYuNzMySDI0Ljg2NmEuNjMxLjYzMSAwIDAwLS42MzEuNjMxdjYuMDg3YS42MzEuNjMxIDAgMDAxLjI2MiAwVjcuOTk0SDQyLjM3YS42MzEuNjMxIDAgMTAwLTEuMjYyek05LjM0IDYuNjlhMy4zMjggMy4zMjggMCAwMC0zLjMyMy0zLjMyNEEzLjMyOCAzLjMyOCAwIDAwMi42OTMgNi42OWEzLjMyOCAzLjMyOCAwIDAwMy4zMjQgMy4zMjRBMy4zMjggMy4zMjggMCAwMDkuMzQgNi42OXptLTUuMzg1IDBjMC0xLjEzNy45MjUtMi4wNjIgMi4wNjItMi4wNjIgMS4xMzcgMCAyLjA2MS45MjUgMi4wNjEgMi4wNjJhMi4wNjQgMi4wNjQgMCAwMS0yLjA2MSAyLjA2IDIuMDY0IDIuMDY0IDAgMDEtMi4wNjItMi4wNnptMzQuMzMzIDIyLjIxNWEzLjMyOCAzLjMyOCAwIDAwLTMuMzI0LTMuMzI0IDMuMzI4IDMuMzI4IDAgMDAtMy4zMjQgMy4zMjQgMy4zMjggMy4zMjggMCAwMDMuMzI0IDMuMzI0IDMuMzI4IDMuMzI4IDAgMDAzLjMyNC0zLjMyNHptLTUuMzg2IDBjMC0xLjEzNy45MjUtMi4wNjIgMi4wNjItMi4wNjIgMS4xMzYgMCAyLjA2MS45MjUgMi4wNjEgMi4wNjJhMi4wNjQgMi4wNjQgMCAwMS0yLjA2MSAyLjA2MiAyLjA2NCAyLjA2NCAwIDAxLTIuMDYyLTIuMDYyelxcXCIgLz48L2c+PGRlZnM+PGNsaXBQYXRoIGlkPVxcXCJtYXAtaWNvbl9jbGlwMFxcXCI+PHBhdGggZD1cXFwiTTAgMGg0M3Y0M0gwelxcXCIgLz48L2NsaXBQYXRoPjwvZGVmcz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwic3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2xcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcInN2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGRcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcInBhc3Nwb3J0LWljb25cIixcbiAgXCJ1c2VcIjogXCJwYXNzcG9ydC1pY29uLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA0MyA0M1wiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIGZpbGw9XFxcIm5vbmVcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDQzIDQzXFxcIiBpZD1cXFwicGFzc3BvcnQtaWNvblxcXCI+PGcgY2xpcC1wYXRoPVxcXCJ1cmwoI3Bhc3Nwb3J0LWljb25fY2xpcDApXFxcIj48Y2lyY2xlIGN4PVxcXCIyMS41XFxcIiBjeT1cXFwiMjMuNVxcXCIgcj1cXFwiOC43NVxcXCIgc3Ryb2tlPVxcXCIjQzQwMDBDXFxcIiBzdHJva2Utd2lkdGg9XFxcIjEuNVxcXCIgLz48cGF0aCBkPVxcXCJNMzAuODE3IDcuODgySDEyLjE4NGEuNzE3LjcxNyAwIDEwMCAxLjQzNGgxOC42MzNhLjcxNy43MTcgMCAxMDAtMS40MzR6bTAgMi44NjhIMTIuMTg0YS43MTcuNzE3IDAgMTAwIDEuNDMzaDE4LjYzM2EuNzE3LjcxNyAwIDEwMC0xLjQzNHptMCAyNy4yMzNIMTIuMTg0YS43MTcuNzE3IDAgMTAwIDEuNDM0aDE4LjYzM2EuNzE3LjcxNyAwIDAwMC0xLjQzNHpcXFwiIGZpbGw9XFxcIiNDNDAwMENcXFwiIC8+PHBhdGggZD1cXFwiTTM0LjA5NiAzLjU4MmgtLjQxMlYyLjI0NkEyLjI5MyAyLjI5MyAwIDAwMzIuODkyLjQ5YTIuMDIgMi4wMiAwIDAwLTEuNjMzLS40NjVsLTIyIDMuNTU3aC0uMzU1QTIuNDMzIDIuNDMzIDAgMDA2LjQ1IDUuOTg3djM0LjYwOEEyLjQzMyAyLjQzMyAwIDAwOC45MDQgNDNoMjUuMTkyYTIuNDMzIDIuNDMzIDAgMDAyLjQ1NC0yLjQwNVY1Ljk4N2EyLjQzMyAyLjQzMyAwIDAwLTIuNDU0LTIuNDA1ek0zMS40ODggMS40NGEuNTgyLjU4MiAwIDAxLjQ3NC4xNDIuODY0Ljg2NCAwIDAxLjI4OC42NjR2MS4zMzdIMTguMjM4bDEzLjI1LTIuMTQzem0zLjYyOSAzOS4xNTVhLjk5OC45OTggMCAwMS0xLjAyLjk3Mkg4LjkwM2EuOTk4Ljk5OCAwIDAxLTEuMDItLjk3MlY1Ljk4N2EuOTk4Ljk5OCAwIDAxMS4wMi0uOTcxaDI1LjE5MmEuOTk4Ljk5OCAwIDAxMS4wMjEuOTcxdjM0LjYwOHpcXFwiIGZpbGw9XFxcIiNDNDAwMENcXFwiIC8+PC9nPjxkZWZzPjxjbGlwUGF0aCBpZD1cXFwicGFzc3BvcnQtaWNvbl9jbGlwMFxcXCI+PHBhdGggZmlsbD1cXFwiI2ZmZlxcXCIgZD1cXFwiTTAgMGg0M3Y0M0gwelxcXCIgLz48L2NsaXBQYXRoPjwvZGVmcz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwic3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2xcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcInN2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGRcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcInBpbi1pY29uXCIsXG4gIFwidXNlXCI6IFwicGluLWljb24tdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDIxIDIxXCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgMjEgMjFcXFwiIGlkPVxcXCJwaW4taWNvblxcXCI+PGcgY2xpcC1wYXRoPVxcXCJ1cmwoI3Bpbi1pY29uX2NsaXAwKVxcXCI+PHBhdGggZD1cXFwiTTEwLjUgMEM2LjQzIDAgMy4xMTcgMy4yMTYgMy4xMTcgNy4xN2E3IDcgMCAwMDEuMTAyIDMuNzdsNS44NiA5LjE3YS42Mi42MiAwIDAwLjUyMy4yODNoLjAwNWEuNjE5LjYxOSAwIDAwLjUyMy0uMjlsNS43MTEtOS4yNmE3LjAwNiA3LjAwNiAwIDAwMS4wNDItMy42NzRDMTcuODgzIDMuMjE2IDE0LjU3IDAgMTAuNSAwem01LjI4NiAxMC4yM2wtNS4xOTMgOC40MTgtNS4zMjgtOC4zMzhhNS44NCA1Ljg0IDAgMDEtLjkyNi0zLjE0YzAtMy4yOTUgMi43NjktNS45ODMgNi4xNjEtNS45ODMgMy4zOTIgMCA2LjE1NiAyLjY4OCA2LjE1NiA1Ljk4MmE1Ljg0IDUuODQgMCAwMS0uODcgMy4wNnpcXFwiIC8+PHBhdGggZD1cXFwiTTEwLjUgMy41ODVjLTIuMDM1IDAtMy42OTEgMS42MDgtMy42OTEgMy41ODUgMCAxLjk2NCAxLjYyOSAzLjU4NSAzLjY5MSAzLjU4NSAyLjA4OCAwIDMuNjkxLTEuNjQzIDMuNjkxLTMuNTg1IDAtMS45NzctMS42NTYtMy41ODUtMy42OTEtMy41ODV6bTAgNS45ODNjLTEuMzY0IDAtMi40Ny0xLjA3Ny0yLjQ3LTIuMzk4IDAtMS4zMTggMS4xMTMtMi4zOTggMi40Ny0yLjM5OCAxLjM1NyAwIDIuNDY1IDEuMDggMi40NjUgMi4zOTggMCAxLjMwMi0xLjA4IDIuMzk4LTIuNDY1IDIuMzk4elxcXCIgLz48L2c+PGRlZnM+PGNsaXBQYXRoIGlkPVxcXCJwaW4taWNvbl9jbGlwMFxcXCI+PHBhdGggZD1cXFwiTTAgMGgyMXYyMC4zOTNIMHpcXFwiIC8+PC9jbGlwUGF0aD48L2RlZnM+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJzbWFydHBob25lLWNhbGwtaWNvblwiLFxuICBcInVzZVwiOiBcInNtYXJ0cGhvbmUtY2FsbC1pY29uLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCAyMSAyMVwiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDIxIDIxXFxcIiBpZD1cXFwic21hcnRwaG9uZS1jYWxsLWljb25cXFwiPjxwYXRoIGQ9XFxcIk0xNS4xODEgMEg1LjgyQzUuMDM5IDAgNC40LjYzOCA0LjQgMS40MTh2MTguMTYzYzAgLjc4LjY0IDEuNDE5IDEuNDIgMS40MTloOS4zNjJjLjc4IDAgMS40MTktLjYzNyAxLjQxOS0xLjQxOFYxLjQxOEExLjQyNSAxLjQyNSAwIDAwMTUuMTggMHpNOS4wMDIgMS4wMjJoMi45OTZhLjE3Mi4xNzIgMCAwMTAgLjM0NEg5LjAwMmEuMTcyLjE3MiAwIDExMC0uMzQ0ek0xMC41IDIwLjI5MWEuNzEuNzEgMCAxMTAtMS40MTkuNzEuNzEgMCAwMTAgMS40MTl6bTUuMTEzLTEuOTE2SDUuMzg3VjIuMjQ5aDEwLjIyNnYxNi4xMjZ6XFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2wiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCJzdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbFwiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwic3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZFwiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwic3BhcmUtaWNvblwiLFxuICBcInVzZVwiOiBcInNwYXJlLWljb24tdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDQzIDQzXCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNDMgNDNcXFwiIGlkPVxcXCJzcGFyZS1pY29uXFxcIj48cGF0aCBkPVxcXCJNMTAuNzUgMjEuNUM0LjgyMyAyMS41IDAgMTYuNjc3IDAgMTAuNzVTNC44MjMgMCAxMC43NSAwIDIxLjUgNC44MjMgMjEuNSAxMC43NSAxNi42NzcgMjEuNSAxMC43NSAyMS41em0wLTIwLjE1NmMtNS4xODcgMC05LjQwNiA0LjIyLTkuNDA2IDkuNDA2IDAgNS4xODcgNC4yMiA5LjQwNiA5LjQwNiA5LjQwNiA1LjE4NyAwIDkuNDA2LTQuMjIgOS40MDYtOS40MDYgMC01LjE4Ny00LjIyLTkuNDA2LTkuNDA2LTkuNDA2elxcXCIgLz48cGF0aCBkPVxcXCJNMTAuNzUgMTYuMTI1YTUuMzgxIDUuMzgxIDAgMDEtNS4zNzUtNS4zNzUgNS4zODEgNS4zODEgMCAwMTUuMzc1LTUuMzc1IDUuMzgxIDUuMzgxIDAgMDE1LjM3NSA1LjM3NSA1LjM4MSA1LjM4MSAwIDAxLTUuMzc1IDUuMzc1em0wLTkuNDA2YTQuMDM1IDQuMDM1IDAgMDAtNC4wMzEgNC4wMzEgNC4wMzUgNC4wMzUgMCAwMDQuMDMxIDQuMDMxIDQuMDM1IDQuMDM1IDAgMDA0LjAzMS00LjAzMSA0LjAzNSA0LjAzNSAwIDAwLTQuMDMxLTQuMDMxelxcXCIgLz48cGF0aCBkPVxcXCJNMTQuNzgxIDIxLjVhLjY3Mi42NzIgMCAxMTAtMS4zNDRjNS4xODcgMCA5LjQwNi00LjIyIDkuNDA2LTkuNDA2IDAtNS4xODctNC4yMTktOS40MDYtOS40MDYtOS40MDZhLjY3Mi42NzIgMCAxMTAtMS4zNDRjNS45MjggMCAxMC43NSA0LjgyMyAxMC43NSAxMC43NVMyMC43MSAyMS41IDE0Ljc4MSAyMS41elxcXCIgLz48cGF0aCBkPVxcXCJNMTQuNzgxIDEuMzQ0SDEwLjc1YS42NzIuNjcyIDAgMTEwLTEuMzQ0aDQuMDMxYS42NzIuNjcyIDAgMTEwIDEuMzQ0em0wIDIwLjE1NkgxMC43NWEuNjcyLjY3MiAwIDExMC0xLjM0NGg0LjAzMWEuNjcyLjY3MiAwIDExMCAxLjM0NHptLTQuMDMxLTUuMzc1YS42NzIuNjcyIDAgMDEtLjY3Mi0uNjcyVjYuMDQ3YS42NzIuNjcyIDAgMTExLjM0NCAwdjkuNDA2YzAgLjM3MS0uMy42NzItLjY3Mi42NzJ6XFxcIiAvPjxwYXRoIGQ9XFxcIk0xNC44MjIgMTMuNzc0YS42NjYuNjY2IDAgMDEtLjMzNS0uMDlMNi4zNCA4Ljk4YS42NzIuNjcyIDAgMTEuNjcxLTEuMTYzbDguMTQ2IDQuNzAzYS42Ny42NyAwIDAxLS4zMzYgMS4yNTR6XFxcIiAvPjxwYXRoIGQ9XFxcIk02LjY3NyAxMy43NzRhLjY3LjY3IDAgMDEtLjMzNi0xLjI1NGw4LjE0Ni00LjcwM2EuNjcyLjY3MiAwIDAxLjY3MSAxLjE2M2wtOC4xNDUgNC43MDNhLjY2Ni42NjYgMCAwMS0uMzM2LjA5ek0yOC4yMTkgNDNjLTUuOTI4IDAtMTAuNzUtNC44MjMtMTAuNzUtMTAuNzVTMjIuMjkgMjEuNSAyOC4yMTkgMjEuNWM1LjkyNyAwIDEwLjc1IDQuODIzIDEwLjc1IDEwLjc1UzM0LjE0NiA0MyAyOC4yMTkgNDN6bTAtMjAuMTU2Yy01LjE4NyAwLTkuNDA3IDQuMjItOS40MDcgOS40MDYgMCA1LjE4NyA0LjIyIDkuNDA2IDkuNDA3IDkuNDA2czkuNDA2LTQuMjIgOS40MDYtOS40MDZjMC01LjE4Ny00LjIyLTkuNDA2LTkuNDA2LTkuNDA2elxcXCIgLz48cGF0aCBkPVxcXCJNMjguMjE5IDM3LjYyNWE1LjM4MSA1LjM4MSAwIDAxLTUuMzc1LTUuMzc1IDUuMzgxIDUuMzgxIDAgMDE1LjM3NS01LjM3NSA1LjM4MSA1LjM4MSAwIDAxNS4zNzUgNS4zNzUgNS4zODEgNS4zODEgMCAwMS01LjM3NSA1LjM3NXptMC05LjQwNmE0LjAzNSA0LjAzNSAwIDAwLTQuMDMyIDQuMDMxIDQuMDM1IDQuMDM1IDAgMDA0LjAzMiA0LjAzMSA0LjAzNSA0LjAzNSAwIDAwNC4wMzEtNC4wMzEgNC4wMzUgNC4wMzUgMCAwMC00LjAzMS00LjAzMXpcXFwiIC8+PHBhdGggZD1cXFwiTTMyLjI1IDQzYS42NzEuNjcxIDAgMTEwLTEuMzQ0YzUuMTg3IDAgOS40MDYtNC4yMiA5LjQwNi05LjQwNiAwLTUuMTg3LTQuMjItOS40MDYtOS40MDYtOS40MDZhLjY3MS42NzEgMCAxMTAtMS4zNDRDMzguMTc3IDIxLjUgNDMgMjYuMzIzIDQzIDMyLjI1UzM4LjE3NyA0MyAzMi4yNSA0M3pcXFwiIC8+PHBhdGggZD1cXFwiTTMyLjI1IDIyLjg0NGgtNC4wMzFhLjY3MS42NzEgMCAxMTAtMS4zNDRoNC4wMzFhLjY3Mi42NzIgMCAxMTAgMS4zNDR6bTAgMjAuMTU2aC00LjAzMWEuNjcxLjY3MSAwIDExMC0xLjM0NGg0LjAzMWEuNjcxLjY3MSAwIDExMCAxLjM0NHptLTQuMDMxLTUuMzc1YS42NzEuNjcxIDAgMDEtLjY3Mi0uNjcydi05LjQwNmEuNjcxLjY3MSAwIDExMS4zNDQgMHY5LjQwNmEuNjcuNjcgMCAwMS0uNjcyLjY3MnpcXFwiIC8+PHBhdGggZD1cXFwiTTMyLjI5MSAzNS4yNzNhLjY2Ny42NjcgMCAwMS0uMzM1LS4wOUwyMy44MSAzMC40OGEuNjcxLjY3MSAwIDExLjY3Mi0xLjE2M2w4LjE0NiA0LjcwM2EuNjcxLjY3MSAwIDAxLS4zMzcgMS4yNTN6XFxcIiAvPjxwYXRoIGQ9XFxcIk0yNC4xNDYgMzUuMjczYS42Ny42NyAwIDAxLS4zMzYtMS4yNTNsOC4xNDUtNC43MDNhLjY3Mi42NzIgMCAwMS42NzIgMS4xNjNsLTguMTQ2IDQuNzAzYS42NjYuNjY2IDAgMDEtLjMzNS4wOXptOC4xMDYtMTUuMTJhLjY3Mi42NzIgMCAwMS0uNjcxLS42NzF2LTguNzMzYS42NzIuNjcyIDAgMTExLjM0MyAwdjguNzMyYzAgLjM3MS0uMy42NzItLjY3Mi42NzJ6XFxcIiAvPjxwYXRoIGQ9XFxcIk0zMi4yNTIgMTEuNDIxaC00LjcwNWEuNjcyLjY3MiAwIDExMC0xLjM0NGg0LjcwNWEuNjcyLjY3MiAwIDExMCAxLjM0NHpcXFwiIC8+PHBhdGggZD1cXFwiTTI4Ljg5IDEyLjc2NWEuNjcuNjcgMCAwMS0uNDc0LS4xOTdsLTEuMzQ0LTEuMzQ0YS42NzEuNjcxIDAgMTEuOTUtLjk1bDEuMzQ0IDEuMzQ0YS42NzEuNjcxIDAgMDEtLjQ3NSAxLjE0N3pcXFwiIC8+PHBhdGggZD1cXFwiTTI3LjU0NyAxMS40MjFhLjY3MS42NzEgMCAwMS0uNDc1LTEuMTQ3bDEuMzQ0LTEuMzQ0YS42NzEuNjcxIDAgMTEuOTUuOTVsLTEuMzQ0IDEuMzQ0YS42Ny42NyAwIDAxLS40NzUuMTk3ek0xMC43NSAzMi45MjJhLjY3MS42NzEgMCAwMS0uNjcyLS42NzF2LTguNzMzYS42NzEuNjcxIDAgMTExLjM0NCAwdjguNzMzYS42Ny42NyAwIDAxLS42NzIuNjcxelxcXCIgLz48cGF0aCBkPVxcXCJNMTUuNDU1IDMyLjkyMkgxMC43NWEuNjcxLjY3MSAwIDExMC0xLjM0M2g0LjcwNWEuNjcxLjY3MSAwIDExMCAxLjM0M3pcXFwiIC8+PHBhdGggZD1cXFwiTTE1LjQ1NSAzMi45MjJhLjY3LjY3IDAgMDEtLjQ3NS0uMTk3bC0xLjM0NC0xLjM0M2EuNjcxLjY3MSAwIDExLjk1LS45NWwxLjM0NCAxLjM0M2EuNjcxLjY3MSAwIDAxLS40NzUgMS4xNDd6XFxcIiAvPjxwYXRoIGQ9XFxcIk0xNC4xMTEgMzQuMjY2YS42NzEuNjcxIDAgMDEtLjQ3NS0xLjE0N2wxLjM0NC0xLjM0NGEuNjcxLjY3MSAwIDExLjk1Ljk1bC0xLjM0NCAxLjM0NGEuNjcuNjcgMCAwMS0uNDc1LjE5N3pcXFwiIC8+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcInN2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCJzdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJzdG9wd2F0Y2gtaWNvblwiLFxuICBcInVzZVwiOiBcInN0b3B3YXRjaC1pY29uLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA0MyA0M1wiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDQzIDQzXFxcIiBpZD1cXFwic3RvcHdhdGNoLWljb25cXFwiPjxnIGNsaXAtcGF0aD1cXFwidXJsKCNzdG9wd2F0Y2gtaWNvbl9jbGlwMClcXFwiPjxwYXRoIGQ9XFxcIk0zOC4xOSAxMy4xMWwuODc5LTEuMDIuODU3LjczNWEuNjM1LjYzNSAwIDAwLjg5NC0uMDY4bDEuMzYxLTEuNThhLjYzMi42MzIgMCAwMC0uMDY3LS44OTNsLTQuNjgyLTQuMDE3YS42MzIuNjMyIDAgMDAtLjg5NC4wNjdsLTEuMzYyIDEuNThhLjYzMi42MzIgMCAwMC4wNjguODkzbC44NTcuNzM1LS45NDcgMS4wOTlhMTYuODQ4IDE2Ljg0OCAwIDAwLTYuNTEyLTIuNDUyVjYuMjc3aDIuMTg0YTEuODQ5IDEuODQ5IDAgMDAxLjg0OC0xLjg0NVYyLjk1OWMwLTEuMDE3LS44My0xLjg0NC0xLjg0OC0xLjg0NGgtOS41MjdhMS44NDggMS44NDggMCAwMC0xLjg0OCAxLjg0NHYxLjQ3M2MwIDEuMDE3LjgyOSAxLjg0NSAxLjg0OCAxLjg0NWgyLjE4NHYxLjkxMmMtMi40MTMuMzctNC42NiAxLjI1LTYuNjI2IDIuNTI2bC0xLjAxLTEuMTczLjg1Ni0uNzM1YS42MzMuNjMzIDAgMDAuMDY4LS44OTNsLTEuMzYyLTEuNThhLjYzNS42MzUgMCAwMC0uODk0LS4wNjdsLTQuNjgyIDQuMDE3YS42MzMuNjMzIDAgMDAtLjA2Ny44OTNsMS4zNjEgMS41OGEuNjMzLjYzMyAwIDAwLjg5NC4wNjdsLjg1Ny0uNzM1Ljk2MyAxLjExOGExNy4wMjEgMTcuMDIxIDAgMDAtMi4yMSAyLjg1LjYzNy42MzcgMCAwMC0uMDY0LS4wMDNINy41NjNhLjYzNC42MzQgMCAxMDAgMS4yNjZoMy4zNjNhMTYuNzgyIDE2Ljc4MiAwIDAwLS44NzEgMi4wNTVIMy42NDhhLjYzNC42MzQgMCAxMDAgMS4yNjZIOS42N2ExNi43NzcgMTYuNzc3IDAgMDAtLjQ3MyAyLjcwOEguNjM0YS42MzMuNjMzIDAgMTAwIDEuMjY2SDkuMTNhMTYuOTM4IDE2LjkzOCAwIDAwLjE3MSAyLjcwOEgzLjA1NmEuNjM0LjYzNCAwIDEwMCAxLjI2Nmg2LjQ3N2MuMTU3LjcwMi4zNTggMS4zODguNiAyLjA1NUg2Ljk3YS42MzQuNjM0IDAgMTAwIDEuMjY2aDMuNjhjMi42NzUgNS44MzIgOC41NzYgOS44OTQgMTUuNDEyIDkuODk0YTE2Ljg0IDE2Ljg0IDAgMDA5Ljg3NC0zLjE2OC42MzIuNjMyIDAgMTAtLjc0LTEuMDI4IDE1LjU3OCAxNS41NzggMCAwMS05LjEzNSAyLjkzYy04LjY0IDAtMTUuNjY5LTcuMDE2LTE1LjY2OS0xNS42NCAwLTguNjIzIDcuMDMtMTUuNjM5IDE1LjY3LTE1LjYzOWExNS42MyAxNS42MyAwIDAxMTAuOCA0LjMxOWwuMDE4LjAxOGMyLjk4NyAyLjg1IDQuODUgNi44NjMgNC44NSAxMS4zMDNhMTUuNTIgMTUuNTIgMCAwMS00LjU5OCAxMS4wNjguNjMyLjYzMiAwIDAwLS4wMDEuODk1LjYzNS42MzUgMCAwMC44OTcuMDAxQTE2Ljc3OCAxNi43NzggMCAwMDQzIDI0LjljMC00LjU4MS0xLjgzNi04Ljc0MS00LjgxLTExLjc4OXptLTEuMTA0LTUuNDcxbDMuNzIgMy4xOTItLjUzNC42MjEtMy43Mi0zLjE5My41MzQtLjYyem0tLjAyNCAyLjcyOGwxLjA0NS44OTctLjgzNy45NzJhMTcuMDYgMTcuMDYgMCAwMC0xLjA2OC0uODdsLjg2LS45OTl6TTIzLjI1OCA1LjAxMXYtMi42M2gxLjAyNHYyLjYzaC0xLjAyNHptMi4yOTMtMi42M2gxLjAyM3YyLjYzSDI1LjU1di0yLjYzem0yLjI5MiAyLjYzdi0yLjYzaDEuMDI0djIuNjNoLTEuMDI0em0zLjU2My0yLjA1MnYxLjQ3M2MwIC4zMi0uMjYuNTgtLjU4LjU4aC0uNjkxVjIuMzhoLjY5Yy4zMiAwIC41ODEuMjYuNTgxLjU4ek0yMC43MTkgNC40MzJWMi45NTlhLjU4LjU4IDAgMDEuNTgtLjU3OWguNjkxdjIuNjMxaC0uNjlhLjU4LjU4IDAgMDEtLjU4LS41OHptLTkuMDQ0IDcuMDJsLS41MzQtLjYyIDMuNzItMy4xOTMuNTM1LjYyLS44NTcuNzM2LTIuMDA3IDEuNzIyLS44NTcuNzM1em0yLjE4NC0uMjA0bDEuMDI2LS44OC45MyAxLjA4Yy0uMzY1LjI3OC0uNzIuNTctMS4wNjEuODc3bC0uOTE0LTEuMDYxLjAxOS0uMDE2ek0yNC43NSA4LjA0NFY2LjI3N2gyLjYyM3YxLjc2N2ExNy4xMjEgMTcuMTIxIDAgMDAtMi42MjMgMHpcXFwiIC8+PHBhdGggZD1cXFwiTTIwLjc1MiAxMy4zNjlhLjYzNS42MzUgMCAwMC0uODU2LS4yNjggMTMuMzI4IDEzLjMyOCAwIDAwLTcuMDUyIDEwLjA3OGMtLjk1IDcuMjc1IDQuMjA3IDEzLjk2NSAxMS40OTYgMTQuOTEzLjU4Mi4wNzYgMS4xNi4xMTMgMS43MzIuMTEzIDYuNTktLjAwMSAxMi4zMzUtNC44OTMgMTMuMjA5LTExLjU4N2ExMy4yIDEzLjIgMCAwMC0yLjY1NC05LjgzMyAxMy4yNSAxMy4yNSAwIDAwLTguODQyLTUuMDggMTMuMjgxIDEzLjI4MSAwIDAwLTUuMTA3LjMyQS42MzMuNjMzIDAgMTAyMyAxMy4yNWMuNzk4LS4yMSAxLjYxLS4zMzQgMi40MjgtLjM3NnYxLjY2M2EuNjMzLjYzMyAwIDAwMS4yNjggMHYtMS42NjJjLjMwOC4wMTcuNjE2LjA0NS45MjUuMDg1IDIuNDcuMzIxIDQuNzI3IDEuMzcgNi41MzMgMy4wMDZsLTEuMTQ5IDEuMTQ2YS42MzIuNjMyIDAgMDAuNDQ5IDEuMDguNjMyLjYzMiAwIDAwLjQ0OC0uMTg1bDEuMTQ1LTEuMTQzYy4yLjIyMy4zOTEuNDU0LjU3NS42OTNhMTEuOTM4IDExLjkzOCAwIDAxMi40OSA2LjcyNGgtMS41NzRhLjYzMy42MzMgMCAxMDAgMS4yNjZoMS41N2ExMS45NjEgMTEuOTYxIDAgMDEtMy4wNjQgNy4zODFsLTEuMDg2LTEuMDg1YS42MzUuNjM1IDAgMDAtLjg5NyAwIC42MzIuNjMyIDAgMDAwIC44OTVsMS4wODggMS4wODZhMTIuMDc5IDEyLjA3OSAwIDAxLTcuMzczIDMuMDkzVjM1LjM3YS42MzMuNjMzIDAgMDAtMS4yNjkgMHYxLjU1NWExMi4wMDQgMTIuMDA0IDAgMDEtNy40MzItMy4wMWwxLjEyMy0xLjEyYS42MzIuNjMyIDAgMDAwLS44OTYuNjM1LjYzNSAwIDAwLS44OTYgMGwtMS4xMyAxLjEyN2ExMi4wMzUgMTIuMDM1IDAgMDEtMy4xNS03LjRoMS42NDNhLjYzNC42MzQgMCAxMDAtMS4yNjZoLTEuNjUyYTEyLjAzNiAxMi4wMzYgMCAwMTMuMDUyLTcuNDc2bDEuMTggMS4xNzlhLjYzMi42MzIgMCAwMC44OTcgMCAuNjMyLjYzMiAwIDAwMC0uODk1bC0xLjE4NC0xLjE4M2ExMi4wNjcgMTIuMDY3IDAgMDEyLjUyNi0xLjc2Mi42MzIuNjMyIDAgMDAuMjY4LS44NTR6XFxcIiAvPjxwYXRoIGQ9XFxcIk0yNi4wNjIgMTkuMDkzYS42MzMuNjMzIDAgMDAtLjYzNC42MzN2My43NmExLjU1IDEuNTUgMCAwMC0uOTE4IDEuNDEzIDEuNTUzIDEuNTUzIDAgMDAyLjIwOSAxLjQwMmw0LjIzIDQuMjIyYS42MzMuNjMzIDAgMDAuODk3LS44OTVsLTQuMjk2LTQuMjg3YTEuNTUgMS41NSAwIDAwLS44NTMtMS44NTV2LTMuNzZhLjYzNC42MzQgMCAwMC0uNjM1LS42MzN6bS0uMjg0IDUuODA2YS4yODUuMjg1IDAgMTEuNTY5IDAgLjI4NS4yODUgMCAwMS0uNTcgMHpcXFwiIC8+PC9nPjxkZWZzPjxjbGlwUGF0aCBpZD1cXFwic3RvcHdhdGNoLWljb25fY2xpcDBcXFwiPjxwYXRoIGQ9XFxcIk0wIDBoNDN2NDIuOTE4SDB6XFxcIiAvPjwvY2xpcFBhdGg+PC9kZWZzPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2wiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCJzdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbFwiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwic3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZFwiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwic3VwcG9ydC1pY29uXCIsXG4gIFwidXNlXCI6IFwic3VwcG9ydC1pY29uLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA0MyA0M1wiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDQzIDQzXFxcIiBpZD1cXFwic3VwcG9ydC1pY29uXFxcIj48ZyBjbGlwLXBhdGg9XFxcInVybCgjc3VwcG9ydC1pY29uX2NsaXAwKVxcXCI+PHBhdGggZD1cXFwiTTM0Ljg5NiAzNy40NTJsLTEuNjA1LTQuODE4YTQuODU1IDQuODU1IDAgMDAtMy43MzgtMy4yNGwtNC42MzUtLjg0NHYtLjM2YTYuOTggNi45OCAwIDAwMi4wNjgtMS44MzVoMS40YzEuMTQ3IDAgMi4wOC0uOTM0IDIuMDgtMi4wOHYtOC4zMjNjMC00Ljk3Mi00LjA0NC05LjAxNy05LjAxNi05LjAxNy00Ljk3IDAtOS4wMTYgNC4wNDUtOS4wMTYgOS4wMTd2NC44NTRjMCAxLjMzOC45NTEgMi40NTYgMi4yMTIgMi43MTdhNi45NDkgNi45NDkgMCAwMDMuMzM3IDQuNjY4di4zNTlsLTQuNjM2Ljg0M2E0Ljg1NCA0Ljg1NCAwIDAwLTMuNzM3IDMuMjQxbC0uMjc3LjgzMy0yLjM2Mi0yLjM2MmEuNjk1LjY5NSAwIDAxMC0uOTgxbDIuNzM5LTIuNzQtNS4xNDItNS4xNDEtMy4wOTYgMy4wOTZBNC44MjMgNC44MjMgMCAwMC4wNSAyOC43NzJhNC44MiA0LjgyIDAgMDAxLjQyMiAzLjQzMmw5LjM3MyA5LjM3M0E0LjgyNCA0LjgyNCAwIDAwMTQuMjc4IDQzYTQuODAyIDQuODAyIDAgMDAzLjQxMS0xLjQwMmwzLjM3OS0zLjA5NS0xLjA1NC0xLjA1MWgxNC44ODJ6TTI5LjA4IDI0LjI3NGEuNjk0LjY5NCAwIDAxLS42OTMuNjk0aC0uNTgzYy4yLS40NTkuMzUzLS45NDIuNDUyLTEuNDQ1LjI5Ny0uMDYyLjU3LS4xOC44MjUtLjMyOHYxLjA4em0tLjY5My0yLjI3M3YtMi4zODljLjQxMy4yNC42OTQuNjgzLjY5NCAxLjE5NSAwIC41MS0uMjgxLjk1My0uNjk0IDEuMTk0em0tMTMuODcxIDBhMS4zODIgMS4zODIgMCAwMS0uNjk0LTEuMTk1YzAtLjUxLjI4MS0uOTUzLjY5NC0xLjE5NHYyLjM4OXptMC00LjY2MnYuNzkyYTIuNzQ4IDIuNzQ4IDAgMDAtLjY5NC4yODd2LTIuNDY2YzAtNC4yMDcgMy40MjMtNy42MyA3LjYzLTcuNjMgNC4yMDYgMCA3LjYyOCAzLjQyMyA3LjYyOCA3LjYzdjIuNDY2YTIuNzI3IDIuNzI3IDAgMDAtLjY5My0uMjg3di0uNzkyaC0uNjk0YTcuNjMgNy42MyAwIDAxLTUuNDMtMi4yNWwtLjgxMi0uODEyLS44MTIuODEzYTcuNjMgNy42MyAwIDAxLTUuNDMgMi4yNDloLS42OTN6bTEuMzg3IDQuODU1VjE4LjdhOC45OTIgOC45OTIgMCAwMDUuNTQ4LTIuNDY1QTguOTg5IDguOTg5IDAgMDAyNyAxOC43djMuNDk0YTUuNTA2IDUuNTA2IDAgMDEtLjc1IDIuNzc0aC00Ljh2MS4zODdoMy42NThhNS41MTkgNS41MTkgMCAwMS0zLjY1OCAxLjM4NyA1LjU1NSA1LjU1NSAwIDAxLTUuNTQ4LTUuNTQ4em03LjYzIDYuNjE1di4wMzNsLTIuMDgyIDIuMDgtMi4wOC0yLjA4di0uMDMzYTYuOTI1IDYuOTI1IDAgMDA0LjE2MSAwem0tMTIuNjA3IDQuMjY0YTMuNDY5IDMuNDY5IDAgMDEyLjY3LTIuMzE2bDQuODQ3LS44ODEgMy4wMDggMy4wMDggMy4wMDgtMy4wMDcgNC44NDcuODhhMy40NjggMy40NjggMCAwMTIuNjcgMi4zMTZsLjk5NyAyLjk5MkgxOC42MjdsLTIuNzAxLTIuNzAyLTMuMDAyIDIuNzE1YS43MDguNzA4IDAgMDEtLjk4IDBsLTEuNTE1LTEuNTE0LjQ5Ni0xLjQ5MXptLTYuMzU4LTguODY5bDMuMTgxIDMuMTgtLjc1My43NTQtMy4xOC0zLjE4Ljc1Mi0uNzU0ek0xNi43MyA0MC41OThhMy40NSAzLjQ1IDAgMDEtMi40NTIgMS4wMTUgMy40NDkgMy40NDkgMCAwMS0yLjQ1Mi0xLjAxNkwyLjQ1IDMxLjIyNGEzLjQ0NSAzLjQ0NSAwIDAxLTEuMDE1LTIuNDUxYzAtLjkyNy4zNi0xLjc5OCAxLjAxNS0yLjQ1M2wuMzgyLS4zODEgMy4xOCAzLjE4LS4wMjUuMDI1YTIuMDg0IDIuMDg0IDAgMDAwIDIuOTQzbDQuOTc0IDQuOTczYy4zOTMuMzkzLjkxNS42MSAxLjQ3Mi42MS41NTYgMCAxLjA3OC0uMjE2IDEuNDQ2LS41ODVsLjA1Mi0uMDQ3IDMuMTk1IDMuMTk1LS4zOTguMzY1em0xLjQyMi0xLjMwNGwtMy4xODktMy4xODguOTE3LS44MjggMy4xODIgMy4xODMtLjkxLjgzM3pNNDAuODcgMGgtOS43MWMtMS4xNDcgMC0yLjA4LjkzNC0yLjA4IDIuMDh2NS41NWMwIDEuMTQ3LjkzMyAyLjA4IDIuMDggMi4wOGgxLjg1MmwtLjcxNyA0LjE4NCA2LjY5My00LjE4M2gxLjg4MUEyLjA4MyAyLjA4MyAwIDAwNDIuOTUgNy42M1YyLjA4MUEyLjA4MyAyLjA4MyAwIDAwNDAuODcgMHptLjY5MyA3LjYyOWEuNjk1LjY5NSAwIDAxLS42OTQuNjk0aC0yLjI4bC00LjQwNCAyLjc1Mi40NzItMi43NTJIMzEuMTZhLjY5NS42OTUgMCAwMS0uNjk0LS42OTRWMi4wODFjMC0uMzgzLjMxMi0uNjk0LjY5NC0uNjk0aDkuNzFjLjM4MiAwIC42OTMuMzExLjY5My42OTR2NS41NDh6XFxcIiAvPjxwYXRoIGQ9XFxcIk00MC4xNzYgMi43NzRoLTguMzIzdjEuMzg3aDguMzIzVjIuNzc0em0tMi43NzQgMi43NzRoLTUuNTQ5djEuMzg4aDUuNTQ5VjUuNTQ4em0yLjc3NCAwSDM4Ljc5djEuMzg4aDEuMzg3VjUuNTQ4ek0yMS40NSAyLjA4Yy05LjA2IDAtMTYuODY2IDYuMjctMTguODk1IDE1LjAxNEwxLjI0IDE0LjkwM2wtMS4xOS43MTMgMi40MzkgNC4wNjJMNi41NSAxNy4yNGwtLjcxNC0xLjE4OS0xLjg4IDEuMTI4YzEuOTY2LTcuOTk5IDkuMTU5LTEzLjcxIDE3LjQ5NS0xMy43MSAxLjgyMiAwIDMuNjIuMjcgNS4zNDMuODA0bC40MS0xLjMyNGExOS40MDcgMTkuNDA3IDAgMDAtNS43NTMtLjg2N3ptMjEuMTYzIDEzLjI3N2wtNC4wNjItMi40MzgtMi40MzcgNC4wNjIgMS4xOS43MTQgMS4yMTMtMi4wMjNjLjYzOSAxLjg3Ljk2NSAzLjgyNC45NjUgNS44MjggMCA0LjEyNS0xLjQyOCA4LjE1Ny00LjAyMiAxMS4zNTNsMS4wNzguODc0QTE5LjQ2MyAxOS40NjMgMCAwMDQwLjg2OSAyMS41YzAtMi4xMjItLjM0MS00LjE5My0xLjAwOC02LjE3N2wyLjAzOCAxLjIyMy43MTQtMS4xOXpcXFwiIC8+PC9nPjxkZWZzPjxjbGlwUGF0aCBpZD1cXFwic3VwcG9ydC1pY29uX2NsaXAwXFxcIj48cGF0aCBkPVxcXCJNMCAwaDQzdjQzSDB6XFxcIiAvPjwvY2xpcFBhdGg+PC9kZWZzPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2wiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCJzdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbFwiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwic3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZFwiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwidHJhc3Nlci1pY29uXCIsXG4gIFwidXNlXCI6IFwidHJhc3Nlci1pY29uLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCA0MyA0M1wiLFxuICBcImNvbnRlbnRcIjogXCI8c3ltYm9sIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgdmlld0JveD1cXFwiMCAwIDQzIDQzXFxcIiBpZD1cXFwidHJhc3Nlci1pY29uXFxcIj48ZyBjbGlwLXBhdGg9XFxcInVybCgjdHJhc3Nlci1pY29uX2NsaXAwKVxcXCI+PHBhdGggZD1cXFwiTTQyLjY2NC4xYS42OTQuNjk0IDAgMDAtLjY4NC0uMDE3TDMxLjkwMyA1LjQ1NyAyMS44MjcuMDgzYS42OTIuNjkyIDAgMDAtLjY1MyAwTDExLjA5NyA1LjQ1NyAxLjAyLjA4M0EuNjkzLjY5MyAwIDAwMCAuNjk0VjM2Ljc2YzAgLjI1Ni4xNC40OS4zNjcuNjExTDEwLjc3IDQyLjkyYS42OS42OSAwIDAwLjY1NCAwbDcuOTk1LTQuMjY0djIuMjY1YzAgMS4xNDcuOTM0IDIuMDggMi4wODEgMi4wOGgxNi42NDVjMS4xNDcgMCAyLjA4LS45MzMgMi4wOC0yLjA4di0yLjI2NmwyLjQwOC0xLjI4NEEuNjkzLjY5MyAwIDAwNDMgMzYuNzZWLjY5NEEuNjk0LjY5NCAwIDAwNDIuNjY0LjF6TTEwLjc3IDYuODU0YS42OTIuNjkyIDAgMDAuNjUzIDBsNC40OTUtMi4zOTctLjYxIDEuNTI4YS43NDIuNzQyIDAgMDAtLjAzNy4xMmwtLjY5MyAzLjQ2OWEuNjk5LjY5OSAwIDAwMCAuMjcybC42MzIgMy4xNjQtMy4zODcgNC41MTYtLjc3Ny0xLjE2NS0uNjY0LTIuNjU4YS42OTMuNjkzIDAgMDAtLjY3Mi0uNTI1SDYuOTM1YS42OTkuNjk5IDAgMDAtLjM4NS4xMTdsLTEuNTAzIDEuMDAyLTEuMDAyLTEuNTA0YS42OTYuNjk2IDAgMDAtLjE2MS0uMTdsLTIuNDk3LTEuODcydi04LjlsOS4zODMgNS4wMDN6TTEuMzg3IDE4LjQ2MmwxLjc3Ljg4NWEuNjk5LjY5OSAwIDAwLjQ3OS4wNTJsMS45MTItLjQ3OHYxLjg4NmEuNjkzLjY5MyAwIDAwLjg2Mi42NzNsMi40NzYtLjYyIDEuNjI4IDEuMDg1LjU4MyAxLjc0OXYyLjQ3bC0xLjc4IDIuOTY2SDYuOTM1YS42OTkuNjk5IDAgMDAtLjM4NS4xMTZsLTIuMDggMS4zODdhLjY5My42OTMgMCAwMC0uMjg4Ljc0NmwuNjczIDIuNjkxdi42MDhjMCAuMzE5LjIxNi41OTYuNTI1LjY3M2wyLjQwNS42MDEuNTM4IDEuNjEzdjIuNDc2bC02LjkzNi0zLjY5OFYxOC40NjJ6bTIyLjE5NCAxLjE2OGwyLjkxMy00LjM3MWg5LjU3djE5LjQySDIzLjU4MlYxOS42M3ptMi43NzQtOC4zNDJhNS41MzIgNS41MzIgMCAwMS0uOTMzIDMuMDc4bC0yLjUzNSAzLjgwMy0yLjUzNS0zLjgwM2E1LjU0MSA1LjU0MSAwIDAxLS45MzMtMy4wOTRjMC0xLjgyOCAxLjMzOC0zLjQxNiAzLjA0NC0zLjYxN2EzLjY1IDMuNjUgMCAwMS40MjgtLjAyNWMuODUzIDAgMS42NTcuMzA0IDIuMy44NzZhMy40NjggMy40NjggMCAwMTEuMTY0IDIuNTkydi4xOXpNMzguODM5IDQwLjkyYS42OTUuNjk1IDAgMDEtLjY5NC42OTRIMjEuNWEuNjk0LjY5NCAwIDAxLS42OTQtLjY5NFYxNy41NWwxLjM4NyAyLjA4djE1Ljc0M2MwIC4zODIuMzEuNjkzLjY5NC42OTNoMTMuODcxYy4zODQgMCAuNjk0LS4zMS42OTQtLjY5M1YxNC41NjVhLjY5My42OTMgMCAwMC0uNjk0LS42OTNoLTkuNTM0Yy4xODItLjQ0OC4zMi0uOTEuNDA0LTEuMzg3aDEwLjUxN2MuMzgzIDAgLjY5NC4zMS42OTQuNjkzVjQwLjkyem0yLjc3NC00LjU3N2wtMS4zODcuNzRWMTMuMTc4YzAtMS4xNDctLjkzNC0yLjA4LTIuMDgtMi4wOEgyNy43NDFhNC44NTggNC44NTggMCAwMC0xLjYzLTMuNjI5QTQuODc2IDQuODc2IDAgMDAyMi4zIDYuMjc3Yy0yLjQzMy4yODctNC4yNjggMi40MzQtNC4yNjggNS4wMTEgMCAxLjM3My40MDMgMi43MDQgMS4xNjYgMy44NDdsLjIyMS4zMzN2MjEuNjE1bC04LjMyMiA0LjQzOS0xLjM4Ny0uNzR2LTMuMzNhLjcuNyAwIDAwLS4wMzYtLjIxOWwtLjY5NC0yLjA4YS42OTMuNjkzIDAgMDAtLjQ5LS40NTRsLTIuMjQ4LS41NjN2LS4xNTFhLjY5My42OTMgMCAwMC0uMDItLjE2OWwtLjU3Ni0yLjMgMS41LTFIOS43MWEuNjkyLjY5MiAwIDAwLjU5NC0uMzM1bDIuMDgtMy40NjhhLjY5LjY5IDAgMDAuMS0uMzU3VjIzLjU4YS43MDMuNzAzIDAgMDAtLjAzNi0uMjE5bC0uNjk0LTIuMDhhLjY5Ny42OTcgMCAwMC0uMjczLS4zNThsLTIuMDgtMS4zODdhLjY5Ni42OTYgMCAwMC0uNTU0LS4wOTZsLTEuOTEyLjQ3OHYtMS44ODZhLjY5My42OTMgMCAwMC0uODYxLS42NzNsLTIuNTI2LjYzMS0yLjE2LTEuMDh2LTQuNDI2bDEuNTY5IDEuMTc3IDEuMzIgMS45ODFhLjY5NC42OTQgMCAwMC45NjMuMTkybDEuOTA2LTEuMjdoMi4wMjJsLjU2MyAyLjI1Yy4wMTkuMDc2LjA1MS4xNS4wOTYuMjE2bDEuMzg3IDIuMDhhLjY5NC42OTQgMCAwMC41NTguMzFoLjAxOWEuNjk0LjY5NCAwIDAwLjU1NS0uMjc4bDQuMTYxLTUuNTQ5YS42OTMuNjkzIDAgMDAuMTI2LS41NTJsLS42NjctMy4zMzIuNjUzLTMuMjY5IDEuMi0yLjk5OEwyMS41IDEuNDhsMTAuMDc2IDUuMzc0YS42OTIuNjkyIDAgMDAuNjUzIDBsOS4zODQtNS4wMDR2MzQuNDkzelxcXCIgLz48cGF0aCBkPVxcXCJNMjIuODg3IDkuMDE2Yy0xLjE0NyAwLTIuMDguOTM0LTIuMDggMi4wOCAwIDEuMTQ4LjkzMyAyLjA4MSAyLjA4IDIuMDgxczIuMDgtLjkzMyAyLjA4LTIuMDgtLjkzMy0yLjA4LTIuMDgtMi4wOHptMCAyLjc3NGEuNjk0LjY5NCAwIDExLjAwMi0xLjM4OS42OTQuNjk0IDAgMDEtLjAwMiAxLjM5em02LjkzNSAyNC45NjhjLTEuMTQ3IDAtMi4wOC45MzQtMi4wOCAyLjA4IDAgMS4xNDguOTMzIDIuMDgxIDIuMDggMi4wODFzMi4wODEtLjkzMyAyLjA4MS0yLjA4LS45MzQtMi4wOC0yLjA4LTIuMDh6bTAgMi43NzRhLjY5NC42OTQgMCAxMS4wMDItMS4zODkuNjk0LjY5NCAwIDAxLS4wMDIgMS4zOXptLTEuMzg2LTE3LjMzOGgtMy40Njh2MS4zODdoMi43NzR2Ni45MzVoLTIuNzc0djEuMzg3aDMuNDY4Yy4zODMgMCAuNjkzLS4zMS42OTMtLjY5M3YtOC4zMjNhLjY5My42OTMgMCAwMC0uNjk0LS42OTR6bS0uNjk0LTIuNzc0aC0yLjc3NHYxLjM4NmgzLjQ2OGMuMzgzIDAgLjY5My0uMzEuNjkzLS42OTN2LTMuNDY4aC0xLjM4N3YyLjc3NHptNC4xNjEtMi43NzVoLTEuMzg3djMuNDY4YzAgLjM4My4zMS42OTQuNjk0LjY5NGgzLjQ2N3YtMS4zODhoLTIuNzc0di0yLjc3NHptLTEuMzg3IDYuMjQydjIuNzc0YzAgLjM4My4zMS42OTQuNjk0LjY5NGgzLjQ2N3YtMS4zODdoLTIuNzc0VjIzLjU4aDIuNzc0di0xLjM4N0gzMS4yMWEuNjkzLjY5MyAwIDAwLS42OTQuNjkzem0wIDUuNTQ5djMuNDY3aDEuMzg3VjI5LjEzaDIuNzc0di0xLjM4N0gzMS4yMWEuNjkzLjY5MyAwIDAwLS42OTQuNjk0em0tMTcuMzM5IDYuMjQxYy0xLjE0NyAwLTIuMDguOTM0LTIuMDggMi4wODEgMCAxLjE0Ny45MzMgMi4wOCAyLjA4IDIuMDhzMi4wODEtLjkzMyAyLjA4MS0yLjA4LS45MzQtMi4wOC0yLjA4LTIuMDh6bTAgMi43NzVhLjY5NC42OTQgMCAxMS4wMDItMS4zOS42OTQuNjk0IDAgMDEtLjAwMiAxLjM5em0yLjA4MS05LjcxYTIuNzc3IDIuNzc3IDAgMDAtMi43NzQgMi43NzQgMi43NzcgMi43NzcgMCAwMDIuNzc0IDIuNzc0IDIuNzc3IDIuNzc3IDAgMDAyLjc3NC0yLjc3NCAyLjc3NyAyLjc3NyAwIDAwLTIuNzc0LTIuNzc0em0wIDQuMTYxYTEuMzg4IDEuMzg4IDAgMDEtMS4zODctMS4zODdjMC0uNzY1LjYyMi0xLjM4NyAxLjM4Ny0xLjM4N3MxLjM4Ny42MjIgMS4zODcgMS4zODctLjYyMiAxLjM4Ny0xLjM4NyAxLjM4N3pcXFwiIC8+PC9nPjxkZWZzPjxjbGlwUGF0aCBpZD1cXFwidHJhc3Nlci1pY29uX2NsaXAwXFxcIj48cGF0aCBkPVxcXCJNMCAwaDQzdjQzSDB6XFxcIiAvPjwvY2xpcFBhdGg+PC9kZWZzPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2wiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCJzdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbFwiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwic3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZFwiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwidHJ1Y2staWNvblwiLFxuICBcInVzZVwiOiBcInRydWNrLWljb24tdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDQzIDQ0XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNDMgNDRcXFwiIGlkPVxcXCJ0cnVjay1pY29uXFxcIj48cGF0aCBkPVxcXCJNMTAuMDMzIDI4Ljg5N2E0LjMgNC4zIDAgMDAtNC4zIDQuMjkyIDQuMyA0LjMgMCAwMDguNiAwIDQuMyA0LjMgMCAwMC00LjMtNC4yOTJ6bTAgNy4xNTNhMi44NjcgMi44NjcgMCAwMS0yLjg2Ni0yLjg2MSAyLjg2NyAyLjg2NyAwIDAxNS43MzMgMCAyLjg2NyAyLjg2NyAwIDAxLTIuODY3IDIuODYxek0zNC40IDI4Ljg5N2E0LjMgNC4zIDAgMDAtNC4zIDQuMjkyIDQuMyA0LjMgMCAwMDguNiAwIDQuMyA0LjMgMCAwMC00LjMtNC4yOTJ6bTAgNy4xNTNhMi44NjcgMi44NjcgMCAwMS0yLjg2Ni0yLjg2MSAyLjg2NyAyLjg2NyAwIDAxNS43MzMgMEEyLjg2NyAyLjg2NyAwIDAxMzQuNCAzNi4wNXpcXFwiIC8+PHBhdGggZD1cXFwiTTQyLjg4NiAyNC45MzRsLTYuNDUtMTAuMDE1YS43MTcuNzE3IDAgMDAtLjYwMy0uMzI4SDI3Ljk1YS43MTYuNzE2IDAgMDAtLjcxNy43MTVWMzMuMTljMCAuMzk1LjMyLjcxNS43MTcuNzE1aDIuODY3di0xLjQzaC0yLjE1VjE2LjAyMmg2Ljc3NWw2LjEyNSA5LjUwOXY2Ljk0M2gtMy41ODR2MS40M2g0LjNjLjM5NyAwIC43MTctLjMyLjcxNy0uNzE1di03Ljg2OGEuNzEzLjcxMyAwIDAwLS4xMTQtLjM4N3pcXFwiIC8+PHBhdGggZD1cXFwiTTMxLjUzMyAyMy44OXYtNS4wMDdoNS43MzR2LTEuNDNoLTYuNDVhLjcxNi43MTYgMCAwMC0uNzE3LjcxNXY2LjQzN2MwIC4zOTYuMzIuNzE1LjcxNy43MTVoMTAuNzV2LTEuNDNIMzEuNTMzek0yNy45NSA5LjU4NEguNzE3YS43MTYuNzE2IDAgMDAtLjcxNy43MTV2MjIuODljMCAuMzk1LjMyMS43MTUuNzE3LjcxNUg2LjQ1di0xLjQzSDEuNDMzdi0yMS40NmgyNS44djIxLjQ2SDEzLjYxN3YxLjQzSDI3Ljk1Yy4zOTYgMCAuNzE3LS4zMi43MTctLjcxNXYtMjIuODlhLjcxNi43MTYgMCAwMC0uNzE3LS43MTV6XFxcIiAvPjxwYXRoIGQ9XFxcIk01LjAxNiAyOS42MTJoLTQuM3YxLjQzaDQuM3YtMS40M3ptMjIuMjE3IDBIMTUuMDV2MS40M2gxMi4xODN2LTEuNDN6bTE1LjA1IDBoLTIuODY3djEuNDNoMi44Njd2LTEuNDN6TTI3Ljk1IDEyLjQ0NUgyLjg2N3YxLjQzSDI3Ljk1di0xLjQzem0tMTcuMiAyMC4wMjlIOS4zMTZ2MS40M2gxLjQzNHYtMS40M3ptMjQuMzY3IDBoLTEuNDMzdjEuNDNoMS40MzN2LTEuNDN6TTEyLjkgNi43MjNIMi44Njd2MS40M0gxMi45di0xLjQzem0tMTEuNDY3IDBIMHYxLjQzaDEuNDMzdi0xLjQzelxcXCIgLz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwic3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2xcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcInN2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGRcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcIndheS1pY29uXCIsXG4gIFwidXNlXCI6IFwid2F5LWljb24tdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDQzIDQzXCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNDMgNDNcXFwiIGlkPVxcXCJ3YXktaWNvblxcXCI+PHBhdGggY2xpcC1ydWxlPVxcXCJldmVub2RkXFxcIiBkPVxcXCJNMTMuNjQyIDYuODM0YTMuNDUzIDMuNDUzIDAgMDAtMy40NDktMy40NDkgMy40NTMgMy40NTMgMCAwMC0zLjQ0OCAzLjQ0OSAzLjQ1MiAzLjQ1MiAwIDAwMy40NDggMy40NDkgMy40NTIgMy40NTIgMCAwMDMuNDUtMy40NDl6bS01LjIxOCAwYzAtLjk3NS43OTQtMS43NjkgMS43Ny0xLjc2OWExLjc3IDEuNzcgMCAwMTEuNzY4IDEuNzY5IDEuNzcgMS43NyAwIDAxLTEuNzY5IDEuNzY5IDEuNzcgMS43NyAwIDAxLTEuNzY5LTEuNzY5em0yNC45NDggMTUuMTdjLTIuMTY0IDAtNC4wMDQuNTQtNS4xMTUgMS4zOTZsLTMuMDEyLS42N2EuODQuODQgMCAwMC0uMzY1IDEuNjRsMi4zMDguNTEzYy0uMDQzLjE2OC0uMDY2LjM0LS4wNjYuNTE3IDAgMS4xNC45MzQgMi4xMTYgMi40MyAyLjcyNWwtMS4zNDQgMS4zODNhLjg0Ljg0IDAgMDAxLjIwNCAxLjE3bDEuOTg3LTIuMDQzYy42MTYuMTA0IDEuMjc3LjE2IDEuOTczLjE2IDMuNTYzIDAgNi4yNS0xLjQ2IDYuMjUtMy4zOTUgMC0xLjkzNi0yLjY4Ny0zLjM5Ni02LjI1LTMuMzk2em0wIDUuMTExYy0yLjc0NyAwLTQuNTctMS4wMzItNC41Ny0xLjcxNSAwLS4xNDMuMDgtLjMwMS4yMzItLjQ2MmEuNzQuNzQgMCAwMC4wNzMtLjA3M2MuNjI3LS41ODYgMi4xNzktMS4xODEgNC4yNjUtMS4xODEgMi43NDcgMCA0LjU3IDEuMDMzIDQuNTcgMS43MTZzLTEuODIzIDEuNzE1LTQuNTcgMS43MTV6bS05Ljk4NyA5Ljc2NWwxLjM0NS0xLjM4NGEuODQuODQgMCAwMC0xLjIwNS0xLjE3bC0xLjk4NiAyLjA0M2ExMS44NjcgMTEuODY3IDAgMDAtMS45NzQtLjE2Yy0zLjU2MiAwLTYuMjUgMS40Ni02LjI1IDMuMzk1IDAgMS45MzYgMi42ODggMy4zOTYgNi4yNSAzLjM5NiAzLjU2MyAwIDYuMjUtMS40NiA2LjI1LTMuMzk1IDAtMS4xNDEtLjkzNC0yLjExNi0yLjQzLTIuNzI1em0tMy44MiA0LjQ0Yy0yLjc0NyAwLTQuNTctMS4wMzItNC41Ny0xLjcxNSAwLS42ODQgMS44MjMtMS43MTYgNC41Ny0xLjcxNiAyLjc0OCAwIDQuNTcgMS4wMzIgNC41NyAxLjcxNSAwIC42ODQtMS44MjIgMS43MTYtNC41NyAxLjcxNnpcXFwiIC8+PHBhdGggY2xpcC1ydWxlPVxcXCJldmVub2RkXFxcIiBkPVxcXCJNMTguMzIgMjIuOTA5YS44MzcuODM3IDAgMDAxLjAwMy0uNjM3Ljg0Ljg0IDAgMDAtLjYzNy0xLjAwM2wtMi4zMDktLjUxNGMuMDQzLS4xNjguMDY2LS4zNC4wNjYtLjUxNiAwLTEuNTc0LTEuNzUtMi42MzctMy43NTYtMy4xMTVsMy43NDgtNy41MDYuMDE3LS4wMzdBNi44NDIgNi44NDIgMCAwMDEwLjE5MyAwIDYuODQyIDYuODQyIDAgMDAzLjM2IDYuODM0YTYuNzg0IDYuNzg0IDAgMDAuNTkzIDIuNzg0bDMuNzUxIDcuNTEzYy0yLjAxLjQ5LTMuNzYgMS41NTMtMy43NiAzLjEwOCAwIDEuOTM1IDIuNjg3IDMuMzk1IDYuMjUgMy4zOTUgMi4xNjUgMCA0LjAwNC0uNTQgNS4xMTYtMS4zOTZsMy4wMTIuNjd6TTUuMDQgNi44MzRhNS4xNiA1LjE2IDAgMDE1LjE1My01LjE1NCA1LjE2IDUuMTYgMCAwMTQuNzMgNy4yMDdsLTQuNzMgOS40NzItNC43MjgtOS40NzJhNS4xMTIgNS4xMTIgMCAwMS0uNDI2LTIuMDUzem0uNTgzIDEzLjQwNWMwLS40NDEgMS4wOTQtMS4yMDggMi44NTQtMS41NTlsLjk2NSAxLjkzNGEuODQuODQgMCAwMDEuNTAzIDBsLjk2OC0xLjkzOWMxLjc4LjMzOCAyLjg1IDEuMTAzIDIuODUgMS41NjQgMCAuMTQzLS4wODEuMzAyLS4yMzMuNDYzYS44MzQuODM0IDAgMDAtLjA3Mi4wNzJjLS42MjcuNTg1LTIuMTggMS4xOC00LjI2NSAxLjE4LTIuNzQ3IDAtNC41Ny0xLjAzMi00LjU3LTEuNzE1em0yMC44NDYgMTEuNDIzYS44NDEuODQxIDAgMDAtLjg0Ljg0Ljg0MS44NDEgMCAwMDEuNjggMCAuODQxLjg0MSAwIDAwLS44NC0uODR6bS00LjY4Ni04LjAwMmMuNDYyIDAgLjg0LS4zNzguODQtLjg0YS44NDEuODQxIDAgMDAtLjg0LS44NC44NDEuODQxIDAgMDAtLjg0Ljg0YzAgLjQ2Mi4zNzcuODQuODQuODR6XFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2wiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCJzdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbFwiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwic3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZFwiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwid2VpZ2hpbmctaWNvblwiLFxuICBcInVzZVwiOiBcIndlaWdoaW5nLWljb24tdXNhZ2VcIixcbiAgXCJ2aWV3Qm94XCI6IFwiMCAwIDQzIDQzXCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB2aWV3Qm94PVxcXCIwIDAgNDMgNDNcXFwiIGlkPVxcXCJ3ZWlnaGluZy1pY29uXFxcIj48ZyBjbGlwLXBhdGg9XFxcInVybCgjd2VpZ2hpbmctaWNvbl9jbGlwMClcXFwiPjxwYXRoIGQ9XFxcIk0uMDEyIDMzLjQ4MXY0LjY1NGw0Mi45NDctLjAzNHYtNC42MkguMDEyem00MS42MzIgMy4zMDhsLTQwLjMxNy4wMzJ2LTIuMDI3aDQwLjMxN3YxLjk5NXptLTIuMDk3IDIuMDU3djIuMDEzaC0uNzl2LTIuMDEzSDQuMDM0djIuMDEzSDMuNDJ2LTIuMDEzSDB2MS4zMTNoMi4xMDR2Mi4wMTJINS4zNXYtMi4wMTNoMzIuMDkzdjIuMDEzaDMuNDJ2LTIuMDEzaDIuMTA0di0xLjMxMmgtMy40MnptLTEzLjI0MS03LjM1MlYxNC43NzhIMy41MDd2MTYuNzE2SDIuMTA0djEuMzEzaDI1LjUxN3YtMS4zMTNoLTEuMzE1ek0xMi4xODggMTYuMDkxaDUuNDM3djIuNTVsLTIuNzE4LS41MzgtMi43MTkuNTM4di0yLjU1em0xMi44MDMgMTUuNDAzSDQuODIzVjE2LjA5MWg2LjA1djQuMTQ5bDQuMDM0LS43OTggNC4wMzMuNzk4di00LjE1aDYuMDV2MTUuNDA0elxcXCIgLz48cGF0aCBkPVxcXCJNOC4yMDcgMjcuMTk3bC0xLjgwNCAxLjguOTMuOTI4Ljg3NC0uODcyLjg3NC44NzIuOTMtLjkyOC0xLjgwNC0xLjh6bTQuMDE2IDBsLTEuODA0IDEuOC45My45MjguODc0LS44NzIuODc0Ljg3Mi45My0uOTI4LTEuODA0LTEuOHptMTAuNzUxLTIuNDQySDE2LjMxdjEuMzEzaDYuNjY0di0xLjMxM3ptLTIuODA2IDIuMDEzSDE2LjMxdjEuMzEzaDMuODU4di0xLjMxM3ptLTEuOTI5IDIuMDEyaC0xLjkzdjEuMzE0aDEuOTNWMjguNzh6bTQuNzM1IDBIMTguOTR2MS4zMTRoNC4wMzRWMjguNzh6TTQzIDguNzUyQzQzIDQuMzM4IDM5LjQwMi43NDcgMzQuOTguNzQ3cy04LjAyIDMuNTktOC4wMiA4LjAwNWMwIDQuMjEgMy4yNzMgNy42NzEgNy40MTMgNy45ODJ2Ljc1N2gtMi43MTh2MS45MjVoMS4zMTV2LS42MTJoNC4wMzR2LjYxMmgxLjMxNXYtMS45MjVoLTIuNjN2LS43NjZDMzkuNzggMTYuMzY1IDQzIDEyLjkyNyA0MyA4Ljc1MnptLTE0LjE1MyAyLjdhNi42NDEgNi42NDEgMCAwMS0uNTcyLTIuN2MwLTMuNjkgMy4wMDgtNi42OTIgNi43MDUtNi42OTJzNi43MDUgMy4wMDIgNi43MDUgNi42OTJhNi42NCA2LjY0IDAgMDEtLjU3MyAyLjdoLTIuMTI4VjEwLjFoLTguMDA4djEuMzUyaC0yLjEyOXptOC44MjItLjA0di42OTJIMzIuMjl2LS42OTJoNS4zNzh6bS0yLjY4OSA0LjAzMmE2LjcwMyA2LjcwMyAwIDAxLTUuMzYyLTIuNjc5aDEuMzU4di42NTFoOC4wMDh2LS42NTFoMS4zNThhNi43MDMgNi43MDMgMCAwMS01LjM2MiAyLjY3OXpcXFwiIC8+PHBhdGggZD1cXFwiTTM5LjIwNSA0LjUzYTUuOTQ0IDUuOTQ0IDAgMDAtNC4yMzMtMS43NDhjLTEuNjA4IDAtMy4xMjYuNjItNC4yNTggMS43NDhhNS45NyA1Ljk3IDAgMDAtMS43NzcgNC4yNTN2LjY1Nmg0LjczNXYtLjY1NmMwLS43NTYuNTU4LTEuMzQ4IDEuMzE1LTEuMzQ4Ljc1NyAwIDEuMzE1LjU5MiAxLjMxNSAxLjM0OHYuNjU2aDQuNjQ4di0uNjU2YzAtMS42MTItLjYwOS0zLjEyMy0xLjc0NS00LjI1M3ptLTEuNjM4IDMuNTk2YTIuNjE3IDIuNjE3IDAgMDAtMS44NzktMS45MTFWNC43MTNoLTEuMzE1djEuNDc4YTIuNjE3IDIuNjE3IDAgMDAtMS45OCAxLjkzNWgtMi4wNjRhNC43MDEgNC43MDEgMCAwMTQuNjUxLTQuMDMxIDQuNzAxIDQuNzAxIDAgMDE0LjY1IDQuMDMxaC0yLjA2M3ptLTEuODc5IDIxLjQ0M2gtMS40MDN2MS4zMTJoMS40MDNWMjkuNTd6bTAtMi4xMDFoLTEuNDAzdjEuMzEzaDEuNDAzdi0xLjMxM3ptMC0xLjkyNWgtMS40MDN2MS4zMTNoMS40MDN2LTEuMzEzelxcXCIgLz48cGF0aCBkPVxcXCJNMzcuNjE3IDMxLjQ5NFYyMS4zNDJoLjcwMnYtMS4zMTNoLTYuNjY0djEuMzEzaC42MTN2MTAuMTUyaC0xLjMxNXYxLjMxM2g4LjA2N3YtMS4zMTNoLTEuNDAzem0tMS4zMTUgMGgtMi43MThWMjEuMzQyaDIuNzE4djEwLjE1MnpcXFwiIC8+PC9nPjxkZWZzPjxjbGlwUGF0aCBpZD1cXFwid2VpZ2hpbmctaWNvbl9jbGlwMFxcXCI+PHBhdGggZD1cXFwiTTAgMGg0M3Y0Mi45MThIMHpcXFwiIC8+PC9jbGlwUGF0aD48L2RlZnM+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbCIsIiQoJy5qcy1idXR0b24tZnJhbWUnKS5vbignY2xpY2snLCAoKSA9PiB7XHJcbiAgJCgnaHRtbCcpLnRvZ2dsZUNsYXNzKCdtZW51LW9wZW4nKTtcclxufSk7XHJcblxyXG4kKCdhW2hyZWZePVwiI1wiXScpLmJpbmQoJ2NsaWNrLnNtb290aHNjcm9sbCcsIGZ1bmN0aW9uKGUpIHtcclxuICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgY29uc3QgdGFyZ2V0ID0gdGhpcy5oYXNoOyBjb25zdFxyXG4gICAgJHRhcmdldCA9ICQodGFyZ2V0KTtcclxuICAkKCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgc2Nyb2xsVG9wOiAkdGFyZ2V0Lm9mZnNldCgpLnRvcCxcclxuICB9LCA5MDAsICdzd2luZycsICgpID0+IHtcclxuICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gdGFyZ2V0O1xyXG4gIH0pO1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG52YXIgYmluZCA9IHJlcXVpcmUoJy4vaGVscGVycy9iaW5kJyk7XG52YXIgQXhpb3MgPSByZXF1aXJlKCcuL2NvcmUvQXhpb3MnKTtcbnZhciBtZXJnZUNvbmZpZyA9IHJlcXVpcmUoJy4vY29yZS9tZXJnZUNvbmZpZycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZShtZXJnZUNvbmZpZyhheGlvcy5kZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgYnVpbGRVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgSW50ZXJjZXB0b3JNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnRlcmNlcHRvck1hbmFnZXInKTtcbnZhciBkaXNwYXRjaFJlcXVlc3QgPSByZXF1aXJlKCcuL2Rpc3BhdGNoUmVxdWVzdCcpO1xudmFyIG1lcmdlQ29uZmlnID0gcmVxdWlyZSgnLi9tZXJnZUNvbmZpZycpO1xuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZUNvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBBeGlvcyhpbnN0YW5jZUNvbmZpZykge1xuICB0aGlzLmRlZmF1bHRzID0gaW5zdGFuY2VDb25maWc7XG4gIHRoaXMuaW50ZXJjZXB0b3JzID0ge1xuICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICByZXNwb25zZTogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpXG4gIH07XG59XG5cbi8qKlxuICogRGlzcGF0Y2ggYSByZXF1ZXN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHNwZWNpZmljIGZvciB0aGlzIHJlcXVlc3QgKG1lcmdlZCB3aXRoIHRoaXMuZGVmYXVsdHMpXG4gKi9cbkF4aW9zLnByb3RvdHlwZS5yZXF1ZXN0ID0gZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcbiAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gIC8vIEFsbG93IGZvciBheGlvcygnZXhhbXBsZS91cmwnWywgY29uZmlnXSkgYSBsYSBmZXRjaCBBUElcbiAgaWYgKHR5cGVvZiBjb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uZmlnID0gYXJndW1lbnRzWzFdIHx8IHt9O1xuICAgIGNvbmZpZy51cmwgPSBhcmd1bWVudHNbMF07XG4gIH0gZWxzZSB7XG4gICAgY29uZmlnID0gY29uZmlnIHx8IHt9O1xuICB9XG5cbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcblxuICAvLyBTZXQgY29uZmlnLm1ldGhvZFxuICBpZiAoY29uZmlnLm1ldGhvZCkge1xuICAgIGNvbmZpZy5tZXRob2QgPSBjb25maWcubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gIH0gZWxzZSBpZiAodGhpcy5kZWZhdWx0cy5tZXRob2QpIHtcbiAgICBjb25maWcubWV0aG9kID0gdGhpcy5kZWZhdWx0cy5tZXRob2QudG9Mb3dlckNhc2UoKTtcbiAgfSBlbHNlIHtcbiAgICBjb25maWcubWV0aG9kID0gJ2dldCc7XG4gIH1cblxuICAvLyBIb29rIHVwIGludGVyY2VwdG9ycyBtaWRkbGV3YXJlXG4gIHZhciBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QsIHVuZGVmaW5lZF07XG4gIHZhciBwcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKGNvbmZpZyk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVxdWVzdC5mb3JFYWNoKGZ1bmN0aW9uIHVuc2hpZnRSZXF1ZXN0SW50ZXJjZXB0b3JzKGludGVyY2VwdG9yKSB7XG4gICAgY2hhaW4udW5zaGlmdChpbnRlcmNlcHRvci5mdWxmaWxsZWQsIGludGVyY2VwdG9yLnJlamVjdGVkKTtcbiAgfSk7XG5cbiAgdGhpcy5pbnRlcmNlcHRvcnMucmVzcG9uc2UuZm9yRWFjaChmdW5jdGlvbiBwdXNoUmVzcG9uc2VJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi5wdXNoKGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB3aGlsZSAoY2hhaW4ubGVuZ3RoKSB7XG4gICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbi5zaGlmdCgpLCBjaGFpbi5zaGlmdCgpKTtcbiAgfVxuXG4gIHJldHVybiBwcm9taXNlO1xufTtcblxuQXhpb3MucHJvdG90eXBlLmdldFVyaSA9IGZ1bmN0aW9uIGdldFVyaShjb25maWcpIHtcbiAgY29uZmlnID0gbWVyZ2VDb25maWcodGhpcy5kZWZhdWx0cywgY29uZmlnKTtcbiAgcmV0dXJuIGJ1aWxkVVJMKGNvbmZpZy51cmwsIGNvbmZpZy5wYXJhbXMsIGNvbmZpZy5wYXJhbXNTZXJpYWxpemVyKS5yZXBsYWNlKC9eXFw/LywgJycpO1xufTtcblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24odXJsLCBkYXRhLCBjb25maWcpIHtcbiAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHV0aWxzLm1lcmdlKGNvbmZpZyB8fCB7fSwge1xuICAgICAgbWV0aG9kOiBtZXRob2QsXG4gICAgICB1cmw6IHVybCxcbiAgICAgIGRhdGE6IGRhdGFcbiAgICB9KSk7XG4gIH07XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBBeGlvcztcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuZnVuY3Rpb24gdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpIHtcbiAgaWYgKGNvbmZpZy5jYW5jZWxUb2tlbikge1xuICAgIGNvbmZpZy5jYW5jZWxUb2tlbi50aHJvd0lmUmVxdWVzdGVkKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3QgdG8gdGhlIHNlcnZlciB1c2luZyB0aGUgY29uZmlndXJlZCBhZGFwdGVyLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGlzcGF0Y2hSZXF1ZXN0KGNvbmZpZykge1xuICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgLy8gRW5zdXJlIGhlYWRlcnMgZXhpc3RcbiAgY29uZmlnLmhlYWRlcnMgPSBjb25maWcuaGVhZGVycyB8fCB7fTtcblxuICAvLyBUcmFuc2Zvcm0gcmVxdWVzdCBkYXRhXG4gIGNvbmZpZy5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICBjb25maWcuZGF0YSxcbiAgICBjb25maWcuaGVhZGVycyxcbiAgICBjb25maWcudHJhbnNmb3JtUmVxdWVzdFxuICApO1xuXG4gIC8vIEZsYXR0ZW4gaGVhZGVyc1xuICBjb25maWcuaGVhZGVycyA9IHV0aWxzLm1lcmdlKFxuICAgIGNvbmZpZy5oZWFkZXJzLmNvbW1vbiB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1tjb25maWcubWV0aG9kXSB8fCB7fSxcbiAgICBjb25maWcuaGVhZGVyc1xuICApO1xuXG4gIHV0aWxzLmZvckVhY2goXG4gICAgWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAncG9zdCcsICdwdXQnLCAncGF0Y2gnLCAnY29tbW9uJ10sXG4gICAgZnVuY3Rpb24gY2xlYW5IZWFkZXJDb25maWcobWV0aG9kKSB7XG4gICAgICBkZWxldGUgY29uZmlnLmhlYWRlcnNbbWV0aG9kXTtcbiAgICB9XG4gICk7XG5cbiAgdmFyIGFkYXB0ZXIgPSBjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyO1xuXG4gIHJldHVybiBhZGFwdGVyKGNvbmZpZykudGhlbihmdW5jdGlvbiBvbkFkYXB0ZXJSZXNvbHV0aW9uKHJlc3BvbnNlKSB7XG4gICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgLy8gVHJhbnNmb3JtIHJlc3BvbnNlIGRhdGFcbiAgICByZXNwb25zZS5kYXRhID0gdHJhbnNmb3JtRGF0YShcbiAgICAgIHJlc3BvbnNlLmRhdGEsXG4gICAgICByZXNwb25zZS5oZWFkZXJzLFxuICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5kYXRhLFxuICAgICAgICAgIHJlYXNvbi5yZXNwb25zZS5oZWFkZXJzLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZWFzb24pO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLi91dGlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlck5hbWUoaGVhZGVycywgbm9ybWFsaXplZE5hbWUpIHtcbiAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCBmdW5jdGlvbiBwcm9jZXNzSGVhZGVyKHZhbHVlLCBuYW1lKSB7XG4gICAgaWYgKG5hbWUgIT09IG5vcm1hbGl6ZWROYW1lICYmIG5hbWUudG9VcHBlckNhc2UoKSA9PT0gbm9ybWFsaXplZE5hbWUudG9VcHBlckNhc2UoKSkge1xuICAgICAgaGVhZGVyc1tub3JtYWxpemVkTmFtZV0gPSB2YWx1ZTtcbiAgICAgIGRlbGV0ZSBoZWFkZXJzW25hbWVdO1xuICAgIH1cbiAgfSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3JlYXRlRXJyb3IgPSByZXF1aXJlKCcuL2NyZWF0ZUVycm9yJyk7XG5cbi8qKlxuICogUmVzb2x2ZSBvciByZWplY3QgYSBQcm9taXNlIGJhc2VkIG9uIHJlc3BvbnNlIHN0YXR1cy5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZXNvbHZlIEEgZnVuY3Rpb24gdGhhdCByZXNvbHZlcyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlamVjdCBBIGZ1bmN0aW9uIHRoYXQgcmVqZWN0cyB0aGUgcHJvbWlzZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2UuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgcmVzcG9uc2UpIHtcbiAgdmFyIHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXZhbGlkYXRlU3RhdHVzIHx8IHZhbGlkYXRlU3RhdHVzKHJlc3BvbnNlLnN0YXR1cykpIHtcbiAgICByZXNvbHZlKHJlc3BvbnNlKTtcbiAgfSBlbHNlIHtcbiAgICByZWplY3QoY3JlYXRlRXJyb3IoXG4gICAgICAnUmVxdWVzdCBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSAnICsgcmVzcG9uc2Uuc3RhdHVzLFxuICAgICAgcmVzcG9uc2UuY29uZmlnLFxuICAgICAgbnVsbCxcbiAgICAgIHJlc3BvbnNlLnJlcXVlc3QsXG4gICAgICByZXNwb25zZVxuICAgICkpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuXG4gIGVycm9yLnJlcXVlc3QgPSByZXF1ZXN0O1xuICBlcnJvci5yZXNwb25zZSA9IHJlc3BvbnNlO1xuICBlcnJvci5pc0F4aW9zRXJyb3IgPSB0cnVlO1xuXG4gIGVycm9yLnRvSlNPTiA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAvLyBTdGFuZGFyZFxuICAgICAgbWVzc2FnZTogdGhpcy5tZXNzYWdlLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgLy8gTWljcm9zb2Z0XG4gICAgICBkZXNjcmlwdGlvbjogdGhpcy5kZXNjcmlwdGlvbixcbiAgICAgIG51bWJlcjogdGhpcy5udW1iZXIsXG4gICAgICAvLyBNb3ppbGxhXG4gICAgICBmaWxlTmFtZTogdGhpcy5maWxlTmFtZSxcbiAgICAgIGxpbmVOdW1iZXI6IHRoaXMubGluZU51bWJlcixcbiAgICAgIGNvbHVtbk51bWJlcjogdGhpcy5jb2x1bW5OdW1iZXIsXG4gICAgICBzdGFjazogdGhpcy5zdGFjayxcbiAgICAgIC8vIEF4aW9zXG4gICAgICBjb25maWc6IHRoaXMuY29uZmlnLFxuICAgICAgY29kZTogdGhpcy5jb2RlXG4gICAgfTtcbiAgfTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGVVUkwgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2lzQWJzb2x1dGVVUkwnKTtcbnZhciBjb21iaW5lVVJMcyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb21iaW5lZCBmdWxsIHBhdGhcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBidWlsZEZ1bGxQYXRoKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCkge1xuICBpZiAoYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChyZXF1ZXN0ZWRVUkwpKSB7XG4gICAgcmV0dXJuIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlcXVlc3RlZFVSTCk7XG4gIH1cbiAgcmV0dXJuIHJlcXVlc3RlZFVSTDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSBzcGVjaWZpZWQgVVJMIGlzIGFic29sdXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZFxcK1xcLVxcLl0qOik/XFwvXFwvL2kudGVzdCh1cmwpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIHNwZWNpZmllZCBVUkxzXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGJhc2VVUkwgVGhlIGJhc2UgVVJMXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVsYXRpdmVVUkwgVGhlIHJlbGF0aXZlIFVSTFxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGNvbWJpbmVkIFVSTFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuICAvLyB3aGV0aGVyIHRoZSByZXF1ZXN0IFVSTCBpcyBvZiB0aGUgc2FtZSBvcmlnaW4gYXMgY3VycmVudCBsb2NhdGlvbi5cbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgICAgdmFyIHVybFBhcnNpbmdOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgdmFyIG9yaWdpblVSTDtcblxuICAgICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgICBmdW5jdGlvbiByZXNvbHZlVVJMKHVybCkge1xuICAgICAgICB2YXIgaHJlZiA9IHVybDtcblxuICAgICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG4gICAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICAgIH1cblxuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcblxuICAgICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaHJlZjogdXJsUGFyc2luZ05vZGUuaHJlZixcbiAgICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgICAgc2VhcmNoOiB1cmxQYXJzaW5nTm9kZS5zZWFyY2ggPyB1cmxQYXJzaW5nTm9kZS5zZWFyY2gucmVwbGFjZSgvXlxcPy8sICcnKSA6ICcnLFxuICAgICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICAgIHBvcnQ6IHVybFBhcnNpbmdOb2RlLnBvcnQsXG4gICAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgICAgdXJsUGFyc2luZ05vZGUucGF0aG5hbWUgOlxuICAgICAgICAgICAgJy8nICsgdXJsUGFyc2luZ05vZGUucGF0aG5hbWVcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luVVJMID0gcmVzb2x2ZVVSTCh3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cbiAgICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uIGlzVVJMU2FtZU9yaWdpbihyZXF1ZXN0VVJMKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSAodXRpbHMuaXNTdHJpbmcocmVxdWVzdFVSTCkpID8gcmVzb2x2ZVVSTChyZXF1ZXN0VVJMKSA6IHJlcXVlc3RVUkw7XG4gICAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudnMgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gICAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfTtcbiAgICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgc3VwcG9ydCBkb2N1bWVudC5jb29raWVcbiAgICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKG5hbWUsIHZhbHVlLCBleHBpcmVzLCBwYXRoLCBkb21haW4sIHNlY3VyZSkge1xuICAgICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgICBjb29raWUucHVzaChuYW1lICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKSk7XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZChuYW1lKSB7XG4gICAgICAgICAgdmFyIG1hdGNoID0gZG9jdW1lbnQuY29va2llLm1hdGNoKG5ldyBSZWdFeHAoJyhefDtcXFxccyopKCcgKyBuYW1lICsgJyk9KFteO10qKScpKTtcbiAgICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKG5hbWUpIHtcbiAgICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgICAoZnVuY3Rpb24gbm9uU3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgICB9O1xuICAgIH0pKClcbik7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFN5bnRhY3RpYyBzdWdhciBmb3IgaW52b2tpbmcgYSBmdW5jdGlvbiBhbmQgZXhwYW5kaW5nIGFuIGFycmF5IGZvciBhcmd1bWVudHMuXG4gKlxuICogQ29tbW9uIHVzZSBjYXNlIHdvdWxkIGJlIHRvIHVzZSBgRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5YC5cbiAqXG4gKiAgYGBganNcbiAqICBmdW5jdGlvbiBmKHgsIHksIHopIHt9XG4gKiAgdmFyIGFyZ3MgPSBbMSwgMiwgM107XG4gKiAgZi5hcHBseShudWxsLCBhcmdzKTtcbiAqICBgYGBcbiAqXG4gKiBXaXRoIGBzcHJlYWRgIHRoaXMgZXhhbXBsZSBjYW4gYmUgcmUtd3JpdHRlbi5cbiAqXG4gKiAgYGBganNcbiAqICBzcHJlYWQoZnVuY3Rpb24oeCwgeSwgeikge30pKFsxLCAyLCAzXSk7XG4gKiAgYGBgXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59O1xuIiwiY29uc3QgZGVsaXZlcnlGb3JtID0gPEhUTUxGb3JtRWxlbWVudD4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2RlbGl2ZXJ5LWZvcm0nKTtcclxuY29uc3QgbWthZCA9IDxIVE1MSW5wdXRFbGVtZW50PiBkZWxpdmVyeUZvcm0ucXVlcnlTZWxlY3RvcignW25hbWU9XCJta2FkXCJdJyk7XHJcbmNvbnN0IGhvdXJzSW5wdXQgPSA8SFRNTElucHV0RWxlbWVudD4gZGVsaXZlcnlGb3JtLnF1ZXJ5U2VsZWN0b3IoJ1tuYW1lPVwiaG91cnNcIl0nKTtcclxuY29uc3Qgd2VpZ2h0ID0gPEhUTUxTZWxlY3RFbGVtZW50PiBkZWxpdmVyeUZvcm0ucXVlcnlTZWxlY3RvcignW25hbWU9XCJ3ZWlnaHRcIl0nKTtcclxuY29uc3QgeyBwcmljZWxpc3QgfSA9ICg8YW55PiB3aW5kb3cpO1xyXG5jb25zdCBwcmljZUJveCA9IDxIVE1MRWxlbWVudD4gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmpzLWNhbGMtcHJpY2UnKTtcclxuXHJcbmNvbnN0IHRob3VzYW5kU2VwID0gKHByaWNlLCBzZXAgPSAnICcpID0+IChwcmljZS50b1N0cmluZygpLnJlcGxhY2UoL1xcQig/PShcXGR7M30pKyg/IVxcZCkpL2csIHNlcCkpO1xyXG5cclxuY29uc3QgY2FsdWxhdGUgPSAoKSA9PiB7XHJcbiAgaWYgKHdlaWdodC52YWx1ZSA9PT0gJycgfHwgIXByaWNlbGlzdFtwYXJzZUludCh3ZWlnaHQudmFsdWUsIDEwKV0pIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgY29uc3QgaXRlbSA9IHByaWNlbGlzdFtwYXJzZUludCh3ZWlnaHQudmFsdWUsIDEwKV07XHJcbiAgY29uc3QgaG91cnMgPSBwYXJzZUludChob3Vyc0lucHV0LnZhbHVlLCAxMCkgPCBpdGVtLm1pbiA/IGl0ZW0ubWluIDogcGFyc2VJbnQoaG91cnNJbnB1dC52YWx1ZSwgMTApO1xyXG5cclxuICBwcmljZUJveC5pbm5lckhUTUwgPSB0aG91c2FuZFNlcChwYXJzZUludChta2FkLnZhbHVlLCAxMCkgKiBpdGVtLm1rYWQgKyBob3VycyAqIGl0ZW0ucHJpY2UpO1xyXG59O1xyXG5cclxubWthZC5vbmNoYW5nZSA9IGNhbHVsYXRlO1xyXG5ta2FkLm9ua2V5dXAgPSBjYWx1bGF0ZTtcclxuXHJcbndlaWdodC5vbmNoYW5nZSA9ICgpID0+IHtcclxuICBjb25zdCBpdGVtID0gcHJpY2VsaXN0W3BhcnNlSW50KHdlaWdodC52YWx1ZSwgMTApXTtcclxuICBpZiAocGFyc2VJbnQoaG91cnNJbnB1dC52YWx1ZSwgMTApIDwgaXRlbS5taW4pIHtcclxuICAgIGhvdXJzSW5wdXQudmFsdWUgPSBpdGVtLm1pbjtcclxuICB9XHJcbiAgY2FsdWxhdGUoKTtcclxufTtcclxuXHJcbmhvdXJzSW5wdXQub25jaGFuZ2UgPSBjYWx1bGF0ZTtcclxuaG91cnNJbnB1dC5vbmtleXVwID0gY2FsdWxhdGU7XHJcbiIsIiQoJy5qcy1zZWxlY3QnKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICBjb25zdCAkdGhpcyA9ICQodGhpcyk7XHJcbiAgY29uc3QgbnVtYmVyT2ZPcHRpb25zID0gJCh0aGlzKS5jaGlsZHJlbignb3B0aW9uJykubGVuZ3RoO1xyXG5cclxuICAkdGhpcy5hZGRDbGFzcygnc2VsZWN0LWhpZGRlbicpO1xyXG4gICR0aGlzLndyYXAoJzxkaXYgY2xhc3M9XCJzZWxlY3RcIj48L2Rpdj4nKTtcclxuICAkdGhpcy5hZnRlcignPGRpdiBjbGFzcz1cInNlbGVjdC1zdHlsZWRcIj48c3BhbiBjbGFzcz1cInZhbHVlXCI+PC9zcGFuPiA8aSBjbGFzcz1cImZhIGZhLWNoZXZyb24tZG93blwiPjwvaT48L2Rpdj4nKTtcclxuXHJcbiAgY29uc3QgJHN0eWxlZFNlbGVjdCA9ICR0aGlzLm5leHQoJ2Rpdi5zZWxlY3Qtc3R5bGVkJyk7XHJcbiAgY29uc3QgJHNlbGVjdGVkID0gJHN0eWxlZFNlbGVjdC5maW5kKCcudmFsdWUnKTtcclxuICAkc2VsZWN0ZWQudGV4dCgkdGhpcy5jaGlsZHJlbignb3B0aW9uJykuZXEoMCkudGV4dCgpKTtcclxuXHJcbiAgY29uc3QgJGxpc3QgPSAkKCc8dWwgLz4nLCB7XHJcbiAgICBjbGFzczogJ3NlbGVjdC1vcHRpb25zJyxcclxuICB9KS5pbnNlcnRBZnRlcigkc3R5bGVkU2VsZWN0KTtcclxuXHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZk9wdGlvbnM7IGkgKz0gMSkge1xyXG4gICAgJCgnPGxpIC8+Jywge1xyXG4gICAgICB0ZXh0OiAkdGhpcy5jaGlsZHJlbignb3B0aW9uJykuZXEoaSkudGV4dCgpLFxyXG4gICAgICByZWw6ICR0aGlzLmNoaWxkcmVuKCdvcHRpb24nKS5lcShpKS52YWwoKSxcclxuICAgIH0pLmFwcGVuZFRvKCRsaXN0KTtcclxuICB9XHJcblxyXG4gIGNvbnN0ICRsaXN0SXRlbXMgPSAkbGlzdC5jaGlsZHJlbignbGknKTtcclxuXHJcbiAgJHN0eWxlZFNlbGVjdC5jbGljayhmdW5jdGlvbiAoZSkge1xyXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICQoJ2Rpdi5zZWxlY3Qtc3R5bGVkLmFjdGl2ZScpLm5vdCh0aGlzKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygnYWN0aXZlJykubmV4dCgndWwuc2VsZWN0LW9wdGlvbnMnKS5oaWRlKCk7XHJcbiAgICB9KTtcclxuICAgICQodGhpcykudG9nZ2xlQ2xhc3MoJ2FjdGl2ZScpLm5leHQoJ3VsLnNlbGVjdC1vcHRpb25zJykudG9nZ2xlKCk7XHJcbiAgfSk7XHJcblxyXG4gICRsaXN0SXRlbXMuY2xpY2soZnVuY3Rpb24gKGUpIHtcclxuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAkc2VsZWN0ZWQudGV4dCgkKHRoaXMpLnRleHQoKSk7XHJcbiAgICAkc3R5bGVkU2VsZWN0LnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICR0aGlzLnZhbCgkKHRoaXMpLmF0dHIoJ3JlbCcpKS50cmlnZ2VyKCdjaGFuZ2UnKVxyXG4gICAgJGxpc3QuaGlkZSgpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJHRoaXMudmFsKCkpO1xyXG4gIH0pO1xyXG5cclxuICAkKGRvY3VtZW50KS5jbGljaygoKSA9PiB7XHJcbiAgICAkc3R5bGVkU2VsZWN0LnJlbW92ZUNsYXNzKCdhY3RpdmUnKTtcclxuICAgICRsaXN0LmhpZGUoKTtcclxuICB9KTtcclxufSk7XHJcbiIsImludGVyZmFjZSBBeWVwc0ludGVyZmFjZSB7XHJcbiAgW2tleTogc3RyaW5nXTogYW55XHJcbn1cclxuZGVjbGFyZSBnbG9iYWwge1xyXG4gIGludGVyZmFjZSBXaW5kb3cge1xyXG4gICAgQXllcHM6IEF5ZXBzSW50ZXJmYWNlXHJcbiAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEF5ZXBzIGltcGxlbWVudHMgQXllcHNJbnRlcmZhY2Uge1xyXG4gIHJlYWRvbmx5IG1vZHVsZXM6IHt9O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMubW9kdWxlcyA9IHt9O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVnaXN0ZXIgbW9kdWxlXHJcbiAgICogQHBhcmFtIG5hbWVcclxuICAgKiBAcGFyYW0gTW9kdWxlXHJcbiAgICogQHBhcmFtIGFyZ3NcclxuICAgKi9cclxuICBwdWJsaWMgcmVnaXN0ZXIgPSAobmFtZSwgTW9kdWxlLCAuLi5hcmdzKSA9PiB7XHJcbiAgICBpZiAodGhpcy5tb2R1bGVzW25hbWVdKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMubW9kdWxlc1tuYW1lXSA9IG5ldyBNb2R1bGUoYXJncyk7XHJcbiAgfTtcclxuXHJcbiAgLyoqXHJcbiAgICogSW5pdCBBcHAgYWZ0ZXIgcmVnaXN0ZXJpbmcgYWxsIG1vZHVsZXNcclxuICAgKi9cclxuICBwdWJsaWMgaW5pdCA9ICgpID0+IHtcclxuICAgIGlmICh3aW5kb3cuQXllcHMpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgT2JqZWN0LmtleXModGhpcy5tb2R1bGVzKS5mb3JFYWNoKGtleSA9PiB7XHJcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXksIHtcclxuICAgICAgICBnZXQ6ICgpID0+ICh0aGlzLm1vZHVsZXNba2V5XSksXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgd2luZG93LkF5ZXBzID0gdGhpcztcclxuICB9O1xyXG59XHJcbiIsImV4cG9ydCBjb25zdCBmb3JFYWNoRWxlbWVudCA9IChzZWxlY3Rvcjogc3RyaW5nfE5vZGVMaXN0LCBjYWxsYmFjazogKGVsOiBIVE1MRWxlbWVudCwgaW5kZXg6IG51bWJlcikgPT4gdm9pZCk6IHZvaWQgPT4ge1xyXG4gIGNvbnN0IG5vZGVzID0gdHlwZW9mIHNlbGVjdG9yID09PSAnc3RyaW5nJ1xyXG4gICAgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKDxzdHJpbmc+IHNlbGVjdG9yKSA6IDxOb2RlTGlzdD4gc2VsZWN0b3I7XHJcbiAgQXJyYXkuZnJvbShub2RlcykuZm9yRWFjaCgoZWw6IEhUTUxFbGVtZW50LCBpbmRleCkgPT4ge1xyXG4gICAgY2FsbGJhY2soZWwsIGluZGV4KTtcclxuICB9KTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBmb3JFYWNoRWxlbWVudCxcclxufTtcclxuIiwiaW1wb3J0IHsgZm9yRWFjaEVsZW1lbnQgfSBmcm9tICcuLi91dGlscy9lbGVtZW50cyc7XHJcblxyXG5jb25zdCBNT0RBTF9DTE9TRV9FVkVOVCA9ICdheXAubW9kYWwuY2xvc2VkJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1vZGFsIHtcclxuICBwcml2YXRlIG92ZXJsYXk6IEhUTUxFbGVtZW50O1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGNsb3NlRXZlbnQ7XHJcblxyXG4gIHByaXZhdGUgYm9keTogSFRNTEVsZW1lbnQ7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9uczogYW55O1xyXG5cclxuICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcclxuICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe1xyXG4gICAgICBvdmVybGF5U2VsZWN0b3I6ICcub3ZlcmxheScsXHJcbiAgICAgIG92ZXJsYXlWaXNpYmlsaXR5Q2xhc3M6ICcuaXMtdmlzaWJsZScsXHJcbiAgICAgIG1vZGFsVmlzaWJpbGl0eUNsYXNzOiAnLmlzLXZpc2libGUnLFxyXG4gICAgICBtb2RhbENsYXNzOiAnLm1vZGFsJyxcclxuICAgIH0sIG9wdHMpO1xyXG4gICAgdGhpcy5ib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xyXG4gICAgdGhpcy5jbG9zZUV2ZW50ID0gbmV3IEV2ZW50KE1PREFMX0NMT1NFX0VWRU5UKTtcclxuICAgIHRoaXMuaW5pdCgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0ID0gKCkgPT4ge1xyXG4gICAgdGhpcy5vdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB0aGlzLm92ZXJsYXkuY2xhc3NMaXN0LmFkZCh0aGlzLmdldE9wdGlvbignb3ZlcmxheVNlbGVjdG9yJykpO1xyXG4gICAgdGhpcy5ib2R5LmFwcGVuZENoaWxkKHRoaXMub3ZlcmxheSk7XHJcbiAgICB0aGlzLm92ZXJsYXkub25jbGljayA9ICgpID0+IHtcclxuICAgICAgdGhpcy5jbG9zZU1vZGFsKCk7XHJcbiAgICB9O1xyXG4gICAgZm9yRWFjaEVsZW1lbnQoYC4ke3RoaXMuZ2V0T3B0aW9uKCdtb2RhbENsYXNzJyl9YCwgKGVsOiBIVE1MRWxlbWVudCkgPT4ge1xyXG4gICAgICB0aGlzLnJlY2FsY3VsYXRlKGVsKTtcclxuICAgICAgZWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgICAgZWwuc3R5bGUuekluZGV4ID0gJy0xJztcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIHB1YmxpYyBvcGVuID0gKGlkOiBzdHJpbmcpOiB2b2lkID0+IHtcclxuICAgIGNvbnN0IG1vZGFsV2luID0gPEhUTUxFbGVtZW50PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpZC5yZXBsYWNlKCcjJywgJycpKTtcclxuICAgIHRoaXMuaGlkZUFjdGl2ZSgpO1xyXG4gICAgaWYgKCFtb2RhbFdpbikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB0aGlzLnNob3dPdmVybGF5KCk7XHJcbiAgICBtb2RhbFdpbi5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnZGlzcGxheScpO1xyXG4gICAgbW9kYWxXaW4uc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3otaW5kZXgnKTtcclxuICAgIGNvbnN0IGggPSBtb2RhbFdpbi5vZmZzZXRIZWlnaHQ7XHJcbiAgICBpZiAoaCA8IHdpbmRvdy5pbm5lckhlaWdodCkge1xyXG4gICAgICBtb2RhbFdpbi5zdHlsZS50b3AgPSBgJHt0aGlzLmNhbGN1bGF0ZVRvcChoLCB3aW5kb3cuaW5uZXJIZWlnaHQpfXB4YDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG1vZGFsV2luLnN0eWxlLnRvcCA9ICcwJztcclxuICAgIH1cclxuICAgIHRoaXMuYm9keS5zdHlsZS5vdmVyZmxvdyA9ICdoaWRkZW4nO1xyXG4gICAgbW9kYWxXaW4uY2xhc3NMaXN0LmFkZCh0aGlzLmdldE9wdGlvbignbW9kYWxWaXNpYmlsaXR5Q2xhc3MnKSk7XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBnZXRPcHRpb24gPSBpZCA9PiB7XHJcbiAgICBpZiAoIU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRoaXMub3B0aW9ucywgaWQpKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiB0aGlzLm9wdGlvbnNbaWRdID09PSAnc3RyaW5nJykge1xyXG4gICAgICByZXR1cm4gKDxzdHJpbmc+IHRoaXMub3B0aW9uc1tpZF0pLnJlcGxhY2UoL15cXC4vLCAnJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zW2lkXTtcclxuICB9O1xyXG5cclxuICBwcml2YXRlIHNob3dPdmVybGF5ID0gKCk6IHZvaWQgPT4ge1xyXG4gICAgdGhpcy5vdmVybGF5LmNsYXNzTGlzdC5hZGQodGhpcy5nZXRPcHRpb24oJ292ZXJsYXlWaXNpYmlsaXR5Q2xhc3MnKSk7XHJcbiAgfTtcclxuXHJcbiAgcHVibGljIGNsb3NlTW9kYWwgPSAoKTogdm9pZCA9PiB7XHJcbiAgICB0aGlzLm92ZXJsYXkuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLmdldE9wdGlvbignb3ZlcmxheVZpc2liaWxpdHlDbGFzcycpKTtcclxuICAgIHRoaXMuaGlkZUFjdGl2ZSgpO1xyXG4gICAgdGhpcy5ib2R5LnN0eWxlLnJlbW92ZVByb3BlcnR5KCdvdmVyZmxvdycpO1xyXG4gIH07XHJcblxyXG4gIHByaXZhdGUgY2FsY3VsYXRlVG9wID0gKG1vZGFsSDogbnVtYmVyLCB3aW5IOiBudW1iZXIpOiBudW1iZXIgPT4gKHdpbkggLSBtb2RhbEgpIC8gMjtcclxuXHJcbiAgcHVibGljIHJlY2FsY3VsYXRlID0gKG1vZGFsKTogdm9pZCA9PiB7XHJcbiAgICBjb25zdCBoID0gbW9kYWwub2Zmc2V0SGVpZ2h0O1xyXG4gICAgaWYgKGggPCB3aW5kb3cuaW5uZXJIZWlnaHQpIHtcclxuICAgICAgbW9kYWwuc3R5bGUudG9wID0gYCR7dGhpcy5jYWxjdWxhdGVUb3AoaCwgd2luZG93LmlubmVySGVpZ2h0KX1weGA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtb2RhbC5zdHlsZS50b3AgPSAnMCc7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBnZXRBY3RpdmUgPSAoKTogSFRNTEVsZW1lbnQgPT4gKFxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLiR7dGhpcy5nZXRPcHRpb24oJ21vZGFsQ2xhc3MnKX0uJHt0aGlzLmdldE9wdGlvbignbW9kYWxWaXNpYmlsaXR5Q2xhc3MnKX1gKVxyXG4gICk7XHJcblxyXG4gIHByaXZhdGUgaGlkZUFjdGl2ZSA9ICgpOiB2b2lkID0+IHtcclxuICAgIGNvbnN0IGFjdGl2ZU1vZGFsID0gdGhpcy5nZXRBY3RpdmUoKTtcclxuICAgIGlmIChhY3RpdmVNb2RhbCAhPT0gbnVsbCkge1xyXG4gICAgICBhY3RpdmVNb2RhbC5jbGFzc0xpc3QucmVtb3ZlKHRoaXMuZ2V0T3B0aW9uKCdtb2RhbFZpc2liaWxpdHlDbGFzcycpKTtcclxuICAgICAgYWN0aXZlTW9kYWwuYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIHRoaXMuaGlkZU1vZGFsLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgcHJpdmF0ZSBoaWRlTW9kYWwgPSAoZTogRXZlbnQpID0+IHtcclxuICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSBlO1xyXG4gICAgaWYgKCEoPEhUTUxFbGVtZW50PiB0YXJnZXQpLmNsYXNzTGlzdC5jb250YWlucyh0aGlzLmdldE9wdGlvbignbW9kYWxDbGFzcycpKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAoPEhUTUxFbGVtZW50PiB0YXJnZXQpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAoPEhUTUxFbGVtZW50PiB0YXJnZXQpLnN0eWxlLnpJbmRleCA9ICctMSc7XHJcbiAgICAoPEhUTUxFbGVtZW50PiB0YXJnZXQpLmRpc3BhdGNoRXZlbnQodGhpcy5jbG9zZUV2ZW50KTtcclxuICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy5oaWRlTW9kYWwsIGZhbHNlKTtcclxuICB9O1xyXG59XHJcbiIsImltcG9ydCBBeGlvcyBmcm9tICdheGlvcyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFJlcXVlc3RJbnRlcmZhY2Uge1xyXG4gIHNldFBhcmFtZXRlcnM6IChwYXJhbWV0ZXJzKSA9PiB0aGlzXHJcbiAgc2V0RW5kUG9pbnQ6IChlbmRwb2ludCkgPT4gdGhpc1xyXG4gIHNldFBhcmFtZXRlcjogKHBhcmFtZXRlciwgdmFsdWUpID0+IHRoaXNcclxuICByZW1vdmVQYXJhbWV0ZXJzOiAocGFyYW1zKSA9PiB0aGlzXHJcbiAgcmVtb3ZlUGFyYW1ldGVyOiAocGFyYW0pID0+IHRoaXNcclxuICBnZXQ6IChkYXRhKSA9PiBQcm9taXNlPGFueT5cclxuICBwb3N0OiAoZGF0YSkgPT4gUHJvbWlzZTxhbnk+XHJcbiAgcHV0OiAoZGF0YSkgPT4gUHJvbWlzZTxhbnk+XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlcXVlc3QgaW1wbGVtZW50cyBSZXF1ZXN0SW50ZXJmYWNlIHtcclxuICBwcml2YXRlIGVuZHBvaW50O1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IHBhcmFtZXRlcnM7XHJcblxyXG4gIGNvbnN0cnVjdG9yKGVuZHBvaW50LCBwYXJhbWV0ZXJzID0ge30pIHtcclxuICAgIHRoaXMuZW5kcG9pbnQgPSBlbmRwb2ludDtcclxuICAgIHRoaXMucGFyYW1ldGVycyA9IHBhcmFtZXRlcnM7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0RW5kUG9pbnQgPSAoZW5kcG9pbnQ6IHN0cmluZykgPT4ge1xyXG4gICAgdGhpcy5lbmRwb2ludCA9IGVuZHBvaW50O1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgcHVibGljIHNldFBhcmFtZXRlcnMgPSAocGFyYW1ldGVyczoge30pID0+IHtcclxuICAgIE9iamVjdC5rZXlzKHBhcmFtZXRlcnMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgdGhpcy5wYXJhbWV0ZXJzW2tleV0gPSBwYXJhbWV0ZXJzW2tleV07XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICBwdWJsaWMgc2V0UGFyYW1ldGVyID0gKHBhcmFtZXRlcjogc3RyaW5nLCB2YWx1ZTogc3RyaW5nfG51bWJlcnx7fSkgPT4ge1xyXG4gICAgdGhpcy5wYXJhbWV0ZXJzW3BhcmFtZXRlcl0gPSB2YWx1ZTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICBwdWJsaWMgcmVtb3ZlUGFyYW1ldGVycyA9IChwYXJhbWV0ZXJzOiBzdHJpbmdbXSkgPT4ge1xyXG4gICAgcGFyYW1ldGVycy5mb3JFYWNoKHBhcmFtZXRlciA9PiB7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLnBhcmFtZXRlcnNbcGFyYW1ldGVyXTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIHB1YmxpYyByZW1vdmVQYXJhbWV0ZXIgPSAocGFyYW1ldGVyOiBzdHJpbmcpID0+IHtcclxuICAgIGRlbGV0ZSB0aGlzLnBhcmFtZXRlcnNbcGFyYW1ldGVyXTtcclxuXHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICBwcml2YXRlIGdldFBhcmFtZXRlclN0cmluZyA9ICgpOiBzdHJpbmcgPT4ge1xyXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMucGFyYW1ldGVycyk7XHJcblxyXG4gICAgY29uc3QgcGFyYW1ldGVyU3RyaW5ncyA9IGtleXNcclxuICAgICAgLmZpbHRlcihrZXkgPT4gISF0aGlzLnBhcmFtZXRlcnNba2V5XSlcclxuICAgICAgLm1hcChrZXkgPT4gYCR7a2V5fT0ke3RoaXMucGFyYW1ldGVyc1trZXldfWApO1xyXG5cclxuICAgIHJldHVybiBwYXJhbWV0ZXJTdHJpbmdzLmxlbmd0aCA9PT0gMCA/ICcnIDogYD8ke3BhcmFtZXRlclN0cmluZ3Muam9pbignJicpfWA7XHJcbiAgfTtcclxuXHJcbiAgcHVibGljIHN1Ym1pdCA9IChyZXF1ZXN0VHlwZSwgdXJsLCBkYXRhID0gbnVsbCkgPT4gKG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgIEF4aW9zW3JlcXVlc3RUeXBlXSh1cmwgKyB0aGlzLmdldFBhcmFtZXRlclN0cmluZygpLCBkYXRhKVxyXG4gICAgICAudGhlbihyZXNwb25zZSA9PiB7XHJcbiAgICAgICAgcmVzb2x2ZShyZXNwb25zZS5kYXRhKTtcclxuICAgICAgfSlcclxuICAgICAgLmNhdGNoKCh7IHJlc3BvbnNlIH0pID0+IHtcclxuICAgICAgICBpZiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgIHJlamVjdChyZXNwb25zZS5kYXRhKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmVqZWN0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICB9KSk7XHJcblxyXG4gIHB1YmxpYyBnZXQgPSAoZGF0YSA9IG51bGwpID0+ICh0aGlzLnN1Ym1pdCgnZ2V0JywgdGhpcy5lbmRwb2ludCwgZGF0YSkpO1xyXG5cclxuICBwdWJsaWMgcG9zdCA9IChkYXRhID0gbnVsbCkgPT4gKHRoaXMuc3VibWl0KCdwb3N0JywgdGhpcy5lbmRwb2ludCwgZGF0YSkpO1xyXG5cclxuICBwdWJsaWMgcHV0ID0gKGRhdGEgPSBudWxsKSA9PiAodGhpcy5zdWJtaXQoJ3B1dCcsIHRoaXMuZW5kcG9pbnQsIGRhdGEpKTtcclxufVxyXG4iLCJpbXBvcnQgQXllcHMgZnJvbSAnLi9BeWVwcyc7XHJcbmltcG9ydCBNb2RhbCBmcm9tICcuL3BsdWdpbi9tb2RhbCc7XHJcbmltcG9ydCBSZXF1ZXN0IGZyb20gJy4vcGx1Z2luL3JlcXVlc3QnO1xyXG5cclxuY29uc3QgYXBwID0gbmV3IEF5ZXBzKCk7XHJcblxyXG5hcHAucmVnaXN0ZXIoJ21vZGFsJywgTW9kYWwpO1xyXG5hcHAucmVnaXN0ZXIoJ3JlcXVlc3QnLCBSZXF1ZXN0LCAnL2FwaScpO1xyXG5cclxuYXBwLmluaXQoKTtcclxuIiwiaW1wb3J0IHsgZm9yRWFjaEVsZW1lbnQgfSBmcm9tICcuLi91dGlscy9lbGVtZW50cyc7XHJcblxyXG5jb25zdCB7IG1vZGFsIH0gPSB3aW5kb3cuQXllcHM7XHJcblxyXG5mb3JFYWNoRWxlbWVudCgnW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nLCAoZWw6IEhUTUxFbGVtZW50KSA9PiB7XHJcbiAgY29uc3QgeyB0YXJnZXQgfSA9IGVsLmRhdGFzZXQ7XHJcbiAgaWYgKCF0YXJnZXQpIHtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgZWwub25jbGljayA9IChlOiBFdmVudCkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc29sZS5sb2cobW9kYWwpXHJcbiAgICBtb2RhbC5vcGVuKHRhcmdldCk7XHJcbiAgfTtcclxufSk7XHJcblxyXG5mb3JFYWNoRWxlbWVudCgnW2RhdGEtdG9nZ2xlPVwibW9kYWwtY2xvc2VcIl0nLCAoZWw6IEhUTUxFbGVtZW50KSA9PiB7XHJcbiAgZWwub25jbGljayA9IChlOiBFdmVudCkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgbW9kYWwuY2xvc2VNb2RhbCgpO1xyXG4gIH07XHJcbn0pO1xyXG4iLCJpbXBvcnQgeyBmb3JFYWNoRWxlbWVudCB9IGZyb20gJy4uL3V0aWxzL2VsZW1lbnRzJztcclxuaW1wb3J0IHNlcmlhbGl6ZSBmcm9tICdmb3JtLXNlcmlhbGl6ZSc7XHJcbmltcG9ydCB7IFJlcXVlc3RJbnRlcmZhY2UgfSBmcm9tICcuLi9wbHVnaW4vcmVxdWVzdCc7XHJcbmltcG9ydCBNb2RhbCBmcm9tICcuLi9jb21wb25lbnQvbW9kYWwnO1xyXG5cclxuY29uc3QgeyByZXF1ZXN0LCBtb2RhbCB9OiB7IHJlcXVlc3Q/OiBSZXF1ZXN0SW50ZXJmYWNlOyBtb2RhbD86IE1vZGFsfSA9IHdpbmRvdy5BeWVwcztcclxuY29uc3Qgbm90aWZpY2F0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21vZGFsLW5vdGlmaWNhdGlvbiAuanMtbWVzc2FnZScpO1xyXG5jb25zdCBkZWxpdmVyeUZvcm0gPSA8SFRNTEZvcm1FbGVtZW50PiBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZGVsaXZlcnktZm9ybScpO1xyXG5cclxuY29uc3QgZ2V0RXJyb3JOb2RlID0gKGVycm9yOiBzdHJpbmcpOiBIVE1MRWxlbWVudCA9PiB7XHJcbiAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbiAgZWwuY2xhc3NMaXN0LmFkZCgnZm9ybS1lcnJvcicpO1xyXG4gIGVsLmlubmVySFRNTCA9IGVycm9yO1xyXG4gIHJldHVybiBlbDtcclxufTtcclxuXHJcbmNvbnN0IGhhbmRsZVN1Y2Nlc3MgPSByZXNwb25zZSA9PiB7XHJcbiAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZXNwb25zZSwgJ21lc3NhZ2UnKSkge1xyXG4gICAgY29uc3QgeyBtZXNzYWdlID0gJycgfSA9IHJlc3BvbnNlO1xyXG4gICAgbm90aWZpY2F0aW9uLmlubmVySFRNTCA9IG1lc3NhZ2U7XHJcblxyXG4gICAgbW9kYWwub3BlbignbW9kYWwtbm90aWZpY2F0aW9uJyk7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgaGFuZGxlRXJyb3IgPSAoZm9ybTogSFRNTEZvcm1FbGVtZW50LCByZXNwb25zZSkgPT4ge1xyXG4gIGNvbnN0IHsgZXJyb3JzIH0gPSByZXNwb25zZTtcclxuICBPYmplY3Qua2V5cyhlcnJvcnMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgIGNvbnN0IGlucHV0ID0gZm9ybS5xdWVyeVNlbGVjdG9yKGBbbmFtZT1cIiR7a2V5fVwiXWApO1xyXG4gICAgY29uc3QgcGFyZW50ID0gaW5wdXQuY2xvc2VzdCgnZGl2Jyk7XHJcbiAgICBpbnB1dC5jbGFzc0xpc3QuYWRkKCdoYXMtZXJyb3InKTtcclxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChnZXRFcnJvck5vZGUoZXJyb3JzW2tleV0pKTtcclxuICB9KTtcclxufTtcclxuXHJcbmNvbnN0IGhhbmRsZVJlc3BvbnNlID0gKGZvcm06IEhUTUxGb3JtRWxlbWVudCwgcmVzcG9uc2UpID0+IHtcclxuICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xyXG4gICAgaGFuZGxlU3VjY2VzcyhyZXNwb25zZSk7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGhhbmRsZUVycm9yKGZvcm0sIHJlc3BvbnNlKTtcclxufTtcclxuXHJcbmNvbnN0IHJlbW92ZUVycm9ycyA9IChmb3JtOiBIVE1MRm9ybUVsZW1lbnQpID0+IHtcclxuICBmb3JFYWNoRWxlbWVudChmb3JtLnF1ZXJ5U2VsZWN0b3JBbGwoJy5mb3JtLWVycm9yJyksIChlbDogSFRNTEVsZW1lbnQpID0+IHtcclxuICAgIGVsLnJlbW92ZSgpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuZm9yRWFjaEVsZW1lbnQoJy5qcy1mb3JtJywgKGZvcm06IEhUTUxGb3JtRWxlbWVudCkgPT4ge1xyXG4gIGZvcm0ub25zdWJtaXQgPSAoZTogRXZlbnQpID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGNvbnN0IGRhdGEgPSBzZXJpYWxpemUoZm9ybSk7XHJcbiAgICByZW1vdmVFcnJvcnMoZm9ybSk7XHJcbiAgICByZXF1ZXN0LnNldEVuZFBvaW50KGZvcm0uZ2V0QXR0cmlidXRlKCdhY3Rpb24nKSk7XHJcbiAgICByZXF1ZXN0LnBvc3QoZGF0YSlcclxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xyXG4gICAgICAgIGlmICghT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwocmVzcG9uc2UsICdzdWNjZXNzJykpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignUmVzcG9uc2UgXCJzdWNjZXNzXCIgcHJvcGVydHkgaXMgbWlzc2luZycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBoYW5kbGVSZXNwb25zZShmb3JtLCByZXNwb25zZSk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChlcnIgPT4ge1xyXG4gICAgICAgIGlmIChlcnIuZXJyb3JzKSB7XHJcbiAgICAgICAgICBoYW5kbGVFcnJvcihmb3JtLCBlcnIpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgfTtcclxufSk7XHJcblxyXG5mb3JFYWNoRWxlbWVudCgnLmpzLWNhbGN1bGF0b3Itb3JkZXInLCAoZm9ybTogSFRNTEZvcm1FbGVtZW50KSA9PiB7XHJcbiAgZm9ybS5vbnN1Ym1pdCA9IChlOiBFdmVudCkgPT4ge1xyXG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgY29uc3QgZGF0YSA9IHNlcmlhbGl6ZShmb3JtKTtcclxuICAgIHJlbW92ZUVycm9ycyhmb3JtKTtcclxuICAgIHJlcXVlc3Quc2V0RW5kUG9pbnQoZm9ybS5nZXRBdHRyaWJ1dGUoJ2FjdGlvbicpKTtcclxuICAgIHJlcXVlc3QucG9zdChgJHtkYXRhfSYke3NlcmlhbGl6ZShkZWxpdmVyeUZvcm0pfWApXHJcbiAgICAgIC50aGVuKHJlc3BvbnNlID0+IHtcclxuICAgICAgICBpZiAoIU9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3BvbnNlLCAnc3VjY2VzcycpKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Jlc3BvbnNlIFwic3VjY2Vzc1wiIHByb3BlcnR5IGlzIG1pc3NpbmcnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaGFuZGxlUmVzcG9uc2UoZm9ybSwgcmVzcG9uc2UpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZXJyID0+IHtcclxuICAgICAgICBpZiAoZXJyLmVycm9ycykge1xyXG4gICAgICAgICAgaGFuZGxlRXJyb3IoZm9ybSwgZXJyKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gIH07XHJcbn0pO1xyXG4iLCIvKipcbiAqIFNTUiBXaW5kb3cgMS4wLjFcbiAqIEJldHRlciBoYW5kbGluZyBmb3Igd2luZG93IG9iamVjdCBpbiBTU1IgZW52aXJvbm1lbnRcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2xpbWl0czR3ZWIvc3NyLXdpbmRvd1xuICpcbiAqIENvcHlyaWdodCAyMDE4LCBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVFxuICpcbiAqIFJlbGVhc2VkIG9uOiBKdWx5IDE4LCAyMDE4XG4gKi9cbnZhciBkb2MgPSAodHlwZW9mIGRvY3VtZW50ID09PSAndW5kZWZpbmVkJykgPyB7XG4gIGJvZHk6IHt9LFxuICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgYWN0aXZlRWxlbWVudDoge1xuICAgIGJsdXI6IGZ1bmN0aW9uIGJsdXIoKSB7fSxcbiAgICBub2RlTmFtZTogJycsXG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3I6IGZ1bmN0aW9uIHF1ZXJ5U2VsZWN0b3IoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIHF1ZXJ5U2VsZWN0b3JBbGw6IGZ1bmN0aW9uIHF1ZXJ5U2VsZWN0b3JBbGwoKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9LFxuICBnZXRFbGVtZW50QnlJZDogZnVuY3Rpb24gZ2V0RWxlbWVudEJ5SWQoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG4gIGNyZWF0ZUV2ZW50OiBmdW5jdGlvbiBjcmVhdGVFdmVudCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5pdEV2ZW50OiBmdW5jdGlvbiBpbml0RXZlbnQoKSB7fSxcbiAgICB9O1xuICB9LFxuICBjcmVhdGVFbGVtZW50OiBmdW5jdGlvbiBjcmVhdGVFbGVtZW50KCkge1xuICAgIHJldHVybiB7XG4gICAgICBjaGlsZHJlbjogW10sXG4gICAgICBjaGlsZE5vZGVzOiBbXSxcbiAgICAgIHN0eWxlOiB7fSxcbiAgICAgIHNldEF0dHJpYnV0ZTogZnVuY3Rpb24gc2V0QXR0cmlidXRlKCkge30sXG4gICAgICBnZXRFbGVtZW50c0J5VGFnTmFtZTogZnVuY3Rpb24gZ2V0RWxlbWVudHNCeVRhZ05hbWUoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH0sXG4gICAgfTtcbiAgfSxcbiAgbG9jYXRpb246IHsgaGFzaDogJycgfSxcbn0gOiBkb2N1bWVudDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuXG52YXIgd2luID0gKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSA/IHtcbiAgZG9jdW1lbnQ6IGRvYyxcbiAgbmF2aWdhdG9yOiB7XG4gICAgdXNlckFnZW50OiAnJyxcbiAgfSxcbiAgbG9jYXRpb246IHt9LFxuICBoaXN0b3J5OiB7fSxcbiAgQ3VzdG9tRXZlbnQ6IGZ1bmN0aW9uIEN1c3RvbUV2ZW50KCkge1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICBhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKCkge30sXG4gIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoKSB7fSxcbiAgZ2V0Q29tcHV0ZWRTdHlsZTogZnVuY3Rpb24gZ2V0Q29tcHV0ZWRTdHlsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgZ2V0UHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZSgpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfSxcbiAgICB9O1xuICB9LFxuICBJbWFnZTogZnVuY3Rpb24gSW1hZ2UoKSB7fSxcbiAgRGF0ZTogZnVuY3Rpb24gRGF0ZSgpIHt9LFxuICBzY3JlZW46IHt9LFxuICBzZXRUaW1lb3V0OiBmdW5jdGlvbiBzZXRUaW1lb3V0KCkge30sXG4gIGNsZWFyVGltZW91dDogZnVuY3Rpb24gY2xlYXJUaW1lb3V0KCkge30sXG59IDogd2luZG93OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbmV4cG9ydCB7IHdpbiBhcyB3aW5kb3csIGRvYyBhcyBkb2N1bWVudCB9O1xuIiwiLyoqXG4gKiBEb203IDIuMS4zXG4gKiBNaW5pbWFsaXN0aWMgSmF2YVNjcmlwdCBsaWJyYXJ5IGZvciBET00gbWFuaXB1bGF0aW9uLCB3aXRoIGEgalF1ZXJ5LWNvbXBhdGlibGUgQVBJXG4gKiBodHRwOi8vZnJhbWV3b3JrNy5pby9kb2NzL2RvbS5odG1sXG4gKlxuICogQ29weXJpZ2h0IDIwMTksIFZsYWRpbWlyIEtoYXJsYW1waWRpXG4gKiBUaGUgaURhbmdlcm8udXNcbiAqIGh0dHA6Ly93d3cuaWRhbmdlcm8udXMvXG4gKlxuICogTGljZW5zZWQgdW5kZXIgTUlUXG4gKlxuICogUmVsZWFzZWQgb246IEZlYnJ1YXJ5IDExLCAyMDE5XG4gKi9cbmltcG9ydCB7IGRvY3VtZW50LCB3aW5kb3cgfSBmcm9tICdzc3Itd2luZG93JztcblxuY2xhc3MgRG9tNyB7XG4gIGNvbnN0cnVjdG9yKGFycikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIC8vIENyZWF0ZSBhcnJheS1saWtlIG9iamVjdFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBzZWxmW2ldID0gYXJyW2ldO1xuICAgIH1cbiAgICBzZWxmLmxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgLy8gUmV0dXJuIGNvbGxlY3Rpb24gd2l0aCBtZXRob2RzXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuZnVuY3Rpb24gJChzZWxlY3RvciwgY29udGV4dCkge1xuICBjb25zdCBhcnIgPSBbXTtcbiAgbGV0IGkgPSAwO1xuICBpZiAoc2VsZWN0b3IgJiYgIWNvbnRleHQpIHtcbiAgICBpZiAoc2VsZWN0b3IgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgfVxuICB9XG4gIGlmIChzZWxlY3Rvcikge1xuICAgICAgLy8gU3RyaW5nXG4gICAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGxldCBlbHM7XG4gICAgICBsZXQgdGVtcFBhcmVudDtcbiAgICAgIGNvbnN0IGh0bWwgPSBzZWxlY3Rvci50cmltKCk7XG4gICAgICBpZiAoaHRtbC5pbmRleE9mKCc8JykgPj0gMCAmJiBodG1sLmluZGV4T2YoJz4nKSA+PSAwKSB7XG4gICAgICAgIGxldCB0b0NyZWF0ZSA9ICdkaXYnO1xuICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8bGknKSA9PT0gMCkgdG9DcmVhdGUgPSAndWwnO1xuICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dHInKSA9PT0gMCkgdG9DcmVhdGUgPSAndGJvZHknO1xuICAgICAgICBpZiAoaHRtbC5pbmRleE9mKCc8dGQnKSA9PT0gMCB8fCBodG1sLmluZGV4T2YoJzx0aCcpID09PSAwKSB0b0NyZWF0ZSA9ICd0cic7XG4gICAgICAgIGlmIChodG1sLmluZGV4T2YoJzx0Ym9keScpID09PSAwKSB0b0NyZWF0ZSA9ICd0YWJsZSc7XG4gICAgICAgIGlmIChodG1sLmluZGV4T2YoJzxvcHRpb24nKSA9PT0gMCkgdG9DcmVhdGUgPSAnc2VsZWN0JztcbiAgICAgICAgdGVtcFBhcmVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodG9DcmVhdGUpO1xuICAgICAgICB0ZW1wUGFyZW50LmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0ZW1wUGFyZW50LmNoaWxkTm9kZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICBhcnIucHVzaCh0ZW1wUGFyZW50LmNoaWxkTm9kZXNbaV0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoIWNvbnRleHQgJiYgc2VsZWN0b3JbMF0gPT09ICcjJyAmJiAhc2VsZWN0b3IubWF0Y2goL1sgLjw+On5dLykpIHtcbiAgICAgICAgICAvLyBQdXJlIElEIHNlbGVjdG9yXG4gICAgICAgICAgZWxzID0gW2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNlbGVjdG9yLnRyaW0oKS5zcGxpdCgnIycpWzFdKV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXIgc2VsZWN0b3JzXG4gICAgICAgICAgZWxzID0gKGNvbnRleHQgfHwgZG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IudHJpbSgpKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKGVsc1tpXSkgYXJyLnB1c2goZWxzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2VsZWN0b3Iubm9kZVR5cGUgfHwgc2VsZWN0b3IgPT09IHdpbmRvdyB8fCBzZWxlY3RvciA9PT0gZG9jdW1lbnQpIHtcbiAgICAgIC8vIE5vZGUvZWxlbWVudFxuICAgICAgYXJyLnB1c2goc2VsZWN0b3IpO1xuICAgIH0gZWxzZSBpZiAoc2VsZWN0b3IubGVuZ3RoID4gMCAmJiBzZWxlY3RvclswXS5ub2RlVHlwZSkge1xuICAgICAgLy8gQXJyYXkgb2YgZWxlbWVudHMgb3IgaW5zdGFuY2Ugb2YgRG9tXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgc2VsZWN0b3IubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgYXJyLnB1c2goc2VsZWN0b3JbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IERvbTcoYXJyKTtcbn1cblxuJC5mbiA9IERvbTcucHJvdG90eXBlO1xuJC5DbGFzcyA9IERvbTc7XG4kLkRvbTcgPSBEb203O1xuXG5mdW5jdGlvbiB1bmlxdWUoYXJyKSB7XG4gIGNvbnN0IHVuaXF1ZUFycmF5ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHVuaXF1ZUFycmF5LmluZGV4T2YoYXJyW2ldKSA9PT0gLTEpIHVuaXF1ZUFycmF5LnB1c2goYXJyW2ldKTtcbiAgfVxuICByZXR1cm4gdW5pcXVlQXJyYXk7XG59XG5mdW5jdGlvbiB0b0NhbWVsQ2FzZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoLy0oLikvZywgKG1hdGNoLCBncm91cDEpID0+IGdyb3VwMS50b1VwcGVyQ2FzZSgpKTtcbn1cblxuZnVuY3Rpb24gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKSB7XG4gIGlmICh3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKSByZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShjYWxsYmFjayk7XG4gIGVsc2UgaWYgKHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHJldHVybiB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lKGNhbGxiYWNrKTtcbiAgcmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xufVxuZnVuY3Rpb24gY2FuY2VsQW5pbWF0aW9uRnJhbWUoaWQpIHtcbiAgaWYgKHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSkgcmV0dXJuIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gIGVsc2UgaWYgKHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSkgcmV0dXJuIHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZShpZCk7XG4gIHJldHVybiB3aW5kb3cuY2xlYXJUaW1lb3V0KGlkKTtcbn1cblxuLy8gQ2xhc3NlcyBhbmQgYXR0cmlidXRlc1xuZnVuY3Rpb24gYWRkQ2xhc3MoY2xhc3NOYW1lKSB7XG4gIGlmICh0eXBlb2YgY2xhc3NOYW1lID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIGNvbnN0IGNsYXNzZXMgPSBjbGFzc05hbWUuc3BsaXQoJyAnKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjbGFzc2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBpZiAodHlwZW9mIHRoaXNbal0gIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB0aGlzW2pdLmNsYXNzTGlzdCAhPT0gJ3VuZGVmaW5lZCcpIHRoaXNbal0uY2xhc3NMaXN0LmFkZChjbGFzc2VzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiByZW1vdmVDbGFzcyhjbGFzc05hbWUpIHtcbiAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpc1tqXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXNbal0uY2xhc3NMaXN0ICE9PSAndW5kZWZpbmVkJykgdGhpc1tqXS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzZXNbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIGhhc0NsYXNzKGNsYXNzTmFtZSkge1xuICBpZiAoIXRoaXNbMF0pIHJldHVybiBmYWxzZTtcbiAgcmV0dXJuIHRoaXNbMF0uY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XG59XG5mdW5jdGlvbiB0b2dnbGVDbGFzcyhjbGFzc05hbWUpIHtcbiAgY29uc3QgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNsYXNzZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgdGhpc1tqXSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIHRoaXNbal0uY2xhc3NMaXN0ICE9PSAndW5kZWZpbmVkJykgdGhpc1tqXS5jbGFzc0xpc3QudG9nZ2xlKGNsYXNzZXNbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIGF0dHIoYXR0cnMsIHZhbHVlKSB7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHR5cGVvZiBhdHRycyA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBHZXQgYXR0clxuICAgIGlmICh0aGlzWzBdKSByZXR1cm4gdGhpc1swXS5nZXRBdHRyaWJ1dGUoYXR0cnMpO1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBTZXQgYXR0cnNcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIC8vIFN0cmluZ1xuICAgICAgdGhpc1tpXS5zZXRBdHRyaWJ1dGUoYXR0cnMsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gT2JqZWN0XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGZvciAoY29uc3QgYXR0ck5hbWUgaW4gYXR0cnMpIHtcbiAgICAgICAgdGhpc1tpXVthdHRyTmFtZV0gPSBhdHRyc1thdHRyTmFtZV07XG4gICAgICAgIHRoaXNbaV0uc2V0QXR0cmlidXRlKGF0dHJOYW1lLCBhdHRyc1thdHRyTmFtZV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZnVuY3Rpb24gcmVtb3ZlQXR0cihhdHRyKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0ucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5mdW5jdGlvbiBwcm9wKHByb3BzLCB2YWx1ZSkge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSAmJiB0eXBlb2YgcHJvcHMgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gR2V0IHByb3BcbiAgICBpZiAodGhpc1swXSkgcmV0dXJuIHRoaXNbMF1bcHJvcHNdO1xuICB9IGVsc2Uge1xuICAgIC8vIFNldCBwcm9wc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgLy8gU3RyaW5nXG4gICAgICAgIHRoaXNbaV1bcHJvcHNdID0gdmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPYmplY3RcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIGZvciAoY29uc3QgcHJvcE5hbWUgaW4gcHJvcHMpIHtcbiAgICAgICAgICB0aGlzW2ldW3Byb3BOYW1lXSA9IHByb3BzW3Byb3BOYW1lXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuZnVuY3Rpb24gZGF0YShrZXksIHZhbHVlKSB7XG4gIGxldCBlbDtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBlbCA9IHRoaXNbMF07XG4gICAgLy8gR2V0IHZhbHVlXG4gICAgaWYgKGVsKSB7XG4gICAgICBpZiAoZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSAmJiAoa2V5IGluIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2UpKSB7XG4gICAgICAgIHJldHVybiBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV07XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGFLZXkgPSBlbC5nZXRBdHRyaWJ1dGUoYGRhdGEtJHtrZXl9YCk7XG4gICAgICBpZiAoZGF0YUtleSkge1xuICAgICAgICByZXR1cm4gZGF0YUtleTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBTZXQgdmFsdWVcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgZWwgPSB0aGlzW2ldO1xuICAgIGlmICghZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSkgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZSA9IHt9O1xuICAgIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gcmVtb3ZlRGF0YShrZXkpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZWwgPSB0aGlzW2ldO1xuICAgIGlmIChlbC5kb203RWxlbWVudERhdGFTdG9yYWdlICYmIGVsLmRvbTdFbGVtZW50RGF0YVN0b3JhZ2Vba2V5XSkge1xuICAgICAgZWwuZG9tN0VsZW1lbnREYXRhU3RvcmFnZVtrZXldID0gbnVsbDtcbiAgICAgIGRlbGV0ZSBlbC5kb203RWxlbWVudERhdGFTdG9yYWdlW2tleV07XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBkYXRhc2V0KCkge1xuICBjb25zdCBlbCA9IHRoaXNbMF07XG4gIGlmICghZWwpIHJldHVybiB1bmRlZmluZWQ7XG4gIGNvbnN0IGRhdGFzZXQgPSB7fTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBpZiAoZWwuZGF0YXNldCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGZvciAoY29uc3QgZGF0YUtleSBpbiBlbC5kYXRhc2V0KSB7XG4gICAgICBkYXRhc2V0W2RhdGFLZXldID0gZWwuZGF0YXNldFtkYXRhS2V5XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbC5hdHRyaWJ1dGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGNvbnN0IGF0dHIgPSBlbC5hdHRyaWJ1dGVzW2ldO1xuICAgICAgaWYgKGF0dHIubmFtZS5pbmRleE9mKCdkYXRhLScpID49IDApIHtcbiAgICAgICAgZGF0YXNldFt0b0NhbWVsQ2FzZShhdHRyLm5hbWUuc3BsaXQoJ2RhdGEtJylbMV0pXSA9IGF0dHIudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhc2V0KSB7XG4gICAgaWYgKGRhdGFzZXRba2V5XSA9PT0gJ2ZhbHNlJykgZGF0YXNldFtrZXldID0gZmFsc2U7XG4gICAgZWxzZSBpZiAoZGF0YXNldFtrZXldID09PSAndHJ1ZScpIGRhdGFzZXRba2V5XSA9IHRydWU7XG4gICAgZWxzZSBpZiAocGFyc2VGbG9hdChkYXRhc2V0W2tleV0pID09PSBkYXRhc2V0W2tleV0gKiAxKSBkYXRhc2V0W2tleV0gKj0gMTtcbiAgfVxuICByZXR1cm4gZGF0YXNldDtcbn1cbmZ1bmN0aW9uIHZhbCh2YWx1ZSkge1xuICBjb25zdCBkb20gPSB0aGlzO1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIGlmIChkb21bMF0pIHtcbiAgICAgIGlmIChkb21bMF0ubXVsdGlwbGUgJiYgZG9tWzBdLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRvbVswXS5zZWxlY3RlZE9wdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICB2YWx1ZXMucHVzaChkb21bMF0uc2VsZWN0ZWRPcHRpb25zW2ldLnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRvbVswXS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZG9tLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZWwgPSBkb21baV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpICYmIGVsLm11bHRpcGxlICYmIGVsLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdzZWxlY3QnKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGVsLm9wdGlvbnMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgZWwub3B0aW9uc1tqXS5zZWxlY3RlZCA9IHZhbHVlLmluZGV4T2YoZWwub3B0aW9uc1tqXS52YWx1ZSkgPj0gMDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRvbTtcbn1cbi8vIFRyYW5zZm9ybXNcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZnVuY3Rpb24gdHJhbnNmb3JtKHRyYW5zZm9ybSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBlbFN0eWxlID0gdGhpc1tpXS5zdHlsZTtcbiAgICBlbFN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBlbFN0eWxlLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIHRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgaWYgKHR5cGVvZiBkdXJhdGlvbiAhPT0gJ3N0cmluZycpIHtcbiAgICBkdXJhdGlvbiA9IGAke2R1cmF0aW9ufW1zYDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB9XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGVsU3R5bGUgPSB0aGlzW2ldLnN0eWxlO1xuICAgIGVsU3R5bGUud2Via2l0VHJhbnNpdGlvbkR1cmF0aW9uID0gZHVyYXRpb247XG4gICAgZWxTdHlsZS50cmFuc2l0aW9uRHVyYXRpb24gPSBkdXJhdGlvbjtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbi8vIEV2ZW50c1xuZnVuY3Rpb24gb24oLi4uYXJncykge1xuICBsZXQgW2V2ZW50VHlwZSwgdGFyZ2V0U2VsZWN0b3IsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFtldmVudFR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG4gICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKCFjYXB0dXJlKSBjYXB0dXJlID0gZmFsc2U7XG5cbiAgZnVuY3Rpb24gaGFuZGxlTGl2ZUV2ZW50KGUpIHtcbiAgICBjb25zdCB0YXJnZXQgPSBlLnRhcmdldDtcbiAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuICAgIGNvbnN0IGV2ZW50RGF0YSA9IGUudGFyZ2V0LmRvbTdFdmVudERhdGEgfHwgW107XG4gICAgaWYgKGV2ZW50RGF0YS5pbmRleE9mKGUpIDwgMCkge1xuICAgICAgZXZlbnREYXRhLnVuc2hpZnQoZSk7XG4gICAgfVxuICAgIGlmICgkKHRhcmdldCkuaXModGFyZ2V0U2VsZWN0b3IpKSBsaXN0ZW5lci5hcHBseSh0YXJnZXQsIGV2ZW50RGF0YSk7XG4gICAgZWxzZSB7XG4gICAgICBjb25zdCBwYXJlbnRzID0gJCh0YXJnZXQpLnBhcmVudHMoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBwYXJlbnRzLmxlbmd0aDsgayArPSAxKSB7XG4gICAgICAgIGlmICgkKHBhcmVudHNba10pLmlzKHRhcmdldFNlbGVjdG9yKSkgbGlzdGVuZXIuYXBwbHkocGFyZW50c1trXSwgZXZlbnREYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlRXZlbnQoZSkge1xuICAgIGNvbnN0IGV2ZW50RGF0YSA9IGUgJiYgZS50YXJnZXQgPyBlLnRhcmdldC5kb203RXZlbnREYXRhIHx8IFtdIDogW107XG4gICAgaWYgKGV2ZW50RGF0YS5pbmRleE9mKGUpIDwgMCkge1xuICAgICAgZXZlbnREYXRhLnVuc2hpZnQoZSk7XG4gICAgfVxuICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGV2ZW50RGF0YSk7XG4gIH1cbiAgY29uc3QgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG4gIGxldCBqO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBlbCA9IHRoaXNbaV07XG4gICAgaWYgKCF0YXJnZXRTZWxlY3Rvcikge1xuICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBjb25zdCBldmVudCA9IGV2ZW50c1tqXTtcbiAgICAgICAgaWYgKCFlbC5kb203TGlzdGVuZXJzKSBlbC5kb203TGlzdGVuZXJzID0ge307XG4gICAgICAgIGlmICghZWwuZG9tN0xpc3RlbmVyc1tldmVudF0pIGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICAgIGVsLmRvbTdMaXN0ZW5lcnNbZXZlbnRdLnB1c2goe1xuICAgICAgICAgIGxpc3RlbmVyLFxuICAgICAgICAgIHByb3h5TGlzdGVuZXI6IGhhbmRsZUV2ZW50LFxuICAgICAgICB9KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlRXZlbnQsIGNhcHR1cmUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXZlIGV2ZW50c1xuICAgICAgZm9yIChqID0gMDsgaiA8IGV2ZW50cy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBjb25zdCBldmVudCA9IGV2ZW50c1tqXTtcbiAgICAgICAgaWYgKCFlbC5kb203TGl2ZUxpc3RlbmVycykgZWwuZG9tN0xpdmVMaXN0ZW5lcnMgPSB7fTtcbiAgICAgICAgaWYgKCFlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF0pIGVsLmRvbTdMaXZlTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgICBlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF0ucHVzaCh7XG4gICAgICAgICAgbGlzdGVuZXIsXG4gICAgICAgICAgcHJveHlMaXN0ZW5lcjogaGFuZGxlTGl2ZUV2ZW50LFxuICAgICAgICB9KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlTGl2ZUV2ZW50LCBjYXB0dXJlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBvZmYoLi4uYXJncykge1xuICBsZXQgW2V2ZW50VHlwZSwgdGFyZ2V0U2VsZWN0b3IsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG4gIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFtldmVudFR5cGUsIGxpc3RlbmVyLCBjYXB0dXJlXSA9IGFyZ3M7XG4gICAgdGFyZ2V0U2VsZWN0b3IgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKCFjYXB0dXJlKSBjYXB0dXJlID0gZmFsc2U7XG5cbiAgY29uc3QgZXZlbnRzID0gZXZlbnRUeXBlLnNwbGl0KCcgJyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgZXZlbnQgPSBldmVudHNbaV07XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBjb25zdCBlbCA9IHRoaXNbal07XG4gICAgICBsZXQgaGFuZGxlcnM7XG4gICAgICBpZiAoIXRhcmdldFNlbGVjdG9yICYmIGVsLmRvbTdMaXN0ZW5lcnMpIHtcbiAgICAgICAgaGFuZGxlcnMgPSBlbC5kb203TGlzdGVuZXJzW2V2ZW50XTtcbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0U2VsZWN0b3IgJiYgZWwuZG9tN0xpdmVMaXN0ZW5lcnMpIHtcbiAgICAgICAgaGFuZGxlcnMgPSBlbC5kb203TGl2ZUxpc3RlbmVyc1tldmVudF07XG4gICAgICB9XG4gICAgICBpZiAoaGFuZGxlcnMgJiYgaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAobGV0IGsgPSBoYW5kbGVycy5sZW5ndGggLSAxOyBrID49IDA7IGsgLT0gMSkge1xuICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSBoYW5kbGVyc1trXTtcbiAgICAgICAgICBpZiAobGlzdGVuZXIgJiYgaGFuZGxlci5saXN0ZW5lciA9PT0gbGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIucHJveHlMaXN0ZW5lciwgY2FwdHVyZSk7XG4gICAgICAgICAgICBoYW5kbGVycy5zcGxpY2UoaywgMSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChsaXN0ZW5lciAmJiBoYW5kbGVyLmxpc3RlbmVyICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ICYmIGhhbmRsZXIubGlzdGVuZXIuZG9tN3Byb3h5ID09PSBsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFsaXN0ZW5lcikge1xuICAgICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlci5wcm94eUxpc3RlbmVyLCBjYXB0dXJlKTtcbiAgICAgICAgICAgIGhhbmRsZXJzLnNwbGljZShrLCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBvbmNlKC4uLmFyZ3MpIHtcbiAgY29uc3QgZG9tID0gdGhpcztcbiAgbGV0IFtldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBsaXN0ZW5lciwgY2FwdHVyZV0gPSBhcmdzO1xuICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBbZXZlbnROYW1lLCBsaXN0ZW5lciwgY2FwdHVyZV0gPSBhcmdzO1xuICAgIHRhcmdldFNlbGVjdG9yID0gdW5kZWZpbmVkO1xuICB9XG4gIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKC4uLmV2ZW50QXJncykge1xuICAgIGxpc3RlbmVyLmFwcGx5KHRoaXMsIGV2ZW50QXJncyk7XG4gICAgZG9tLm9mZihldmVudE5hbWUsIHRhcmdldFNlbGVjdG9yLCBvbmNlSGFuZGxlciwgY2FwdHVyZSk7XG4gICAgaWYgKG9uY2VIYW5kbGVyLmRvbTdwcm94eSkge1xuICAgICAgZGVsZXRlIG9uY2VIYW5kbGVyLmRvbTdwcm94eTtcbiAgICB9XG4gIH1cbiAgb25jZUhhbmRsZXIuZG9tN3Byb3h5ID0gbGlzdGVuZXI7XG4gIHJldHVybiBkb20ub24oZXZlbnROYW1lLCB0YXJnZXRTZWxlY3Rvciwgb25jZUhhbmRsZXIsIGNhcHR1cmUpO1xufVxuZnVuY3Rpb24gdHJpZ2dlciguLi5hcmdzKSB7XG4gIGNvbnN0IGV2ZW50cyA9IGFyZ3NbMF0uc3BsaXQoJyAnKTtcbiAgY29uc3QgZXZlbnREYXRhID0gYXJnc1sxXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBldmVudCA9IGV2ZW50c1tpXTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgIGNvbnN0IGVsID0gdGhpc1tqXTtcbiAgICAgIGxldCBldnQ7XG4gICAgICB0cnkge1xuICAgICAgICBldnQgPSBuZXcgd2luZG93LkN1c3RvbUV2ZW50KGV2ZW50LCB7XG4gICAgICAgICAgZGV0YWlsOiBldmVudERhdGEsXG4gICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgICAgIGV2dC5pbml0RXZlbnQoZXZlbnQsIHRydWUsIHRydWUpO1xuICAgICAgICBldnQuZGV0YWlsID0gZXZlbnREYXRhO1xuICAgICAgfVxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBlbC5kb203RXZlbnREYXRhID0gYXJncy5maWx0ZXIoKGRhdGEsIGRhdGFJbmRleCkgPT4gZGF0YUluZGV4ID4gMCk7XG4gICAgICBlbC5kaXNwYXRjaEV2ZW50KGV2dCk7XG4gICAgICBlbC5kb203RXZlbnREYXRhID0gW107XG4gICAgICBkZWxldGUgZWwuZG9tN0V2ZW50RGF0YTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kKGNhbGxiYWNrKSB7XG4gIGNvbnN0IGV2ZW50cyA9IFsnd2Via2l0VHJhbnNpdGlvbkVuZCcsICd0cmFuc2l0aW9uZW5kJ107XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG4gIGxldCBpO1xuICBmdW5jdGlvbiBmaXJlQ2FsbEJhY2soZSkge1xuICAgIC8qIGpzaGludCB2YWxpZHRoaXM6dHJ1ZSAqL1xuICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgIGNhbGxiYWNrLmNhbGwodGhpcywgZSk7XG4gICAgZm9yIChpID0gMDsgaSA8IGV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgZG9tLm9mZihldmVudHNbaV0sIGZpcmVDYWxsQmFjayk7XG4gICAgfVxuICB9XG4gIGlmIChjYWxsYmFjaykge1xuICAgIGZvciAoaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGRvbS5vbihldmVudHNbaV0sIGZpcmVDYWxsQmFjayk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gYW5pbWF0aW9uRW5kKGNhbGxiYWNrKSB7XG4gIGNvbnN0IGV2ZW50cyA9IFsnd2Via2l0QW5pbWF0aW9uRW5kJywgJ2FuaW1hdGlvbmVuZCddO1xuICBjb25zdCBkb20gPSB0aGlzO1xuICBsZXQgaTtcbiAgZnVuY3Rpb24gZmlyZUNhbGxCYWNrKGUpIHtcbiAgICBpZiAoZS50YXJnZXQgIT09IHRoaXMpIHJldHVybjtcbiAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGUpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGRvbS5vZmYoZXZlbnRzW2ldLCBmaXJlQ2FsbEJhY2spO1xuICAgIH1cbiAgfVxuICBpZiAoY2FsbGJhY2spIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBkb20ub24oZXZlbnRzW2ldLCBmaXJlQ2FsbEJhY2spO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbi8vIFNpemluZy9TdHlsZXNcbmZ1bmN0aW9uIHdpZHRoKCkge1xuICBpZiAodGhpc1swXSA9PT0gd2luZG93KSB7XG4gICAgcmV0dXJuIHdpbmRvdy5pbm5lcldpZHRoO1xuICB9XG5cbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBwYXJzZUZsb2F0KHRoaXMuY3NzKCd3aWR0aCcpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gb3V0ZXJXaWR0aChpbmNsdWRlTWFyZ2lucykge1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgaWYgKGluY2x1ZGVNYXJnaW5zKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIGNvbnN0IHN0eWxlcyA9IHRoaXMuc3R5bGVzKCk7XG4gICAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aCArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1yaWdodCcpKSArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1sZWZ0JykpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpc1swXS5vZmZzZXRXaWR0aDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGhlaWdodCgpIHtcbiAgaWYgKHRoaXNbMF0gPT09IHdpbmRvdykge1xuICAgIHJldHVybiB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gIH1cblxuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQodGhpcy5jc3MoJ2hlaWdodCcpKTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuZnVuY3Rpb24gb3V0ZXJIZWlnaHQoaW5jbHVkZU1hcmdpbnMpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGlmIChpbmNsdWRlTWFyZ2lucykge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBjb25zdCBzdHlsZXMgPSB0aGlzLnN0eWxlcygpO1xuICAgICAgcmV0dXJuIHRoaXNbMF0ub2Zmc2V0SGVpZ2h0ICsgcGFyc2VGbG9hdChzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXRvcCcpKSArIHBhcnNlRmxvYXQoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi1ib3R0b20nKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzWzBdLm9mZnNldEhlaWdodDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIG9mZnNldCgpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGVsID0gdGhpc1swXTtcbiAgICBjb25zdCBib3ggPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgICBjb25zdCBjbGllbnRUb3AgPSBlbC5jbGllbnRUb3AgfHwgYm9keS5jbGllbnRUb3AgfHwgMDtcbiAgICBjb25zdCBjbGllbnRMZWZ0ID0gZWwuY2xpZW50TGVmdCB8fCBib2R5LmNsaWVudExlZnQgfHwgMDtcbiAgICBjb25zdCBzY3JvbGxUb3AgPSBlbCA9PT0gd2luZG93ID8gd2luZG93LnNjcm9sbFkgOiBlbC5zY3JvbGxUb3A7XG4gICAgY29uc3Qgc2Nyb2xsTGVmdCA9IGVsID09PSB3aW5kb3cgPyB3aW5kb3cuc2Nyb2xsWCA6IGVsLnNjcm9sbExlZnQ7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogKGJveC50b3AgKyBzY3JvbGxUb3ApIC0gY2xpZW50VG9wLFxuICAgICAgbGVmdDogKGJveC5sZWZ0ICsgc2Nyb2xsTGVmdCkgLSBjbGllbnRMZWZ0LFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cbmZ1bmN0aW9uIGhpZGUoKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIHNob3coKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGNvbnN0IGVsID0gdGhpc1tpXTtcbiAgICBpZiAoZWwuc3R5bGUuZGlzcGxheSA9PT0gJ25vbmUnKSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJyc7XG4gICAgfVxuICAgIGlmICh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZSgnZGlzcGxheScpID09PSAnbm9uZScpIHtcbiAgICAgIC8vIFN0aWxsIG5vdCB2aXNpYmxlXG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBzdHlsZXMoKSB7XG4gIGlmICh0aGlzWzBdKSByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpc1swXSwgbnVsbCk7XG4gIHJldHVybiB7fTtcbn1cbmZ1bmN0aW9uIGNzcyhwcm9wcywgdmFsdWUpIHtcbiAgbGV0IGk7XG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgaWYgKHR5cGVvZiBwcm9wcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh0aGlzWzBdKSByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUodGhpc1swXSwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICBmb3IgKGxldCBwcm9wIGluIHByb3BzKSB7XG4gICAgICAgICAgdGhpc1tpXS5zdHlsZVtwcm9wXSA9IHByb3BzW3Byb3BdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDIgJiYgdHlwZW9mIHByb3BzID09PSAnc3RyaW5nJykge1xuICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICB0aGlzW2ldLnN0eWxlW3Byb3BzXSA9IHZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxuLy8gRG9tIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gdG9BcnJheSgpIHtcbiAgY29uc3QgYXJyID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGFyci5wdXNoKHRoaXNbaV0pO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG4vLyBJdGVyYXRlIG92ZXIgdGhlIGNvbGxlY3Rpb24gcGFzc2luZyBlbGVtZW50cyB0byBgY2FsbGJhY2tgXG5mdW5jdGlvbiBlYWNoKGNhbGxiYWNrKSB7XG4gIC8vIERvbid0IGJvdGhlciBjb250aW51aW5nIHdpdGhvdXQgYSBjYWxsYmFja1xuICBpZiAoIWNhbGxiYWNrKSByZXR1cm4gdGhpcztcbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSBjdXJyZW50IGNvbGxlY3Rpb25cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgLy8gSWYgdGhlIGNhbGxiYWNrIHJldHVybnMgZmFsc2VcbiAgICBpZiAoY2FsbGJhY2suY2FsbCh0aGlzW2ldLCBpLCB0aGlzW2ldKSA9PT0gZmFsc2UpIHtcbiAgICAgIC8vIEVuZCB0aGUgbG9vcCBlYXJseVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICB9XG4gIC8vIFJldHVybiBgdGhpc2AgdG8gYWxsb3cgY2hhaW5lZCBET00gb3BlcmF0aW9uc1xuICByZXR1cm4gdGhpcztcbn1cbmZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2spIHtcbiAgLy8gRG9uJ3QgYm90aGVyIGNvbnRpbnVpbmcgd2l0aG91dCBhIGNhbGxiYWNrXG4gIGlmICghY2FsbGJhY2spIHJldHVybiB0aGlzO1xuICAvLyBJdGVyYXRlIG92ZXIgdGhlIGN1cnJlbnQgY29sbGVjdGlvblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAvLyBJZiB0aGUgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICAgIGlmIChjYWxsYmFjay5jYWxsKHRoaXNbaV0sIHRoaXNbaV0sIGkpID09PSBmYWxzZSkge1xuICAgICAgLy8gRW5kIHRoZSBsb29wIGVhcmx5XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gIH1cbiAgLy8gUmV0dXJuIGB0aGlzYCB0byBhbGxvdyBjaGFpbmVkIERPTSBvcGVyYXRpb25zXG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrKSB7XG4gIGNvbnN0IG1hdGNoZWRJdGVtcyA9IFtdO1xuICBjb25zdCBkb20gPSB0aGlzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGRvbS5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChjYWxsYmFjay5jYWxsKGRvbVtpXSwgaSwgZG9tW2ldKSkgbWF0Y2hlZEl0ZW1zLnB1c2goZG9tW2ldKTtcbiAgfVxuICByZXR1cm4gbmV3IERvbTcobWF0Y2hlZEl0ZW1zKTtcbn1cbmZ1bmN0aW9uIG1hcChjYWxsYmFjaykge1xuICBjb25zdCBtb2RpZmllZEl0ZW1zID0gW107XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZG9tLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgbW9kaWZpZWRJdGVtcy5wdXNoKGNhbGxiYWNrLmNhbGwoZG9tW2ldLCBpLCBkb21baV0pKTtcbiAgfVxuICByZXR1cm4gbmV3IERvbTcobW9kaWZpZWRJdGVtcyk7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmZ1bmN0aW9uIGh0bWwoaHRtbCkge1xuICBpZiAodHlwZW9mIGh0bWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIHRoaXNbMF0gPyB0aGlzWzBdLmlubmVySFRNTCA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0uaW5uZXJIVE1MID0gaHRtbDtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZnVuY3Rpb24gdGV4dCh0ZXh0KSB7XG4gIGlmICh0eXBlb2YgdGV4dCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodGhpc1swXSkge1xuICAgICAgcmV0dXJuIHRoaXNbMF0udGV4dENvbnRlbnQudHJpbSgpO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoaXNbaV0udGV4dENvbnRlbnQgPSB0ZXh0O1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gaXMoc2VsZWN0b3IpIHtcbiAgY29uc3QgZWwgPSB0aGlzWzBdO1xuICBsZXQgY29tcGFyZVdpdGg7XG4gIGxldCBpO1xuICBpZiAoIWVsIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoZWwubWF0Y2hlcykgcmV0dXJuIGVsLm1hdGNoZXMoc2VsZWN0b3IpO1xuICAgIGVsc2UgaWYgKGVsLndlYmtpdE1hdGNoZXNTZWxlY3RvcikgcmV0dXJuIGVsLndlYmtpdE1hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgZWxzZSBpZiAoZWwubXNNYXRjaGVzU2VsZWN0b3IpIHJldHVybiBlbC5tc01hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XG5cbiAgICBjb21wYXJlV2l0aCA9ICQoc2VsZWN0b3IpO1xuICAgIGZvciAoaSA9IDA7IGkgPCBjb21wYXJlV2l0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSBlbHNlIGlmIChzZWxlY3RvciA9PT0gZG9jdW1lbnQpIHJldHVybiBlbCA9PT0gZG9jdW1lbnQ7XG4gIGVsc2UgaWYgKHNlbGVjdG9yID09PSB3aW5kb3cpIHJldHVybiBlbCA9PT0gd2luZG93O1xuXG4gIGlmIChzZWxlY3Rvci5ub2RlVHlwZSB8fCBzZWxlY3RvciBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICBjb21wYXJlV2l0aCA9IHNlbGVjdG9yLm5vZGVUeXBlID8gW3NlbGVjdG9yXSA6IHNlbGVjdG9yO1xuICAgIGZvciAoaSA9IDA7IGkgPCBjb21wYXJlV2l0aC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGNvbXBhcmVXaXRoW2ldID09PSBlbCkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5mdW5jdGlvbiBpbmRleE9mKGVsKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0aGlzW2ldID09PSBlbCkgcmV0dXJuIGk7XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuZnVuY3Rpb24gaW5kZXgoKSB7XG4gIGxldCBjaGlsZCA9IHRoaXNbMF07XG4gIGxldCBpO1xuICBpZiAoY2hpbGQpIHtcbiAgICBpID0gMDtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICB3aGlsZSAoKGNoaWxkID0gY2hpbGQucHJldmlvdXNTaWJsaW5nKSAhPT0gbnVsbCkge1xuICAgICAgaWYgKGNoaWxkLm5vZGVUeXBlID09PSAxKSBpICs9IDE7XG4gICAgfVxuICAgIHJldHVybiBpO1xuICB9XG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmZ1bmN0aW9uIGVxKGluZGV4KSB7XG4gIGlmICh0eXBlb2YgaW5kZXggPT09ICd1bmRlZmluZWQnKSByZXR1cm4gdGhpcztcbiAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gIGxldCByZXR1cm5JbmRleDtcbiAgaWYgKGluZGV4ID4gbGVuZ3RoIC0gMSkge1xuICAgIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gIH1cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybkluZGV4ID0gbGVuZ3RoICsgaW5kZXg7XG4gICAgaWYgKHJldHVybkluZGV4IDwgMCkgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICByZXR1cm4gbmV3IERvbTcoW3RoaXNbcmV0dXJuSW5kZXhdXSk7XG4gIH1cbiAgcmV0dXJuIG5ldyBEb203KFt0aGlzW2luZGV4XV0pO1xufVxuZnVuY3Rpb24gYXBwZW5kKC4uLmFyZ3MpIHtcbiAgbGV0IG5ld0NoaWxkO1xuXG4gIGZvciAobGV0IGsgPSAwOyBrIDwgYXJncy5sZW5ndGg7IGsgKz0gMSkge1xuICAgIG5ld0NoaWxkID0gYXJnc1trXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgdGVtcERpdi5pbm5lckhUTUwgPSBuZXdDaGlsZDtcbiAgICAgICAgd2hpbGUgKHRlbXBEaXYuZmlyc3RDaGlsZCkge1xuICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQodGVtcERpdi5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChuZXdDaGlsZCBpbnN0YW5jZW9mIERvbTcpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBuZXdDaGlsZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgIHRoaXNbaV0uYXBwZW5kQ2hpbGQobmV3Q2hpbGRbal0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzW2ldLmFwcGVuZENoaWxkKG5ld0NoaWxkKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZnVuY3Rpb24gYXBwZW5kVG8ocGFyZW50KSB7XG4gICQocGFyZW50KS5hcHBlbmQodGhpcyk7XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gcHJlcGVuZChuZXdDaGlsZCkge1xuICBsZXQgaTtcbiAgbGV0IGo7XG4gIGZvciAoaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHRlbXBEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIHRlbXBEaXYuaW5uZXJIVE1MID0gbmV3Q2hpbGQ7XG4gICAgICBmb3IgKGogPSB0ZW1wRGl2LmNoaWxkTm9kZXMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqIC09IDEpIHtcbiAgICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUodGVtcERpdi5jaGlsZE5vZGVzW2pdLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAobmV3Q2hpbGQgaW5zdGFuY2VvZiBEb203KSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbmV3Q2hpbGQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgdGhpc1tpXS5pbnNlcnRCZWZvcmUobmV3Q2hpbGRbal0sIHRoaXNbaV0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXNbaV0uaW5zZXJ0QmVmb3JlKG5ld0NoaWxkLCB0aGlzW2ldLmNoaWxkTm9kZXNbMF0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhpcztcbn1cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuZnVuY3Rpb24gcHJlcGVuZFRvKHBhcmVudCkge1xuICAkKHBhcmVudCkucHJlcGVuZCh0aGlzKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5mdW5jdGlvbiBpbnNlcnRCZWZvcmUoc2VsZWN0b3IpIHtcbiAgY29uc3QgYmVmb3JlID0gJChzZWxlY3Rvcik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChiZWZvcmUubGVuZ3RoID09PSAxKSB7XG4gICAgICBiZWZvcmVbMF0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXSwgYmVmb3JlWzBdKTtcbiAgICB9IGVsc2UgaWYgKGJlZm9yZS5sZW5ndGggPiAxKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGJlZm9yZS5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICBiZWZvcmVbal0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpc1tpXS5jbG9uZU5vZGUodHJ1ZSksIGJlZm9yZVtqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBpbnNlcnRBZnRlcihzZWxlY3Rvcikge1xuICBjb25zdCBhZnRlciA9ICQoc2VsZWN0b3IpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBpZiAoYWZ0ZXIubGVuZ3RoID09PSAxKSB7XG4gICAgICBhZnRlclswXS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzW2ldLCBhZnRlclswXS5uZXh0U2libGluZyk7XG4gICAgfSBlbHNlIGlmIChhZnRlci5sZW5ndGggPiAxKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFmdGVyLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIGFmdGVyW2pdLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXNbaV0uY2xvbmVOb2RlKHRydWUpLCBhZnRlcltqXS5uZXh0U2libGluZyk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBuZXh0KHNlbGVjdG9yKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICh0aGlzWzBdLm5leHRFbGVtZW50U2libGluZyAmJiAkKHRoaXNbMF0ubmV4dEVsZW1lbnRTaWJsaW5nKS5pcyhzZWxlY3RvcikpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEb203KFt0aGlzWzBdLm5leHRFbGVtZW50U2libGluZ10pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICB9XG5cbiAgICBpZiAodGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmcpIHJldHVybiBuZXcgRG9tNyhbdGhpc1swXS5uZXh0RWxlbWVudFNpYmxpbmddKTtcbiAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICB9XG4gIHJldHVybiBuZXcgRG9tNyhbXSk7XG59XG5mdW5jdGlvbiBuZXh0QWxsKHNlbGVjdG9yKSB7XG4gIGNvbnN0IG5leHRFbHMgPSBbXTtcbiAgbGV0IGVsID0gdGhpc1swXTtcbiAgaWYgKCFlbCkgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgd2hpbGUgKGVsLm5leHRFbGVtZW50U2libGluZykge1xuICAgIGNvbnN0IG5leHQgPSBlbC5uZXh0RWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICgkKG5leHQpLmlzKHNlbGVjdG9yKSkgbmV4dEVscy5wdXNoKG5leHQpO1xuICAgIH0gZWxzZSBuZXh0RWxzLnB1c2gobmV4dCk7XG4gICAgZWwgPSBuZXh0O1xuICB9XG4gIHJldHVybiBuZXcgRG9tNyhuZXh0RWxzKTtcbn1cbmZ1bmN0aW9uIHByZXYoc2VsZWN0b3IpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIGNvbnN0IGVsID0gdGhpc1swXTtcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nICYmICQoZWwucHJldmlvdXNFbGVtZW50U2libGluZykuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRG9tNyhbZWwucHJldmlvdXNFbGVtZW50U2libGluZ10pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgICB9XG5cbiAgICBpZiAoZWwucHJldmlvdXNFbGVtZW50U2libGluZykgcmV0dXJuIG5ldyBEb203KFtlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nXSk7XG4gICAgcmV0dXJuIG5ldyBEb203KFtdKTtcbiAgfVxuICByZXR1cm4gbmV3IERvbTcoW10pO1xufVxuZnVuY3Rpb24gcHJldkFsbChzZWxlY3Rvcikge1xuICBjb25zdCBwcmV2RWxzID0gW107XG4gIGxldCBlbCA9IHRoaXNbMF07XG4gIGlmICghZWwpIHJldHVybiBuZXcgRG9tNyhbXSk7XG4gIHdoaWxlIChlbC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nKSB7XG4gICAgY29uc3QgcHJldiA9IGVsLnByZXZpb3VzRWxlbWVudFNpYmxpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBpZiAoc2VsZWN0b3IpIHtcbiAgICAgIGlmICgkKHByZXYpLmlzKHNlbGVjdG9yKSkgcHJldkVscy5wdXNoKHByZXYpO1xuICAgIH0gZWxzZSBwcmV2RWxzLnB1c2gocHJldik7XG4gICAgZWwgPSBwcmV2O1xuICB9XG4gIHJldHVybiBuZXcgRG9tNyhwcmV2RWxzKTtcbn1cbmZ1bmN0aW9uIHNpYmxpbmdzKHNlbGVjdG9yKSB7XG4gIHJldHVybiB0aGlzLm5leHRBbGwoc2VsZWN0b3IpLmFkZCh0aGlzLnByZXZBbGwoc2VsZWN0b3IpKTtcbn1cbmZ1bmN0aW9uIHBhcmVudChzZWxlY3Rvcikge1xuICBjb25zdCBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHRoaXNbaV0ucGFyZW50Tm9kZSAhPT0gbnVsbCkge1xuICAgICAgaWYgKHNlbGVjdG9yKSB7XG4gICAgICAgIGlmICgkKHRoaXNbaV0ucGFyZW50Tm9kZSkuaXMoc2VsZWN0b3IpKSBwYXJlbnRzLnB1c2godGhpc1tpXS5wYXJlbnROb2RlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmVudHMucHVzaCh0aGlzW2ldLnBhcmVudE5vZGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gJCh1bmlxdWUocGFyZW50cykpO1xufVxuZnVuY3Rpb24gcGFyZW50cyhzZWxlY3Rvcikge1xuICBjb25zdCBwYXJlbnRzID0gW107IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgbGV0IHBhcmVudCA9IHRoaXNbaV0ucGFyZW50Tm9kZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAoJChwYXJlbnQpLmlzKHNlbGVjdG9yKSkgcGFyZW50cy5wdXNoKHBhcmVudCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gJCh1bmlxdWUocGFyZW50cykpO1xufVxuZnVuY3Rpb24gY2xvc2VzdChzZWxlY3Rvcikge1xuICBsZXQgY2xvc2VzdCA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgaWYgKHR5cGVvZiBzZWxlY3RvciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbmV3IERvbTcoW10pO1xuICB9XG4gIGlmICghY2xvc2VzdC5pcyhzZWxlY3RvcikpIHtcbiAgICBjbG9zZXN0ID0gY2xvc2VzdC5wYXJlbnRzKHNlbGVjdG9yKS5lcSgwKTtcbiAgfVxuICByZXR1cm4gY2xvc2VzdDtcbn1cbmZ1bmN0aW9uIGZpbmQoc2VsZWN0b3IpIHtcbiAgY29uc3QgZm91bmRFbGVtZW50cyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBmb3VuZCA9IHRoaXNbaV0ucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBmb3VuZC5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgZm91bmRFbGVtZW50cy5wdXNoKGZvdW5kW2pdKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBEb203KGZvdW5kRWxlbWVudHMpO1xufVxuZnVuY3Rpb24gY2hpbGRyZW4oc2VsZWN0b3IpIHtcbiAgY29uc3QgY2hpbGRyZW4gPSBbXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBjaGlsZE5vZGVzID0gdGhpc1tpXS5jaGlsZE5vZGVzO1xuXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGlsZE5vZGVzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIGlmIChjaGlsZE5vZGVzW2pdLm5vZGVUeXBlID09PSAxKSBjaGlsZHJlbi5wdXNoKGNoaWxkTm9kZXNbal0pO1xuICAgICAgfSBlbHNlIGlmIChjaGlsZE5vZGVzW2pdLm5vZGVUeXBlID09PSAxICYmICQoY2hpbGROb2Rlc1tqXSkuaXMoc2VsZWN0b3IpKSB7XG4gICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGROb2Rlc1tqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXcgRG9tNyh1bmlxdWUoY2hpbGRyZW4pKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKHRoaXNbaV0ucGFyZW50Tm9kZSkgdGhpc1tpXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXNbaV0pO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuZnVuY3Rpb24gZGV0YWNoKCkge1xuICByZXR1cm4gdGhpcy5yZW1vdmUoKTtcbn1cbmZ1bmN0aW9uIGFkZCguLi5hcmdzKSB7XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG4gIGxldCBpO1xuICBsZXQgajtcbiAgZm9yIChpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCB0b0FkZCA9ICQoYXJnc1tpXSk7XG4gICAgZm9yIChqID0gMDsgaiA8IHRvQWRkLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICBkb21bZG9tLmxlbmd0aF0gPSB0b0FkZFtqXTtcbiAgICAgIGRvbS5sZW5ndGggKz0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRvbTtcbn1cbmZ1bmN0aW9uIGVtcHR5KCkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBlbCA9IHRoaXNbaV07XG4gICAgaWYgKGVsLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGVsLmNoaWxkTm9kZXMubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgaWYgKGVsLmNoaWxkTm9kZXNbal0ucGFyZW50Tm9kZSkge1xuICAgICAgICAgIGVsLmNoaWxkTm9kZXNbal0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChlbC5jaGlsZE5vZGVzW2pdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWwudGV4dENvbnRlbnQgPSAnJztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmZ1bmN0aW9uIHNjcm9sbFRvKC4uLmFyZ3MpIHtcbiAgbGV0IFtsZWZ0LCB0b3AsIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrXSA9IGFyZ3M7XG4gIGlmIChhcmdzLmxlbmd0aCA9PT0gNCAmJiB0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2FsbGJhY2sgPSBlYXNpbmc7XG4gICAgW2xlZnQsIHRvcCwgZHVyYXRpb24sIGNhbGxiYWNrLCBlYXNpbmddID0gYXJncztcbiAgfVxuICBpZiAodHlwZW9mIGVhc2luZyA9PT0gJ3VuZGVmaW5lZCcpIGVhc2luZyA9ICdzd2luZyc7XG5cbiAgcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbiBhbmltYXRlKCkge1xuICAgIGNvbnN0IGVsID0gdGhpcztcbiAgICBsZXQgY3VycmVudFRvcDtcbiAgICBsZXQgY3VycmVudExlZnQ7XG4gICAgbGV0IG1heFRvcDtcbiAgICBsZXQgbWF4TGVmdDtcbiAgICBsZXQgbmV3VG9wO1xuICAgIGxldCBuZXdMZWZ0O1xuICAgIGxldCBzY3JvbGxUb3A7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICBsZXQgc2Nyb2xsTGVmdDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIGxldCBhbmltYXRlVG9wID0gdG9wID4gMCB8fCB0b3AgPT09IDA7XG4gICAgbGV0IGFuaW1hdGVMZWZ0ID0gbGVmdCA+IDAgfHwgbGVmdCA9PT0gMDtcbiAgICBpZiAodHlwZW9mIGVhc2luZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGVhc2luZyA9ICdzd2luZyc7XG4gICAgfVxuICAgIGlmIChhbmltYXRlVG9wKSB7XG4gICAgICBjdXJyZW50VG9wID0gZWwuc2Nyb2xsVG9wO1xuICAgICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgICBlbC5zY3JvbGxUb3AgPSB0b3A7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChhbmltYXRlTGVmdCkge1xuICAgICAgY3VycmVudExlZnQgPSBlbC5zY3JvbGxMZWZ0O1xuICAgICAgaWYgKCFkdXJhdGlvbikge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbGVmdDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFkdXJhdGlvbikgcmV0dXJuO1xuICAgIGlmIChhbmltYXRlVG9wKSB7XG4gICAgICBtYXhUb3AgPSBlbC5zY3JvbGxIZWlnaHQgLSBlbC5vZmZzZXRIZWlnaHQ7XG4gICAgICBuZXdUb3AgPSBNYXRoLm1heChNYXRoLm1pbih0b3AsIG1heFRvcCksIDApO1xuICAgIH1cbiAgICBpZiAoYW5pbWF0ZUxlZnQpIHtcbiAgICAgIG1heExlZnQgPSBlbC5zY3JvbGxXaWR0aCAtIGVsLm9mZnNldFdpZHRoO1xuICAgICAgbmV3TGVmdCA9IE1hdGgubWF4KE1hdGgubWluKGxlZnQsIG1heExlZnQpLCAwKTtcbiAgICB9XG4gICAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XG4gICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wID09PSBjdXJyZW50VG9wKSBhbmltYXRlVG9wID0gZmFsc2U7XG4gICAgaWYgKGFuaW1hdGVMZWZ0ICYmIG5ld0xlZnQgPT09IGN1cnJlbnRMZWZ0KSBhbmltYXRlTGVmdCA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIHJlbmRlcih0aW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCkpIHtcbiAgICAgIGlmIChzdGFydFRpbWUgPT09IG51bGwpIHtcbiAgICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHByb2dyZXNzID0gTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gZHVyYXRpb24sIDEpLCAwKTtcbiAgICAgIGNvbnN0IGVhc2VQcm9ncmVzcyA9IGVhc2luZyA9PT0gJ2xpbmVhcicgPyBwcm9ncmVzcyA6ICgwLjUgLSAoTWF0aC5jb3MocHJvZ3Jlc3MgKiBNYXRoLlBJKSAvIDIpKTtcbiAgICAgIGxldCBkb25lO1xuICAgICAgaWYgKGFuaW1hdGVUb3ApIHNjcm9sbFRvcCA9IGN1cnJlbnRUb3AgKyAoZWFzZVByb2dyZXNzICogKG5ld1RvcCAtIGN1cnJlbnRUb3ApKTtcbiAgICAgIGlmIChhbmltYXRlTGVmdCkgc2Nyb2xsTGVmdCA9IGN1cnJlbnRMZWZ0ICsgKGVhc2VQcm9ncmVzcyAqIChuZXdMZWZ0IC0gY3VycmVudExlZnQpKTtcbiAgICAgIGlmIChhbmltYXRlVG9wICYmIG5ld1RvcCA+IGN1cnJlbnRUb3AgJiYgc2Nyb2xsVG9wID49IG5ld1RvcCkge1xuICAgICAgICBlbC5zY3JvbGxUb3AgPSBuZXdUb3A7XG4gICAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGFuaW1hdGVUb3AgJiYgbmV3VG9wIDwgY3VycmVudFRvcCAmJiBzY3JvbGxUb3AgPD0gbmV3VG9wKSB7XG4gICAgICAgIGVsLnNjcm9sbFRvcCA9IG5ld1RvcDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA+IGN1cnJlbnRMZWZ0ICYmIHNjcm9sbExlZnQgPj0gbmV3TGVmdCkge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbmV3TGVmdDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoYW5pbWF0ZUxlZnQgJiYgbmV3TGVmdCA8IGN1cnJlbnRMZWZ0ICYmIHNjcm9sbExlZnQgPD0gbmV3TGVmdCkge1xuICAgICAgICBlbC5zY3JvbGxMZWZ0ID0gbmV3TGVmdDtcbiAgICAgICAgZG9uZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGFuaW1hdGVUb3ApIGVsLnNjcm9sbFRvcCA9IHNjcm9sbFRvcDtcbiAgICAgIGlmIChhbmltYXRlTGVmdCkgZWwuc2Nyb2xsTGVmdCA9IHNjcm9sbExlZnQ7XG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICB9XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gIH0pO1xufVxuLy8gc2Nyb2xsVG9wKHRvcCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spIHtcbmZ1bmN0aW9uIHNjcm9sbFRvcCguLi5hcmdzKSB7XG4gIGxldCBbdG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFja10gPSBhcmdzO1xuICBpZiAoYXJncy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFt0b3AsIGR1cmF0aW9uLCBjYWxsYmFjaywgZWFzaW5nXSA9IGFyZ3M7XG4gIH1cbiAgY29uc3QgZG9tID0gdGhpcztcbiAgaWYgKHR5cGVvZiB0b3AgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgaWYgKGRvbS5sZW5ndGggPiAwKSByZXR1cm4gZG9tWzBdLnNjcm9sbFRvcDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gZG9tLnNjcm9sbFRvKHVuZGVmaW5lZCwgdG9wLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjayk7XG59XG5mdW5jdGlvbiBzY3JvbGxMZWZ0KC4uLmFyZ3MpIHtcbiAgbGV0IFtsZWZ0LCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFja10gPSBhcmdzO1xuICBpZiAoYXJncy5sZW5ndGggPT09IDMgJiYgdHlwZW9mIGVhc2luZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIFtsZWZ0LCBkdXJhdGlvbiwgY2FsbGJhY2ssIGVhc2luZ10gPSBhcmdzO1xuICB9XG4gIGNvbnN0IGRvbSA9IHRoaXM7XG4gIGlmICh0eXBlb2YgbGVmdCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAoZG9tLmxlbmd0aCA+IDApIHJldHVybiBkb21bMF0uc2Nyb2xsTGVmdDtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICByZXR1cm4gZG9tLnNjcm9sbFRvKGxlZnQsIHVuZGVmaW5lZCwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spO1xufVxuXG5mdW5jdGlvbiBhbmltYXRlKGluaXRpYWxQcm9wcywgaW5pdGlhbFBhcmFtcykge1xuICBjb25zdCBlbHMgPSB0aGlzO1xuICBjb25zdCBhID0ge1xuICAgIHByb3BzOiBPYmplY3QuYXNzaWduKHt9LCBpbml0aWFsUHJvcHMpLFxuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7XG4gICAgICBkdXJhdGlvbjogMzAwLFxuICAgICAgZWFzaW5nOiAnc3dpbmcnLCAvLyBvciAnbGluZWFyJ1xuICAgICAgLyogQ2FsbGJhY2tzXG4gICAgICBiZWdpbihlbGVtZW50cylcbiAgICAgIGNvbXBsZXRlKGVsZW1lbnRzKVxuICAgICAgcHJvZ3Jlc3MoZWxlbWVudHMsIGNvbXBsZXRlLCByZW1haW5pbmcsIHN0YXJ0LCB0d2VlblZhbHVlKVxuICAgICAgKi9cbiAgICB9LCBpbml0aWFsUGFyYW1zKSxcblxuICAgIGVsZW1lbnRzOiBlbHMsXG4gICAgYW5pbWF0aW5nOiBmYWxzZSxcbiAgICBxdWU6IFtdLFxuXG4gICAgZWFzaW5nUHJvZ3Jlc3MoZWFzaW5nLCBwcm9ncmVzcykge1xuICAgICAgaWYgKGVhc2luZyA9PT0gJ3N3aW5nJykge1xuICAgICAgICByZXR1cm4gMC41IC0gKE1hdGguY29zKHByb2dyZXNzICogTWF0aC5QSSkgLyAyKTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgZWFzaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBlYXNpbmcocHJvZ3Jlc3MpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb2dyZXNzO1xuICAgIH0sXG4gICAgc3RvcCgpIHtcbiAgICAgIGlmIChhLmZyYW1lSWQpIHtcbiAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUoYS5mcmFtZUlkKTtcbiAgICAgIH1cbiAgICAgIGEuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICBhLmVsZW1lbnRzLmVhY2goKGluZGV4LCBlbCkgPT4ge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gZWw7XG4gICAgICAgIGRlbGV0ZSBlbGVtZW50LmRvbTdBbmltYXRlSW5zdGFuY2U7XG4gICAgICB9KTtcbiAgICAgIGEucXVlID0gW107XG4gICAgfSxcbiAgICBkb25lKGNvbXBsZXRlKSB7XG4gICAgICBhLmFuaW1hdGluZyA9IGZhbHNlO1xuICAgICAgYS5lbGVtZW50cy5lYWNoKChpbmRleCwgZWwpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGVsO1xuICAgICAgICBkZWxldGUgZWxlbWVudC5kb203QW5pbWF0ZUluc3RhbmNlO1xuICAgICAgfSk7XG4gICAgICBpZiAoY29tcGxldGUpIGNvbXBsZXRlKGVscyk7XG4gICAgICBpZiAoYS5xdWUubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBxdWUgPSBhLnF1ZS5zaGlmdCgpO1xuICAgICAgICBhLmFuaW1hdGUocXVlWzBdLCBxdWVbMV0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgYW5pbWF0ZShwcm9wcywgcGFyYW1zKSB7XG4gICAgICBpZiAoYS5hbmltYXRpbmcpIHtcbiAgICAgICAgYS5xdWUucHVzaChbcHJvcHMsIHBhcmFtc10pO1xuICAgICAgICByZXR1cm4gYTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGVsZW1lbnRzID0gW107XG5cbiAgICAgIC8vIERlZmluZSAmIENhY2hlIEluaXRpYWxzICYgVW5pdHNcbiAgICAgIGEuZWxlbWVudHMuZWFjaCgoaW5kZXgsIGVsKSA9PiB7XG4gICAgICAgIGxldCBpbml0aWFsRnVsbFZhbHVlO1xuICAgICAgICBsZXQgaW5pdGlhbFZhbHVlO1xuICAgICAgICBsZXQgdW5pdDtcbiAgICAgICAgbGV0IGZpbmFsVmFsdWU7XG4gICAgICAgIGxldCBmaW5hbEZ1bGxWYWx1ZTtcblxuICAgICAgICBpZiAoIWVsLmRvbTdBbmltYXRlSW5zdGFuY2UpIGEuZWxlbWVudHNbaW5kZXhdLmRvbTdBbmltYXRlSW5zdGFuY2UgPSBhO1xuXG4gICAgICAgIGVsZW1lbnRzW2luZGV4XSA9IHtcbiAgICAgICAgICBjb250YWluZXI6IGVsLFxuICAgICAgICB9O1xuICAgICAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgICAgICAgIGluaXRpYWxGdWxsVmFsdWUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wKS5yZXBsYWNlKCcsJywgJy4nKTtcbiAgICAgICAgICBpbml0aWFsVmFsdWUgPSBwYXJzZUZsb2F0KGluaXRpYWxGdWxsVmFsdWUpO1xuICAgICAgICAgIHVuaXQgPSBpbml0aWFsRnVsbFZhbHVlLnJlcGxhY2UoaW5pdGlhbFZhbHVlLCAnJyk7XG4gICAgICAgICAgZmluYWxWYWx1ZSA9IHBhcnNlRmxvYXQocHJvcHNbcHJvcF0pO1xuICAgICAgICAgIGZpbmFsRnVsbFZhbHVlID0gcHJvcHNbcHJvcF0gKyB1bml0O1xuICAgICAgICAgIGVsZW1lbnRzW2luZGV4XVtwcm9wXSA9IHtcbiAgICAgICAgICAgIGluaXRpYWxGdWxsVmFsdWUsXG4gICAgICAgICAgICBpbml0aWFsVmFsdWUsXG4gICAgICAgICAgICB1bml0LFxuICAgICAgICAgICAgZmluYWxWYWx1ZSxcbiAgICAgICAgICAgIGZpbmFsRnVsbFZhbHVlLFxuICAgICAgICAgICAgY3VycmVudFZhbHVlOiBpbml0aWFsVmFsdWUsXG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcblxuICAgICAgbGV0IHN0YXJ0VGltZSA9IG51bGw7XG4gICAgICBsZXQgdGltZTtcbiAgICAgIGxldCBlbGVtZW50c0RvbmUgPSAwO1xuICAgICAgbGV0IHByb3BzRG9uZSA9IDA7XG4gICAgICBsZXQgZG9uZTtcbiAgICAgIGxldCBiZWdhbiA9IGZhbHNlO1xuXG4gICAgICBhLmFuaW1hdGluZyA9IHRydWU7XG5cbiAgICAgIGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgdGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgICAgICBsZXQgcHJvZ3Jlc3M7XG4gICAgICAgIGxldCBlYXNlUHJvZ3Jlc3M7XG4gICAgICAgIC8vIGxldCBlbDtcbiAgICAgICAgaWYgKCFiZWdhbikge1xuICAgICAgICAgIGJlZ2FuID0gdHJ1ZTtcbiAgICAgICAgICBpZiAocGFyYW1zLmJlZ2luKSBwYXJhbXMuYmVnaW4oZWxzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhcnRUaW1lID09PSBudWxsKSB7XG4gICAgICAgICAgc3RhcnRUaW1lID0gdGltZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFyYW1zLnByb2dyZXNzKSB7XG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgICAgcGFyYW1zLnByb2dyZXNzKGVscywgTWF0aC5tYXgoTWF0aC5taW4oKHRpbWUgLSBzdGFydFRpbWUpIC8gcGFyYW1zLmR1cmF0aW9uLCAxKSwgMCksICgoc3RhcnRUaW1lICsgcGFyYW1zLmR1cmF0aW9uKSAtIHRpbWUgPCAwID8gMCA6IChzdGFydFRpbWUgKyBwYXJhbXMuZHVyYXRpb24pIC0gdGltZSksIHN0YXJ0VGltZSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbGVtZW50cy5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgY29uc3QgZWwgPSBlbGVtZW50O1xuICAgICAgICAgIGlmIChkb25lIHx8IGVsLmRvbmUpIHJldHVybjtcbiAgICAgICAgICBPYmplY3Qua2V5cyhwcm9wcykuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgICAgICAgICAgaWYgKGRvbmUgfHwgZWwuZG9uZSkgcmV0dXJuO1xuICAgICAgICAgICAgcHJvZ3Jlc3MgPSBNYXRoLm1heChNYXRoLm1pbigodGltZSAtIHN0YXJ0VGltZSkgLyBwYXJhbXMuZHVyYXRpb24sIDEpLCAwKTtcbiAgICAgICAgICAgIGVhc2VQcm9ncmVzcyA9IGEuZWFzaW5nUHJvZ3Jlc3MocGFyYW1zLmVhc2luZywgcHJvZ3Jlc3MpO1xuICAgICAgICAgICAgY29uc3QgeyBpbml0aWFsVmFsdWUsIGZpbmFsVmFsdWUsIHVuaXQgfSA9IGVsW3Byb3BdO1xuICAgICAgICAgICAgZWxbcHJvcF0uY3VycmVudFZhbHVlID0gaW5pdGlhbFZhbHVlICsgKGVhc2VQcm9ncmVzcyAqIChmaW5hbFZhbHVlIC0gaW5pdGlhbFZhbHVlKSk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPSBlbFtwcm9wXS5jdXJyZW50VmFsdWU7XG5cbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgKGZpbmFsVmFsdWUgPiBpbml0aWFsVmFsdWUgJiYgY3VycmVudFZhbHVlID49IGZpbmFsVmFsdWUpIHx8XG4gICAgICAgICAgICAgIChmaW5hbFZhbHVlIDwgaW5pdGlhbFZhbHVlICYmIGN1cnJlbnRWYWx1ZSA8PSBmaW5hbFZhbHVlKSkge1xuICAgICAgICAgICAgICBlbC5jb250YWluZXIuc3R5bGVbcHJvcF0gPSBmaW5hbFZhbHVlICsgdW5pdDtcbiAgICAgICAgICAgICAgcHJvcHNEb25lICs9IDE7XG4gICAgICAgICAgICAgIGlmIChwcm9wc0RvbmUgPT09IE9iamVjdC5rZXlzKHByb3BzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBlbC5kb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBlbGVtZW50c0RvbmUgKz0gMTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZWxlbWVudHNEb25lID09PSBlbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgYS5kb25lKHBhcmFtcy5jb21wbGV0ZSk7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsLmNvbnRhaW5lci5zdHlsZVtwcm9wXSA9IGN1cnJlbnRWYWx1ZSArIHVuaXQ7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoZG9uZSkgcmV0dXJuO1xuICAgICAgICAvLyBUaGVuIGNhbGxcbiAgICAgICAgYS5mcmFtZUlkID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgICB9XG4gICAgICBhLmZyYW1lSWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgIHJldHVybiBhO1xuICAgIH0sXG4gIH07XG5cbiAgaWYgKGEuZWxlbWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIGVscztcbiAgfVxuXG4gIGxldCBhbmltYXRlSW5zdGFuY2U7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5lbGVtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmIChhLmVsZW1lbnRzW2ldLmRvbTdBbmltYXRlSW5zdGFuY2UpIHtcbiAgICAgIGFuaW1hdGVJbnN0YW5jZSA9IGEuZWxlbWVudHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZTtcbiAgICB9IGVsc2UgYS5lbGVtZW50c1tpXS5kb203QW5pbWF0ZUluc3RhbmNlID0gYTtcbiAgfVxuICBpZiAoIWFuaW1hdGVJbnN0YW5jZSkge1xuICAgIGFuaW1hdGVJbnN0YW5jZSA9IGE7XG4gIH1cblxuICBpZiAoaW5pdGlhbFByb3BzID09PSAnc3RvcCcpIHtcbiAgICBhbmltYXRlSW5zdGFuY2Uuc3RvcCgpO1xuICB9IGVsc2Uge1xuICAgIGFuaW1hdGVJbnN0YW5jZS5hbmltYXRlKGEucHJvcHMsIGEucGFyYW1zKTtcbiAgfVxuXG4gIHJldHVybiBlbHM7XG59XG5cbmZ1bmN0aW9uIHN0b3AoKSB7XG4gIGNvbnN0IGVscyA9IHRoaXM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWxzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgaWYgKGVsc1tpXS5kb203QW5pbWF0ZUluc3RhbmNlKSB7XG4gICAgICBlbHNbaV0uZG9tN0FuaW1hdGVJbnN0YW5jZS5zdG9wKCk7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IG5vVHJpZ2dlciA9ICgncmVzaXplIHNjcm9sbCcpLnNwbGl0KCcgJyk7XG5mdW5jdGlvbiBldmVudFNob3J0Y3V0KG5hbWUsIC4uLmFyZ3MpIHtcbiAgaWYgKHR5cGVvZiBhcmdzWzBdID09PSAndW5kZWZpbmVkJykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKG5vVHJpZ2dlci5pbmRleE9mKG5hbWUpIDwgMCkge1xuICAgICAgICBpZiAobmFtZSBpbiB0aGlzW2ldKSB0aGlzW2ldW25hbWVdKCk7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICQodGhpc1tpXSkudHJpZ2dlcihuYW1lKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICByZXR1cm4gdGhpcy5vbihuYW1lLCAuLi5hcmdzKTtcbn1cblxuZnVuY3Rpb24gY2xpY2soLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdjbGljaycsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gYmx1ciguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ2JsdXInLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIGZvY3VzKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgnZm9jdXMnLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIGZvY3VzaW4oLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdmb2N1c2luJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBmb2N1c291dCguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ2ZvY3Vzb3V0JywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBrZXl1cCguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ2tleXVwJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBrZXlkb3duKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgna2V5ZG93bicsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24ga2V5cHJlc3MoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdrZXlwcmVzcycsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gc3VibWl0KC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgnc3VibWl0JywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBjaGFuZ2UoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdjaGFuZ2UnLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIG1vdXNlZG93biguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ21vdXNlZG93bicsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gbW91c2Vtb3ZlKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgnbW91c2Vtb3ZlJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBtb3VzZXVwKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgnbW91c2V1cCcsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gbW91c2VlbnRlciguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ21vdXNlZW50ZXInLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIG1vdXNlbGVhdmUoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdtb3VzZWxlYXZlJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBtb3VzZW91dCguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ21vdXNlb3V0JywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiBtb3VzZW92ZXIoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCdtb3VzZW92ZXInLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIHRvdWNoc3RhcnQoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCd0b3VjaHN0YXJ0JywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiB0b3VjaGVuZCguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ3RvdWNoZW5kJywgLi4uYXJncyk7XG59XG5mdW5jdGlvbiB0b3VjaG1vdmUoLi4uYXJncykge1xuICByZXR1cm4gZXZlbnRTaG9ydGN1dC5iaW5kKHRoaXMpKCd0b3VjaG1vdmUnLCAuLi5hcmdzKTtcbn1cbmZ1bmN0aW9uIHJlc2l6ZSguLi5hcmdzKSB7XG4gIHJldHVybiBldmVudFNob3J0Y3V0LmJpbmQodGhpcykoJ3Jlc2l6ZScsIC4uLmFyZ3MpO1xufVxuZnVuY3Rpb24gc2Nyb2xsKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGV2ZW50U2hvcnRjdXQuYmluZCh0aGlzKSgnc2Nyb2xsJywgLi4uYXJncyk7XG59XG5cbmV4cG9ydCB7ICQsIGFkZENsYXNzLCByZW1vdmVDbGFzcywgaGFzQ2xhc3MsIHRvZ2dsZUNsYXNzLCBhdHRyLCByZW1vdmVBdHRyLCBwcm9wLCBkYXRhLCByZW1vdmVEYXRhLCBkYXRhc2V0LCB2YWwsIHRyYW5zZm9ybSwgdHJhbnNpdGlvbiwgb24sIG9mZiwgb25jZSwgdHJpZ2dlciwgdHJhbnNpdGlvbkVuZCwgYW5pbWF0aW9uRW5kLCB3aWR0aCwgb3V0ZXJXaWR0aCwgaGVpZ2h0LCBvdXRlckhlaWdodCwgb2Zmc2V0LCBoaWRlLCBzaG93LCBzdHlsZXMsIGNzcywgdG9BcnJheSwgZWFjaCwgZm9yRWFjaCwgZmlsdGVyLCBtYXAsIGh0bWwsIHRleHQsIGlzLCBpbmRleE9mLCBpbmRleCwgZXEsIGFwcGVuZCwgYXBwZW5kVG8sIHByZXBlbmQsIHByZXBlbmRUbywgaW5zZXJ0QmVmb3JlLCBpbnNlcnRBZnRlciwgbmV4dCwgbmV4dEFsbCwgcHJldiwgcHJldkFsbCwgc2libGluZ3MsIHBhcmVudCwgcGFyZW50cywgY2xvc2VzdCwgZmluZCwgY2hpbGRyZW4sIHJlbW92ZSwgZGV0YWNoLCBhZGQsIGVtcHR5LCBzY3JvbGxUbywgc2Nyb2xsVG9wLCBzY3JvbGxMZWZ0LCBhbmltYXRlLCBzdG9wLCBjbGljaywgYmx1ciwgZm9jdXMsIGZvY3VzaW4sIGZvY3Vzb3V0LCBrZXl1cCwga2V5ZG93biwga2V5cHJlc3MsIHN1Ym1pdCwgY2hhbmdlLCBtb3VzZWRvd24sIG1vdXNlbW92ZSwgbW91c2V1cCwgbW91c2VlbnRlciwgbW91c2VsZWF2ZSwgbW91c2VvdXQsIG1vdXNlb3ZlciwgdG91Y2hzdGFydCwgdG91Y2hlbmQsIHRvdWNobW92ZSwgcmVzaXplLCBzY3JvbGwgfTtcbiIsIi8qKlxuICogU3dpcGVyIDQuNS4xXG4gKiBNb3N0IG1vZGVybiBtb2JpbGUgdG91Y2ggc2xpZGVyIGFuZCBmcmFtZXdvcmsgd2l0aCBoYXJkd2FyZSBhY2NlbGVyYXRlZCB0cmFuc2l0aW9uc1xuICogaHR0cDovL3d3dy5pZGFuZ2Vyby51cy9zd2lwZXIvXG4gKlxuICogQ29weXJpZ2h0IDIwMTQtMjAxOSBWbGFkaW1pciBLaGFybGFtcGlkaVxuICpcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZVxuICpcbiAqIFJlbGVhc2VkIG9uOiBTZXB0ZW1iZXIgMTMsIDIwMTlcbiAqL1xuXG5pbXBvcnQgeyAkLCBhZGRDbGFzcywgcmVtb3ZlQ2xhc3MsIGhhc0NsYXNzLCB0b2dnbGVDbGFzcywgYXR0ciwgcmVtb3ZlQXR0ciwgZGF0YSwgdHJhbnNmb3JtLCB0cmFuc2l0aW9uIGFzIHRyYW5zaXRpb24kMSwgb24sIG9mZiwgdHJpZ2dlciwgdHJhbnNpdGlvbkVuZCBhcyB0cmFuc2l0aW9uRW5kJDEsIG91dGVyV2lkdGgsIG91dGVySGVpZ2h0LCBvZmZzZXQsIGNzcywgZWFjaCwgaHRtbCwgdGV4dCwgaXMsIGluZGV4LCBlcSwgYXBwZW5kLCBwcmVwZW5kLCBuZXh0LCBuZXh0QWxsLCBwcmV2LCBwcmV2QWxsLCBwYXJlbnQsIHBhcmVudHMsIGNsb3Nlc3QsIGZpbmQsIGNoaWxkcmVuLCByZW1vdmUsIGFkZCwgc3R5bGVzIH0gZnJvbSAnZG9tNy9kaXN0L2RvbTcubW9kdWxhcic7XG5pbXBvcnQgeyB3aW5kb3csIGRvY3VtZW50IH0gZnJvbSAnc3NyLXdpbmRvdyc7XG5cbmNvbnN0IE1ldGhvZHMgPSB7XG4gIGFkZENsYXNzLFxuICByZW1vdmVDbGFzcyxcbiAgaGFzQ2xhc3MsXG4gIHRvZ2dsZUNsYXNzLFxuICBhdHRyLFxuICByZW1vdmVBdHRyLFxuICBkYXRhLFxuICB0cmFuc2Zvcm0sXG4gIHRyYW5zaXRpb246IHRyYW5zaXRpb24kMSxcbiAgb24sXG4gIG9mZixcbiAgdHJpZ2dlcixcbiAgdHJhbnNpdGlvbkVuZDogdHJhbnNpdGlvbkVuZCQxLFxuICBvdXRlcldpZHRoLFxuICBvdXRlckhlaWdodCxcbiAgb2Zmc2V0LFxuICBjc3MsXG4gIGVhY2gsXG4gIGh0bWwsXG4gIHRleHQsXG4gIGlzLFxuICBpbmRleCxcbiAgZXEsXG4gIGFwcGVuZCxcbiAgcHJlcGVuZCxcbiAgbmV4dCxcbiAgbmV4dEFsbCxcbiAgcHJldixcbiAgcHJldkFsbCxcbiAgcGFyZW50LFxuICBwYXJlbnRzLFxuICBjbG9zZXN0LFxuICBmaW5kLFxuICBjaGlsZHJlbixcbiAgcmVtb3ZlLFxuICBhZGQsXG4gIHN0eWxlcyxcbn07XG5cbk9iamVjdC5rZXlzKE1ldGhvZHMpLmZvckVhY2goKG1ldGhvZE5hbWUpID0+IHtcbiAgJC5mblttZXRob2ROYW1lXSA9ICQuZm5bbWV0aG9kTmFtZV0gfHwgTWV0aG9kc1ttZXRob2ROYW1lXTtcbn0pO1xuXG5jb25zdCBVdGlscyA9IHtcbiAgZGVsZXRlUHJvcHMob2JqKSB7XG4gICAgY29uc3Qgb2JqZWN0ID0gb2JqO1xuICAgIE9iamVjdC5rZXlzKG9iamVjdCkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICB0cnkge1xuICAgICAgICBvYmplY3Rba2V5XSA9IG51bGw7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIG5vIGdldHRlciBmb3Igb2JqZWN0XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICBkZWxldGUgb2JqZWN0W2tleV07XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIHNvbWV0aGluZyBnb3Qgd3JvbmdcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgbmV4dFRpY2soY2FsbGJhY2ssIGRlbGF5ID0gMCkge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGNhbGxiYWNrLCBkZWxheSk7XG4gIH0sXG4gIG5vdygpIHtcbiAgICByZXR1cm4gRGF0ZS5ub3coKTtcbiAgfSxcbiAgZ2V0VHJhbnNsYXRlKGVsLCBheGlzID0gJ3gnKSB7XG4gICAgbGV0IG1hdHJpeDtcbiAgICBsZXQgY3VyVHJhbnNmb3JtO1xuICAgIGxldCB0cmFuc2Zvcm1NYXRyaXg7XG5cbiAgICBjb25zdCBjdXJTdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsLCBudWxsKTtcblxuICAgIGlmICh3aW5kb3cuV2ViS2l0Q1NTTWF0cml4KSB7XG4gICAgICBjdXJUcmFuc2Zvcm0gPSBjdXJTdHlsZS50cmFuc2Zvcm0gfHwgY3VyU3R5bGUud2Via2l0VHJhbnNmb3JtO1xuICAgICAgaWYgKGN1clRyYW5zZm9ybS5zcGxpdCgnLCcpLmxlbmd0aCA+IDYpIHtcbiAgICAgICAgY3VyVHJhbnNmb3JtID0gY3VyVHJhbnNmb3JtLnNwbGl0KCcsICcpLm1hcCgoYSkgPT4gYS5yZXBsYWNlKCcsJywgJy4nKSkuam9pbignLCAnKTtcbiAgICAgIH1cbiAgICAgIC8vIFNvbWUgb2xkIHZlcnNpb25zIG9mIFdlYmtpdCBjaG9rZSB3aGVuICdub25lJyBpcyBwYXNzZWQ7IHBhc3NcbiAgICAgIC8vIGVtcHR5IHN0cmluZyBpbnN0ZWFkIGluIHRoaXMgY2FzZVxuICAgICAgdHJhbnNmb3JtTWF0cml4ID0gbmV3IHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgoY3VyVHJhbnNmb3JtID09PSAnbm9uZScgPyAnJyA6IGN1clRyYW5zZm9ybSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zZm9ybU1hdHJpeCA9IGN1clN0eWxlLk1velRyYW5zZm9ybSB8fCBjdXJTdHlsZS5PVHJhbnNmb3JtIHx8IGN1clN0eWxlLk1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLm1zVHJhbnNmb3JtIHx8IGN1clN0eWxlLnRyYW5zZm9ybSB8fCBjdXJTdHlsZS5nZXRQcm9wZXJ0eVZhbHVlKCd0cmFuc2Zvcm0nKS5yZXBsYWNlKCd0cmFuc2xhdGUoJywgJ21hdHJpeCgxLCAwLCAwLCAxLCcpO1xuICAgICAgbWF0cml4ID0gdHJhbnNmb3JtTWF0cml4LnRvU3RyaW5nKCkuc3BsaXQoJywnKTtcbiAgICB9XG5cbiAgICBpZiAoYXhpcyA9PT0gJ3gnKSB7XG4gICAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDE7XG4gICAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEyXSk7XG4gICAgICAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNF0pO1xuICAgIH1cbiAgICBpZiAoYXhpcyA9PT0gJ3knKSB7XG4gICAgICAvLyBMYXRlc3QgQ2hyb21lIGFuZCB3ZWJraXRzIEZpeFxuICAgICAgaWYgKHdpbmRvdy5XZWJLaXRDU1NNYXRyaXgpIGN1clRyYW5zZm9ybSA9IHRyYW5zZm9ybU1hdHJpeC5tNDI7XG4gICAgICAvLyBDcmF6eSBJRTEwIE1hdHJpeFxuICAgICAgZWxzZSBpZiAobWF0cml4Lmxlbmd0aCA9PT0gMTYpIGN1clRyYW5zZm9ybSA9IHBhcnNlRmxvYXQobWF0cml4WzEzXSk7XG4gICAgICAvLyBOb3JtYWwgQnJvd3NlcnNcbiAgICAgIGVsc2UgY3VyVHJhbnNmb3JtID0gcGFyc2VGbG9hdChtYXRyaXhbNV0pO1xuICAgIH1cbiAgICByZXR1cm4gY3VyVHJhbnNmb3JtIHx8IDA7XG4gIH0sXG4gIHBhcnNlVXJsUXVlcnkodXJsKSB7XG4gICAgY29uc3QgcXVlcnkgPSB7fTtcbiAgICBsZXQgdXJsVG9QYXJzZSA9IHVybCB8fCB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICBsZXQgaTtcbiAgICBsZXQgcGFyYW1zO1xuICAgIGxldCBwYXJhbTtcbiAgICBsZXQgbGVuZ3RoO1xuICAgIGlmICh0eXBlb2YgdXJsVG9QYXJzZSA9PT0gJ3N0cmluZycgJiYgdXJsVG9QYXJzZS5sZW5ndGgpIHtcbiAgICAgIHVybFRvUGFyc2UgPSB1cmxUb1BhcnNlLmluZGV4T2YoJz8nKSA+IC0xID8gdXJsVG9QYXJzZS5yZXBsYWNlKC9cXFMqXFw/LywgJycpIDogJyc7XG4gICAgICBwYXJhbXMgPSB1cmxUb1BhcnNlLnNwbGl0KCcmJykuZmlsdGVyKChwYXJhbXNQYXJ0KSA9PiBwYXJhbXNQYXJ0ICE9PSAnJyk7XG4gICAgICBsZW5ndGggPSBwYXJhbXMubGVuZ3RoO1xuXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgcGFyYW0gPSBwYXJhbXNbaV0ucmVwbGFjZSgvI1xcUysvZywgJycpLnNwbGl0KCc9Jyk7XG4gICAgICAgIHF1ZXJ5W2RlY29kZVVSSUNvbXBvbmVudChwYXJhbVswXSldID0gdHlwZW9mIHBhcmFtWzFdID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IGRlY29kZVVSSUNvbXBvbmVudChwYXJhbVsxXSkgfHwgJyc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBxdWVyeTtcbiAgfSxcbiAgaXNPYmplY3Qobykge1xuICAgIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgbyAhPT0gbnVsbCAmJiBvLmNvbnN0cnVjdG9yICYmIG8uY29uc3RydWN0b3IgPT09IE9iamVjdDtcbiAgfSxcbiAgZXh0ZW5kKC4uLmFyZ3MpIHtcbiAgICBjb25zdCB0byA9IE9iamVjdChhcmdzWzBdKTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFyZ3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0IG5leHRTb3VyY2UgPSBhcmdzW2ldO1xuICAgICAgaWYgKG5leHRTb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBuZXh0U291cmNlICE9PSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGtleXNBcnJheSA9IE9iamVjdC5rZXlzKE9iamVjdChuZXh0U291cmNlKSk7XG4gICAgICAgIGZvciAobGV0IG5leHRJbmRleCA9IDAsIGxlbiA9IGtleXNBcnJheS5sZW5ndGg7IG5leHRJbmRleCA8IGxlbjsgbmV4dEluZGV4ICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBuZXh0S2V5ID0ga2V5c0FycmF5W25leHRJbmRleF07XG4gICAgICAgICAgY29uc3QgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobmV4dFNvdXJjZSwgbmV4dEtleSk7XG4gICAgICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCAmJiBkZXNjLmVudW1lcmFibGUpIHtcbiAgICAgICAgICAgIGlmIChVdGlscy5pc09iamVjdCh0b1tuZXh0S2V5XSkgJiYgVXRpbHMuaXNPYmplY3QobmV4dFNvdXJjZVtuZXh0S2V5XSkpIHtcbiAgICAgICAgICAgICAgVXRpbHMuZXh0ZW5kKHRvW25leHRLZXldLCBuZXh0U291cmNlW25leHRLZXldKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIVV0aWxzLmlzT2JqZWN0KHRvW25leHRLZXldKSAmJiBVdGlscy5pc09iamVjdChuZXh0U291cmNlW25leHRLZXldKSkge1xuICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IHt9O1xuICAgICAgICAgICAgICBVdGlscy5leHRlbmQodG9bbmV4dEtleV0sIG5leHRTb3VyY2VbbmV4dEtleV0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdG9bbmV4dEtleV0gPSBuZXh0U291cmNlW25leHRLZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdG87XG4gIH0sXG59O1xuXG5jb25zdCBTdXBwb3J0ID0gKGZ1bmN0aW9uIFN1cHBvcnQoKSB7XG4gIGNvbnN0IHRlc3REaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgcmV0dXJuIHtcbiAgICB0b3VjaDogKHdpbmRvdy5Nb2Rlcm5penIgJiYgd2luZG93Lk1vZGVybml6ci50b3VjaCA9PT0gdHJ1ZSkgfHwgKGZ1bmN0aW9uIGNoZWNrVG91Y2goKSB7XG4gICAgICByZXR1cm4gISEoKHdpbmRvdy5uYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwKSB8fCAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KSB8fCAod2luZG93LkRvY3VtZW50VG91Y2ggJiYgZG9jdW1lbnQgaW5zdGFuY2VvZiB3aW5kb3cuRG9jdW1lbnRUb3VjaCkpO1xuICAgIH0oKSksXG5cbiAgICBwb2ludGVyRXZlbnRzOiAhISh3aW5kb3cubmF2aWdhdG9yLnBvaW50ZXJFbmFibGVkIHx8IHdpbmRvdy5Qb2ludGVyRXZlbnQgfHwgKCdtYXhUb3VjaFBvaW50cycgaW4gd2luZG93Lm5hdmlnYXRvciAmJiB3aW5kb3cubmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMCkpLFxuICAgIHByZWZpeGVkUG9pbnRlckV2ZW50czogISF3aW5kb3cubmF2aWdhdG9yLm1zUG9pbnRlckVuYWJsZWQsXG5cbiAgICB0cmFuc2l0aW9uOiAoZnVuY3Rpb24gY2hlY2tUcmFuc2l0aW9uKCkge1xuICAgICAgY29uc3Qgc3R5bGUgPSB0ZXN0RGl2LnN0eWxlO1xuICAgICAgcmV0dXJuICgndHJhbnNpdGlvbicgaW4gc3R5bGUgfHwgJ3dlYmtpdFRyYW5zaXRpb24nIGluIHN0eWxlIHx8ICdNb3pUcmFuc2l0aW9uJyBpbiBzdHlsZSk7XG4gICAgfSgpKSxcbiAgICB0cmFuc2Zvcm1zM2Q6ICh3aW5kb3cuTW9kZXJuaXpyICYmIHdpbmRvdy5Nb2Rlcm5penIuY3NzdHJhbnNmb3JtczNkID09PSB0cnVlKSB8fCAoZnVuY3Rpb24gY2hlY2tUcmFuc2Zvcm1zM2QoKSB7XG4gICAgICBjb25zdCBzdHlsZSA9IHRlc3REaXYuc3R5bGU7XG4gICAgICByZXR1cm4gKCd3ZWJraXRQZXJzcGVjdGl2ZScgaW4gc3R5bGUgfHwgJ01velBlcnNwZWN0aXZlJyBpbiBzdHlsZSB8fCAnT1BlcnNwZWN0aXZlJyBpbiBzdHlsZSB8fCAnTXNQZXJzcGVjdGl2ZScgaW4gc3R5bGUgfHwgJ3BlcnNwZWN0aXZlJyBpbiBzdHlsZSk7XG4gICAgfSgpKSxcblxuICAgIGZsZXhib3g6IChmdW5jdGlvbiBjaGVja0ZsZXhib3goKSB7XG4gICAgICBjb25zdCBzdHlsZSA9IHRlc3REaXYuc3R5bGU7XG4gICAgICBjb25zdCBzdHlsZXMgPSAoJ2FsaWduSXRlbXMgd2Via2l0QWxpZ25JdGVtcyB3ZWJraXRCb3hBbGlnbiBtc0ZsZXhBbGlnbiBtb3pCb3hBbGlnbiB3ZWJraXRGbGV4RGlyZWN0aW9uIG1zRmxleERpcmVjdGlvbiBtb3pCb3hEaXJlY3Rpb24gbW96Qm94T3JpZW50IHdlYmtpdEJveERpcmVjdGlvbiB3ZWJraXRCb3hPcmllbnQnKS5zcGxpdCgnICcpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHN0eWxlc1tpXSBpbiBzdHlsZSkgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSgpKSxcblxuICAgIG9ic2VydmVyOiAoZnVuY3Rpb24gY2hlY2tPYnNlcnZlcigpIHtcbiAgICAgIHJldHVybiAoJ011dGF0aW9uT2JzZXJ2ZXInIGluIHdpbmRvdyB8fCAnV2Via2l0TXV0YXRpb25PYnNlcnZlcicgaW4gd2luZG93KTtcbiAgICB9KCkpLFxuXG4gICAgcGFzc2l2ZUxpc3RlbmVyOiAoZnVuY3Rpb24gY2hlY2tQYXNzaXZlTGlzdGVuZXIoKSB7XG4gICAgICBsZXQgc3VwcG9ydHNQYXNzaXZlID0gZmFsc2U7XG4gICAgICB0cnkge1xuICAgICAgICBjb25zdCBvcHRzID0gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAncGFzc2l2ZScsIHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICBzdXBwb3J0c1Bhc3NpdmUgPSB0cnVlO1xuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdFBhc3NpdmVMaXN0ZW5lcicsIG51bGwsIG9wdHMpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBObyBzdXBwb3J0XG4gICAgICB9XG4gICAgICByZXR1cm4gc3VwcG9ydHNQYXNzaXZlO1xuICAgIH0oKSksXG5cbiAgICBnZXN0dXJlczogKGZ1bmN0aW9uIGNoZWNrR2VzdHVyZXMoKSB7XG4gICAgICByZXR1cm4gJ29uZ2VzdHVyZXN0YXJ0JyBpbiB3aW5kb3c7XG4gICAgfSgpKSxcbiAgfTtcbn0oKSk7XG5cbmNvbnN0IEJyb3dzZXIgPSAoZnVuY3Rpb24gQnJvd3NlcigpIHtcbiAgZnVuY3Rpb24gaXNTYWZhcmkoKSB7XG4gICAgY29uc3QgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpO1xuICAgIHJldHVybiAodWEuaW5kZXhPZignc2FmYXJpJykgPj0gMCAmJiB1YS5pbmRleE9mKCdjaHJvbWUnKSA8IDAgJiYgdWEuaW5kZXhPZignYW5kcm9pZCcpIDwgMCk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBpc0lFOiAhIXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9UcmlkZW50L2cpIHx8ICEhd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQubWF0Y2goL01TSUUvZyksXG4gICAgaXNFZGdlOiAhIXdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9FZGdlL2cpLFxuICAgIGlzU2FmYXJpOiBpc1NhZmFyaSgpLFxuICAgIGlzVWlXZWJWaWV3OiAvKGlQaG9uZXxpUG9kfGlQYWQpLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pLnRlc3Qod2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQpLFxuICB9O1xufSgpKTtcblxuY2xhc3MgU3dpcGVyQ2xhc3Mge1xuICBjb25zdHJ1Y3RvcihwYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHNlbGYucGFyYW1zID0gcGFyYW1zO1xuXG4gICAgLy8gRXZlbnRzXG4gICAgc2VsZi5ldmVudHNMaXN0ZW5lcnMgPSB7fTtcblxuICAgIGlmIChzZWxmLnBhcmFtcyAmJiBzZWxmLnBhcmFtcy5vbikge1xuICAgICAgT2JqZWN0LmtleXMoc2VsZi5wYXJhbXMub24pLmZvckVhY2goKGV2ZW50TmFtZSkgPT4ge1xuICAgICAgICBzZWxmLm9uKGV2ZW50TmFtZSwgc2VsZi5wYXJhbXMub25bZXZlbnROYW1lXSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBvbihldmVudHMsIGhhbmRsZXIsIHByaW9yaXR5KSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSAnZnVuY3Rpb24nKSByZXR1cm4gc2VsZjtcbiAgICBjb25zdCBtZXRob2QgPSBwcmlvcml0eSA/ICd1bnNoaWZ0JyA6ICdwdXNoJztcbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKChldmVudCkgPT4ge1xuICAgICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0pIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSA9IFtdO1xuICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdW21ldGhvZF0oaGFuZGxlcik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGY7XG4gIH1cblxuICBvbmNlKGV2ZW50cywgaGFuZGxlciwgcHJpb3JpdHkpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgIT09ICdmdW5jdGlvbicpIHJldHVybiBzZWxmO1xuICAgIGZ1bmN0aW9uIG9uY2VIYW5kbGVyKC4uLmFyZ3MpIHtcbiAgICAgIGhhbmRsZXIuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgICBzZWxmLm9mZihldmVudHMsIG9uY2VIYW5kbGVyKTtcbiAgICAgIGlmIChvbmNlSGFuZGxlci5mN3Byb3h5KSB7XG4gICAgICAgIGRlbGV0ZSBvbmNlSGFuZGxlci5mN3Byb3h5O1xuICAgICAgfVxuICAgIH1cbiAgICBvbmNlSGFuZGxlci5mN3Byb3h5ID0gaGFuZGxlcjtcbiAgICByZXR1cm4gc2VsZi5vbihldmVudHMsIG9uY2VIYW5kbGVyLCBwcmlvcml0eSk7XG4gIH1cblxuICBvZmYoZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgZXZlbnRzLnNwbGl0KCcgJykuZm9yRWFjaCgoZXZlbnQpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdID0gW107XG4gICAgICB9IGVsc2UgaWYgKHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XSAmJiBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0ubGVuZ3RoKSB7XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKGV2ZW50SGFuZGxlciA9PT0gaGFuZGxlciB8fCAoZXZlbnRIYW5kbGVyLmY3cHJveHkgJiYgZXZlbnRIYW5kbGVyLmY3cHJveHkgPT09IGhhbmRsZXIpKSB7XG4gICAgICAgICAgICBzZWxmLmV2ZW50c0xpc3RlbmVyc1tldmVudF0uc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG5cbiAgZW1pdCguLi5hcmdzKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgaWYgKCFzZWxmLmV2ZW50c0xpc3RlbmVycykgcmV0dXJuIHNlbGY7XG4gICAgbGV0IGV2ZW50cztcbiAgICBsZXQgZGF0YTtcbiAgICBsZXQgY29udGV4dDtcbiAgICBpZiAodHlwZW9mIGFyZ3NbMF0gPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHtcbiAgICAgIGV2ZW50cyA9IGFyZ3NbMF07XG4gICAgICBkYXRhID0gYXJncy5zbGljZSgxLCBhcmdzLmxlbmd0aCk7XG4gICAgICBjb250ZXh0ID0gc2VsZjtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnRzID0gYXJnc1swXS5ldmVudHM7XG4gICAgICBkYXRhID0gYXJnc1swXS5kYXRhO1xuICAgICAgY29udGV4dCA9IGFyZ3NbMF0uY29udGV4dCB8fCBzZWxmO1xuICAgIH1cbiAgICBjb25zdCBldmVudHNBcnJheSA9IEFycmF5LmlzQXJyYXkoZXZlbnRzKSA/IGV2ZW50cyA6IGV2ZW50cy5zcGxpdCgnICcpO1xuICAgIGV2ZW50c0FycmF5LmZvckVhY2goKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoc2VsZi5ldmVudHNMaXN0ZW5lcnMgJiYgc2VsZi5ldmVudHNMaXN0ZW5lcnNbZXZlbnRdKSB7XG4gICAgICAgIGNvbnN0IGhhbmRsZXJzID0gW107XG4gICAgICAgIHNlbGYuZXZlbnRzTGlzdGVuZXJzW2V2ZW50XS5mb3JFYWNoKChldmVudEhhbmRsZXIpID0+IHtcbiAgICAgICAgICBoYW5kbGVycy5wdXNoKGV2ZW50SGFuZGxlcik7XG4gICAgICAgIH0pO1xuICAgICAgICBoYW5kbGVycy5mb3JFYWNoKChldmVudEhhbmRsZXIpID0+IHtcbiAgICAgICAgICBldmVudEhhbmRsZXIuYXBwbHkoY29udGV4dCwgZGF0YSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBzZWxmO1xuICB9XG5cbiAgdXNlTW9kdWxlc1BhcmFtcyhpbnN0YW5jZVBhcmFtcykge1xuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcztcbiAgICBpZiAoIWluc3RhbmNlLm1vZHVsZXMpIHJldHVybjtcbiAgICBPYmplY3Qua2V5cyhpbnN0YW5jZS5tb2R1bGVzKS5mb3JFYWNoKChtb2R1bGVOYW1lKSA9PiB7XG4gICAgICBjb25zdCBtb2R1bGUgPSBpbnN0YW5jZS5tb2R1bGVzW21vZHVsZU5hbWVdO1xuICAgICAgLy8gRXh0ZW5kIHBhcmFtc1xuICAgICAgaWYgKG1vZHVsZS5wYXJhbXMpIHtcbiAgICAgICAgVXRpbHMuZXh0ZW5kKGluc3RhbmNlUGFyYW1zLCBtb2R1bGUucGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHVzZU1vZHVsZXMobW9kdWxlc1BhcmFtcyA9IHt9KSB7XG4gICAgY29uc3QgaW5zdGFuY2UgPSB0aGlzO1xuICAgIGlmICghaW5zdGFuY2UubW9kdWxlcykgcmV0dXJuO1xuICAgIE9iamVjdC5rZXlzKGluc3RhbmNlLm1vZHVsZXMpLmZvckVhY2goKG1vZHVsZU5hbWUpID0+IHtcbiAgICAgIGNvbnN0IG1vZHVsZSA9IGluc3RhbmNlLm1vZHVsZXNbbW9kdWxlTmFtZV07XG4gICAgICBjb25zdCBtb2R1bGVQYXJhbXMgPSBtb2R1bGVzUGFyYW1zW21vZHVsZU5hbWVdIHx8IHt9O1xuICAgICAgLy8gRXh0ZW5kIGluc3RhbmNlIG1ldGhvZHMgYW5kIHByb3BzXG4gICAgICBpZiAobW9kdWxlLmluc3RhbmNlKSB7XG4gICAgICAgIE9iamVjdC5rZXlzKG1vZHVsZS5pbnN0YW5jZSkuZm9yRWFjaCgobW9kdWxlUHJvcE5hbWUpID0+IHtcbiAgICAgICAgICBjb25zdCBtb2R1bGVQcm9wID0gbW9kdWxlLmluc3RhbmNlW21vZHVsZVByb3BOYW1lXTtcbiAgICAgICAgICBpZiAodHlwZW9mIG1vZHVsZVByb3AgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGluc3RhbmNlW21vZHVsZVByb3BOYW1lXSA9IG1vZHVsZVByb3AuYmluZChpbnN0YW5jZSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluc3RhbmNlW21vZHVsZVByb3BOYW1lXSA9IG1vZHVsZVByb3A7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vIEFkZCBldmVudCBsaXN0ZW5lcnNcbiAgICAgIGlmIChtb2R1bGUub24gJiYgaW5zdGFuY2Uub24pIHtcbiAgICAgICAgT2JqZWN0LmtleXMobW9kdWxlLm9uKS5mb3JFYWNoKChtb2R1bGVFdmVudE5hbWUpID0+IHtcbiAgICAgICAgICBpbnN0YW5jZS5vbihtb2R1bGVFdmVudE5hbWUsIG1vZHVsZS5vblttb2R1bGVFdmVudE5hbWVdKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIE1vZHVsZSBjcmVhdGUgY2FsbGJhY2tcbiAgICAgIGlmIChtb2R1bGUuY3JlYXRlKSB7XG4gICAgICAgIG1vZHVsZS5jcmVhdGUuYmluZChpbnN0YW5jZSkobW9kdWxlUGFyYW1zKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHN0YXRpYyBzZXQgY29tcG9uZW50cyhjb21wb25lbnRzKSB7XG4gICAgY29uc3QgQ2xhc3MgPSB0aGlzO1xuICAgIGlmICghQ2xhc3MudXNlKSByZXR1cm47XG4gICAgQ2xhc3MudXNlKGNvbXBvbmVudHMpO1xuICB9XG5cbiAgc3RhdGljIGluc3RhbGxNb2R1bGUobW9kdWxlLCAuLi5wYXJhbXMpIHtcbiAgICBjb25zdCBDbGFzcyA9IHRoaXM7XG4gICAgaWYgKCFDbGFzcy5wcm90b3R5cGUubW9kdWxlcykgQ2xhc3MucHJvdG90eXBlLm1vZHVsZXMgPSB7fTtcbiAgICBjb25zdCBuYW1lID0gbW9kdWxlLm5hbWUgfHwgKGAke09iamVjdC5rZXlzKENsYXNzLnByb3RvdHlwZS5tb2R1bGVzKS5sZW5ndGh9XyR7VXRpbHMubm93KCl9YCk7XG4gICAgQ2xhc3MucHJvdG90eXBlLm1vZHVsZXNbbmFtZV0gPSBtb2R1bGU7XG4gICAgLy8gUHJvdG90eXBlXG4gICAgaWYgKG1vZHVsZS5wcm90bykge1xuICAgICAgT2JqZWN0LmtleXMobW9kdWxlLnByb3RvKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgQ2xhc3MucHJvdG90eXBlW2tleV0gPSBtb2R1bGUucHJvdG9ba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDbGFzc1xuICAgIGlmIChtb2R1bGUuc3RhdGljKSB7XG4gICAgICBPYmplY3Qua2V5cyhtb2R1bGUuc3RhdGljKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgQ2xhc3Nba2V5XSA9IG1vZHVsZS5zdGF0aWNba2V5XTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBDYWxsYmFja1xuICAgIGlmIChtb2R1bGUuaW5zdGFsbCkge1xuICAgICAgbW9kdWxlLmluc3RhbGwuYXBwbHkoQ2xhc3MsIHBhcmFtcyk7XG4gICAgfVxuICAgIHJldHVybiBDbGFzcztcbiAgfVxuXG4gIHN0YXRpYyB1c2UobW9kdWxlLCAuLi5wYXJhbXMpIHtcbiAgICBjb25zdCBDbGFzcyA9IHRoaXM7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobW9kdWxlKSkge1xuICAgICAgbW9kdWxlLmZvckVhY2goKG0pID0+IENsYXNzLmluc3RhbGxNb2R1bGUobSkpO1xuICAgICAgcmV0dXJuIENsYXNzO1xuICAgIH1cbiAgICByZXR1cm4gQ2xhc3MuaW5zdGFsbE1vZHVsZShtb2R1bGUsIC4uLnBhcmFtcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlU2l6ZSAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCB3aWR0aDtcbiAgbGV0IGhlaWdodDtcbiAgY29uc3QgJGVsID0gc3dpcGVyLiRlbDtcbiAgaWYgKHR5cGVvZiBzd2lwZXIucGFyYW1zLndpZHRoICE9PSAndW5kZWZpbmVkJykge1xuICAgIHdpZHRoID0gc3dpcGVyLnBhcmFtcy53aWR0aDtcbiAgfSBlbHNlIHtcbiAgICB3aWR0aCA9ICRlbFswXS5jbGllbnRXaWR0aDtcbiAgfVxuICBpZiAodHlwZW9mIHN3aXBlci5wYXJhbXMuaGVpZ2h0ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGhlaWdodCA9IHN3aXBlci5wYXJhbXMuaGVpZ2h0O1xuICB9IGVsc2Uge1xuICAgIGhlaWdodCA9ICRlbFswXS5jbGllbnRIZWlnaHQ7XG4gIH1cbiAgaWYgKCh3aWR0aCA9PT0gMCAmJiBzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHx8IChoZWlnaHQgPT09IDAgJiYgc3dpcGVyLmlzVmVydGljYWwoKSkpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBTdWJ0cmFjdCBwYWRkaW5nc1xuICB3aWR0aCA9IHdpZHRoIC0gcGFyc2VJbnQoJGVsLmNzcygncGFkZGluZy1sZWZ0JyksIDEwKSAtIHBhcnNlSW50KCRlbC5jc3MoJ3BhZGRpbmctcmlnaHQnKSwgMTApO1xuICBoZWlnaHQgPSBoZWlnaHQgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLXRvcCcpLCAxMCkgLSBwYXJzZUludCgkZWwuY3NzKCdwYWRkaW5nLWJvdHRvbScpLCAxMCk7XG5cbiAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgIHdpZHRoLFxuICAgIGhlaWdodCxcbiAgICBzaXplOiBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB3aWR0aCA6IGhlaWdodCxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlcyAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXM7XG5cbiAgY29uc3Qge1xuICAgICR3cmFwcGVyRWwsIHNpemU6IHN3aXBlclNpemUsIHJ0bFRyYW5zbGF0ZTogcnRsLCB3cm9uZ1JUTCxcbiAgfSA9IHN3aXBlcjtcbiAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgcGFyYW1zLnZpcnR1YWwuZW5hYmxlZDtcbiAgY29uc3QgcHJldmlvdXNTbGlkZXNMZW5ndGggPSBpc1ZpcnR1YWwgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gIGNvbnN0IHNsaWRlcyA9ICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31gKTtcbiAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gaXNWaXJ0dWFsID8gc3dpcGVyLnZpcnR1YWwuc2xpZGVzLmxlbmd0aCA6IHNsaWRlcy5sZW5ndGg7XG4gIGxldCBzbmFwR3JpZCA9IFtdO1xuICBjb25zdCBzbGlkZXNHcmlkID0gW107XG4gIGNvbnN0IHNsaWRlc1NpemVzR3JpZCA9IFtdO1xuXG4gIGxldCBvZmZzZXRCZWZvcmUgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QmVmb3JlO1xuICBpZiAodHlwZW9mIG9mZnNldEJlZm9yZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9mZnNldEJlZm9yZSA9IHBhcmFtcy5zbGlkZXNPZmZzZXRCZWZvcmUuY2FsbChzd2lwZXIpO1xuICB9XG5cbiAgbGV0IG9mZnNldEFmdGVyID0gcGFyYW1zLnNsaWRlc09mZnNldEFmdGVyO1xuICBpZiAodHlwZW9mIG9mZnNldEFmdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb2Zmc2V0QWZ0ZXIgPSBwYXJhbXMuc2xpZGVzT2Zmc2V0QWZ0ZXIuY2FsbChzd2lwZXIpO1xuICB9XG5cbiAgY29uc3QgcHJldmlvdXNTbmFwR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gIGNvbnN0IHByZXZpb3VzU2xpZGVzR3JpZExlbmd0aCA9IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG5cbiAgbGV0IHNwYWNlQmV0d2VlbiA9IHBhcmFtcy5zcGFjZUJldHdlZW47XG4gIGxldCBzbGlkZVBvc2l0aW9uID0gLW9mZnNldEJlZm9yZTtcbiAgbGV0IHByZXZTbGlkZVNpemUgPSAwO1xuICBsZXQgaW5kZXggPSAwO1xuICBpZiAodHlwZW9mIHN3aXBlclNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICh0eXBlb2Ygc3BhY2VCZXR3ZWVuID09PSAnc3RyaW5nJyAmJiBzcGFjZUJldHdlZW4uaW5kZXhPZignJScpID49IDApIHtcbiAgICBzcGFjZUJldHdlZW4gPSAocGFyc2VGbG9hdChzcGFjZUJldHdlZW4ucmVwbGFjZSgnJScsICcnKSkgLyAxMDApICogc3dpcGVyU2l6ZTtcbiAgfVxuXG4gIHN3aXBlci52aXJ0dWFsU2l6ZSA9IC1zcGFjZUJldHdlZW47XG5cbiAgLy8gcmVzZXQgbWFyZ2luc1xuICBpZiAocnRsKSBzbGlkZXMuY3NzKHsgbWFyZ2luTGVmdDogJycsIG1hcmdpblRvcDogJycgfSk7XG4gIGVsc2Ugc2xpZGVzLmNzcyh7IG1hcmdpblJpZ2h0OiAnJywgbWFyZ2luQm90dG9tOiAnJyB9KTtcblxuICBsZXQgc2xpZGVzTnVtYmVyRXZlblRvUm93cztcbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4gPiAxKSB7XG4gICAgaWYgKE1hdGguZmxvb3Ioc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbikgPT09IHNsaWRlc0xlbmd0aCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gc2xpZGVzTGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gTWF0aC5jZWlsKHNsaWRlc0xlbmd0aCAvIHBhcmFtcy5zbGlkZXNQZXJDb2x1bW4pICogcGFyYW1zLnNsaWRlc1BlckNvbHVtbjtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgcGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdyb3cnKSB7XG4gICAgICBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzID0gTWF0aC5tYXgoc2xpZGVzTnVtYmVyRXZlblRvUm93cywgcGFyYW1zLnNsaWRlc1BlclZpZXcgKiBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKTtcbiAgICB9XG4gIH1cblxuICAvLyBDYWxjIHNsaWRlc1xuICBsZXQgc2xpZGVTaXplO1xuICBjb25zdCBzbGlkZXNQZXJDb2x1bW4gPSBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uO1xuICBjb25zdCBzbGlkZXNQZXJSb3cgPSBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzIC8gc2xpZGVzUGVyQ29sdW1uO1xuICBjb25zdCBudW1GdWxsQ29sdW1ucyA9IE1hdGguZmxvb3Ioc2xpZGVzTGVuZ3RoIC8gcGFyYW1zLnNsaWRlc1BlckNvbHVtbik7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzTGVuZ3RoOyBpICs9IDEpIHtcbiAgICBzbGlkZVNpemUgPSAwO1xuICAgIGNvbnN0IHNsaWRlID0gc2xpZGVzLmVxKGkpO1xuICAgIGlmIChwYXJhbXMuc2xpZGVzUGVyQ29sdW1uID4gMSkge1xuICAgICAgLy8gU2V0IHNsaWRlcyBvcmRlclxuICAgICAgbGV0IG5ld1NsaWRlT3JkZXJJbmRleDtcbiAgICAgIGxldCBjb2x1bW47XG4gICAgICBsZXQgcm93O1xuICAgICAgaWYgKFxuICAgICAgICAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdjb2x1bW4nKVxuICAgICAgICB8fCAocGFyYW1zLnNsaWRlc1BlckNvbHVtbkZpbGwgPT09ICdyb3cnICYmIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA+IDEpXG4gICAgICApIHtcbiAgICAgICAgaWYgKHBhcmFtcy5zbGlkZXNQZXJDb2x1bW5GaWxsID09PSAnY29sdW1uJykge1xuICAgICAgICAgIGNvbHVtbiA9IE1hdGguZmxvb3IoaSAvIHNsaWRlc1BlckNvbHVtbik7XG4gICAgICAgICAgcm93ID0gaSAtIChjb2x1bW4gKiBzbGlkZXNQZXJDb2x1bW4pO1xuICAgICAgICAgIGlmIChjb2x1bW4gPiBudW1GdWxsQ29sdW1ucyB8fCAoY29sdW1uID09PSBudW1GdWxsQ29sdW1ucyAmJiByb3cgPT09IHNsaWRlc1BlckNvbHVtbiAtIDEpKSB7XG4gICAgICAgICAgICByb3cgKz0gMTtcbiAgICAgICAgICAgIGlmIChyb3cgPj0gc2xpZGVzUGVyQ29sdW1uKSB7XG4gICAgICAgICAgICAgIHJvdyA9IDA7XG4gICAgICAgICAgICAgIGNvbHVtbiArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBncm91cEluZGV4ID0gTWF0aC5mbG9vcihpIC8gcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgICAgICByb3cgPSBNYXRoLmZsb29yKGkgLyBwYXJhbXMuc2xpZGVzUGVyVmlldykgLSBncm91cEluZGV4ICogcGFyYW1zLnNsaWRlc1BlckNvbHVtbjtcbiAgICAgICAgICBjb2x1bW4gPSBpIC0gcm93ICogcGFyYW1zLnNsaWRlc1BlclZpZXcgLSBncm91cEluZGV4ICogcGFyYW1zLnNsaWRlc1BlclZpZXc7XG4gICAgICAgIH1cbiAgICAgICAgbmV3U2xpZGVPcmRlckluZGV4ID0gY29sdW1uICsgKChyb3cgKiBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzKSAvIHNsaWRlc1BlckNvbHVtbik7XG4gICAgICAgIHNsaWRlXG4gICAgICAgICAgLmNzcyh7XG4gICAgICAgICAgICAnLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cCc6IG5ld1NsaWRlT3JkZXJJbmRleCxcbiAgICAgICAgICAgICctbW96LWJveC1vcmRpbmFsLWdyb3VwJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICAgJy1tcy1mbGV4LW9yZGVyJzogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgICAgJy13ZWJraXQtb3JkZXInOiBuZXdTbGlkZU9yZGVySW5kZXgsXG4gICAgICAgICAgICBvcmRlcjogbmV3U2xpZGVPcmRlckluZGV4LFxuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm93ID0gTWF0aC5mbG9vcihpIC8gc2xpZGVzUGVyUm93KTtcbiAgICAgICAgY29sdW1uID0gaSAtIChyb3cgKiBzbGlkZXNQZXJSb3cpO1xuICAgICAgfVxuICAgICAgc2xpZGVcbiAgICAgICAgLmNzcyhcbiAgICAgICAgICBgbWFyZ2luLSR7c3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3RvcCcgOiAnbGVmdCd9YCxcbiAgICAgICAgICAocm93ICE9PSAwICYmIHBhcmFtcy5zcGFjZUJldHdlZW4pICYmIChgJHtwYXJhbXMuc3BhY2VCZXR3ZWVufXB4YClcbiAgICAgICAgKVxuICAgICAgICAuYXR0cignZGF0YS1zd2lwZXItY29sdW1uJywgY29sdW1uKVxuICAgICAgICAuYXR0cignZGF0YS1zd2lwZXItcm93Jywgcm93KTtcbiAgICB9XG4gICAgaWYgKHNsaWRlLmNzcygnZGlzcGxheScpID09PSAnbm9uZScpIGNvbnRpbnVlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgICBpZiAocGFyYW1zLnNsaWRlc1BlclZpZXcgPT09ICdhdXRvJykge1xuICAgICAgY29uc3Qgc2xpZGVTdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShzbGlkZVswXSwgbnVsbCk7XG4gICAgICBjb25zdCBjdXJyZW50VHJhbnNmb3JtID0gc2xpZGVbMF0uc3R5bGUudHJhbnNmb3JtO1xuICAgICAgY29uc3QgY3VycmVudFdlYktpdFRyYW5zZm9ybSA9IHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybTtcbiAgICAgIGlmIChjdXJyZW50VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlWzBdLnN0eWxlLnRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50V2ViS2l0VHJhbnNmb3JtKSB7XG4gICAgICAgIHNsaWRlWzBdLnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9ICdub25lJztcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSB7XG4gICAgICAgIHNsaWRlU2l6ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKVxuICAgICAgICAgID8gc2xpZGUub3V0ZXJXaWR0aCh0cnVlKVxuICAgICAgICAgIDogc2xpZGUub3V0ZXJIZWlnaHQodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgIGNvbnN0IHdpZHRoID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCd3aWR0aCcpKTtcbiAgICAgICAgICBjb25zdCBwYWRkaW5nTGVmdCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1sZWZ0JykpO1xuICAgICAgICAgIGNvbnN0IHBhZGRpbmdSaWdodCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgncGFkZGluZy1yaWdodCcpKTtcbiAgICAgICAgICBjb25zdCBtYXJnaW5MZWZ0ID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tbGVmdCcpKTtcbiAgICAgICAgICBjb25zdCBtYXJnaW5SaWdodCA9IHBhcnNlRmxvYXQoc2xpZGVTdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLXJpZ2h0JykpO1xuICAgICAgICAgIGNvbnN0IGJveFNpemluZyA9IHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2JveC1zaXppbmcnKTtcbiAgICAgICAgICBpZiAoYm94U2l6aW5nICYmIGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnICYmICFCcm93c2VyLmlzSUUpIHtcbiAgICAgICAgICAgIHNsaWRlU2l6ZSA9IHdpZHRoICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzbGlkZVNpemUgPSB3aWR0aCArIHBhZGRpbmdMZWZ0ICsgcGFkZGluZ1JpZ2h0ICsgbWFyZ2luTGVmdCArIG1hcmdpblJpZ2h0O1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBoZWlnaHQgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2hlaWdodCcpKTtcbiAgICAgICAgICBjb25zdCBwYWRkaW5nVG9wID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLXRvcCcpKTtcbiAgICAgICAgICBjb25zdCBwYWRkaW5nQm90dG9tID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdwYWRkaW5nLWJvdHRvbScpKTtcbiAgICAgICAgICBjb25zdCBtYXJnaW5Ub3AgPSBwYXJzZUZsb2F0KHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi10b3AnKSk7XG4gICAgICAgICAgY29uc3QgbWFyZ2luQm90dG9tID0gcGFyc2VGbG9hdChzbGlkZVN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tYm90dG9tJykpO1xuICAgICAgICAgIGNvbnN0IGJveFNpemluZyA9IHNsaWRlU3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ2JveC1zaXppbmcnKTtcbiAgICAgICAgICBpZiAoYm94U2l6aW5nICYmIGJveFNpemluZyA9PT0gJ2JvcmRlci1ib3gnICYmICFCcm93c2VyLmlzSUUpIHtcbiAgICAgICAgICAgIHNsaWRlU2l6ZSA9IGhlaWdodCArIG1hcmdpblRvcCArIG1hcmdpbkJvdHRvbTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2xpZGVTaXplID0gaGVpZ2h0ICsgcGFkZGluZ1RvcCArIHBhZGRpbmdCb3R0b20gKyBtYXJnaW5Ub3AgKyBtYXJnaW5Cb3R0b207XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFRyYW5zZm9ybSkge1xuICAgICAgICBzbGlkZVswXS5zdHlsZS50cmFuc2Zvcm0gPSBjdXJyZW50VHJhbnNmb3JtO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnRXZWJLaXRUcmFuc2Zvcm0pIHtcbiAgICAgICAgc2xpZGVbMF0uc3R5bGUud2Via2l0VHJhbnNmb3JtID0gY3VycmVudFdlYktpdFRyYW5zZm9ybTtcbiAgICAgIH1cbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlU2l6ZSA9IChzd2lwZXJTaXplIC0gKChwYXJhbXMuc2xpZGVzUGVyVmlldyAtIDEpICogc3BhY2VCZXR3ZWVuKSkgLyBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVNpemUgPSBNYXRoLmZsb29yKHNsaWRlU2l6ZSk7XG5cbiAgICAgIGlmIChzbGlkZXNbaV0pIHtcbiAgICAgICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgICAgIHNsaWRlc1tpXS5zdHlsZS53aWR0aCA9IGAke3NsaWRlU2l6ZX1weGA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2xpZGVzW2ldLnN0eWxlLmhlaWdodCA9IGAke3NsaWRlU2l6ZX1weGA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNsaWRlc1tpXSkge1xuICAgICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlU2l6ZSA9IHNsaWRlU2l6ZTtcbiAgICB9XG4gICAgc2xpZGVzU2l6ZXNHcmlkLnB1c2goc2xpZGVTaXplKTtcblxuXG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gKyAoc2xpZGVTaXplIC8gMikgKyAocHJldlNsaWRlU2l6ZSAvIDIpICsgc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKHByZXZTbGlkZVNpemUgPT09IDAgJiYgaSAhPT0gMCkgc2xpZGVQb3NpdGlvbiA9IHNsaWRlUG9zaXRpb24gLSAoc3dpcGVyU2l6ZSAvIDIpIC0gc3BhY2VCZXR3ZWVuO1xuICAgICAgaWYgKGkgPT09IDApIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uIC0gKHN3aXBlclNpemUgLyAyKSAtIHNwYWNlQmV0d2VlbjtcbiAgICAgIGlmIChNYXRoLmFicyhzbGlkZVBvc2l0aW9uKSA8IDEgLyAxMDAwKSBzbGlkZVBvc2l0aW9uID0gMDtcbiAgICAgIGlmIChwYXJhbXMucm91bmRMZW5ndGhzKSBzbGlkZVBvc2l0aW9uID0gTWF0aC5mbG9vcihzbGlkZVBvc2l0aW9uKTtcbiAgICAgIGlmICgoaW5kZXgpICUgcGFyYW1zLnNsaWRlc1Blckdyb3VwID09PSAwKSBzbmFwR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgICAgc2xpZGVzR3JpZC5wdXNoKHNsaWRlUG9zaXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAocGFyYW1zLnJvdW5kTGVuZ3Rocykgc2xpZGVQb3NpdGlvbiA9IE1hdGguZmxvb3Ioc2xpZGVQb3NpdGlvbik7XG4gICAgICBpZiAoKGluZGV4KSAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCA9PT0gMCkgc25hcEdyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlc0dyaWQucHVzaChzbGlkZVBvc2l0aW9uKTtcbiAgICAgIHNsaWRlUG9zaXRpb24gPSBzbGlkZVBvc2l0aW9uICsgc2xpZGVTaXplICsgc3BhY2VCZXR3ZWVuO1xuICAgIH1cblxuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSArPSBzbGlkZVNpemUgKyBzcGFjZUJldHdlZW47XG5cbiAgICBwcmV2U2xpZGVTaXplID0gc2xpZGVTaXplO1xuXG4gICAgaW5kZXggKz0gMTtcbiAgfVxuICBzd2lwZXIudmlydHVhbFNpemUgPSBNYXRoLm1heChzd2lwZXIudmlydHVhbFNpemUsIHN3aXBlclNpemUpICsgb2Zmc2V0QWZ0ZXI7XG4gIGxldCBuZXdTbGlkZXNHcmlkO1xuXG4gIGlmIChcbiAgICBydGwgJiYgd3JvbmdSVEwgJiYgKHBhcmFtcy5lZmZlY3QgPT09ICdzbGlkZScgfHwgcGFyYW1zLmVmZmVjdCA9PT0gJ2NvdmVyZmxvdycpKSB7XG4gICAgJHdyYXBwZXJFbC5jc3MoeyB3aWR0aDogYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGAgfSk7XG4gIH1cbiAgaWYgKCFTdXBwb3J0LmZsZXhib3ggfHwgcGFyYW1zLnNldFdyYXBwZXJTaXplKSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkgJHdyYXBwZXJFbC5jc3MoeyB3aWR0aDogYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGAgfSk7XG4gICAgZWxzZSAkd3JhcHBlckVsLmNzcyh7IGhlaWdodDogYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGAgfSk7XG4gIH1cblxuICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICBzd2lwZXIudmlydHVhbFNpemUgPSAoc2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2VlbikgKiBzbGlkZXNOdW1iZXJFdmVuVG9Sb3dzO1xuICAgIHN3aXBlci52aXJ0dWFsU2l6ZSA9IE1hdGguY2VpbChzd2lwZXIudmlydHVhbFNpemUgLyBwYXJhbXMuc2xpZGVzUGVyQ29sdW1uKSAtIHBhcmFtcy5zcGFjZUJldHdlZW47XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkgJHdyYXBwZXJFbC5jc3MoeyB3aWR0aDogYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGAgfSk7XG4gICAgZWxzZSAkd3JhcHBlckVsLmNzcyh7IGhlaWdodDogYCR7c3dpcGVyLnZpcnR1YWxTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbn1weGAgfSk7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgbmV3U2xpZGVzR3JpZCA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbmFwR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBsZXQgc2xpZGVzR3JpZEl0ZW0gPSBzbmFwR3JpZFtpXTtcbiAgICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSk7XG4gICAgICAgIGlmIChzbmFwR3JpZFtpXSA8IHN3aXBlci52aXJ0dWFsU2l6ZSArIHNuYXBHcmlkWzBdKSBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgICAgc25hcEdyaWQgPSBuZXdTbGlkZXNHcmlkO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlbW92ZSBsYXN0IGdyaWQgZWxlbWVudHMgZGVwZW5kaW5nIG9uIHdpZHRoXG4gIGlmICghcGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgbmV3U2xpZGVzR3JpZCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc25hcEdyaWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGxldCBzbGlkZXNHcmlkSXRlbSA9IHNuYXBHcmlkW2ldO1xuICAgICAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHNsaWRlc0dyaWRJdGVtID0gTWF0aC5mbG9vcihzbGlkZXNHcmlkSXRlbSk7XG4gICAgICBpZiAoc25hcEdyaWRbaV0gPD0gc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkge1xuICAgICAgICBuZXdTbGlkZXNHcmlkLnB1c2goc2xpZGVzR3JpZEl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgICBzbmFwR3JpZCA9IG5ld1NsaWRlc0dyaWQ7XG4gICAgaWYgKE1hdGguZmxvb3Ioc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSkgLSBNYXRoLmZsb29yKHNuYXBHcmlkW3NuYXBHcmlkLmxlbmd0aCAtIDFdKSA+IDEpIHtcbiAgICAgIHNuYXBHcmlkLnB1c2goc3dpcGVyLnZpcnR1YWxTaXplIC0gc3dpcGVyU2l6ZSk7XG4gICAgfVxuICB9XG4gIGlmIChzbmFwR3JpZC5sZW5ndGggPT09IDApIHNuYXBHcmlkID0gWzBdO1xuXG4gIGlmIChwYXJhbXMuc3BhY2VCZXR3ZWVuICE9PSAwKSB7XG4gICAgaWYgKHN3aXBlci5pc0hvcml6b250YWwoKSkge1xuICAgICAgaWYgKHJ0bCkgc2xpZGVzLmNzcyh7IG1hcmdpbkxlZnQ6IGAke3NwYWNlQmV0d2Vlbn1weGAgfSk7XG4gICAgICBlbHNlIHNsaWRlcy5jc3MoeyBtYXJnaW5SaWdodDogYCR7c3BhY2VCZXR3ZWVufXB4YCB9KTtcbiAgICB9IGVsc2Ugc2xpZGVzLmNzcyh7IG1hcmdpbkJvdHRvbTogYCR7c3BhY2VCZXR3ZWVufXB4YCB9KTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuY2VudGVySW5zdWZmaWNpZW50U2xpZGVzKSB7XG4gICAgbGV0IGFsbFNsaWRlc1NpemUgPSAwO1xuICAgIHNsaWRlc1NpemVzR3JpZC5mb3JFYWNoKChzbGlkZVNpemVWYWx1ZSkgPT4ge1xuICAgICAgYWxsU2xpZGVzU2l6ZSArPSBzbGlkZVNpemVWYWx1ZSArIChwYXJhbXMuc3BhY2VCZXR3ZWVuID8gcGFyYW1zLnNwYWNlQmV0d2VlbiA6IDApO1xuICAgIH0pO1xuICAgIGFsbFNsaWRlc1NpemUgLT0gcGFyYW1zLnNwYWNlQmV0d2VlbjtcbiAgICBpZiAoYWxsU2xpZGVzU2l6ZSA8IHN3aXBlclNpemUpIHtcbiAgICAgIGNvbnN0IGFsbFNsaWRlc09mZnNldCA9IChzd2lwZXJTaXplIC0gYWxsU2xpZGVzU2l6ZSkgLyAyO1xuICAgICAgc25hcEdyaWQuZm9yRWFjaCgoc25hcCwgc25hcEluZGV4KSA9PiB7XG4gICAgICAgIHNuYXBHcmlkW3NuYXBJbmRleF0gPSBzbmFwIC0gYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgICBzbGlkZXNHcmlkLmZvckVhY2goKHNuYXAsIHNuYXBJbmRleCkgPT4ge1xuICAgICAgICBzbGlkZXNHcmlkW3NuYXBJbmRleF0gPSBzbmFwICsgYWxsU2xpZGVzT2Zmc2V0O1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgIHNsaWRlcyxcbiAgICBzbmFwR3JpZCxcbiAgICBzbGlkZXNHcmlkLFxuICAgIHNsaWRlc1NpemVzR3JpZCxcbiAgfSk7XG5cbiAgaWYgKHNsaWRlc0xlbmd0aCAhPT0gcHJldmlvdXNTbGlkZXNMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHNuYXBHcmlkLmxlbmd0aCAhPT0gcHJldmlvdXNTbmFwR3JpZExlbmd0aCkge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cpIHN3aXBlci5jaGVja092ZXJmbG93KCk7XG4gICAgc3dpcGVyLmVtaXQoJ3NuYXBHcmlkTGVuZ3RoQ2hhbmdlJyk7XG4gIH1cbiAgaWYgKHNsaWRlc0dyaWQubGVuZ3RoICE9PSBwcmV2aW91c1NsaWRlc0dyaWRMZW5ndGgpIHtcbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVzR3JpZExlbmd0aENoYW5nZScpO1xuICB9XG5cbiAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzIHx8IHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkpIHtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzT2Zmc2V0KCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdXBkYXRlQXV0b0hlaWdodCAoc3BlZWQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgYWN0aXZlU2xpZGVzID0gW107XG4gIGxldCBuZXdIZWlnaHQgPSAwO1xuICBsZXQgaTtcbiAgaWYgKHR5cGVvZiBzcGVlZCA9PT0gJ251bWJlcicpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzcGVlZCk7XG4gIH0gZWxzZSBpZiAoc3BlZWQgPT09IHRydWUpIHtcbiAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgfVxuICAvLyBGaW5kIHNsaWRlcyBjdXJyZW50bHkgaW4gdmlld1xuICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ICE9PSAnYXV0bycgJiYgc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkge1xuICAgIGZvciAoaSA9IDA7IGkgPCBNYXRoLmNlaWwoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3KTsgaSArPSAxKSB7XG4gICAgICBjb25zdCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleCArIGk7XG4gICAgICBpZiAoaW5kZXggPiBzd2lwZXIuc2xpZGVzLmxlbmd0aCkgYnJlYWs7XG4gICAgICBhY3RpdmVTbGlkZXMucHVzaChzd2lwZXIuc2xpZGVzLmVxKGluZGV4KVswXSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGFjdGl2ZVNsaWRlcy5wdXNoKHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KVswXSk7XG4gIH1cblxuICAvLyBGaW5kIG5ldyBoZWlnaHQgZnJvbSBoaWdoZXN0IHNsaWRlIGluIHZpZXdcbiAgZm9yIChpID0gMDsgaSA8IGFjdGl2ZVNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIGlmICh0eXBlb2YgYWN0aXZlU2xpZGVzW2ldICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgaGVpZ2h0ID0gYWN0aXZlU2xpZGVzW2ldLm9mZnNldEhlaWdodDtcbiAgICAgIG5ld0hlaWdodCA9IGhlaWdodCA+IG5ld0hlaWdodCA/IGhlaWdodCA6IG5ld0hlaWdodDtcbiAgICB9XG4gIH1cblxuICAvLyBVcGRhdGUgSGVpZ2h0XG4gIGlmIChuZXdIZWlnaHQpIHN3aXBlci4kd3JhcHBlckVsLmNzcygnaGVpZ2h0JywgYCR7bmV3SGVpZ2h0fXB4YCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc09mZnNldCAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHNsaWRlcyA9IHN3aXBlci5zbGlkZXM7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzW2ldLnN3aXBlclNsaWRlT2Zmc2V0ID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gc2xpZGVzW2ldLm9mZnNldExlZnQgOiBzbGlkZXNbaV0ub2Zmc2V0VG9wO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVNsaWRlc1Byb2dyZXNzICh0cmFuc2xhdGUgPSAodGhpcyAmJiB0aGlzLnRyYW5zbGF0ZSkgfHwgMCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuXG4gIGNvbnN0IHsgc2xpZGVzLCBydGxUcmFuc2xhdGU6IHJ0bCB9ID0gc3dpcGVyO1xuXG4gIGlmIChzbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIGlmICh0eXBlb2Ygc2xpZGVzWzBdLnN3aXBlclNsaWRlT2Zmc2V0ID09PSAndW5kZWZpbmVkJykgc3dpcGVyLnVwZGF0ZVNsaWRlc09mZnNldCgpO1xuXG4gIGxldCBvZmZzZXRDZW50ZXIgPSAtdHJhbnNsYXRlO1xuICBpZiAocnRsKSBvZmZzZXRDZW50ZXIgPSB0cmFuc2xhdGU7XG5cbiAgLy8gVmlzaWJsZSBTbGlkZXNcbiAgc2xpZGVzLnJlbW92ZUNsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG5cbiAgc3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzID0gW107XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICBjb25zdCBzbGlkZSA9IHNsaWRlc1tpXTtcbiAgICBjb25zdCBzbGlkZVByb2dyZXNzID0gKFxuICAgICAgKG9mZnNldENlbnRlciArIChwYXJhbXMuY2VudGVyZWRTbGlkZXMgPyBzd2lwZXIubWluVHJhbnNsYXRlKCkgOiAwKSkgLSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldFxuICAgICkgLyAoc2xpZGUuc3dpcGVyU2xpZGVTaXplICsgcGFyYW1zLnNwYWNlQmV0d2Vlbik7XG4gICAgaWYgKHBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkpIHtcbiAgICAgIGNvbnN0IHNsaWRlQmVmb3JlID0gLShvZmZzZXRDZW50ZXIgLSBzbGlkZS5zd2lwZXJTbGlkZU9mZnNldCk7XG4gICAgICBjb25zdCBzbGlkZUFmdGVyID0gc2xpZGVCZWZvcmUgKyBzd2lwZXIuc2xpZGVzU2l6ZXNHcmlkW2ldO1xuICAgICAgY29uc3QgaXNWaXNpYmxlID0gKHNsaWRlQmVmb3JlID49IDAgJiYgc2xpZGVCZWZvcmUgPCBzd2lwZXIuc2l6ZSAtIDEpXG4gICAgICAgICAgICAgICAgfHwgKHNsaWRlQWZ0ZXIgPiAxICYmIHNsaWRlQWZ0ZXIgPD0gc3dpcGVyLnNpemUpXG4gICAgICAgICAgICAgICAgfHwgKHNsaWRlQmVmb3JlIDw9IDAgJiYgc2xpZGVBZnRlciA+PSBzd2lwZXIuc2l6ZSk7XG4gICAgICBpZiAoaXNWaXNpYmxlKSB7XG4gICAgICAgIHN3aXBlci52aXNpYmxlU2xpZGVzLnB1c2goc2xpZGUpO1xuICAgICAgICBzd2lwZXIudmlzaWJsZVNsaWRlc0luZGV4ZXMucHVzaChpKTtcbiAgICAgICAgc2xpZGVzLmVxKGkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZVZpc2libGVDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHNsaWRlLnByb2dyZXNzID0gcnRsID8gLXNsaWRlUHJvZ3Jlc3MgOiBzbGlkZVByb2dyZXNzO1xuICB9XG4gIHN3aXBlci52aXNpYmxlU2xpZGVzID0gJChzd2lwZXIudmlzaWJsZVNsaWRlcyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZVByb2dyZXNzICh0cmFuc2xhdGUgPSAodGhpcyAmJiB0aGlzLnRyYW5zbGF0ZSkgfHwgMCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuXG4gIGNvbnN0IHRyYW5zbGF0ZXNEaWZmID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpO1xuICBsZXQgeyBwcm9ncmVzcywgaXNCZWdpbm5pbmcsIGlzRW5kIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHdhc0JlZ2lubmluZyA9IGlzQmVnaW5uaW5nO1xuICBjb25zdCB3YXNFbmQgPSBpc0VuZDtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgcHJvZ3Jlc3MgPSAwO1xuICAgIGlzQmVnaW5uaW5nID0gdHJ1ZTtcbiAgICBpc0VuZCA9IHRydWU7XG4gIH0gZWxzZSB7XG4gICAgcHJvZ3Jlc3MgPSAodHJhbnNsYXRlIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAvICh0cmFuc2xhdGVzRGlmZik7XG4gICAgaXNCZWdpbm5pbmcgPSBwcm9ncmVzcyA8PSAwO1xuICAgIGlzRW5kID0gcHJvZ3Jlc3MgPj0gMTtcbiAgfVxuICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgcHJvZ3Jlc3MsXG4gICAgaXNCZWdpbm5pbmcsXG4gICAgaXNFbmQsXG4gIH0pO1xuXG4gIGlmIChwYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyB8fCBwYXJhbXMud2F0Y2hTbGlkZXNWaXNpYmlsaXR5KSBzd2lwZXIudXBkYXRlU2xpZGVzUHJvZ3Jlc3ModHJhbnNsYXRlKTtcblxuICBpZiAoaXNCZWdpbm5pbmcgJiYgIXdhc0JlZ2lubmluZykge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEJlZ2lubmluZyB0b0VkZ2UnKTtcbiAgfVxuICBpZiAoaXNFbmQgJiYgIXdhc0VuZCkge1xuICAgIHN3aXBlci5lbWl0KCdyZWFjaEVuZCB0b0VkZ2UnKTtcbiAgfVxuICBpZiAoKHdhc0JlZ2lubmluZyAmJiAhaXNCZWdpbm5pbmcpIHx8ICh3YXNFbmQgJiYgIWlzRW5kKSkge1xuICAgIHN3aXBlci5lbWl0KCdmcm9tRWRnZScpO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3Byb2dyZXNzJywgcHJvZ3Jlc3MpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVTbGlkZXNDbGFzc2VzICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBjb25zdCB7XG4gICAgc2xpZGVzLCBwYXJhbXMsICR3cmFwcGVyRWwsIGFjdGl2ZUluZGV4LCByZWFsSW5kZXgsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG5cbiAgc2xpZGVzLnJlbW92ZUNsYXNzKGAke3BhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzfSAke3BhcmFtcy5zbGlkZU5leHRDbGFzc30gJHtwYXJhbXMuc2xpZGVQcmV2Q2xhc3N9ICR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3N9ICR7cGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzfSAke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzc31gKTtcblxuICBsZXQgYWN0aXZlU2xpZGU7XG4gIGlmIChpc1ZpcnR1YWwpIHtcbiAgICBhY3RpdmVTbGlkZSA9IHN3aXBlci4kd3JhcHBlckVsLmZpbmQoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7YWN0aXZlSW5kZXh9XCJdYCk7XG4gIH0gZWxzZSB7XG4gICAgYWN0aXZlU2xpZGUgPSBzbGlkZXMuZXEoYWN0aXZlSW5kZXgpO1xuICB9XG5cbiAgLy8gQWN0aXZlIGNsYXNzZXNcbiAgYWN0aXZlU2xpZGUuYWRkQ2xhc3MocGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MpO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgIGlmIChhY3RpdmVTbGlkZS5oYXNDbGFzcyhwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICR3cmFwcGVyRWxcbiAgICAgICAgLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc306bm90KC4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSlbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3JlYWxJbmRleH1cIl1gKVxuICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQWN0aXZlQ2xhc3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICAkd3JhcHBlckVsXG4gICAgICAgIC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdYClcbiAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gIH1cbiAgLy8gTmV4dCBTbGlkZVxuICBsZXQgbmV4dFNsaWRlID0gYWN0aXZlU2xpZGUubmV4dEFsbChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCkuZXEoMCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlTmV4dENsYXNzKTtcbiAgaWYgKHBhcmFtcy5sb29wICYmIG5leHRTbGlkZS5sZW5ndGggPT09IDApIHtcbiAgICBuZXh0U2xpZGUgPSBzbGlkZXMuZXEoMCk7XG4gICAgbmV4dFNsaWRlLmFkZENsYXNzKHBhcmFtcy5zbGlkZU5leHRDbGFzcyk7XG4gIH1cbiAgLy8gUHJldiBTbGlkZVxuICBsZXQgcHJldlNsaWRlID0gYWN0aXZlU2xpZGUucHJldkFsbChgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCkuZXEoMCkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlUHJldkNsYXNzKTtcbiAgaWYgKHBhcmFtcy5sb29wICYmIHByZXZTbGlkZS5sZW5ndGggPT09IDApIHtcbiAgICBwcmV2U2xpZGUgPSBzbGlkZXMuZXEoLTEpO1xuICAgIHByZXZTbGlkZS5hZGRDbGFzcyhwYXJhbXMuc2xpZGVQcmV2Q2xhc3MpO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIC8vIER1cGxpY2F0ZSB0byBhbGwgbG9vcGVkIHNsaWRlc1xuICAgIGlmIChuZXh0U2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAkd3JhcHBlckVsXG4gICAgICAgIC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9Om5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtuZXh0U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKX1cIl1gKVxuICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlTmV4dENsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7bmV4dFNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyl9XCJdYClcbiAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZU5leHRDbGFzcyk7XG4gICAgfVxuICAgIGlmIChwcmV2U2xpZGUuaGFzQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAkd3JhcHBlckVsXG4gICAgICAgIC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9Om5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtwcmV2U2xpZGUuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKX1cIl1gKVxuICAgICAgICAuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlUHJldkNsYXNzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJHdyYXBwZXJFbFxuICAgICAgICAuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cHJldlNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4Jyl9XCJdYClcbiAgICAgICAgLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZVByZXZDbGFzcyk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUFjdGl2ZUluZGV4IChuZXdBY3RpdmVJbmRleCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB0cmFuc2xhdGUgPSBzd2lwZXIucnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBjb25zdCB7XG4gICAgc2xpZGVzR3JpZCwgc25hcEdyaWQsIHBhcmFtcywgYWN0aXZlSW5kZXg6IHByZXZpb3VzSW5kZXgsIHJlYWxJbmRleDogcHJldmlvdXNSZWFsSW5kZXgsIHNuYXBJbmRleDogcHJldmlvdXNTbmFwSW5kZXgsXG4gIH0gPSBzd2lwZXI7XG4gIGxldCBhY3RpdmVJbmRleCA9IG5ld0FjdGl2ZUluZGV4O1xuICBsZXQgc25hcEluZGV4O1xuICBpZiAodHlwZW9mIGFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyAxXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldICYmIHRyYW5zbGF0ZSA8IHNsaWRlc0dyaWRbaSArIDFdIC0gKChzbGlkZXNHcmlkW2kgKyAxXSAtIHNsaWRlc0dyaWRbaV0pIC8gMikpIHtcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IGk7XG4gICAgICAgIH0gZWxzZSBpZiAodHJhbnNsYXRlID49IHNsaWRlc0dyaWRbaV0gJiYgdHJhbnNsYXRlIDwgc2xpZGVzR3JpZFtpICsgMV0pIHtcbiAgICAgICAgICBhY3RpdmVJbmRleCA9IGkgKyAxO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRyYW5zbGF0ZSA+PSBzbGlkZXNHcmlkW2ldKSB7XG4gICAgICAgIGFjdGl2ZUluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gTm9ybWFsaXplIHNsaWRlSW5kZXhcbiAgICBpZiAocGFyYW1zLm5vcm1hbGl6ZVNsaWRlSW5kZXgpIHtcbiAgICAgIGlmIChhY3RpdmVJbmRleCA8IDAgfHwgdHlwZW9mIGFjdGl2ZUluZGV4ID09PSAndW5kZWZpbmVkJykgYWN0aXZlSW5kZXggPSAwO1xuICAgIH1cbiAgfVxuICBpZiAoc25hcEdyaWQuaW5kZXhPZih0cmFuc2xhdGUpID49IDApIHtcbiAgICBzbmFwSW5kZXggPSBzbmFwR3JpZC5pbmRleE9mKHRyYW5zbGF0ZSk7XG4gIH0gZWxzZSB7XG4gICAgc25hcEluZGV4ID0gTWF0aC5mbG9vcihhY3RpdmVJbmRleCAvIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gIH1cbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG4gIGlmIChhY3RpdmVJbmRleCA9PT0gcHJldmlvdXNJbmRleCkge1xuICAgIGlmIChzbmFwSW5kZXggIT09IHByZXZpb3VzU25hcEluZGV4KSB7XG4gICAgICBzd2lwZXIuc25hcEluZGV4ID0gc25hcEluZGV4O1xuICAgICAgc3dpcGVyLmVtaXQoJ3NuYXBJbmRleENoYW5nZScpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBHZXQgcmVhbCBpbmRleFxuICBjb25zdCByZWFsSW5kZXggPSBwYXJzZUludChzd2lwZXIuc2xpZGVzLmVxKGFjdGl2ZUluZGV4KS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIHx8IGFjdGl2ZUluZGV4LCAxMCk7XG5cbiAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgIHNuYXBJbmRleCxcbiAgICByZWFsSW5kZXgsXG4gICAgcHJldmlvdXNJbmRleCxcbiAgICBhY3RpdmVJbmRleCxcbiAgfSk7XG4gIHN3aXBlci5lbWl0KCdhY3RpdmVJbmRleENoYW5nZScpO1xuICBzd2lwZXIuZW1pdCgnc25hcEluZGV4Q2hhbmdlJyk7XG4gIGlmIChwcmV2aW91c1JlYWxJbmRleCAhPT0gcmVhbEluZGV4KSB7XG4gICAgc3dpcGVyLmVtaXQoJ3JlYWxJbmRleENoYW5nZScpO1xuICB9XG4gIGlmIChzd2lwZXIuaW5pdGlhbGl6ZWQgfHwgc3dpcGVyLnJ1bkNhbGxiYWNrc09uSW5pdCkge1xuICAgIHN3aXBlci5lbWl0KCdzbGlkZUNoYW5nZScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNsaWNrZWRTbGlkZSAoZSkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zO1xuICBjb25zdCBzbGlkZSA9ICQoZS50YXJnZXQpLmNsb3Nlc3QoYC4ke3BhcmFtcy5zbGlkZUNsYXNzfWApWzBdO1xuICBsZXQgc2xpZGVGb3VuZCA9IGZhbHNlO1xuICBpZiAoc2xpZGUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2ldID09PSBzbGlkZSkgc2xpZGVGb3VuZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNsaWRlICYmIHNsaWRlRm91bmQpIHtcbiAgICBzd2lwZXIuY2xpY2tlZFNsaWRlID0gc2xpZGU7XG4gICAgaWYgKHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gcGFyc2VJbnQoJChzbGlkZSkuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gJChzbGlkZSkuaW5kZXgoKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLmNsaWNrZWRTbGlkZSA9IHVuZGVmaW5lZDtcbiAgICBzd2lwZXIuY2xpY2tlZEluZGV4ID0gdW5kZWZpbmVkO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnNsaWRlVG9DbGlja2VkU2xpZGUgJiYgc3dpcGVyLmNsaWNrZWRJbmRleCAhPT0gdW5kZWZpbmVkICYmIHN3aXBlci5jbGlja2VkSW5kZXggIT09IHN3aXBlci5hY3RpdmVJbmRleCkge1xuICAgIHN3aXBlci5zbGlkZVRvQ2xpY2tlZFNsaWRlKCk7XG4gIH1cbn1cblxudmFyIHVwZGF0ZSA9IHtcbiAgdXBkYXRlU2l6ZSxcbiAgdXBkYXRlU2xpZGVzLFxuICB1cGRhdGVBdXRvSGVpZ2h0LFxuICB1cGRhdGVTbGlkZXNPZmZzZXQsXG4gIHVwZGF0ZVNsaWRlc1Byb2dyZXNzLFxuICB1cGRhdGVQcm9ncmVzcyxcbiAgdXBkYXRlU2xpZGVzQ2xhc3NlcyxcbiAgdXBkYXRlQWN0aXZlSW5kZXgsXG4gIHVwZGF0ZUNsaWNrZWRTbGlkZSxcbn07XG5cbmZ1bmN0aW9uIGdldFRyYW5zbGF0ZSAoYXhpcyA9IHRoaXMuaXNIb3Jpem9udGFsKCkgPyAneCcgOiAneScpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBjb25zdCB7XG4gICAgcGFyYW1zLCBydGxUcmFuc2xhdGU6IHJ0bCwgdHJhbnNsYXRlLCAkd3JhcHBlckVsLFxuICB9ID0gc3dpcGVyO1xuXG4gIGlmIChwYXJhbXMudmlydHVhbFRyYW5zbGF0ZSkge1xuICAgIHJldHVybiBydGwgPyAtdHJhbnNsYXRlIDogdHJhbnNsYXRlO1xuICB9XG5cbiAgbGV0IGN1cnJlbnRUcmFuc2xhdGUgPSBVdGlscy5nZXRUcmFuc2xhdGUoJHdyYXBwZXJFbFswXSwgYXhpcyk7XG4gIGlmIChydGwpIGN1cnJlbnRUcmFuc2xhdGUgPSAtY3VycmVudFRyYW5zbGF0ZTtcblxuICByZXR1cm4gY3VycmVudFRyYW5zbGF0ZSB8fCAwO1xufVxuXG5mdW5jdGlvbiBzZXRUcmFuc2xhdGUgKHRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHtcbiAgICBydGxUcmFuc2xhdGU6IHJ0bCwgcGFyYW1zLCAkd3JhcHBlckVsLCBwcm9ncmVzcyxcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IHggPSAwO1xuICBsZXQgeSA9IDA7XG4gIGNvbnN0IHogPSAwO1xuXG4gIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICB4ID0gcnRsID8gLXRyYW5zbGF0ZSA6IHRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICB5ID0gdHJhbnNsYXRlO1xuICB9XG5cbiAgaWYgKHBhcmFtcy5yb3VuZExlbmd0aHMpIHtcbiAgICB4ID0gTWF0aC5mbG9vcih4KTtcbiAgICB5ID0gTWF0aC5mbG9vcih5KTtcbiAgfVxuXG4gIGlmICghcGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHtcbiAgICBpZiAoU3VwcG9ydC50cmFuc2Zvcm1zM2QpICR3cmFwcGVyRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke3h9cHgsICR7eX1weCwgJHt6fXB4KWApO1xuICAgIGVsc2UgJHdyYXBwZXJFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZSgke3h9cHgsICR7eX1weClgKTtcbiAgfVxuICBzd2lwZXIucHJldmlvdXNUcmFuc2xhdGUgPSBzd2lwZXIudHJhbnNsYXRlO1xuICBzd2lwZXIudHJhbnNsYXRlID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8geCA6IHk7XG5cbiAgLy8gQ2hlY2sgaWYgd2UgbmVlZCB0byB1cGRhdGUgcHJvZ3Jlc3NcbiAgbGV0IG5ld1Byb2dyZXNzO1xuICBjb25zdCB0cmFuc2xhdGVzRGlmZiA9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgaWYgKHRyYW5zbGF0ZXNEaWZmID09PSAwKSB7XG4gICAgbmV3UHJvZ3Jlc3MgPSAwO1xuICB9IGVsc2Uge1xuICAgIG5ld1Byb2dyZXNzID0gKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgLyAodHJhbnNsYXRlc0RpZmYpO1xuICB9XG4gIGlmIChuZXdQcm9ncmVzcyAhPT0gcHJvZ3Jlc3MpIHtcbiAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3ModHJhbnNsYXRlKTtcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2xhdGUnLCBzd2lwZXIudHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpO1xufVxuXG5mdW5jdGlvbiBtaW5UcmFuc2xhdGUgKCkge1xuICByZXR1cm4gKC10aGlzLnNuYXBHcmlkWzBdKTtcbn1cblxuZnVuY3Rpb24gbWF4VHJhbnNsYXRlICgpIHtcbiAgcmV0dXJuICgtdGhpcy5zbmFwR3JpZFt0aGlzLnNuYXBHcmlkLmxlbmd0aCAtIDFdKTtcbn1cblxudmFyIHRyYW5zbGF0ZSA9IHtcbiAgZ2V0VHJhbnNsYXRlLFxuICBzZXRUcmFuc2xhdGUsXG4gIG1pblRyYW5zbGF0ZSxcbiAgbWF4VHJhbnNsYXRlLFxufTtcblxuZnVuY3Rpb24gc2V0VHJhbnNpdGlvbiAoZHVyYXRpb24sIGJ5Q29udHJvbGxlcikge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gIHN3aXBlci4kd3JhcHBlckVsLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuXG4gIHN3aXBlci5lbWl0KCdzZXRUcmFuc2l0aW9uJywgZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG59XG5cbmZ1bmN0aW9uIHRyYW5zaXRpb25TdGFydCAocnVuQ2FsbGJhY2tzID0gdHJ1ZSwgZGlyZWN0aW9uKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgYWN0aXZlSW5kZXgsIHBhcmFtcywgcHJldmlvdXNJbmRleCB9ID0gc3dpcGVyO1xuICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICB9XG5cbiAgbGV0IGRpciA9IGRpcmVjdGlvbjtcbiAgaWYgKCFkaXIpIHtcbiAgICBpZiAoYWN0aXZlSW5kZXggPiBwcmV2aW91c0luZGV4KSBkaXIgPSAnbmV4dCc7XG4gICAgZWxzZSBpZiAoYWN0aXZlSW5kZXggPCBwcmV2aW91c0luZGV4KSBkaXIgPSAncHJldic7XG4gICAgZWxzZSBkaXIgPSAncmVzZXQnO1xuICB9XG5cbiAgc3dpcGVyLmVtaXQoJ3RyYW5zaXRpb25TdGFydCcpO1xuXG4gIGlmIChydW5DYWxsYmFja3MgJiYgYWN0aXZlSW5kZXggIT09IHByZXZpb3VzSW5kZXgpIHtcbiAgICBpZiAoZGlyID09PSAncmVzZXQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVSZXNldFRyYW5zaXRpb25TdGFydCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2VUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICBpZiAoZGlyID09PSAnbmV4dCcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZU5leHRUcmFuc2l0aW9uU3RhcnQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoJ3NsaWRlUHJldlRyYW5zaXRpb25TdGFydCcpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiB0cmFuc2l0aW9uRW5kIChydW5DYWxsYmFja3MgPSB0cnVlLCBkaXJlY3Rpb24pIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyBhY3RpdmVJbmRleCwgcHJldmlvdXNJbmRleCB9ID0gc3dpcGVyO1xuICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuXG4gIGxldCBkaXIgPSBkaXJlY3Rpb247XG4gIGlmICghZGlyKSB7XG4gICAgaWYgKGFjdGl2ZUluZGV4ID4gcHJldmlvdXNJbmRleCkgZGlyID0gJ25leHQnO1xuICAgIGVsc2UgaWYgKGFjdGl2ZUluZGV4IDwgcHJldmlvdXNJbmRleCkgZGlyID0gJ3ByZXYnO1xuICAgIGVsc2UgZGlyID0gJ3Jlc2V0JztcbiAgfVxuXG4gIHN3aXBlci5lbWl0KCd0cmFuc2l0aW9uRW5kJyk7XG5cbiAgaWYgKHJ1bkNhbGxiYWNrcyAmJiBhY3RpdmVJbmRleCAhPT0gcHJldmlvdXNJbmRleCkge1xuICAgIGlmIChkaXIgPT09ICdyZXNldCcpIHtcbiAgICAgIHN3aXBlci5lbWl0KCdzbGlkZVJlc2V0VHJhbnNpdGlvbkVuZCcpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgnc2xpZGVDaGFuZ2VUcmFuc2l0aW9uRW5kJyk7XG4gICAgaWYgKGRpciA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVOZXh0VHJhbnNpdGlvbkVuZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIuZW1pdCgnc2xpZGVQcmV2VHJhbnNpdGlvbkVuZCcpO1xuICAgIH1cbiAgfVxufVxuXG52YXIgdHJhbnNpdGlvbiA9IHtcbiAgc2V0VHJhbnNpdGlvbixcbiAgdHJhbnNpdGlvblN0YXJ0LFxuICB0cmFuc2l0aW9uRW5kLFxufTtcblxuZnVuY3Rpb24gc2xpZGVUbyAoaW5kZXggPSAwLCBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgc2xpZGVJbmRleCA9IGluZGV4O1xuICBpZiAoc2xpZGVJbmRleCA8IDApIHNsaWRlSW5kZXggPSAwO1xuXG4gIGNvbnN0IHtcbiAgICBwYXJhbXMsIHNuYXBHcmlkLCBzbGlkZXNHcmlkLCBwcmV2aW91c0luZGV4LCBhY3RpdmVJbmRleCwgcnRsVHJhbnNsYXRlOiBydGwsXG4gIH0gPSBzd2lwZXI7XG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBsZXQgc25hcEluZGV4ID0gTWF0aC5mbG9vcihzbGlkZUluZGV4IC8gcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgaWYgKHNuYXBJbmRleCA+PSBzbmFwR3JpZC5sZW5ndGgpIHNuYXBJbmRleCA9IHNuYXBHcmlkLmxlbmd0aCAtIDE7XG5cbiAgaWYgKChhY3RpdmVJbmRleCB8fCBwYXJhbXMuaW5pdGlhbFNsaWRlIHx8IDApID09PSAocHJldmlvdXNJbmRleCB8fCAwKSAmJiBydW5DYWxsYmFja3MpIHtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlU2xpZGVDaGFuZ2VTdGFydCcpO1xuICB9XG5cbiAgY29uc3QgdHJhbnNsYXRlID0gLXNuYXBHcmlkW3NuYXBJbmRleF07XG5cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyh0cmFuc2xhdGUpO1xuXG4gIC8vIE5vcm1hbGl6ZSBzbGlkZUluZGV4XG4gIGlmIChwYXJhbXMubm9ybWFsaXplU2xpZGVJbmRleCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKC1NYXRoLmZsb29yKHRyYW5zbGF0ZSAqIDEwMCkgPj0gTWF0aC5mbG9vcihzbGlkZXNHcmlkW2ldICogMTAwKSkge1xuICAgICAgICBzbGlkZUluZGV4ID0gaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gRGlyZWN0aW9ucyBsb2Nrc1xuICBpZiAoc3dpcGVyLmluaXRpYWxpemVkICYmIHNsaWRlSW5kZXggIT09IGFjdGl2ZUluZGV4KSB7XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgdHJhbnNsYXRlIDwgc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPCBzd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgdHJhbnNsYXRlID4gc3dpcGVyLnRyYW5zbGF0ZSAmJiB0cmFuc2xhdGUgPiBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICAgIGlmICgoYWN0aXZlSW5kZXggfHwgMCkgIT09IHNsaWRlSW5kZXgpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBsZXQgZGlyZWN0aW9uO1xuICBpZiAoc2xpZGVJbmRleCA+IGFjdGl2ZUluZGV4KSBkaXJlY3Rpb24gPSAnbmV4dCc7XG4gIGVsc2UgaWYgKHNsaWRlSW5kZXggPCBhY3RpdmVJbmRleCkgZGlyZWN0aW9uID0gJ3ByZXYnO1xuICBlbHNlIGRpcmVjdGlvbiA9ICdyZXNldCc7XG5cblxuICAvLyBVcGRhdGUgSW5kZXhcbiAgaWYgKChydGwgJiYgLXRyYW5zbGF0ZSA9PT0gc3dpcGVyLnRyYW5zbGF0ZSkgfHwgKCFydGwgJiYgdHJhbnNsYXRlID09PSBzd2lwZXIudHJhbnNsYXRlKSkge1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleChzbGlkZUluZGV4KTtcbiAgICAvLyBVcGRhdGUgSGVpZ2h0XG4gICAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgIH1cbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIGlmIChwYXJhbXMuZWZmZWN0ICE9PSAnc2xpZGUnKSB7XG4gICAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHRyYW5zbGF0ZSk7XG4gICAgfVxuICAgIGlmIChkaXJlY3Rpb24gIT09ICdyZXNldCcpIHtcbiAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgICAgc3dpcGVyLnRyYW5zaXRpb25FbmQocnVuQ2FsbGJhY2tzLCBkaXJlY3Rpb24pO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoc3BlZWQgPT09IDAgfHwgIVN1cHBvcnQudHJhbnNpdGlvbikge1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNldFRyYW5zaXRpb24oc3BlZWQpO1xuICAgIHN3aXBlci5zZXRUcmFuc2xhdGUodHJhbnNsYXRlKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoc2xpZGVJbmRleCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICBzd2lwZXIuZW1pdCgnYmVmb3JlVHJhbnNpdGlvblN0YXJ0Jywgc3BlZWQsIGludGVybmFsKTtcbiAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHJ1bkNhbGxiYWNrcywgZGlyZWN0aW9uKTtcbiAgICBpZiAoIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgaWYgKCFzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpIHtcbiAgICAgICAgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZChlKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgICAgICAgIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZCA9IG51bGw7XG4gICAgICAgICAgZGVsZXRlIHN3aXBlci5vblNsaWRlVG9XcmFwcGVyVHJhbnNpdGlvbkVuZDtcbiAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZChydW5DYWxsYmFja3MsIGRpcmVjdGlvbik7XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5hZGRFdmVudExpc3RlbmVyKCd0cmFuc2l0aW9uZW5kJywgc3dpcGVyLm9uU2xpZGVUb1dyYXBwZXJUcmFuc2l0aW9uRW5kKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIub25TbGlkZVRvV3JhcHBlclRyYW5zaXRpb25FbmQpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBzbGlkZVRvTG9vcCAoaW5kZXggPSAwLCBzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBsZXQgbmV3SW5kZXggPSBpbmRleDtcbiAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgIG5ld0luZGV4ICs9IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gIH1cblxuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZU5leHQgKHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgcGFyYW1zLCBhbmltYXRpbmcgfSA9IHN3aXBlcjtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgaWYgKGFuaW1hdGluZykgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4ICsgcGFyYW1zLnNsaWRlc1Blckdyb3VwLCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG4gIH1cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCArIHBhcmFtcy5zbGlkZXNQZXJHcm91cCwgc3BlZWQsIHJ1bkNhbGxiYWNrcywgaW50ZXJuYWwpO1xufVxuXG4vKiBlc2xpbnQgbm8tdW51c2VkLXZhcnM6IFwib2ZmXCIgKi9cbmZ1bmN0aW9uIHNsaWRlUHJldiAoc3BlZWQgPSB0aGlzLnBhcmFtcy5zcGVlZCwgcnVuQ2FsbGJhY2tzID0gdHJ1ZSwgaW50ZXJuYWwpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcywgYW5pbWF0aW5nLCBzbmFwR3JpZCwgc2xpZGVzR3JpZCwgcnRsVHJhbnNsYXRlLFxuICB9ID0gc3dpcGVyO1xuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChhbmltYXRpbmcpIHJldHVybiBmYWxzZTtcbiAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIHN3aXBlci5fY2xpZW50TGVmdCA9IHN3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gIH1cbiAgY29uc3QgdHJhbnNsYXRlID0gcnRsVHJhbnNsYXRlID8gc3dpcGVyLnRyYW5zbGF0ZSA6IC1zd2lwZXIudHJhbnNsYXRlO1xuICBmdW5jdGlvbiBub3JtYWxpemUodmFsKSB7XG4gICAgaWYgKHZhbCA8IDApIHJldHVybiAtTWF0aC5mbG9vcihNYXRoLmFicyh2YWwpKTtcbiAgICByZXR1cm4gTWF0aC5mbG9vcih2YWwpO1xuICB9XG4gIGNvbnN0IG5vcm1hbGl6ZWRUcmFuc2xhdGUgPSBub3JtYWxpemUodHJhbnNsYXRlKTtcbiAgY29uc3Qgbm9ybWFsaXplZFNuYXBHcmlkID0gc25hcEdyaWQubWFwKCh2YWwpID0+IG5vcm1hbGl6ZSh2YWwpKTtcbiAgY29uc3Qgbm9ybWFsaXplZFNsaWRlc0dyaWQgPSBzbGlkZXNHcmlkLm1hcCgodmFsKSA9PiBub3JtYWxpemUodmFsKSk7XG5cbiAgY29uc3QgY3VycmVudFNuYXAgPSBzbmFwR3JpZFtub3JtYWxpemVkU25hcEdyaWQuaW5kZXhPZihub3JtYWxpemVkVHJhbnNsYXRlKV07XG4gIGNvbnN0IHByZXZTbmFwID0gc25hcEdyaWRbbm9ybWFsaXplZFNuYXBHcmlkLmluZGV4T2Yobm9ybWFsaXplZFRyYW5zbGF0ZSkgLSAxXTtcbiAgbGV0IHByZXZJbmRleDtcbiAgaWYgKHR5cGVvZiBwcmV2U25hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBwcmV2SW5kZXggPSBzbGlkZXNHcmlkLmluZGV4T2YocHJldlNuYXApO1xuICAgIGlmIChwcmV2SW5kZXggPCAwKSBwcmV2SW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggLSAxO1xuICB9XG4gIHJldHVybiBzd2lwZXIuc2xpZGVUbyhwcmV2SW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MsIGludGVybmFsKTtcbn1cblxuLyogZXNsaW50IG5vLXVudXNlZC12YXJzOiBcIm9mZlwiICovXG5mdW5jdGlvbiBzbGlkZVJlc2V0IChzcGVlZCA9IHRoaXMucGFyYW1zLnNwZWVkLCBydW5DYWxsYmFja3MgPSB0cnVlLCBpbnRlcm5hbCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICByZXR1cm4gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuZnVuY3Rpb24gc2xpZGVUb0Nsb3Nlc3QgKHNwZWVkID0gdGhpcy5wYXJhbXMuc3BlZWQsIHJ1bkNhbGxiYWNrcyA9IHRydWUsIGludGVybmFsKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGxldCBpbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgY29uc3Qgc25hcEluZGV4ID0gTWF0aC5mbG9vcihpbmRleCAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuXG4gIGlmIChzbmFwSW5kZXggPCBzd2lwZXIuc25hcEdyaWQubGVuZ3RoIC0gMSkge1xuICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyBzd2lwZXIudHJhbnNsYXRlIDogLXN3aXBlci50cmFuc2xhdGU7XG5cbiAgICBjb25zdCBjdXJyZW50U25hcCA9IHN3aXBlci5zbmFwR3JpZFtzbmFwSW5kZXhdO1xuICAgIGNvbnN0IG5leHRTbmFwID0gc3dpcGVyLnNuYXBHcmlkW3NuYXBJbmRleCArIDFdO1xuXG4gICAgaWYgKCh0cmFuc2xhdGUgLSBjdXJyZW50U25hcCkgPiAobmV4dFNuYXAgLSBjdXJyZW50U25hcCkgLyAyKSB7XG4gICAgICBpbmRleCA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN3aXBlci5zbGlkZVRvKGluZGV4LCBzcGVlZCwgcnVuQ2FsbGJhY2tzLCBpbnRlcm5hbCk7XG59XG5cbmZ1bmN0aW9uIHNsaWRlVG9DbGlja2VkU2xpZGUgKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7IHBhcmFtcywgJHdyYXBwZXJFbCB9ID0gc3dpcGVyO1xuXG4gIGNvbnN0IHNsaWRlc1BlclZpZXcgPSBwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nID8gc3dpcGVyLnNsaWRlc1BlclZpZXdEeW5hbWljKCkgOiBwYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgbGV0IHNsaWRlVG9JbmRleCA9IHN3aXBlci5jbGlja2VkSW5kZXg7XG4gIGxldCByZWFsSW5kZXg7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSByZXR1cm47XG4gICAgcmVhbEluZGV4ID0gcGFyc2VJbnQoJChzd2lwZXIuY2xpY2tlZFNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgaWYgKFxuICAgICAgICAoc2xpZGVUb0luZGV4IDwgc3dpcGVyLmxvb3BlZFNsaWRlcyAtIChzbGlkZXNQZXJWaWV3IC8gMikpXG4gICAgICAgIHx8IChzbGlkZVRvSW5kZXggPiAoc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzKSArIChzbGlkZXNQZXJWaWV3IC8gMikpXG4gICAgICApIHtcbiAgICAgICAgc3dpcGVyLmxvb3BGaXgoKTtcbiAgICAgICAgc2xpZGVUb0luZGV4ID0gJHdyYXBwZXJFbFxuICAgICAgICAgIC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtyZWFsSW5kZXh9XCJdOm5vdCguJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc30pYClcbiAgICAgICAgICAuZXEoMClcbiAgICAgICAgICAuaW5kZXgoKTtcblxuICAgICAgICBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc2xpZGVUb0luZGV4KTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoc2xpZGVUb0luZGV4ID4gc3dpcGVyLnNsaWRlcy5sZW5ndGggLSBzbGlkZXNQZXJWaWV3KSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgc2xpZGVUb0luZGV4ID0gJHdyYXBwZXJFbFxuICAgICAgICAuY2hpbGRyZW4oYC4ke3BhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7cmVhbEluZGV4fVwiXTpub3QoLiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9KWApXG4gICAgICAgIC5lcSgwKVxuICAgICAgICAuaW5kZXgoKTtcblxuICAgICAgVXRpbHMubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICBzd2lwZXIuc2xpZGVUbyhzbGlkZVRvSW5kZXgpO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gIH1cbn1cblxudmFyIHNsaWRlID0ge1xuICBzbGlkZVRvLFxuICBzbGlkZVRvTG9vcCxcbiAgc2xpZGVOZXh0LFxuICBzbGlkZVByZXYsXG4gIHNsaWRlUmVzZXQsXG4gIHNsaWRlVG9DbG9zZXN0LFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlLFxufTtcblxuZnVuY3Rpb24gbG9vcENyZWF0ZSAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgcGFyYW1zLCAkd3JhcHBlckVsIH0gPSBzd2lwZXI7XG4gIC8vIFJlbW92ZSBkdXBsaWNhdGVkIHNsaWRlc1xuICAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc30uJHtwYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzc31gKS5yZW1vdmUoKTtcblxuICBsZXQgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCk7XG5cbiAgaWYgKHBhcmFtcy5sb29wRmlsbEdyb3VwV2l0aEJsYW5rKSB7XG4gICAgY29uc3QgYmxhbmtTbGlkZXNOdW0gPSBwYXJhbXMuc2xpZGVzUGVyR3JvdXAgLSAoc2xpZGVzLmxlbmd0aCAlIHBhcmFtcy5zbGlkZXNQZXJHcm91cCk7XG4gICAgaWYgKGJsYW5rU2xpZGVzTnVtICE9PSBwYXJhbXMuc2xpZGVzUGVyR3JvdXApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmxhbmtTbGlkZXNOdW07IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBibGFua05vZGUgPSAkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpKS5hZGRDbGFzcyhgJHtwYXJhbXMuc2xpZGVDbGFzc30gJHtwYXJhbXMuc2xpZGVCbGFua0NsYXNzfWApO1xuICAgICAgICAkd3JhcHBlckVsLmFwcGVuZChibGFua05vZGUpO1xuICAgICAgfVxuICAgICAgc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgIXBhcmFtcy5sb29wZWRTbGlkZXMpIHBhcmFtcy5sb29wZWRTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuXG4gIHN3aXBlci5sb29wZWRTbGlkZXMgPSBwYXJzZUludChwYXJhbXMubG9vcGVkU2xpZGVzIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3LCAxMCk7XG4gIHN3aXBlci5sb29wZWRTbGlkZXMgKz0gcGFyYW1zLmxvb3BBZGRpdGlvbmFsU2xpZGVzO1xuICBpZiAoc3dpcGVyLmxvb3BlZFNsaWRlcyA+IHNsaWRlcy5sZW5ndGgpIHtcbiAgICBzd2lwZXIubG9vcGVkU2xpZGVzID0gc2xpZGVzLmxlbmd0aDtcbiAgfVxuXG4gIGNvbnN0IHByZXBlbmRTbGlkZXMgPSBbXTtcbiAgY29uc3QgYXBwZW5kU2xpZGVzID0gW107XG4gIHNsaWRlcy5lYWNoKChpbmRleCwgZWwpID0+IHtcbiAgICBjb25zdCBzbGlkZSA9ICQoZWwpO1xuICAgIGlmIChpbmRleCA8IHN3aXBlci5sb29wZWRTbGlkZXMpIGFwcGVuZFNsaWRlcy5wdXNoKGVsKTtcbiAgICBpZiAoaW5kZXggPCBzbGlkZXMubGVuZ3RoICYmIGluZGV4ID49IHNsaWRlcy5sZW5ndGggLSBzd2lwZXIubG9vcGVkU2xpZGVzKSBwcmVwZW5kU2xpZGVzLnB1c2goZWwpO1xuICAgIHNsaWRlLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICB9KTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcHBlbmRTbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAkd3JhcHBlckVsLmFwcGVuZCgkKGFwcGVuZFNsaWRlc1tpXS5jbG9uZU5vZGUodHJ1ZSkpLmFkZENsYXNzKHBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSk7XG4gIH1cbiAgZm9yIChsZXQgaSA9IHByZXBlbmRTbGlkZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcbiAgICAkd3JhcHBlckVsLnByZXBlbmQoJChwcmVwZW5kU2xpZGVzW2ldLmNsb25lTm9kZSh0cnVlKSkuYWRkQ2xhc3MocGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsb29wRml4ICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcywgYWN0aXZlSW5kZXgsIHNsaWRlcywgbG9vcGVkU2xpZGVzLCBhbGxvd1NsaWRlUHJldiwgYWxsb3dTbGlkZU5leHQsIHNuYXBHcmlkLCBydGxUcmFuc2xhdGU6IHJ0bCxcbiAgfSA9IHN3aXBlcjtcbiAgbGV0IG5ld0luZGV4O1xuICBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPSB0cnVlO1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSB0cnVlO1xuXG4gIGNvbnN0IHNuYXBUcmFuc2xhdGUgPSAtc25hcEdyaWRbYWN0aXZlSW5kZXhdO1xuICBjb25zdCBkaWZmID0gc25hcFRyYW5zbGF0ZSAtIHN3aXBlci5nZXRUcmFuc2xhdGUoKTtcblxuXG4gIC8vIEZpeCBGb3IgTmVnYXRpdmUgT3ZlcnNsaWRpbmdcbiAgaWYgKGFjdGl2ZUluZGV4IDwgbG9vcGVkU2xpZGVzKSB7XG4gICAgbmV3SW5kZXggPSAoc2xpZGVzLmxlbmd0aCAtIChsb29wZWRTbGlkZXMgKiAzKSkgKyBhY3RpdmVJbmRleDtcbiAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7XG4gICAgY29uc3Qgc2xpZGVDaGFuZ2VkID0gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICBpZiAoc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoKHBhcmFtcy5zbGlkZXNQZXJWaWV3ID09PSAnYXV0bycgJiYgYWN0aXZlSW5kZXggPj0gbG9vcGVkU2xpZGVzICogMikgfHwgKGFjdGl2ZUluZGV4ID49IHNsaWRlcy5sZW5ndGggLSBsb29wZWRTbGlkZXMpKSB7XG4gICAgLy8gRml4IEZvciBQb3NpdGl2ZSBPdmVyc2xpZGluZ1xuICAgIG5ld0luZGV4ID0gLXNsaWRlcy5sZW5ndGggKyBhY3RpdmVJbmRleCArIGxvb3BlZFNsaWRlcztcbiAgICBuZXdJbmRleCArPSBsb29wZWRTbGlkZXM7XG4gICAgY29uc3Qgc2xpZGVDaGFuZ2VkID0gc3dpcGVyLnNsaWRlVG8obmV3SW5kZXgsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICBpZiAoc2xpZGVDaGFuZ2VkICYmIGRpZmYgIT09IDApIHtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoKHJ0bCA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZSkgLSBkaWZmKTtcbiAgICB9XG4gIH1cbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gYWxsb3dTbGlkZVByZXY7XG4gIHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9IGFsbG93U2xpZGVOZXh0O1xufVxuXG5mdW5jdGlvbiBsb29wRGVzdHJveSAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgJHdyYXBwZXJFbCwgcGFyYW1zLCBzbGlkZXMgfSA9IHN3aXBlcjtcbiAgJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9LiR7cGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3N9LC4ke3BhcmFtcy5zbGlkZUNsYXNzfS4ke3BhcmFtcy5zbGlkZUJsYW5rQ2xhc3N9YCkucmVtb3ZlKCk7XG4gIHNsaWRlcy5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xufVxuXG52YXIgbG9vcCA9IHtcbiAgbG9vcENyZWF0ZSxcbiAgbG9vcEZpeCxcbiAgbG9vcERlc3Ryb3ksXG59O1xuXG5mdW5jdGlvbiBzZXRHcmFiQ3Vyc29yIChtb3ZpbmcpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKFN1cHBvcnQudG91Y2ggfHwgIXN3aXBlci5wYXJhbXMuc2ltdWxhdGVUb3VjaCB8fCAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHN3aXBlci5pc0xvY2tlZCkpIHJldHVybjtcbiAgY29uc3QgZWwgPSBzd2lwZXIuZWw7XG4gIGVsLnN0eWxlLmN1cnNvciA9ICdtb3ZlJztcbiAgZWwuc3R5bGUuY3Vyc29yID0gbW92aW5nID8gJy13ZWJraXQtZ3JhYmJpbmcnIDogJy13ZWJraXQtZ3JhYic7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICctbW96LWdyYWJiaW4nIDogJy1tb3otZ3JhYic7XG4gIGVsLnN0eWxlLmN1cnNvciA9IG1vdmluZyA/ICdncmFiYmluZycgOiAnZ3JhYic7XG59XG5cbmZ1bmN0aW9uIHVuc2V0R3JhYkN1cnNvciAoKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGlmIChTdXBwb3J0LnRvdWNoIHx8IChzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkKSkgcmV0dXJuO1xuICBzd2lwZXIuZWwuc3R5bGUuY3Vyc29yID0gJyc7XG59XG5cbnZhciBncmFiQ3Vyc29yID0ge1xuICBzZXRHcmFiQ3Vyc29yLFxuICB1bnNldEdyYWJDdXJzb3IsXG59O1xuXG5mdW5jdGlvbiBhcHBlbmRTbGlkZSAoc2xpZGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgJHdyYXBwZXJFbCwgcGFyYW1zIH0gPSBzd2lwZXI7XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICB9XG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzW2ldKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgJHdyYXBwZXJFbC5hcHBlbmQoc2xpZGVzKTtcbiAgfVxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG4gIGlmICghKHBhcmFtcy5vYnNlcnZlciAmJiBTdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVwZW5kU2xpZGUgKHNsaWRlcykge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7IHBhcmFtcywgJHdyYXBwZXJFbCwgYWN0aXZlSW5kZXggfSA9IHN3aXBlcjtcblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgfVxuICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleCArIDE7XG4gIGlmICh0eXBlb2Ygc2xpZGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKHNsaWRlc1tpXSkgJHdyYXBwZXJFbC5wcmVwZW5kKHNsaWRlc1tpXSk7XG4gICAgfVxuICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICB9IGVsc2Uge1xuICAgICR3cmFwcGVyRWwucHJlcGVuZChzbGlkZXMpO1xuICB9XG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cbiAgaWYgKCEocGFyYW1zLm9ic2VydmVyICYmIFN1cHBvcnQub2JzZXJ2ZXIpKSB7XG4gICAgc3dpcGVyLnVwZGF0ZSgpO1xuICB9XG4gIHN3aXBlci5zbGlkZVRvKG5ld0FjdGl2ZUluZGV4LCAwLCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGFkZFNsaWRlIChpbmRleCwgc2xpZGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgJHdyYXBwZXJFbCwgcGFyYW1zLCBhY3RpdmVJbmRleCB9ID0gc3dpcGVyO1xuICBsZXQgYWN0aXZlSW5kZXhCdWZmZXIgPSBhY3RpdmVJbmRleDtcbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgYWN0aXZlSW5kZXhCdWZmZXIgLT0gc3dpcGVyLmxvb3BlZFNsaWRlcztcbiAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICBzd2lwZXIuc2xpZGVzID0gJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7cGFyYW1zLnNsaWRlQ2xhc3N9YCk7XG4gIH1cbiAgY29uc3QgYmFzZUxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoO1xuICBpZiAoaW5kZXggPD0gMCkge1xuICAgIHN3aXBlci5wcmVwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGluZGV4ID49IGJhc2VMZW5ndGgpIHtcbiAgICBzd2lwZXIuYXBwZW5kU2xpZGUoc2xpZGVzKTtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXIgPiBpbmRleCA/IGFjdGl2ZUluZGV4QnVmZmVyICsgMSA6IGFjdGl2ZUluZGV4QnVmZmVyO1xuXG4gIGNvbnN0IHNsaWRlc0J1ZmZlciA9IFtdO1xuICBmb3IgKGxldCBpID0gYmFzZUxlbmd0aCAtIDE7IGkgPj0gaW5kZXg7IGkgLT0gMSkge1xuICAgIGNvbnN0IGN1cnJlbnRTbGlkZSA9IHN3aXBlci5zbGlkZXMuZXEoaSk7XG4gICAgY3VycmVudFNsaWRlLnJlbW92ZSgpO1xuICAgIHNsaWRlc0J1ZmZlci51bnNoaWZ0KGN1cnJlbnRTbGlkZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGlmIChzbGlkZXNbaV0pICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc1tpXSk7XG4gICAgfVxuICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXhCdWZmZXIgPiBpbmRleCA/IGFjdGl2ZUluZGV4QnVmZmVyICsgc2xpZGVzLmxlbmd0aCA6IGFjdGl2ZUluZGV4QnVmZmVyO1xuICB9IGVsc2Uge1xuICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlcyk7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlc0J1ZmZlci5sZW5ndGg7IGkgKz0gMSkge1xuICAgICR3cmFwcGVyRWwuYXBwZW5kKHNsaWRlc0J1ZmZlcltpXSk7XG4gIH1cblxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICB9XG4gIGlmICghKHBhcmFtcy5vYnNlcnZlciAmJiBTdXBwb3J0Lm9ic2VydmVyKSkge1xuICAgIHN3aXBlci51cGRhdGUoKTtcbiAgfVxuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCArIHN3aXBlci5sb29wZWRTbGlkZXMsIDAsIGZhbHNlKTtcbiAgfSBlbHNlIHtcbiAgICBzd2lwZXIuc2xpZGVUbyhuZXdBY3RpdmVJbmRleCwgMCwgZmFsc2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVNsaWRlIChzbGlkZXNJbmRleGVzKSB7XG4gIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gIGNvbnN0IHsgcGFyYW1zLCAkd3JhcHBlckVsLCBhY3RpdmVJbmRleCB9ID0gc3dpcGVyO1xuXG4gIGxldCBhY3RpdmVJbmRleEJ1ZmZlciA9IGFjdGl2ZUluZGV4O1xuICBpZiAocGFyYW1zLmxvb3ApIHtcbiAgICBhY3RpdmVJbmRleEJ1ZmZlciAtPSBzd2lwZXIubG9vcGVkU2xpZGVzO1xuICAgIHN3aXBlci5sb29wRGVzdHJveSgpO1xuICAgIHN3aXBlci5zbGlkZXMgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtwYXJhbXMuc2xpZGVDbGFzc31gKTtcbiAgfVxuICBsZXQgbmV3QWN0aXZlSW5kZXggPSBhY3RpdmVJbmRleEJ1ZmZlcjtcbiAgbGV0IGluZGV4VG9SZW1vdmU7XG5cbiAgaWYgKHR5cGVvZiBzbGlkZXNJbmRleGVzID09PSAnb2JqZWN0JyAmJiAnbGVuZ3RoJyBpbiBzbGlkZXNJbmRleGVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXNJbmRleGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpbmRleFRvUmVtb3ZlID0gc2xpZGVzSW5kZXhlc1tpXTtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzW2luZGV4VG9SZW1vdmVdKSBzd2lwZXIuc2xpZGVzLmVxKGluZGV4VG9SZW1vdmUpLnJlbW92ZSgpO1xuICAgICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXggLT0gMTtcbiAgICB9XG4gICAgbmV3QWN0aXZlSW5kZXggPSBNYXRoLm1heChuZXdBY3RpdmVJbmRleCwgMCk7XG4gIH0gZWxzZSB7XG4gICAgaW5kZXhUb1JlbW92ZSA9IHNsaWRlc0luZGV4ZXM7XG4gICAgaWYgKHN3aXBlci5zbGlkZXNbaW5kZXhUb1JlbW92ZV0pIHN3aXBlci5zbGlkZXMuZXEoaW5kZXhUb1JlbW92ZSkucmVtb3ZlKCk7XG4gICAgaWYgKGluZGV4VG9SZW1vdmUgPCBuZXdBY3RpdmVJbmRleCkgbmV3QWN0aXZlSW5kZXggLT0gMTtcbiAgICBuZXdBY3RpdmVJbmRleCA9IE1hdGgubWF4KG5ld0FjdGl2ZUluZGV4LCAwKTtcbiAgfVxuXG4gIGlmIChwYXJhbXMubG9vcCkge1xuICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gIH1cblxuICBpZiAoIShwYXJhbXMub2JzZXJ2ZXIgJiYgU3VwcG9ydC5vYnNlcnZlcikpIHtcbiAgICBzd2lwZXIudXBkYXRlKCk7XG4gIH1cbiAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXggKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBmYWxzZSk7XG4gIH0gZWxzZSB7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDAsIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVBbGxTbGlkZXMgKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gIGNvbnN0IHNsaWRlc0luZGV4ZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgc2xpZGVzSW5kZXhlcy5wdXNoKGkpO1xuICB9XG4gIHN3aXBlci5yZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKTtcbn1cblxudmFyIG1hbmlwdWxhdGlvbiA9IHtcbiAgYXBwZW5kU2xpZGUsXG4gIHByZXBlbmRTbGlkZSxcbiAgYWRkU2xpZGUsXG4gIHJlbW92ZVNsaWRlLFxuICByZW1vdmVBbGxTbGlkZXMsXG59O1xuXG5jb25zdCBEZXZpY2UgPSAoZnVuY3Rpb24gRGV2aWNlKCkge1xuICBjb25zdCB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGNvbnN0IGRldmljZSA9IHtcbiAgICBpb3M6IGZhbHNlLFxuICAgIGFuZHJvaWQ6IGZhbHNlLFxuICAgIGFuZHJvaWRDaHJvbWU6IGZhbHNlLFxuICAgIGRlc2t0b3A6IGZhbHNlLFxuICAgIHdpbmRvd3M6IGZhbHNlLFxuICAgIGlwaG9uZTogZmFsc2UsXG4gICAgaXBvZDogZmFsc2UsXG4gICAgaXBhZDogZmFsc2UsXG4gICAgY29yZG92YTogd2luZG93LmNvcmRvdmEgfHwgd2luZG93LnBob25lZ2FwLFxuICAgIHBob25lZ2FwOiB3aW5kb3cuY29yZG92YSB8fCB3aW5kb3cucGhvbmVnYXAsXG4gIH07XG5cbiAgY29uc3Qgd2luZG93cyA9IHVhLm1hdGNoKC8oV2luZG93cyBQaG9uZSk7P1tcXHNcXC9dKyhbXFxkLl0rKT8vKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBjb25zdCBhbmRyb2lkID0gdWEubWF0Y2goLyhBbmRyb2lkKTs/W1xcc1xcL10rKFtcXGQuXSspPy8pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIGNvbnN0IGlwYWQgPSB1YS5tYXRjaCgvKGlQYWQpLipPU1xccyhbXFxkX10rKS8pO1xuICBjb25zdCBpcG9kID0gdWEubWF0Y2goLyhpUG9kKSguKk9TXFxzKFtcXGRfXSspKT8vKTtcbiAgY29uc3QgaXBob25lID0gIWlwYWQgJiYgdWEubWF0Y2goLyhpUGhvbmVcXHNPU3xpT1MpXFxzKFtcXGRfXSspLyk7XG5cblxuICAvLyBXaW5kb3dzXG4gIGlmICh3aW5kb3dzKSB7XG4gICAgZGV2aWNlLm9zID0gJ3dpbmRvd3MnO1xuICAgIGRldmljZS5vc1ZlcnNpb24gPSB3aW5kb3dzWzJdO1xuICAgIGRldmljZS53aW5kb3dzID0gdHJ1ZTtcbiAgfVxuICAvLyBBbmRyb2lkXG4gIGlmIChhbmRyb2lkICYmICF3aW5kb3dzKSB7XG4gICAgZGV2aWNlLm9zID0gJ2FuZHJvaWQnO1xuICAgIGRldmljZS5vc1ZlcnNpb24gPSBhbmRyb2lkWzJdO1xuICAgIGRldmljZS5hbmRyb2lkID0gdHJ1ZTtcbiAgICBkZXZpY2UuYW5kcm9pZENocm9tZSA9IHVhLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignY2hyb21lJykgPj0gMDtcbiAgfVxuICBpZiAoaXBhZCB8fCBpcGhvbmUgfHwgaXBvZCkge1xuICAgIGRldmljZS5vcyA9ICdpb3MnO1xuICAgIGRldmljZS5pb3MgPSB0cnVlO1xuICB9XG4gIC8vIGlPU1xuICBpZiAoaXBob25lICYmICFpcG9kKSB7XG4gICAgZGV2aWNlLm9zVmVyc2lvbiA9IGlwaG9uZVsyXS5yZXBsYWNlKC9fL2csICcuJyk7XG4gICAgZGV2aWNlLmlwaG9uZSA9IHRydWU7XG4gIH1cbiAgaWYgKGlwYWQpIHtcbiAgICBkZXZpY2Uub3NWZXJzaW9uID0gaXBhZFsyXS5yZXBsYWNlKC9fL2csICcuJyk7XG4gICAgZGV2aWNlLmlwYWQgPSB0cnVlO1xuICB9XG4gIGlmIChpcG9kKSB7XG4gICAgZGV2aWNlLm9zVmVyc2lvbiA9IGlwb2RbM10gPyBpcG9kWzNdLnJlcGxhY2UoL18vZywgJy4nKSA6IG51bGw7XG4gICAgZGV2aWNlLmlwaG9uZSA9IHRydWU7XG4gIH1cbiAgLy8gaU9TIDgrIGNoYW5nZWQgVUFcbiAgaWYgKGRldmljZS5pb3MgJiYgZGV2aWNlLm9zVmVyc2lvbiAmJiB1YS5pbmRleE9mKCdWZXJzaW9uLycpID49IDApIHtcbiAgICBpZiAoZGV2aWNlLm9zVmVyc2lvbi5zcGxpdCgnLicpWzBdID09PSAnMTAnKSB7XG4gICAgICBkZXZpY2Uub3NWZXJzaW9uID0gdWEudG9Mb3dlckNhc2UoKS5zcGxpdCgndmVyc2lvbi8nKVsxXS5zcGxpdCgnICcpWzBdO1xuICAgIH1cbiAgfVxuXG4gIC8vIERlc2t0b3BcbiAgZGV2aWNlLmRlc2t0b3AgPSAhKGRldmljZS5vcyB8fCBkZXZpY2UuYW5kcm9pZCB8fCBkZXZpY2Uud2ViVmlldyk7XG5cbiAgLy8gV2Vidmlld1xuICBkZXZpY2Uud2ViVmlldyA9IChpcGhvbmUgfHwgaXBhZCB8fCBpcG9kKSAmJiB1YS5tYXRjaCgvLipBcHBsZVdlYktpdCg/IS4qU2FmYXJpKS9pKTtcblxuICAvLyBNaW5pbWFsIFVJXG4gIGlmIChkZXZpY2Uub3MgJiYgZGV2aWNlLm9zID09PSAnaW9zJykge1xuICAgIGNvbnN0IG9zVmVyc2lvbkFyciA9IGRldmljZS5vc1ZlcnNpb24uc3BsaXQoJy4nKTtcbiAgICBjb25zdCBtZXRhVmlld3BvcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZXRhW25hbWU9XCJ2aWV3cG9ydFwiXScpO1xuICAgIGRldmljZS5taW5pbWFsVWkgPSAhZGV2aWNlLndlYlZpZXdcbiAgICAgICYmIChpcG9kIHx8IGlwaG9uZSlcbiAgICAgICYmIChvc1ZlcnNpb25BcnJbMF0gKiAxID09PSA3ID8gb3NWZXJzaW9uQXJyWzFdICogMSA+PSAxIDogb3NWZXJzaW9uQXJyWzBdICogMSA+IDcpXG4gICAgICAmJiBtZXRhVmlld3BvcnQgJiYgbWV0YVZpZXdwb3J0LmdldEF0dHJpYnV0ZSgnY29udGVudCcpLmluZGV4T2YoJ21pbmltYWwtdWknKSA+PSAwO1xuICB9XG5cbiAgLy8gUGl4ZWwgUmF0aW9cbiAgZGV2aWNlLnBpeGVsUmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxO1xuXG4gIC8vIEV4cG9ydCBvYmplY3RcbiAgcmV0dXJuIGRldmljZTtcbn0oKSk7XG5cbmZ1bmN0aW9uIG9uVG91Y2hTdGFydCAoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG4gIGNvbnN0IHsgcGFyYW1zLCB0b3VjaGVzIH0gPSBzd2lwZXI7XG4gIGlmIChzd2lwZXIuYW5pbWF0aW5nICYmIHBhcmFtcy5wcmV2ZW50SW50ZXJhY3Rpb25PblRyYW5zaXRpb24pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgbGV0IGUgPSBldmVudDtcbiAgaWYgKGUub3JpZ2luYWxFdmVudCkgZSA9IGUub3JpZ2luYWxFdmVudDtcbiAgZGF0YS5pc1RvdWNoRXZlbnQgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JztcbiAgaWYgKCFkYXRhLmlzVG91Y2hFdmVudCAmJiAnd2hpY2gnIGluIGUgJiYgZS53aGljaCA9PT0gMykgcmV0dXJuO1xuICBpZiAoIWRhdGEuaXNUb3VjaEV2ZW50ICYmICdidXR0b24nIGluIGUgJiYgZS5idXR0b24gPiAwKSByZXR1cm47XG4gIGlmIChkYXRhLmlzVG91Y2hlZCAmJiBkYXRhLmlzTW92ZWQpIHJldHVybjtcbiAgaWYgKHBhcmFtcy5ub1N3aXBpbmcgJiYgJChlLnRhcmdldCkuY2xvc2VzdChwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgPyBwYXJhbXMubm9Td2lwaW5nU2VsZWN0b3IgOiBgLiR7cGFyYW1zLm5vU3dpcGluZ0NsYXNzfWApWzBdKSB7XG4gICAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocGFyYW1zLnN3aXBlSGFuZGxlcikge1xuICAgIGlmICghJChlKS5jbG9zZXN0KHBhcmFtcy5zd2lwZUhhbmRsZXIpWzBdKSByZXR1cm47XG4gIH1cblxuICB0b3VjaGVzLmN1cnJlbnRYID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gZS50eXBlID09PSAndG91Y2hzdGFydCcgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuICBjb25zdCBzdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICBjb25zdCBzdGFydFkgPSB0b3VjaGVzLmN1cnJlbnRZO1xuXG4gIC8vIERvIE5PVCBzdGFydCBpZiBpT1MgZWRnZSBzd2lwZSBpcyBkZXRlY3RlZC4gT3RoZXJ3aXNlIGlPUyBhcHAgKFVJV2ViVmlldykgY2Fubm90IHN3aXBlLXRvLWdvLWJhY2sgYW55bW9yZVxuXG4gIGNvbnN0IGVkZ2VTd2lwZURldGVjdGlvbiA9IHBhcmFtcy5lZGdlU3dpcGVEZXRlY3Rpb24gfHwgcGFyYW1zLmlPU0VkZ2VTd2lwZURldGVjdGlvbjtcbiAgY29uc3QgZWRnZVN3aXBlVGhyZXNob2xkID0gcGFyYW1zLmVkZ2VTd2lwZVRocmVzaG9sZCB8fCBwYXJhbXMuaU9TRWRnZVN3aXBlVGhyZXNob2xkO1xuICBpZiAoXG4gICAgZWRnZVN3aXBlRGV0ZWN0aW9uXG4gICAgJiYgKChzdGFydFggPD0gZWRnZVN3aXBlVGhyZXNob2xkKVxuICAgIHx8IChzdGFydFggPj0gd2luZG93LnNjcmVlbi53aWR0aCAtIGVkZ2VTd2lwZVRocmVzaG9sZCkpXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIFV0aWxzLmV4dGVuZChkYXRhLCB7XG4gICAgaXNUb3VjaGVkOiB0cnVlLFxuICAgIGlzTW92ZWQ6IGZhbHNlLFxuICAgIGFsbG93VG91Y2hDYWxsYmFja3M6IHRydWUsXG4gICAgaXNTY3JvbGxpbmc6IHVuZGVmaW5lZCxcbiAgICBzdGFydE1vdmluZzogdW5kZWZpbmVkLFxuICB9KTtcblxuICB0b3VjaGVzLnN0YXJ0WCA9IHN0YXJ0WDtcbiAgdG91Y2hlcy5zdGFydFkgPSBzdGFydFk7XG4gIGRhdGEudG91Y2hTdGFydFRpbWUgPSBVdGlscy5ub3coKTtcbiAgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSB1bmRlZmluZWQ7XG4gIGlmIChwYXJhbXMudGhyZXNob2xkID4gMCkgZGF0YS5hbGxvd1RocmVzaG9sZE1vdmUgPSBmYWxzZTtcbiAgaWYgKGUudHlwZSAhPT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgbGV0IHByZXZlbnREZWZhdWx0ID0gdHJ1ZTtcbiAgICBpZiAoJChlLnRhcmdldCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpKSBwcmV2ZW50RGVmYXVsdCA9IGZhbHNlO1xuICAgIGlmIChcbiAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnRcbiAgICAgICYmICQoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpXG4gICAgICAmJiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlLnRhcmdldFxuICAgICkge1xuICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ibHVyKCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2hvdWxkUHJldmVudERlZmF1bHQgPSBwcmV2ZW50RGVmYXVsdCAmJiBzd2lwZXIuYWxsb3dUb3VjaE1vdmUgJiYgcGFyYW1zLnRvdWNoU3RhcnRQcmV2ZW50RGVmYXVsdDtcbiAgICBpZiAocGFyYW1zLnRvdWNoU3RhcnRGb3JjZVByZXZlbnREZWZhdWx0IHx8IHNob3VsZFByZXZlbnREZWZhdWx0KSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICB9XG4gIHN3aXBlci5lbWl0KCd0b3VjaFN0YXJ0JywgZSk7XG59XG5cbmZ1bmN0aW9uIG9uVG91Y2hNb3ZlIChldmVudCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCBkYXRhID0gc3dpcGVyLnRvdWNoRXZlbnRzRGF0YTtcbiAgY29uc3QgeyBwYXJhbXMsIHRvdWNoZXMsIHJ0bFRyYW5zbGF0ZTogcnRsIH0gPSBzd2lwZXI7XG4gIGxldCBlID0gZXZlbnQ7XG4gIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5zdGFydE1vdmluZyAmJiBkYXRhLmlzU2Nyb2xsaW5nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgndG91Y2hNb3ZlT3Bwb3NpdGUnLCBlKTtcbiAgICB9XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChkYXRhLmlzVG91Y2hFdmVudCAmJiBlLnR5cGUgPT09ICdtb3VzZW1vdmUnKSByZXR1cm47XG4gIGNvbnN0IHBhZ2VYID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gIGNvbnN0IHBhZ2VZID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gIGlmIChlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyKSB7XG4gICAgdG91Y2hlcy5zdGFydFggPSBwYWdlWDtcbiAgICB0b3VjaGVzLnN0YXJ0WSA9IHBhZ2VZO1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAoIXN3aXBlci5hbGxvd1RvdWNoTW92ZSkge1xuICAgIC8vIGlzTW92ZWQgPSB0cnVlO1xuICAgIHN3aXBlci5hbGxvd0NsaWNrID0gZmFsc2U7XG4gICAgaWYgKGRhdGEuaXNUb3VjaGVkKSB7XG4gICAgICBVdGlscy5leHRlbmQodG91Y2hlcywge1xuICAgICAgICBzdGFydFg6IHBhZ2VYLFxuICAgICAgICBzdGFydFk6IHBhZ2VZLFxuICAgICAgICBjdXJyZW50WDogcGFnZVgsXG4gICAgICAgIGN1cnJlbnRZOiBwYWdlWSxcbiAgICAgIH0pO1xuICAgICAgZGF0YS50b3VjaFN0YXJ0VGltZSA9IFV0aWxzLm5vdygpO1xuICAgIH1cbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzICYmICFwYXJhbXMubG9vcCkge1xuICAgIGlmIChzd2lwZXIuaXNWZXJ0aWNhbCgpKSB7XG4gICAgICAvLyBWZXJ0aWNhbFxuICAgICAgaWYgKFxuICAgICAgICAocGFnZVkgPCB0b3VjaGVzLnN0YXJ0WSAmJiBzd2lwZXIudHJhbnNsYXRlIDw9IHN3aXBlci5tYXhUcmFuc2xhdGUoKSlcbiAgICAgICAgfHwgKHBhZ2VZID4gdG91Y2hlcy5zdGFydFkgJiYgc3dpcGVyLnRyYW5zbGF0ZSA+PSBzd2lwZXIubWluVHJhbnNsYXRlKCkpXG4gICAgICApIHtcbiAgICAgICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICAgICAgZGF0YS5pc01vdmVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgKHBhZ2VYIDwgdG91Y2hlcy5zdGFydFggJiYgc3dpcGVyLnRyYW5zbGF0ZSA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpXG4gICAgICB8fCAocGFnZVggPiB0b3VjaGVzLnN0YXJ0WCAmJiBzd2lwZXIudHJhbnNsYXRlID49IHN3aXBlci5taW5UcmFuc2xhdGUoKSlcbiAgICApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuaXNUb3VjaEV2ZW50ICYmIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQpIHtcbiAgICBpZiAoZS50YXJnZXQgPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgJChlLnRhcmdldCkuaXMoZGF0YS5mb3JtRWxlbWVudHMpKSB7XG4gICAgICBkYXRhLmlzTW92ZWQgPSB0cnVlO1xuICAgICAgc3dpcGVyLmFsbG93Q2xpY2sgPSBmYWxzZTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgaWYgKGRhdGEuYWxsb3dUb3VjaENhbGxiYWNrcykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmUnLCBlKTtcbiAgfVxuICBpZiAoZS50YXJnZXRUb3VjaGVzICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPiAxKSByZXR1cm47XG5cbiAgdG91Y2hlcy5jdXJyZW50WCA9IHBhZ2VYO1xuICB0b3VjaGVzLmN1cnJlbnRZID0gcGFnZVk7XG5cbiAgY29uc3QgZGlmZlggPSB0b3VjaGVzLmN1cnJlbnRYIC0gdG91Y2hlcy5zdGFydFg7XG4gIGNvbnN0IGRpZmZZID0gdG91Y2hlcy5jdXJyZW50WSAtIHRvdWNoZXMuc3RhcnRZO1xuICBpZiAoc3dpcGVyLnBhcmFtcy50aHJlc2hvbGQgJiYgTWF0aC5zcXJ0KChkaWZmWCAqKiAyKSArIChkaWZmWSAqKiAyKSkgPCBzd2lwZXIucGFyYW1zLnRocmVzaG9sZCkgcmV0dXJuO1xuXG4gIGlmICh0eXBlb2YgZGF0YS5pc1Njcm9sbGluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBsZXQgdG91Y2hBbmdsZTtcbiAgICBpZiAoKHN3aXBlci5pc0hvcml6b250YWwoKSAmJiB0b3VjaGVzLmN1cnJlbnRZID09PSB0b3VjaGVzLnN0YXJ0WSkgfHwgKHN3aXBlci5pc1ZlcnRpY2FsKCkgJiYgdG91Y2hlcy5jdXJyZW50WCA9PT0gdG91Y2hlcy5zdGFydFgpKSB7XG4gICAgICBkYXRhLmlzU2Nyb2xsaW5nID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgaWYgKChkaWZmWCAqIGRpZmZYKSArIChkaWZmWSAqIGRpZmZZKSA+PSAyNSkge1xuICAgICAgICB0b3VjaEFuZ2xlID0gKE1hdGguYXRhbjIoTWF0aC5hYnMoZGlmZlkpLCBNYXRoLmFicyhkaWZmWCkpICogMTgwKSAvIE1hdGguUEk7XG4gICAgICAgIGRhdGEuaXNTY3JvbGxpbmcgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGUgOiAoOTAgLSB0b3VjaEFuZ2xlID4gcGFyYW1zLnRvdWNoQW5nbGUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIHN3aXBlci5lbWl0KCd0b3VjaE1vdmVPcHBvc2l0ZScsIGUpO1xuICB9XG4gIGlmICh0eXBlb2YgZGF0YS5zdGFydE1vdmluZyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodG91Y2hlcy5jdXJyZW50WCAhPT0gdG91Y2hlcy5zdGFydFggfHwgdG91Y2hlcy5jdXJyZW50WSAhPT0gdG91Y2hlcy5zdGFydFkpIHtcbiAgICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoZGF0YS5pc1Njcm9sbGluZykge1xuICAgIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghZGF0YS5zdGFydE1vdmluZykge1xuICAgIHJldHVybjtcbiAgfVxuICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICBlLnByZXZlbnREZWZhdWx0KCk7XG4gIGlmIChwYXJhbXMudG91Y2hNb3ZlU3RvcFByb3BhZ2F0aW9uICYmICFwYXJhbXMubmVzdGVkKSB7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgfVxuXG4gIGlmICghZGF0YS5pc01vdmVkKSB7XG4gICAgaWYgKHBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgIH1cbiAgICBkYXRhLnN0YXJ0VHJhbnNsYXRlID0gc3dpcGVyLmdldFRyYW5zbGF0ZSgpO1xuICAgIHN3aXBlci5zZXRUcmFuc2l0aW9uKDApO1xuICAgIGlmIChzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC50cmlnZ2VyKCd3ZWJraXRUcmFuc2l0aW9uRW5kIHRyYW5zaXRpb25lbmQnKTtcbiAgICB9XG4gICAgZGF0YS5hbGxvd01vbWVudHVtQm91bmNlID0gZmFsc2U7XG4gICAgLy8gR3JhYiBDdXJzb3JcbiAgICBpZiAocGFyYW1zLmdyYWJDdXJzb3IgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcih0cnVlKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3NsaWRlckZpcnN0TW92ZScsIGUpO1xuICB9XG4gIHN3aXBlci5lbWl0KCdzbGlkZXJNb3ZlJywgZSk7XG4gIGRhdGEuaXNNb3ZlZCA9IHRydWU7XG5cbiAgbGV0IGRpZmYgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBkaWZmWCA6IGRpZmZZO1xuICB0b3VjaGVzLmRpZmYgPSBkaWZmO1xuXG4gIGRpZmYgKj0gcGFyYW1zLnRvdWNoUmF0aW87XG4gIGlmIChydGwpIGRpZmYgPSAtZGlmZjtcblxuICBzd2lwZXIuc3dpcGVEaXJlY3Rpb24gPSBkaWZmID4gMCA/ICdwcmV2JyA6ICduZXh0JztcbiAgZGF0YS5jdXJyZW50VHJhbnNsYXRlID0gZGlmZiArIGRhdGEuc3RhcnRUcmFuc2xhdGU7XG5cbiAgbGV0IGRpc2FibGVQYXJlbnRTd2lwZXIgPSB0cnVlO1xuICBsZXQgcmVzaXN0YW5jZVJhdGlvID0gcGFyYW1zLnJlc2lzdGFuY2VSYXRpbztcbiAgaWYgKHBhcmFtcy50b3VjaFJlbGVhc2VPbkVkZ2VzKSB7XG4gICAgcmVzaXN0YW5jZVJhdGlvID0gMDtcbiAgfVxuICBpZiAoKGRpZmYgPiAwICYmIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA+IHN3aXBlci5taW5UcmFuc2xhdGUoKSkpIHtcbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSAoc3dpcGVyLm1pblRyYW5zbGF0ZSgpIC0gMSkgKyAoKC1zd2lwZXIubWluVHJhbnNsYXRlKCkgKyBkYXRhLnN0YXJ0VHJhbnNsYXRlICsgZGlmZikgKiogcmVzaXN0YW5jZVJhdGlvKTtcbiAgfSBlbHNlIGlmIChkaWZmIDwgMCAmJiBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPCBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHtcbiAgICBkaXNhYmxlUGFyZW50U3dpcGVyID0gZmFsc2U7XG4gICAgaWYgKHBhcmFtcy5yZXNpc3RhbmNlKSBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSAoc3dpcGVyLm1heFRyYW5zbGF0ZSgpICsgMSkgLSAoKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIGRhdGEuc3RhcnRUcmFuc2xhdGUgLSBkaWZmKSAqKiByZXNpc3RhbmNlUmF0aW8pO1xuICB9XG5cbiAgaWYgKGRpc2FibGVQYXJlbnRTd2lwZXIpIHtcbiAgICBlLnByZXZlbnRlZEJ5TmVzdGVkU3dpcGVyID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIERpcmVjdGlvbnMgbG9ja3NcbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAnbmV4dCcgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlIDwgZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cbiAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicgJiYgZGF0YS5jdXJyZW50VHJhbnNsYXRlID4gZGF0YS5zdGFydFRyYW5zbGF0ZSkge1xuICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gIH1cblxuXG4gIC8vIFRocmVzaG9sZFxuICBpZiAocGFyYW1zLnRocmVzaG9sZCA+IDApIHtcbiAgICBpZiAoTWF0aC5hYnMoZGlmZikgPiBwYXJhbXMudGhyZXNob2xkIHx8IGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICBpZiAoIWRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlKSB7XG4gICAgICAgIGRhdGEuYWxsb3dUaHJlc2hvbGRNb3ZlID0gdHJ1ZTtcbiAgICAgICAgdG91Y2hlcy5zdGFydFggPSB0b3VjaGVzLmN1cnJlbnRYO1xuICAgICAgICB0b3VjaGVzLnN0YXJ0WSA9IHRvdWNoZXMuY3VycmVudFk7XG4gICAgICAgIGRhdGEuY3VycmVudFRyYW5zbGF0ZSA9IGRhdGEuc3RhcnRUcmFuc2xhdGU7XG4gICAgICAgIHRvdWNoZXMuZGlmZiA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/IHRvdWNoZXMuY3VycmVudFggLSB0b3VjaGVzLnN0YXJ0WCA6IHRvdWNoZXMuY3VycmVudFkgLSB0b3VjaGVzLnN0YXJ0WTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBkYXRhLmN1cnJlbnRUcmFuc2xhdGUgPSBkYXRhLnN0YXJ0VHJhbnNsYXRlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgfVxuXG4gIGlmICghcGFyYW1zLmZvbGxvd0ZpbmdlcikgcmV0dXJuO1xuXG4gIC8vIFVwZGF0ZSBhY3RpdmUgaW5kZXggaW4gZnJlZSBtb2RlXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUgfHwgcGFyYW1zLndhdGNoU2xpZGVzUHJvZ3Jlc3MgfHwgcGFyYW1zLndhdGNoU2xpZGVzVmlzaWJpbGl0eSkge1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gIH1cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgIC8vIFZlbG9jaXR5XG4gICAgaWYgKGRhdGEudmVsb2NpdGllcy5sZW5ndGggPT09IDApIHtcbiAgICAgIGRhdGEudmVsb2NpdGllcy5wdXNoKHtcbiAgICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3N0YXJ0WCcgOiAnc3RhcnRZJ10sXG4gICAgICAgIHRpbWU6IGRhdGEudG91Y2hTdGFydFRpbWUsXG4gICAgICB9KTtcbiAgICB9XG4gICAgZGF0YS52ZWxvY2l0aWVzLnB1c2goe1xuICAgICAgcG9zaXRpb246IHRvdWNoZXNbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2N1cnJlbnRYJyA6ICdjdXJyZW50WSddLFxuICAgICAgdGltZTogVXRpbHMubm93KCksXG4gICAgfSk7XG4gIH1cbiAgLy8gVXBkYXRlIHByb2dyZXNzXG4gIHN3aXBlci51cGRhdGVQcm9ncmVzcyhkYXRhLmN1cnJlbnRUcmFuc2xhdGUpO1xuICAvLyBVcGRhdGUgdHJhbnNsYXRlXG4gIHN3aXBlci5zZXRUcmFuc2xhdGUoZGF0YS5jdXJyZW50VHJhbnNsYXRlKTtcbn1cblxuZnVuY3Rpb24gb25Ub3VjaEVuZCAoZXZlbnQpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgZGF0YSA9IHN3aXBlci50b3VjaEV2ZW50c0RhdGE7XG5cbiAgY29uc3Qge1xuICAgIHBhcmFtcywgdG91Y2hlcywgcnRsVHJhbnNsYXRlOiBydGwsICR3cmFwcGVyRWwsIHNsaWRlc0dyaWQsIHNuYXBHcmlkLFxuICB9ID0gc3dpcGVyO1xuICBsZXQgZSA9IGV2ZW50O1xuICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50O1xuICBpZiAoZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzKSB7XG4gICAgc3dpcGVyLmVtaXQoJ3RvdWNoRW5kJywgZSk7XG4gIH1cbiAgZGF0YS5hbGxvd1RvdWNoQ2FsbGJhY2tzID0gZmFsc2U7XG4gIGlmICghZGF0YS5pc1RvdWNoZWQpIHtcbiAgICBpZiAoZGF0YS5pc01vdmVkICYmIHBhcmFtcy5ncmFiQ3Vyc29yKSB7XG4gICAgICBzd2lwZXIuc2V0R3JhYkN1cnNvcihmYWxzZSk7XG4gICAgfVxuICAgIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICAgIGRhdGEuc3RhcnRNb3ZpbmcgPSBmYWxzZTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gUmV0dXJuIEdyYWIgQ3Vyc29yXG4gIGlmIChwYXJhbXMuZ3JhYkN1cnNvciAmJiBkYXRhLmlzTW92ZWQgJiYgZGF0YS5pc1RvdWNoZWQgJiYgKHN3aXBlci5hbGxvd1NsaWRlTmV4dCA9PT0gdHJ1ZSB8fCBzd2lwZXIuYWxsb3dTbGlkZVByZXYgPT09IHRydWUpKSB7XG4gICAgc3dpcGVyLnNldEdyYWJDdXJzb3IoZmFsc2UpO1xuICB9XG5cbiAgLy8gVGltZSBkaWZmXG4gIGNvbnN0IHRvdWNoRW5kVGltZSA9IFV0aWxzLm5vdygpO1xuICBjb25zdCB0aW1lRGlmZiA9IHRvdWNoRW5kVGltZSAtIGRhdGEudG91Y2hTdGFydFRpbWU7XG5cbiAgLy8gVGFwLCBkb3VibGVUYXAsIENsaWNrXG4gIGlmIChzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIHN3aXBlci51cGRhdGVDbGlja2VkU2xpZGUoZSk7XG4gICAgc3dpcGVyLmVtaXQoJ3RhcCcsIGUpO1xuICAgIGlmICh0aW1lRGlmZiA8IDMwMCAmJiAodG91Y2hFbmRUaW1lIC0gZGF0YS5sYXN0Q2xpY2tUaW1lKSA+IDMwMCkge1xuICAgICAgaWYgKGRhdGEuY2xpY2tUaW1lb3V0KSBjbGVhclRpbWVvdXQoZGF0YS5jbGlja1RpbWVvdXQpO1xuICAgICAgZGF0YS5jbGlja1RpbWVvdXQgPSBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgc3dpcGVyLmVtaXQoJ2NsaWNrJywgZSk7XG4gICAgICB9LCAzMDApO1xuICAgIH1cbiAgICBpZiAodGltZURpZmYgPCAzMDAgJiYgKHRvdWNoRW5kVGltZSAtIGRhdGEubGFzdENsaWNrVGltZSkgPCAzMDApIHtcbiAgICAgIGlmIChkYXRhLmNsaWNrVGltZW91dCkgY2xlYXJUaW1lb3V0KGRhdGEuY2xpY2tUaW1lb3V0KTtcbiAgICAgIHN3aXBlci5lbWl0KCdkb3VibGVUYXAnLCBlKTtcbiAgICB9XG4gIH1cblxuICBkYXRhLmxhc3RDbGlja1RpbWUgPSBVdGlscy5ub3coKTtcbiAgVXRpbHMubmV4dFRpY2soKCkgPT4ge1xuICAgIGlmICghc3dpcGVyLmRlc3Ryb3llZCkgc3dpcGVyLmFsbG93Q2xpY2sgPSB0cnVlO1xuICB9KTtcblxuICBpZiAoIWRhdGEuaXNUb3VjaGVkIHx8ICFkYXRhLmlzTW92ZWQgfHwgIXN3aXBlci5zd2lwZURpcmVjdGlvbiB8fCB0b3VjaGVzLmRpZmYgPT09IDAgfHwgZGF0YS5jdXJyZW50VHJhbnNsYXRlID09PSBkYXRhLnN0YXJ0VHJhbnNsYXRlKSB7XG4gICAgZGF0YS5pc1RvdWNoZWQgPSBmYWxzZTtcbiAgICBkYXRhLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG4gICAgcmV0dXJuO1xuICB9XG4gIGRhdGEuaXNUb3VjaGVkID0gZmFsc2U7XG4gIGRhdGEuaXNNb3ZlZCA9IGZhbHNlO1xuICBkYXRhLnN0YXJ0TW92aW5nID0gZmFsc2U7XG5cbiAgbGV0IGN1cnJlbnRQb3M7XG4gIGlmIChwYXJhbXMuZm9sbG93RmluZ2VyKSB7XG4gICAgY3VycmVudFBvcyA9IHJ0bCA/IHN3aXBlci50cmFuc2xhdGUgOiAtc3dpcGVyLnRyYW5zbGF0ZTtcbiAgfSBlbHNlIHtcbiAgICBjdXJyZW50UG9zID0gLWRhdGEuY3VycmVudFRyYW5zbGF0ZTtcbiAgfVxuXG4gIGlmIChwYXJhbXMuZnJlZU1vZGUpIHtcbiAgICBpZiAoY3VycmVudFBvcyA8IC1zd2lwZXIubWluVHJhbnNsYXRlKCkpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChjdXJyZW50UG9zID4gLXN3aXBlci5tYXhUcmFuc2xhdGUoKSkge1xuICAgICAgaWYgKHN3aXBlci5zbGlkZXMubGVuZ3RoIDwgc25hcEdyaWQubGVuZ3RoKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKHNuYXBHcmlkLmxlbmd0aCAtIDEpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW0pIHtcbiAgICAgIGlmIChkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID4gMSkge1xuICAgICAgICBjb25zdCBsYXN0TW92ZUV2ZW50ID0gZGF0YS52ZWxvY2l0aWVzLnBvcCgpO1xuICAgICAgICBjb25zdCB2ZWxvY2l0eUV2ZW50ID0gZGF0YS52ZWxvY2l0aWVzLnBvcCgpO1xuXG4gICAgICAgIGNvbnN0IGRpc3RhbmNlID0gbGFzdE1vdmVFdmVudC5wb3NpdGlvbiAtIHZlbG9jaXR5RXZlbnQucG9zaXRpb247XG4gICAgICAgIGNvbnN0IHRpbWUgPSBsYXN0TW92ZUV2ZW50LnRpbWUgLSB2ZWxvY2l0eUV2ZW50LnRpbWU7XG4gICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IGRpc3RhbmNlIC8gdGltZTtcbiAgICAgICAgc3dpcGVyLnZlbG9jaXR5IC89IDI7XG4gICAgICAgIGlmIChNYXRoLmFicyhzd2lwZXIudmVsb2NpdHkpIDwgcGFyYW1zLmZyZWVNb2RlTWluaW11bVZlbG9jaXR5KSB7XG4gICAgICAgICAgc3dpcGVyLnZlbG9jaXR5ID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyB0aGlzIGltcGxpZXMgdGhhdCB0aGUgdXNlciBzdG9wcGVkIG1vdmluZyBhIGZpbmdlciB0aGVuIHJlbGVhc2VkLlxuICAgICAgICAvLyBUaGVyZSB3b3VsZCBiZSBubyBldmVudHMgd2l0aCBkaXN0YW5jZSB6ZXJvLCBzbyB0aGUgbGFzdCBldmVudCBpcyBzdGFsZS5cbiAgICAgICAgaWYgKHRpbWUgPiAxNTAgfHwgKFV0aWxzLm5vdygpIC0gbGFzdE1vdmVFdmVudC50aW1lKSA+IDMwMCkge1xuICAgICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci52ZWxvY2l0eSA9IDA7XG4gICAgICB9XG4gICAgICBzd2lwZXIudmVsb2NpdHkgKj0gcGFyYW1zLmZyZWVNb2RlTW9tZW50dW1WZWxvY2l0eVJhdGlvO1xuXG4gICAgICBkYXRhLnZlbG9jaXRpZXMubGVuZ3RoID0gMDtcbiAgICAgIGxldCBtb21lbnR1bUR1cmF0aW9uID0gMTAwMCAqIHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtUmF0aW87XG4gICAgICBjb25zdCBtb21lbnR1bURpc3RhbmNlID0gc3dpcGVyLnZlbG9jaXR5ICogbW9tZW50dW1EdXJhdGlvbjtcblxuICAgICAgbGV0IG5ld1Bvc2l0aW9uID0gc3dpcGVyLnRyYW5zbGF0ZSArIG1vbWVudHVtRGlzdGFuY2U7XG4gICAgICBpZiAocnRsKSBuZXdQb3NpdGlvbiA9IC1uZXdQb3NpdGlvbjtcblxuICAgICAgbGV0IGRvQm91bmNlID0gZmFsc2U7XG4gICAgICBsZXQgYWZ0ZXJCb3VuY2VQb3NpdGlvbjtcbiAgICAgIGNvbnN0IGJvdW5jZUFtb3VudCA9IE1hdGguYWJzKHN3aXBlci52ZWxvY2l0eSkgKiAyMCAqIHBhcmFtcy5mcmVlTW9kZU1vbWVudHVtQm91bmNlUmF0aW87XG4gICAgICBsZXQgbmVlZHNMb29wRml4O1xuICAgICAgaWYgKG5ld1Bvc2l0aW9uIDwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiArIHN3aXBlci5tYXhUcmFuc2xhdGUoKSA8IC1ib3VuY2VBbW91bnQpIHtcbiAgICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gYm91bmNlQW1vdW50O1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZnRlckJvdW5jZVBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICAgIGRvQm91bmNlID0gdHJ1ZTtcbiAgICAgICAgICBkYXRhLmFsbG93TW9tZW50dW1Cb3VuY2UgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJhbXMubG9vcCAmJiBwYXJhbXMuY2VudGVyZWRTbGlkZXMpIG5lZWRzTG9vcEZpeCA9IHRydWU7XG4gICAgICB9IGVsc2UgaWYgKG5ld1Bvc2l0aW9uID4gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSB7XG4gICAgICAgIGlmIChwYXJhbXMuZnJlZU1vZGVNb21lbnR1bUJvdW5jZSkge1xuICAgICAgICAgIGlmIChuZXdQb3NpdGlvbiAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSA+IGJvdW5jZUFtb3VudCkge1xuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCkgKyBib3VuY2VBbW91bnQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFmdGVyQm91bmNlUG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgICAgZG9Cb3VuY2UgPSB0cnVlO1xuICAgICAgICAgIGRhdGEuYWxsb3dNb21lbnR1bUJvdW5jZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzd2lwZXIubWluVHJhbnNsYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtcy5sb29wICYmIHBhcmFtcy5jZW50ZXJlZFNsaWRlcykgbmVlZHNMb29wRml4ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW1zLmZyZWVNb2RlU3RpY2t5KSB7XG4gICAgICAgIGxldCBuZXh0U2xpZGU7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc25hcEdyaWQubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICBpZiAoc25hcEdyaWRbal0gPiAtbmV3UG9zaXRpb24pIHtcbiAgICAgICAgICAgIG5leHRTbGlkZSA9IGo7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoTWF0aC5hYnMoc25hcEdyaWRbbmV4dFNsaWRlXSAtIG5ld1Bvc2l0aW9uKSA8IE1hdGguYWJzKHNuYXBHcmlkW25leHRTbGlkZSAtIDFdIC0gbmV3UG9zaXRpb24pIHx8IHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICAgICAgbmV3UG9zaXRpb24gPSBzbmFwR3JpZFtuZXh0U2xpZGVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld1Bvc2l0aW9uID0gc25hcEdyaWRbbmV4dFNsaWRlIC0gMV07XG4gICAgICAgIH1cbiAgICAgICAgbmV3UG9zaXRpb24gPSAtbmV3UG9zaXRpb247XG4gICAgICB9XG4gICAgICBpZiAobmVlZHNMb29wRml4KSB7XG4gICAgICAgIHN3aXBlci5vbmNlKCd0cmFuc2l0aW9uRW5kJywgKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gRml4IGR1cmF0aW9uXG4gICAgICBpZiAoc3dpcGVyLnZlbG9jaXR5ICE9PSAwKSB7XG4gICAgICAgIGlmIChydGwpIHtcbiAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKC1uZXdQb3NpdGlvbiAtIHN3aXBlci50cmFuc2xhdGUpIC8gc3dpcGVyLnZlbG9jaXR5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtb21lbnR1bUR1cmF0aW9uID0gTWF0aC5hYnMoKG5ld1Bvc2l0aW9uIC0gc3dpcGVyLnRyYW5zbGF0ZSkgLyBzd2lwZXIudmVsb2NpdHkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHBhcmFtcy5mcmVlTW9kZVN0aWNreSkge1xuICAgICAgICBzd2lwZXIuc2xpZGVUb0Nsb3Nlc3QoKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAocGFyYW1zLmZyZWVNb2RlTW9tZW50dW1Cb3VuY2UgJiYgZG9Cb3VuY2UpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKGFmdGVyQm91bmNlUG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihtb21lbnR1bUR1cmF0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdQb3NpdGlvbik7XG4gICAgICAgIHN3aXBlci50cmFuc2l0aW9uU3RhcnQodHJ1ZSwgc3dpcGVyLnN3aXBlRGlyZWN0aW9uKTtcbiAgICAgICAgc3dpcGVyLmFuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhZGF0YS5hbGxvd01vbWVudHVtQm91bmNlKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ21vbWVudHVtQm91bmNlJyk7XG5cbiAgICAgICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbihwYXJhbXMuc3BlZWQpO1xuICAgICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUoYWZ0ZXJCb3VuY2VQb3NpdGlvbik7XG4gICAgICAgICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uRW5kKCgpID0+IHtcbiAgICAgICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgICAgIHN3aXBlci50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmIChzd2lwZXIudmVsb2NpdHkpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKG5ld1Bvc2l0aW9uKTtcbiAgICAgICAgc3dpcGVyLnNldFRyYW5zaXRpb24obW9tZW50dW1EdXJhdGlvbik7XG4gICAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3UG9zaXRpb24pO1xuICAgICAgICBzd2lwZXIudHJhbnNpdGlvblN0YXJ0KHRydWUsIHN3aXBlci5zd2lwZURpcmVjdGlvbik7XG4gICAgICAgIGlmICghc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSB0cnVlO1xuICAgICAgICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkKSByZXR1cm47XG4gICAgICAgICAgICBzd2lwZXIudHJhbnNpdGlvbkVuZCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MobmV3UG9zaXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfSBlbHNlIGlmIChwYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghcGFyYW1zLmZyZWVNb2RlTW9tZW50dW0gfHwgdGltZURpZmYgPj0gcGFyYW1zLmxvbmdTd2lwZXNNcykge1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIEZpbmQgY3VycmVudCBzbGlkZVxuICBsZXQgc3RvcEluZGV4ID0gMDtcbiAgbGV0IGdyb3VwU2l6ZSA9IHN3aXBlci5zbGlkZXNTaXplc0dyaWRbMF07XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2xpZGVzR3JpZC5sZW5ndGg7IGkgKz0gcGFyYW1zLnNsaWRlc1Blckdyb3VwKSB7XG4gICAgaWYgKHR5cGVvZiBzbGlkZXNHcmlkW2kgKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXBdICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSAmJiBjdXJyZW50UG9zIDwgc2xpZGVzR3JpZFtpICsgcGFyYW1zLnNsaWRlc1Blckdyb3VwXSkge1xuICAgICAgICBzdG9wSW5kZXggPSBpO1xuICAgICAgICBncm91cFNpemUgPSBzbGlkZXNHcmlkW2kgKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXBdIC0gc2xpZGVzR3JpZFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGN1cnJlbnRQb3MgPj0gc2xpZGVzR3JpZFtpXSkge1xuICAgICAgc3RvcEluZGV4ID0gaTtcbiAgICAgIGdyb3VwU2l6ZSA9IHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAxXSAtIHNsaWRlc0dyaWRbc2xpZGVzR3JpZC5sZW5ndGggLSAyXTtcbiAgICB9XG4gIH1cblxuICAvLyBGaW5kIGN1cnJlbnQgc2xpZGUgc2l6ZVxuICBjb25zdCByYXRpbyA9IChjdXJyZW50UG9zIC0gc2xpZGVzR3JpZFtzdG9wSW5kZXhdKSAvIGdyb3VwU2l6ZTtcblxuICBpZiAodGltZURpZmYgPiBwYXJhbXMubG9uZ1N3aXBlc01zKSB7XG4gICAgLy8gTG9uZyB0b3VjaGVzXG4gICAgaWYgKCFwYXJhbXMubG9uZ1N3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICBpZiAocmF0aW8gPj0gcGFyYW1zLmxvbmdTd2lwZXNSYXRpbykgc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4ICsgcGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgIGVsc2Ugc3dpcGVyLnNsaWRlVG8oc3RvcEluZGV4KTtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ3ByZXYnKSB7XG4gICAgICBpZiAocmF0aW8gPiAoMSAtIHBhcmFtcy5sb25nU3dpcGVzUmF0aW8pKSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgICAgZWxzZSBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBTaG9ydCBzd2lwZXNcbiAgICBpZiAoIXBhcmFtcy5zaG9ydFN3aXBlcykge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5zd2lwZURpcmVjdGlvbiA9PT0gJ25leHQnKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzdG9wSW5kZXggKyBwYXJhbXMuc2xpZGVzUGVyR3JvdXApO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnN3aXBlRGlyZWN0aW9uID09PSAncHJldicpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN0b3BJbmRleCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIG9uUmVzaXplICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBjb25zdCB7IHBhcmFtcywgZWwgfSA9IHN3aXBlcjtcblxuICBpZiAoZWwgJiYgZWwub2Zmc2V0V2lkdGggPT09IDApIHJldHVybjtcblxuICAvLyBCcmVha3BvaW50c1xuICBpZiAocGFyYW1zLmJyZWFrcG9pbnRzKSB7XG4gICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgfVxuXG4gIC8vIFNhdmUgbG9ja3NcbiAgY29uc3QgeyBhbGxvd1NsaWRlTmV4dCwgYWxsb3dTbGlkZVByZXYsIHNuYXBHcmlkIH0gPSBzd2lwZXI7XG5cbiAgLy8gRGlzYWJsZSBsb2NrcyBvbiByZXNpemVcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gdHJ1ZTtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gdHJ1ZTtcblxuICBzd2lwZXIudXBkYXRlU2l6ZSgpO1xuICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG5cbiAgaWYgKHBhcmFtcy5mcmVlTW9kZSkge1xuICAgIGNvbnN0IG5ld1RyYW5zbGF0ZSA9IE1hdGgubWluKE1hdGgubWF4KHN3aXBlci50cmFuc2xhdGUsIHN3aXBlci5tYXhUcmFuc2xhdGUoKSksIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgc3dpcGVyLnNldFRyYW5zbGF0ZShuZXdUcmFuc2xhdGUpO1xuICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgICBpZiAocGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgIHN3aXBlci51cGRhdGVBdXRvSGVpZ2h0KCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG4gICAgaWYgKChwYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSkgJiYgc3dpcGVyLmlzRW5kICYmICFzd2lwZXIucGFyYW1zLmNlbnRlcmVkU2xpZGVzKSB7XG4gICAgICBzd2lwZXIuc2xpZGVUbyhzd2lwZXIuc2xpZGVzLmxlbmd0aCAtIDEsIDAsIGZhbHNlLCB0cnVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG4gIGlmIChzd2lwZXIuYXV0b3BsYXkgJiYgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgJiYgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCkge1xuICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgfVxuICAvLyBSZXR1cm4gbG9ja3MgYWZ0ZXIgcmVzaXplXG4gIHN3aXBlci5hbGxvd1NsaWRlUHJldiA9IGFsbG93U2xpZGVQcmV2O1xuICBzd2lwZXIuYWxsb3dTbGlkZU5leHQgPSBhbGxvd1NsaWRlTmV4dDtcblxuICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93ICYmIHNuYXBHcmlkICE9PSBzd2lwZXIuc25hcEdyaWQpIHtcbiAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG9uQ2xpY2sgKGUpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgaWYgKCFzd2lwZXIuYWxsb3dDbGljaykge1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnByZXZlbnRDbGlja3MpIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5wcmV2ZW50Q2xpY2tzUHJvcGFnYXRpb24gJiYgc3dpcGVyLmFuaW1hdGluZykge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGF0dGFjaEV2ZW50cygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIHBhcmFtcywgdG91Y2hFdmVudHMsIGVsLCB3cmFwcGVyRWwsXG4gIH0gPSBzd2lwZXI7XG5cbiAge1xuICAgIHN3aXBlci5vblRvdWNoU3RhcnQgPSBvblRvdWNoU3RhcnQuYmluZChzd2lwZXIpO1xuICAgIHN3aXBlci5vblRvdWNoTW92ZSA9IG9uVG91Y2hNb3ZlLmJpbmQoc3dpcGVyKTtcbiAgICBzd2lwZXIub25Ub3VjaEVuZCA9IG9uVG91Y2hFbmQuYmluZChzd2lwZXIpO1xuICB9XG5cbiAgc3dpcGVyLm9uQ2xpY2sgPSBvbkNsaWNrLmJpbmQoc3dpcGVyKTtcblxuICBjb25zdCB0YXJnZXQgPSBwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gZWwgOiB3cmFwcGVyRWw7XG4gIGNvbnN0IGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7XG5cbiAgLy8gVG91Y2ggRXZlbnRzXG4gIHtcbiAgICBpZiAoIVN1cHBvcnQudG91Y2ggJiYgKFN1cHBvcnQucG9pbnRlckV2ZW50cyB8fCBTdXBwb3J0LnByZWZpeGVkUG9pbnRlckV2ZW50cykpIHtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKFN1cHBvcnQudG91Y2gpIHtcbiAgICAgICAgY29uc3QgcGFzc2l2ZUxpc3RlbmVyID0gdG91Y2hFdmVudHMuc3RhcnQgPT09ICd0b3VjaHN0YXJ0JyAmJiBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciAmJiBwYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5zdGFydCwgc3dpcGVyLm9uVG91Y2hTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHMubW92ZSwgc3dpcGVyLm9uVG91Y2hNb3ZlLCBTdXBwb3J0LnBhc3NpdmVMaXN0ZW5lciA/IHsgcGFzc2l2ZTogZmFsc2UsIGNhcHR1cmUgfSA6IGNhcHR1cmUpO1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgaWYgKChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhRGV2aWNlLmlvcyAmJiAhRGV2aWNlLmFuZHJvaWQpIHx8IChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhU3VwcG9ydC50b3VjaCAmJiBEZXZpY2UuaW9zKSkge1xuICAgICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUHJldmVudCBMaW5rcyBDbGlja3NcbiAgICBpZiAocGFyYW1zLnByZXZlbnRDbGlja3MgfHwgcGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbikge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3dpcGVyLm9uQ2xpY2ssIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlc2l6ZSBoYW5kbGVyXG4gIHN3aXBlci5vbigoRGV2aWNlLmlvcyB8fCBEZXZpY2UuYW5kcm9pZCA/ICdyZXNpemUgb3JpZW50YXRpb25jaGFuZ2Ugb2JzZXJ2ZXJVcGRhdGUnIDogJ3Jlc2l6ZSBvYnNlcnZlclVwZGF0ZScpLCBvblJlc2l6ZSwgdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGRldGFjaEV2ZW50cygpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICBjb25zdCB7XG4gICAgcGFyYW1zLCB0b3VjaEV2ZW50cywgZWwsIHdyYXBwZXJFbCxcbiAgfSA9IHN3aXBlcjtcblxuICBjb25zdCB0YXJnZXQgPSBwYXJhbXMudG91Y2hFdmVudHNUYXJnZXQgPT09ICdjb250YWluZXInID8gZWwgOiB3cmFwcGVyRWw7XG4gIGNvbnN0IGNhcHR1cmUgPSAhIXBhcmFtcy5uZXN0ZWQ7XG5cbiAgLy8gVG91Y2ggRXZlbnRzXG4gIHtcbiAgICBpZiAoIVN1cHBvcnQudG91Y2ggJiYgKFN1cHBvcnQucG9pbnRlckV2ZW50cyB8fCBTdXBwb3J0LnByZWZpeGVkUG9pbnRlckV2ZW50cykpIHtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBmYWxzZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLm1vdmUsIHN3aXBlci5vblRvdWNoTW92ZSwgY2FwdHVyZSk7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLmVuZCwgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKFN1cHBvcnQudG91Y2gpIHtcbiAgICAgICAgY29uc3QgcGFzc2l2ZUxpc3RlbmVyID0gdG91Y2hFdmVudHMuc3RhcnQgPT09ICdvblRvdWNoU3RhcnQnICYmIFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzLnN0YXJ0LCBzd2lwZXIub25Ub3VjaFN0YXJ0LCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5tb3ZlLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50cy5lbmQsIHN3aXBlci5vblRvdWNoRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgfVxuICAgICAgaWYgKChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhRGV2aWNlLmlvcyAmJiAhRGV2aWNlLmFuZHJvaWQpIHx8IChwYXJhbXMuc2ltdWxhdGVUb3VjaCAmJiAhU3VwcG9ydC50b3VjaCAmJiBEZXZpY2UuaW9zKSkge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgc3dpcGVyLm9uVG91Y2hTdGFydCwgZmFsc2UpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBzd2lwZXIub25Ub3VjaE1vdmUsIGNhcHR1cmUpO1xuICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgc3dpcGVyLm9uVG91Y2hFbmQsIGZhbHNlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUHJldmVudCBMaW5rcyBDbGlja3NcbiAgICBpZiAocGFyYW1zLnByZXZlbnRDbGlja3MgfHwgcGFyYW1zLnByZXZlbnRDbGlja3NQcm9wYWdhdGlvbikge1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgc3dpcGVyLm9uQ2xpY2ssIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFJlc2l6ZSBoYW5kbGVyXG4gIHN3aXBlci5vZmYoKERldmljZS5pb3MgfHwgRGV2aWNlLmFuZHJvaWQgPyAncmVzaXplIG9yaWVudGF0aW9uY2hhbmdlIG9ic2VydmVyVXBkYXRlJyA6ICdyZXNpemUgb2JzZXJ2ZXJVcGRhdGUnKSwgb25SZXNpemUpO1xufVxuXG52YXIgZXZlbnRzID0ge1xuICBhdHRhY2hFdmVudHMsXG4gIGRldGFjaEV2ZW50cyxcbn07XG5cbmZ1bmN0aW9uIHNldEJyZWFrcG9pbnQgKCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB7XG4gICAgYWN0aXZlSW5kZXgsIGluaXRpYWxpemVkLCBsb29wZWRTbGlkZXMgPSAwLCBwYXJhbXMsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IGJyZWFrcG9pbnRzID0gcGFyYW1zLmJyZWFrcG9pbnRzO1xuICBpZiAoIWJyZWFrcG9pbnRzIHx8IChicmVha3BvaW50cyAmJiBPYmplY3Qua2V5cyhicmVha3BvaW50cykubGVuZ3RoID09PSAwKSkgcmV0dXJuO1xuXG4gIC8vIFNldCBicmVha3BvaW50IGZvciB3aW5kb3cgd2lkdGggYW5kIHVwZGF0ZSBwYXJhbWV0ZXJzXG4gIGNvbnN0IGJyZWFrcG9pbnQgPSBzd2lwZXIuZ2V0QnJlYWtwb2ludChicmVha3BvaW50cyk7XG5cbiAgaWYgKGJyZWFrcG9pbnQgJiYgc3dpcGVyLmN1cnJlbnRCcmVha3BvaW50ICE9PSBicmVha3BvaW50KSB7XG4gICAgY29uc3QgYnJlYWtwb2ludE9ubHlQYXJhbXMgPSBicmVha3BvaW50IGluIGJyZWFrcG9pbnRzID8gYnJlYWtwb2ludHNbYnJlYWtwb2ludF0gOiB1bmRlZmluZWQ7XG4gICAgaWYgKGJyZWFrcG9pbnRPbmx5UGFyYW1zKSB7XG4gICAgICBbJ3NsaWRlc1BlclZpZXcnLCAnc3BhY2VCZXR3ZWVuJywgJ3NsaWRlc1Blckdyb3VwJ10uZm9yRWFjaCgocGFyYW0pID0+IHtcbiAgICAgICAgY29uc3QgcGFyYW1WYWx1ZSA9IGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXJhbVZhbHVlID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xuICAgICAgICBpZiAocGFyYW0gPT09ICdzbGlkZXNQZXJWaWV3JyAmJiAocGFyYW1WYWx1ZSA9PT0gJ0FVVE8nIHx8IHBhcmFtVmFsdWUgPT09ICdhdXRvJykpIHtcbiAgICAgICAgICBicmVha3BvaW50T25seVBhcmFtc1twYXJhbV0gPSAnYXV0byc7XG4gICAgICAgIH0gZWxzZSBpZiAocGFyYW0gPT09ICdzbGlkZXNQZXJWaWV3Jykge1xuICAgICAgICAgIGJyZWFrcG9pbnRPbmx5UGFyYW1zW3BhcmFtXSA9IHBhcnNlRmxvYXQocGFyYW1WYWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWtwb2ludE9ubHlQYXJhbXNbcGFyYW1dID0gcGFyc2VJbnQocGFyYW1WYWx1ZSwgMTApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBicmVha3BvaW50UGFyYW1zID0gYnJlYWtwb2ludE9ubHlQYXJhbXMgfHwgc3dpcGVyLm9yaWdpbmFsUGFyYW1zO1xuICAgIGNvbnN0IGRpcmVjdGlvbkNoYW5nZWQgPSBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAmJiBicmVha3BvaW50UGFyYW1zLmRpcmVjdGlvbiAhPT0gcGFyYW1zLmRpcmVjdGlvbjtcbiAgICBjb25zdCBuZWVkc1JlTG9vcCA9IHBhcmFtcy5sb29wICYmIChicmVha3BvaW50UGFyYW1zLnNsaWRlc1BlclZpZXcgIT09IHBhcmFtcy5zbGlkZXNQZXJWaWV3IHx8IGRpcmVjdGlvbkNoYW5nZWQpO1xuXG4gICAgaWYgKGRpcmVjdGlvbkNoYW5nZWQgJiYgaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHN3aXBlci5jaGFuZ2VEaXJlY3Rpb24oKTtcbiAgICB9XG5cbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLnBhcmFtcywgYnJlYWtwb2ludFBhcmFtcyk7XG5cbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBhbGxvd1RvdWNoTW92ZTogc3dpcGVyLnBhcmFtcy5hbGxvd1RvdWNoTW92ZSxcbiAgICAgIGFsbG93U2xpZGVOZXh0OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVOZXh0LFxuICAgICAgYWxsb3dTbGlkZVByZXY6IHN3aXBlci5wYXJhbXMuYWxsb3dTbGlkZVByZXYsXG4gICAgfSk7XG5cbiAgICBzd2lwZXIuY3VycmVudEJyZWFrcG9pbnQgPSBicmVha3BvaW50O1xuXG4gICAgaWYgKG5lZWRzUmVMb29wICYmIGluaXRpYWxpemVkKSB7XG4gICAgICBzd2lwZXIubG9vcERlc3Ryb3koKTtcbiAgICAgIHN3aXBlci5sb29wQ3JlYXRlKCk7XG4gICAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgICBzd2lwZXIuc2xpZGVUbygoYWN0aXZlSW5kZXggLSBsb29wZWRTbGlkZXMpICsgc3dpcGVyLmxvb3BlZFNsaWRlcywgMCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHN3aXBlci5lbWl0KCdicmVha3BvaW50JywgYnJlYWtwb2ludFBhcmFtcyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QnJlYWtwb2ludCAoYnJlYWtwb2ludHMpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgLy8gR2V0IGJyZWFrcG9pbnQgZm9yIHdpbmRvdyB3aWR0aFxuICBpZiAoIWJyZWFrcG9pbnRzKSByZXR1cm4gdW5kZWZpbmVkO1xuICBsZXQgYnJlYWtwb2ludCA9IGZhbHNlO1xuICBjb25zdCBwb2ludHMgPSBbXTtcbiAgT2JqZWN0LmtleXMoYnJlYWtwb2ludHMpLmZvckVhY2goKHBvaW50KSA9PiB7XG4gICAgcG9pbnRzLnB1c2gocG9pbnQpO1xuICB9KTtcbiAgcG9pbnRzLnNvcnQoKGEsIGIpID0+IHBhcnNlSW50KGEsIDEwKSAtIHBhcnNlSW50KGIsIDEwKSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHNJbnZlcnNlKSB7XG4gICAgICBpZiAocG9pbnQgPD0gd2luZG93LmlubmVyV2lkdGgpIHtcbiAgICAgICAgYnJlYWtwb2ludCA9IHBvaW50O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAocG9pbnQgPj0gd2luZG93LmlubmVyV2lkdGggJiYgIWJyZWFrcG9pbnQpIHtcbiAgICAgIGJyZWFrcG9pbnQgPSBwb2ludDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJyZWFrcG9pbnQgfHwgJ21heCc7XG59XG5cbnZhciBicmVha3BvaW50cyA9IHsgc2V0QnJlYWtwb2ludCwgZ2V0QnJlYWtwb2ludCB9O1xuXG5mdW5jdGlvbiBhZGRDbGFzc2VzICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3Qge1xuICAgIGNsYXNzTmFtZXMsIHBhcmFtcywgcnRsLCAkZWwsXG4gIH0gPSBzd2lwZXI7XG4gIGNvbnN0IHN1ZmZpeGVzID0gW107XG5cbiAgc3VmZml4ZXMucHVzaCgnaW5pdGlhbGl6ZWQnKTtcbiAgc3VmZml4ZXMucHVzaChwYXJhbXMuZGlyZWN0aW9uKTtcblxuICBpZiAocGFyYW1zLmZyZWVNb2RlKSB7XG4gICAgc3VmZml4ZXMucHVzaCgnZnJlZS1tb2RlJyk7XG4gIH1cbiAgaWYgKCFTdXBwb3J0LmZsZXhib3gpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCduby1mbGV4Ym94Jyk7XG4gIH1cbiAgaWYgKHBhcmFtcy5hdXRvSGVpZ2h0KSB7XG4gICAgc3VmZml4ZXMucHVzaCgnYXV0b2hlaWdodCcpO1xuICB9XG4gIGlmIChydGwpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdydGwnKTtcbiAgfVxuICBpZiAocGFyYW1zLnNsaWRlc1BlckNvbHVtbiA+IDEpIHtcbiAgICBzdWZmaXhlcy5wdXNoKCdtdWx0aXJvdycpO1xuICB9XG4gIGlmIChEZXZpY2UuYW5kcm9pZCkge1xuICAgIHN1ZmZpeGVzLnB1c2goJ2FuZHJvaWQnKTtcbiAgfVxuICBpZiAoRGV2aWNlLmlvcykge1xuICAgIHN1ZmZpeGVzLnB1c2goJ2lvcycpO1xuICB9XG4gIC8vIFdQOCBUb3VjaCBFdmVudHMgRml4XG4gIGlmICgoQnJvd3Nlci5pc0lFIHx8IEJyb3dzZXIuaXNFZGdlKSAmJiAoU3VwcG9ydC5wb2ludGVyRXZlbnRzIHx8IFN1cHBvcnQucHJlZml4ZWRQb2ludGVyRXZlbnRzKSkge1xuICAgIHN1ZmZpeGVzLnB1c2goYHdwOC0ke3BhcmFtcy5kaXJlY3Rpb259YCk7XG4gIH1cblxuICBzdWZmaXhlcy5mb3JFYWNoKChzdWZmaXgpID0+IHtcbiAgICBjbGFzc05hbWVzLnB1c2gocGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3MgKyBzdWZmaXgpO1xuICB9KTtcblxuICAkZWwuYWRkQ2xhc3MoY2xhc3NOYW1lcy5qb2luKCcgJykpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVDbGFzc2VzICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgY29uc3QgeyAkZWwsIGNsYXNzTmFtZXMgfSA9IHN3aXBlcjtcblxuICAkZWwucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lcy5qb2luKCcgJykpO1xufVxuXG52YXIgY2xhc3NlcyA9IHsgYWRkQ2xhc3NlcywgcmVtb3ZlQ2xhc3NlcyB9O1xuXG5mdW5jdGlvbiBsb2FkSW1hZ2UgKGltYWdlRWwsIHNyYywgc3Jjc2V0LCBzaXplcywgY2hlY2tGb3JDb21wbGV0ZSwgY2FsbGJhY2spIHtcbiAgbGV0IGltYWdlO1xuICBmdW5jdGlvbiBvblJlYWR5KCkge1xuICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgfVxuICBpZiAoIWltYWdlRWwuY29tcGxldGUgfHwgIWNoZWNrRm9yQ29tcGxldGUpIHtcbiAgICBpZiAoc3JjKSB7XG4gICAgICBpbWFnZSA9IG5ldyB3aW5kb3cuSW1hZ2UoKTtcbiAgICAgIGltYWdlLm9ubG9hZCA9IG9uUmVhZHk7XG4gICAgICBpbWFnZS5vbmVycm9yID0gb25SZWFkeTtcbiAgICAgIGlmIChzaXplcykge1xuICAgICAgICBpbWFnZS5zaXplcyA9IHNpemVzO1xuICAgICAgfVxuICAgICAgaWYgKHNyY3NldCkge1xuICAgICAgICBpbWFnZS5zcmNzZXQgPSBzcmNzZXQ7XG4gICAgICB9XG4gICAgICBpZiAoc3JjKSB7XG4gICAgICAgIGltYWdlLnNyYyA9IHNyYztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgb25SZWFkeSgpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBpbWFnZSBhbHJlYWR5IGxvYWRlZC4uLlxuICAgIG9uUmVhZHkoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcmVsb2FkSW1hZ2VzICgpIHtcbiAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgc3dpcGVyLmltYWdlc1RvTG9hZCA9IHN3aXBlci4kZWwuZmluZCgnaW1nJyk7XG4gIGZ1bmN0aW9uIG9uUmVhZHkoKSB7XG4gICAgaWYgKHR5cGVvZiBzd2lwZXIgPT09ICd1bmRlZmluZWQnIHx8IHN3aXBlciA9PT0gbnVsbCB8fCAhc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmltYWdlc0xvYWRlZCAhPT0gdW5kZWZpbmVkKSBzd2lwZXIuaW1hZ2VzTG9hZGVkICs9IDE7XG4gICAgaWYgKHN3aXBlci5pbWFnZXNMb2FkZWQgPT09IHN3aXBlci5pbWFnZXNUb0xvYWQubGVuZ3RoKSB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy51cGRhdGVPbkltYWdlc1JlYWR5KSBzd2lwZXIudXBkYXRlKCk7XG4gICAgICBzd2lwZXIuZW1pdCgnaW1hZ2VzUmVhZHknKTtcbiAgICB9XG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXIuaW1hZ2VzVG9Mb2FkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgY29uc3QgaW1hZ2VFbCA9IHN3aXBlci5pbWFnZXNUb0xvYWRbaV07XG4gICAgc3dpcGVyLmxvYWRJbWFnZShcbiAgICAgIGltYWdlRWwsXG4gICAgICBpbWFnZUVsLmN1cnJlbnRTcmMgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyYycpLFxuICAgICAgaW1hZ2VFbC5zcmNzZXQgfHwgaW1hZ2VFbC5nZXRBdHRyaWJ1dGUoJ3NyY3NldCcpLFxuICAgICAgaW1hZ2VFbC5zaXplcyB8fCBpbWFnZUVsLmdldEF0dHJpYnV0ZSgnc2l6ZXMnKSxcbiAgICAgIHRydWUsXG4gICAgICBvblJlYWR5XG4gICAgKTtcbiAgfVxufVxuXG52YXIgaW1hZ2VzID0ge1xuICBsb2FkSW1hZ2UsXG4gIHByZWxvYWRJbWFnZXMsXG59O1xuXG5mdW5jdGlvbiBjaGVja092ZXJmbG93KCkge1xuICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICBjb25zdCB3YXNMb2NrZWQgPSBzd2lwZXIuaXNMb2NrZWQ7XG5cbiAgc3dpcGVyLmlzTG9ja2VkID0gc3dpcGVyLnNuYXBHcmlkLmxlbmd0aCA9PT0gMTtcbiAgc3dpcGVyLmFsbG93U2xpZGVOZXh0ID0gIXN3aXBlci5pc0xvY2tlZDtcbiAgc3dpcGVyLmFsbG93U2xpZGVQcmV2ID0gIXN3aXBlci5pc0xvY2tlZDtcblxuICAvLyBldmVudHNcbiAgaWYgKHdhc0xvY2tlZCAhPT0gc3dpcGVyLmlzTG9ja2VkKSBzd2lwZXIuZW1pdChzd2lwZXIuaXNMb2NrZWQgPyAnbG9jaycgOiAndW5sb2NrJyk7XG5cbiAgaWYgKHdhc0xvY2tlZCAmJiB3YXNMb2NrZWQgIT09IHN3aXBlci5pc0xvY2tlZCkge1xuICAgIHN3aXBlci5pc0VuZCA9IGZhbHNlO1xuICAgIHN3aXBlci5uYXZpZ2F0aW9uLnVwZGF0ZSgpO1xuICB9XG59XG5cbnZhciBjaGVja092ZXJmbG93JDEgPSB7IGNoZWNrT3ZlcmZsb3cgfTtcblxudmFyIGRlZmF1bHRzID0ge1xuICBpbml0OiB0cnVlLFxuICBkaXJlY3Rpb246ICdob3Jpem9udGFsJyxcbiAgdG91Y2hFdmVudHNUYXJnZXQ6ICdjb250YWluZXInLFxuICBpbml0aWFsU2xpZGU6IDAsXG4gIHNwZWVkOiAzMDAsXG4gIC8vXG4gIHByZXZlbnRJbnRlcmFjdGlvbk9uVHJhbnNpdGlvbjogZmFsc2UsXG5cbiAgLy8gVG8gc3VwcG9ydCBpT1MncyBzd2lwZS10by1nby1iYWNrIGdlc3R1cmUgKHdoZW4gYmVpbmcgdXNlZCBpbi1hcHAsIHdpdGggVUlXZWJWaWV3KS5cbiAgZWRnZVN3aXBlRGV0ZWN0aW9uOiBmYWxzZSxcbiAgZWRnZVN3aXBlVGhyZXNob2xkOiAyMCxcblxuICAvLyBGcmVlIG1vZGVcbiAgZnJlZU1vZGU6IGZhbHNlLFxuICBmcmVlTW9kZU1vbWVudHVtOiB0cnVlLFxuICBmcmVlTW9kZU1vbWVudHVtUmF0aW86IDEsXG4gIGZyZWVNb2RlTW9tZW50dW1Cb3VuY2U6IHRydWUsXG4gIGZyZWVNb2RlTW9tZW50dW1Cb3VuY2VSYXRpbzogMSxcbiAgZnJlZU1vZGVNb21lbnR1bVZlbG9jaXR5UmF0aW86IDEsXG4gIGZyZWVNb2RlU3RpY2t5OiBmYWxzZSxcbiAgZnJlZU1vZGVNaW5pbXVtVmVsb2NpdHk6IDAuMDIsXG5cbiAgLy8gQXV0b2hlaWdodFxuICBhdXRvSGVpZ2h0OiBmYWxzZSxcblxuICAvLyBTZXQgd3JhcHBlciB3aWR0aFxuICBzZXRXcmFwcGVyU2l6ZTogZmFsc2UsXG5cbiAgLy8gVmlydHVhbCBUcmFuc2xhdGVcbiAgdmlydHVhbFRyYW5zbGF0ZTogZmFsc2UsXG5cbiAgLy8gRWZmZWN0c1xuICBlZmZlY3Q6ICdzbGlkZScsIC8vICdzbGlkZScgb3IgJ2ZhZGUnIG9yICdjdWJlJyBvciAnY292ZXJmbG93JyBvciAnZmxpcCdcblxuICAvLyBCcmVha3BvaW50c1xuICBicmVha3BvaW50czogdW5kZWZpbmVkLFxuICBicmVha3BvaW50c0ludmVyc2U6IGZhbHNlLFxuXG4gIC8vIFNsaWRlcyBncmlkXG4gIHNwYWNlQmV0d2VlbjogMCxcbiAgc2xpZGVzUGVyVmlldzogMSxcbiAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICBzbGlkZXNQZXJDb2x1bW5GaWxsOiAnY29sdW1uJyxcbiAgc2xpZGVzUGVyR3JvdXA6IDEsXG4gIGNlbnRlcmVkU2xpZGVzOiBmYWxzZSxcbiAgc2xpZGVzT2Zmc2V0QmVmb3JlOiAwLCAvLyBpbiBweFxuICBzbGlkZXNPZmZzZXRBZnRlcjogMCwgLy8gaW4gcHhcbiAgbm9ybWFsaXplU2xpZGVJbmRleDogdHJ1ZSxcbiAgY2VudGVySW5zdWZmaWNpZW50U2xpZGVzOiBmYWxzZSxcblxuICAvLyBEaXNhYmxlIHN3aXBlciBhbmQgaGlkZSBuYXZpZ2F0aW9uIHdoZW4gY29udGFpbmVyIG5vdCBvdmVyZmxvd1xuICB3YXRjaE92ZXJmbG93OiBmYWxzZSxcblxuICAvLyBSb3VuZCBsZW5ndGhcbiAgcm91bmRMZW5ndGhzOiBmYWxzZSxcblxuICAvLyBUb3VjaGVzXG4gIHRvdWNoUmF0aW86IDEsXG4gIHRvdWNoQW5nbGU6IDQ1LFxuICBzaW11bGF0ZVRvdWNoOiB0cnVlLFxuICBzaG9ydFN3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlczogdHJ1ZSxcbiAgbG9uZ1N3aXBlc1JhdGlvOiAwLjUsXG4gIGxvbmdTd2lwZXNNczogMzAwLFxuICBmb2xsb3dGaW5nZXI6IHRydWUsXG4gIGFsbG93VG91Y2hNb3ZlOiB0cnVlLFxuICB0aHJlc2hvbGQ6IDAsXG4gIHRvdWNoTW92ZVN0b3BQcm9wYWdhdGlvbjogdHJ1ZSxcbiAgdG91Y2hTdGFydFByZXZlbnREZWZhdWx0OiB0cnVlLFxuICB0b3VjaFN0YXJ0Rm9yY2VQcmV2ZW50RGVmYXVsdDogZmFsc2UsXG4gIHRvdWNoUmVsZWFzZU9uRWRnZXM6IGZhbHNlLFxuXG4gIC8vIFVuaXF1ZSBOYXZpZ2F0aW9uIEVsZW1lbnRzXG4gIHVuaXF1ZU5hdkVsZW1lbnRzOiB0cnVlLFxuXG4gIC8vIFJlc2lzdGFuY2VcbiAgcmVzaXN0YW5jZTogdHJ1ZSxcbiAgcmVzaXN0YW5jZVJhdGlvOiAwLjg1LFxuXG4gIC8vIFByb2dyZXNzXG4gIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IGZhbHNlLFxuICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6IGZhbHNlLFxuXG4gIC8vIEN1cnNvclxuICBncmFiQ3Vyc29yOiBmYWxzZSxcblxuICAvLyBDbGlja3NcbiAgcHJldmVudENsaWNrczogdHJ1ZSxcbiAgcHJldmVudENsaWNrc1Byb3BhZ2F0aW9uOiB0cnVlLFxuICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcblxuICAvLyBJbWFnZXNcbiAgcHJlbG9hZEltYWdlczogdHJ1ZSxcbiAgdXBkYXRlT25JbWFnZXNSZWFkeTogdHJ1ZSxcblxuICAvLyBsb29wXG4gIGxvb3A6IGZhbHNlLFxuICBsb29wQWRkaXRpb25hbFNsaWRlczogMCxcbiAgbG9vcGVkU2xpZGVzOiBudWxsLFxuICBsb29wRmlsbEdyb3VwV2l0aEJsYW5rOiBmYWxzZSxcblxuICAvLyBTd2lwaW5nL25vIHN3aXBpbmdcbiAgYWxsb3dTbGlkZVByZXY6IHRydWUsXG4gIGFsbG93U2xpZGVOZXh0OiB0cnVlLFxuICBzd2lwZUhhbmRsZXI6IG51bGwsIC8vICcuc3dpcGUtaGFuZGxlcicsXG4gIG5vU3dpcGluZzogdHJ1ZSxcbiAgbm9Td2lwaW5nQ2xhc3M6ICdzd2lwZXItbm8tc3dpcGluZycsXG4gIG5vU3dpcGluZ1NlbGVjdG9yOiBudWxsLFxuXG4gIC8vIFBhc3NpdmUgTGlzdGVuZXJzXG4gIHBhc3NpdmVMaXN0ZW5lcnM6IHRydWUsXG5cbiAgLy8gTlNcbiAgY29udGFpbmVyTW9kaWZpZXJDbGFzczogJ3N3aXBlci1jb250YWluZXItJywgLy8gTkVXXG4gIHNsaWRlQ2xhc3M6ICdzd2lwZXItc2xpZGUnLFxuICBzbGlkZUJsYW5rQ2xhc3M6ICdzd2lwZXItc2xpZGUtaW52aXNpYmxlLWJsYW5rJyxcbiAgc2xpZGVBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS1hY3RpdmUnLFxuICBzbGlkZUR1cGxpY2F0ZUFjdGl2ZUNsYXNzOiAnc3dpcGVyLXNsaWRlLWR1cGxpY2F0ZS1hY3RpdmUnLFxuICBzbGlkZVZpc2libGVDbGFzczogJ3N3aXBlci1zbGlkZS12aXNpYmxlJyxcbiAgc2xpZGVEdXBsaWNhdGVDbGFzczogJ3N3aXBlci1zbGlkZS1kdXBsaWNhdGUnLFxuICBzbGlkZU5leHRDbGFzczogJ3N3aXBlci1zbGlkZS1uZXh0JyxcbiAgc2xpZGVEdXBsaWNhdGVOZXh0Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLW5leHQnLFxuICBzbGlkZVByZXZDbGFzczogJ3N3aXBlci1zbGlkZS1wcmV2JyxcbiAgc2xpZGVEdXBsaWNhdGVQcmV2Q2xhc3M6ICdzd2lwZXItc2xpZGUtZHVwbGljYXRlLXByZXYnLFxuICB3cmFwcGVyQ2xhc3M6ICdzd2lwZXItd3JhcHBlcicsXG5cbiAgLy8gQ2FsbGJhY2tzXG4gIHJ1bkNhbGxiYWNrc09uSW5pdDogdHJ1ZSxcbn07XG5cbi8qIGVzbGludCBuby1wYXJhbS1yZWFzc2lnbjogXCJvZmZcIiAqL1xuXG5jb25zdCBwcm90b3R5cGVzID0ge1xuICB1cGRhdGUsXG4gIHRyYW5zbGF0ZSxcbiAgdHJhbnNpdGlvbixcbiAgc2xpZGUsXG4gIGxvb3AsXG4gIGdyYWJDdXJzb3IsXG4gIG1hbmlwdWxhdGlvbixcbiAgZXZlbnRzLFxuICBicmVha3BvaW50cyxcbiAgY2hlY2tPdmVyZmxvdzogY2hlY2tPdmVyZmxvdyQxLFxuICBjbGFzc2VzLFxuICBpbWFnZXMsXG59O1xuXG5jb25zdCBleHRlbmRlZERlZmF1bHRzID0ge307XG5cbmNsYXNzIFN3aXBlciBleHRlbmRzIFN3aXBlckNsYXNzIHtcbiAgY29uc3RydWN0b3IoLi4uYXJncykge1xuICAgIGxldCBlbDtcbiAgICBsZXQgcGFyYW1zO1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSAmJiBhcmdzWzBdLmNvbnN0cnVjdG9yICYmIGFyZ3NbMF0uY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgcGFyYW1zID0gYXJnc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgW2VsLCBwYXJhbXNdID0gYXJncztcbiAgICB9XG4gICAgaWYgKCFwYXJhbXMpIHBhcmFtcyA9IHt9O1xuXG4gICAgcGFyYW1zID0gVXRpbHMuZXh0ZW5kKHt9LCBwYXJhbXMpO1xuICAgIGlmIChlbCAmJiAhcGFyYW1zLmVsKSBwYXJhbXMuZWwgPSBlbDtcblxuICAgIHN1cGVyKHBhcmFtcyk7XG5cbiAgICBPYmplY3Qua2V5cyhwcm90b3R5cGVzKS5mb3JFYWNoKChwcm90b3R5cGVHcm91cCkgPT4ge1xuICAgICAgT2JqZWN0LmtleXMocHJvdG90eXBlc1twcm90b3R5cGVHcm91cF0pLmZvckVhY2goKHByb3RvTWV0aG9kKSA9PiB7XG4gICAgICAgIGlmICghU3dpcGVyLnByb3RvdHlwZVtwcm90b01ldGhvZF0pIHtcbiAgICAgICAgICBTd2lwZXIucHJvdG90eXBlW3Byb3RvTWV0aG9kXSA9IHByb3RvdHlwZXNbcHJvdG90eXBlR3JvdXBdW3Byb3RvTWV0aG9kXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBTd2lwZXIgSW5zdGFuY2VcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLm1vZHVsZXMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBzd2lwZXIubW9kdWxlcyA9IHt9O1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhzd2lwZXIubW9kdWxlcykuZm9yRWFjaCgobW9kdWxlTmFtZSkgPT4ge1xuICAgICAgY29uc3QgbW9kdWxlID0gc3dpcGVyLm1vZHVsZXNbbW9kdWxlTmFtZV07XG4gICAgICBpZiAobW9kdWxlLnBhcmFtcykge1xuICAgICAgICBjb25zdCBtb2R1bGVQYXJhbU5hbWUgPSBPYmplY3Qua2V5cyhtb2R1bGUucGFyYW1zKVswXTtcbiAgICAgICAgY29uc3QgbW9kdWxlUGFyYW1zID0gbW9kdWxlLnBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdO1xuICAgICAgICBpZiAodHlwZW9mIG1vZHVsZVBhcmFtcyAhPT0gJ29iamVjdCcgfHwgbW9kdWxlUGFyYW1zID09PSBudWxsKSByZXR1cm47XG4gICAgICAgIGlmICghKG1vZHVsZVBhcmFtTmFtZSBpbiBwYXJhbXMgJiYgJ2VuYWJsZWQnIGluIG1vZHVsZVBhcmFtcykpIHJldHVybjtcbiAgICAgICAgaWYgKHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSB0cnVlKSB7XG4gICAgICAgICAgcGFyYW1zW21vZHVsZVBhcmFtTmFtZV0gPSB7IGVuYWJsZWQ6IHRydWUgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgdHlwZW9mIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdID09PSAnb2JqZWN0J1xuICAgICAgICAgICYmICEoJ2VuYWJsZWQnIGluIHBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKVxuICAgICAgICApIHtcbiAgICAgICAgICBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXS5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXBhcmFtc1ttb2R1bGVQYXJhbU5hbWVdKSBwYXJhbXNbbW9kdWxlUGFyYW1OYW1lXSA9IHsgZW5hYmxlZDogZmFsc2UgfTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIG1vZHVsZXMgcGFyYW1zXG4gICAgY29uc3Qgc3dpcGVyUGFyYW1zID0gVXRpbHMuZXh0ZW5kKHt9LCBkZWZhdWx0cyk7XG4gICAgc3dpcGVyLnVzZU1vZHVsZXNQYXJhbXMoc3dpcGVyUGFyYW1zKTtcblxuICAgIC8vIEV4dGVuZCBkZWZhdWx0cyB3aXRoIHBhc3NlZCBwYXJhbXNcbiAgICBzd2lwZXIucGFyYW1zID0gVXRpbHMuZXh0ZW5kKHt9LCBzd2lwZXJQYXJhbXMsIGV4dGVuZGVkRGVmYXVsdHMsIHBhcmFtcyk7XG4gICAgc3dpcGVyLm9yaWdpbmFsUGFyYW1zID0gVXRpbHMuZXh0ZW5kKHt9LCBzd2lwZXIucGFyYW1zKTtcbiAgICBzd2lwZXIucGFzc2VkUGFyYW1zID0gVXRpbHMuZXh0ZW5kKHt9LCBwYXJhbXMpO1xuXG4gICAgLy8gU2F2ZSBEb20gbGliXG4gICAgc3dpcGVyLiQgPSAkO1xuXG4gICAgLy8gRmluZCBlbFxuICAgIGNvbnN0ICRlbCA9ICQoc3dpcGVyLnBhcmFtcy5lbCk7XG4gICAgZWwgPSAkZWxbMF07XG5cbiAgICBpZiAoIWVsKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmICgkZWwubGVuZ3RoID4gMSkge1xuICAgICAgY29uc3Qgc3dpcGVycyA9IFtdO1xuICAgICAgJGVsLmVhY2goKGluZGV4LCBjb250YWluZXJFbCkgPT4ge1xuICAgICAgICBjb25zdCBuZXdQYXJhbXMgPSBVdGlscy5leHRlbmQoe30sIHBhcmFtcywgeyBlbDogY29udGFpbmVyRWwgfSk7XG4gICAgICAgIHN3aXBlcnMucHVzaChuZXcgU3dpcGVyKG5ld1BhcmFtcykpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3dpcGVycztcbiAgICB9XG5cbiAgICBlbC5zd2lwZXIgPSBzd2lwZXI7XG4gICAgJGVsLmRhdGEoJ3N3aXBlcicsIHN3aXBlcik7XG5cbiAgICAvLyBGaW5kIFdyYXBwZXJcbiAgICBjb25zdCAkd3JhcHBlckVsID0gJGVsLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLndyYXBwZXJDbGFzc31gKTtcblxuICAgIC8vIEV4dGVuZCBTd2lwZXJcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICAkZWwsXG4gICAgICBlbCxcbiAgICAgICR3cmFwcGVyRWwsXG4gICAgICB3cmFwcGVyRWw6ICR3cmFwcGVyRWxbMF0sXG5cbiAgICAgIC8vIENsYXNzZXNcbiAgICAgIGNsYXNzTmFtZXM6IFtdLFxuXG4gICAgICAvLyBTbGlkZXNcbiAgICAgIHNsaWRlczogJCgpLFxuICAgICAgc2xpZGVzR3JpZDogW10sXG4gICAgICBzbmFwR3JpZDogW10sXG4gICAgICBzbGlkZXNTaXplc0dyaWQ6IFtdLFxuXG4gICAgICAvLyBpc0RpcmVjdGlvblxuICAgICAgaXNIb3Jpem9udGFsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJztcbiAgICAgIH0sXG4gICAgICBpc1ZlcnRpY2FsKCkge1xuICAgICAgICByZXR1cm4gc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICd2ZXJ0aWNhbCc7XG4gICAgICB9LFxuICAgICAgLy8gUlRMXG4gICAgICBydGw6IChlbC5kaXIudG9Mb3dlckNhc2UoKSA9PT0gJ3J0bCcgfHwgJGVsLmNzcygnZGlyZWN0aW9uJykgPT09ICdydGwnKSxcbiAgICAgIHJ0bFRyYW5zbGF0ZTogc3dpcGVyLnBhcmFtcy5kaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyAmJiAoZWwuZGlyLnRvTG93ZXJDYXNlKCkgPT09ICdydGwnIHx8ICRlbC5jc3MoJ2RpcmVjdGlvbicpID09PSAncnRsJyksXG4gICAgICB3cm9uZ1JUTDogJHdyYXBwZXJFbC5jc3MoJ2Rpc3BsYXknKSA9PT0gJy13ZWJraXQtYm94JyxcblxuICAgICAgLy8gSW5kZXhlc1xuICAgICAgYWN0aXZlSW5kZXg6IDAsXG4gICAgICByZWFsSW5kZXg6IDAsXG5cbiAgICAgIC8vXG4gICAgICBpc0JlZ2lubmluZzogdHJ1ZSxcbiAgICAgIGlzRW5kOiBmYWxzZSxcblxuICAgICAgLy8gUHJvcHNcbiAgICAgIHRyYW5zbGF0ZTogMCxcbiAgICAgIHByZXZpb3VzVHJhbnNsYXRlOiAwLFxuICAgICAgcHJvZ3Jlc3M6IDAsXG4gICAgICB2ZWxvY2l0eTogMCxcbiAgICAgIGFuaW1hdGluZzogZmFsc2UsXG5cbiAgICAgIC8vIExvY2tzXG4gICAgICBhbGxvd1NsaWRlTmV4dDogc3dpcGVyLnBhcmFtcy5hbGxvd1NsaWRlTmV4dCxcbiAgICAgIGFsbG93U2xpZGVQcmV2OiBzd2lwZXIucGFyYW1zLmFsbG93U2xpZGVQcmV2LFxuXG4gICAgICAvLyBUb3VjaCBFdmVudHNcbiAgICAgIHRvdWNoRXZlbnRzOiAoZnVuY3Rpb24gdG91Y2hFdmVudHMoKSB7XG4gICAgICAgIGNvbnN0IHRvdWNoID0gWyd0b3VjaHN0YXJ0JywgJ3RvdWNobW92ZScsICd0b3VjaGVuZCddO1xuICAgICAgICBsZXQgZGVza3RvcCA9IFsnbW91c2Vkb3duJywgJ21vdXNlbW92ZScsICdtb3VzZXVwJ107XG4gICAgICAgIGlmIChTdXBwb3J0LnBvaW50ZXJFdmVudHMpIHtcbiAgICAgICAgICBkZXNrdG9wID0gWydwb2ludGVyZG93bicsICdwb2ludGVybW92ZScsICdwb2ludGVydXAnXTtcbiAgICAgICAgfSBlbHNlIGlmIChTdXBwb3J0LnByZWZpeGVkUG9pbnRlckV2ZW50cykge1xuICAgICAgICAgIGRlc2t0b3AgPSBbJ01TUG9pbnRlckRvd24nLCAnTVNQb2ludGVyTW92ZScsICdNU1BvaW50ZXJVcCddO1xuICAgICAgICB9XG4gICAgICAgIHN3aXBlci50b3VjaEV2ZW50c1RvdWNoID0ge1xuICAgICAgICAgIHN0YXJ0OiB0b3VjaFswXSxcbiAgICAgICAgICBtb3ZlOiB0b3VjaFsxXSxcbiAgICAgICAgICBlbmQ6IHRvdWNoWzJdLFxuICAgICAgICB9O1xuICAgICAgICBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wID0ge1xuICAgICAgICAgIHN0YXJ0OiBkZXNrdG9wWzBdLFxuICAgICAgICAgIG1vdmU6IGRlc2t0b3BbMV0sXG4gICAgICAgICAgZW5kOiBkZXNrdG9wWzJdLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gU3VwcG9ydC50b3VjaCB8fCAhc3dpcGVyLnBhcmFtcy5zaW11bGF0ZVRvdWNoID8gc3dpcGVyLnRvdWNoRXZlbnRzVG91Y2ggOiBzd2lwZXIudG91Y2hFdmVudHNEZXNrdG9wO1xuICAgICAgfSgpKSxcbiAgICAgIHRvdWNoRXZlbnRzRGF0YToge1xuICAgICAgICBpc1RvdWNoZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNNb3ZlZDogdW5kZWZpbmVkLFxuICAgICAgICBhbGxvd1RvdWNoQ2FsbGJhY2tzOiB1bmRlZmluZWQsXG4gICAgICAgIHRvdWNoU3RhcnRUaW1lOiB1bmRlZmluZWQsXG4gICAgICAgIGlzU2Nyb2xsaW5nOiB1bmRlZmluZWQsXG4gICAgICAgIGN1cnJlbnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRUcmFuc2xhdGU6IHVuZGVmaW5lZCxcbiAgICAgICAgYWxsb3dUaHJlc2hvbGRNb3ZlOiB1bmRlZmluZWQsXG4gICAgICAgIC8vIEZvcm0gZWxlbWVudHMgdG8gbWF0Y2hcbiAgICAgICAgZm9ybUVsZW1lbnRzOiAnaW5wdXQsIHNlbGVjdCwgb3B0aW9uLCB0ZXh0YXJlYSwgYnV0dG9uLCB2aWRlbycsXG4gICAgICAgIC8vIExhc3QgY2xpY2sgdGltZVxuICAgICAgICBsYXN0Q2xpY2tUaW1lOiBVdGlscy5ub3coKSxcbiAgICAgICAgY2xpY2tUaW1lb3V0OiB1bmRlZmluZWQsXG4gICAgICAgIC8vIFZlbG9jaXRpZXNcbiAgICAgICAgdmVsb2NpdGllczogW10sXG4gICAgICAgIGFsbG93TW9tZW50dW1Cb3VuY2U6IHVuZGVmaW5lZCxcbiAgICAgICAgaXNUb3VjaEV2ZW50OiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0TW92aW5nOiB1bmRlZmluZWQsXG4gICAgICB9LFxuXG4gICAgICAvLyBDbGlja3NcbiAgICAgIGFsbG93Q2xpY2s6IHRydWUsXG5cbiAgICAgIC8vIFRvdWNoZXNcbiAgICAgIGFsbG93VG91Y2hNb3ZlOiBzd2lwZXIucGFyYW1zLmFsbG93VG91Y2hNb3ZlLFxuXG4gICAgICB0b3VjaGVzOiB7XG4gICAgICAgIHN0YXJ0WDogMCxcbiAgICAgICAgc3RhcnRZOiAwLFxuICAgICAgICBjdXJyZW50WDogMCxcbiAgICAgICAgY3VycmVudFk6IDAsXG4gICAgICAgIGRpZmY6IDAsXG4gICAgICB9LFxuXG4gICAgICAvLyBJbWFnZXNcbiAgICAgIGltYWdlc1RvTG9hZDogW10sXG4gICAgICBpbWFnZXNMb2FkZWQ6IDAsXG5cbiAgICB9KTtcblxuICAgIC8vIEluc3RhbGwgTW9kdWxlc1xuICAgIHN3aXBlci51c2VNb2R1bGVzKCk7XG5cbiAgICAvLyBJbml0XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaW5pdCkge1xuICAgICAgc3dpcGVyLmluaXQoKTtcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYXBwIGluc3RhbmNlXG4gICAgcmV0dXJuIHN3aXBlcjtcbiAgfVxuXG4gIHNsaWRlc1BlclZpZXdEeW5hbWljKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qge1xuICAgICAgcGFyYW1zLCBzbGlkZXMsIHNsaWRlc0dyaWQsIHNpemU6IHN3aXBlclNpemUsIGFjdGl2ZUluZGV4LFxuICAgIH0gPSBzd2lwZXI7XG4gICAgbGV0IHNwdiA9IDE7XG4gICAgaWYgKHBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgbGV0IHNsaWRlU2l6ZSA9IHNsaWRlc1thY3RpdmVJbmRleF0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgbGV0IGJyZWFrTG9vcDtcbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSAmJiAhYnJlYWtMb29wKSB7XG4gICAgICAgICAgc2xpZGVTaXplICs9IHNsaWRlc1tpXS5zd2lwZXJTbGlkZVNpemU7XG4gICAgICAgICAgc3B2ICs9IDE7XG4gICAgICAgICAgaWYgKHNsaWRlU2l6ZSA+IHN3aXBlclNpemUpIGJyZWFrTG9vcCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIGlmIChzbGlkZXNbaV0gJiYgIWJyZWFrTG9vcCkge1xuICAgICAgICAgIHNsaWRlU2l6ZSArPSBzbGlkZXNbaV0uc3dpcGVyU2xpZGVTaXplO1xuICAgICAgICAgIHNwdiArPSAxO1xuICAgICAgICAgIGlmIChzbGlkZVNpemUgPiBzd2lwZXJTaXplKSBicmVha0xvb3AgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAobGV0IGkgPSBhY3RpdmVJbmRleCArIDE7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc0dyaWRbaV0gLSBzbGlkZXNHcmlkW2FjdGl2ZUluZGV4XSA8IHN3aXBlclNpemUpIHtcbiAgICAgICAgICBzcHYgKz0gMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3B2O1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgc25hcEdyaWQsIHBhcmFtcyB9ID0gc3dpcGVyO1xuICAgIC8vIEJyZWFrcG9pbnRzXG4gICAgaWYgKHBhcmFtcy5icmVha3BvaW50cykge1xuICAgICAgc3dpcGVyLnNldEJyZWFrcG9pbnQoKTtcbiAgICB9XG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcblxuICAgIGZ1bmN0aW9uIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHRyYW5zbGF0ZVZhbHVlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IHN3aXBlci50cmFuc2xhdGUgKiAtMSA6IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICBjb25zdCBuZXdUcmFuc2xhdGUgPSBNYXRoLm1pbihNYXRoLm1heCh0cmFuc2xhdGVWYWx1ZSwgc3dpcGVyLm1heFRyYW5zbGF0ZSgpKSwgc3dpcGVyLm1pblRyYW5zbGF0ZSgpKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUobmV3VHJhbnNsYXRlKTtcbiAgICAgIHN3aXBlci51cGRhdGVBY3RpdmVJbmRleCgpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICB9XG4gICAgbGV0IHRyYW5zbGF0ZWQ7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgIHNldFRyYW5zbGF0ZSgpO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b0hlaWdodCkge1xuICAgICAgICBzd2lwZXIudXBkYXRlQXV0b0hlaWdodCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoKHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nIHx8IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA+IDEpICYmIHN3aXBlci5pc0VuZCAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0cmFuc2xhdGVkID0gc3dpcGVyLnNsaWRlVG8oc3dpcGVyLmFjdGl2ZUluZGV4LCAwLCBmYWxzZSwgdHJ1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoIXRyYW5zbGF0ZWQpIHtcbiAgICAgICAgc2V0VHJhbnNsYXRlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzbmFwR3JpZCAhPT0gc3dpcGVyLnNuYXBHcmlkKSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgndXBkYXRlJyk7XG4gIH1cblxuICBjaGFuZ2VEaXJlY3Rpb24obmV3RGlyZWN0aW9uLCBuZWVkVXBkYXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgY3VycmVudERpcmVjdGlvbiA9IHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uO1xuICAgIGlmICghbmV3RGlyZWN0aW9uKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgIG5ld0RpcmVjdGlvbiA9IGN1cnJlbnREaXJlY3Rpb24gPT09ICdob3Jpem9udGFsJyA/ICd2ZXJ0aWNhbCcgOiAnaG9yaXpvbnRhbCc7XG4gICAgfVxuICAgIGlmICgobmV3RGlyZWN0aW9uID09PSBjdXJyZW50RGlyZWN0aW9uKSB8fCAobmV3RGlyZWN0aW9uICE9PSAnaG9yaXpvbnRhbCcgJiYgbmV3RGlyZWN0aW9uICE9PSAndmVydGljYWwnKSkge1xuICAgICAgcmV0dXJuIHN3aXBlcjtcbiAgICB9XG5cbiAgICBzd2lwZXIuJGVsXG4gICAgICAucmVtb3ZlQ2xhc3MoYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfSR7Y3VycmVudERpcmVjdGlvbn0gd3A4LSR7Y3VycmVudERpcmVjdGlvbn1gKVxuICAgICAgLmFkZENsYXNzKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30ke25ld0RpcmVjdGlvbn1gKTtcblxuICAgIGlmICgoQnJvd3Nlci5pc0lFIHx8IEJyb3dzZXIuaXNFZGdlKSAmJiAoU3VwcG9ydC5wb2ludGVyRXZlbnRzIHx8IFN1cHBvcnQucHJlZml4ZWRQb2ludGVyRXZlbnRzKSkge1xuICAgICAgc3dpcGVyLiRlbC5hZGRDbGFzcyhgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9d3A4LSR7bmV3RGlyZWN0aW9ufWApO1xuICAgIH1cblxuICAgIHN3aXBlci5wYXJhbXMuZGlyZWN0aW9uID0gbmV3RGlyZWN0aW9uO1xuXG4gICAgc3dpcGVyLnNsaWRlcy5lYWNoKChzbGlkZUluZGV4LCBzbGlkZUVsKSA9PiB7XG4gICAgICBpZiAobmV3RGlyZWN0aW9uID09PSAndmVydGljYWwnKSB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUud2lkdGggPSAnJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNsaWRlRWwuc3R5bGUuaGVpZ2h0ID0gJyc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBzd2lwZXIuZW1pdCgnY2hhbmdlRGlyZWN0aW9uJyk7XG4gICAgaWYgKG5lZWRVcGRhdGUpIHN3aXBlci51cGRhdGUoKTtcblxuICAgIHJldHVybiBzd2lwZXI7XG4gIH1cblxuICBpbml0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5pbml0aWFsaXplZCkgcmV0dXJuO1xuXG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZUluaXQnKTtcblxuICAgIC8vIFNldCBicmVha3BvaW50XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuYnJlYWtwb2ludHMpIHtcbiAgICAgIHN3aXBlci5zZXRCcmVha3BvaW50KCk7XG4gICAgfVxuXG4gICAgLy8gQWRkIENsYXNzZXNcbiAgICBzd2lwZXIuYWRkQ2xhc3NlcygpO1xuXG4gICAgLy8gQ3JlYXRlIGxvb3BcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICBzd2lwZXIubG9vcENyZWF0ZSgpO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSBzaXplXG4gICAgc3dpcGVyLnVwZGF0ZVNpemUoKTtcblxuICAgIC8vIFVwZGF0ZSBzbGlkZXNcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzKCk7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaE92ZXJmbG93KSB7XG4gICAgICBzd2lwZXIuY2hlY2tPdmVyZmxvdygpO1xuICAgIH1cblxuICAgIC8vIFNldCBHcmFiIEN1cnNvclxuICAgIGlmIChzd2lwZXIucGFyYW1zLmdyYWJDdXJzb3IpIHtcbiAgICAgIHN3aXBlci5zZXRHcmFiQ3Vyc29yKCk7XG4gICAgfVxuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcykge1xuICAgICAgc3dpcGVyLnByZWxvYWRJbWFnZXMoKTtcbiAgICB9XG5cbiAgICAvLyBTbGlkZSBUbyBJbml0aWFsIFNsaWRlXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnBhcmFtcy5pbml0aWFsU2xpZGUgKyBzd2lwZXIubG9vcGVkU2xpZGVzLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKHN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlLCAwLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgfVxuXG4gICAgLy8gQXR0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5hdHRhY2hFdmVudHMoKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAvLyBFbWl0XG4gICAgc3dpcGVyLmVtaXQoJ2luaXQnKTtcbiAgfVxuXG4gIGRlc3Ryb3koZGVsZXRlSW5zdGFuY2UgPSB0cnVlLCBjbGVhblN0eWxlcyA9IHRydWUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHBhcmFtcywgJGVsLCAkd3JhcHBlckVsLCBzbGlkZXMsXG4gICAgfSA9IHN3aXBlcjtcblxuICAgIGlmICh0eXBlb2Ygc3dpcGVyLnBhcmFtcyA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyLmRlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgc3dpcGVyLmVtaXQoJ2JlZm9yZURlc3Ryb3knKTtcblxuICAgIC8vIEluaXQgRmxhZ1xuICAgIHN3aXBlci5pbml0aWFsaXplZCA9IGZhbHNlO1xuXG4gICAgLy8gRGV0YWNoIGV2ZW50c1xuICAgIHN3aXBlci5kZXRhY2hFdmVudHMoKTtcblxuICAgIC8vIERlc3Ryb3kgbG9vcFxuICAgIGlmIChwYXJhbXMubG9vcCkge1xuICAgICAgc3dpcGVyLmxvb3BEZXN0cm95KCk7XG4gICAgfVxuXG4gICAgLy8gQ2xlYW51cCBzdHlsZXNcbiAgICBpZiAoY2xlYW5TdHlsZXMpIHtcbiAgICAgIHN3aXBlci5yZW1vdmVDbGFzc2VzKCk7XG4gICAgICAkZWwucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgICR3cmFwcGVyRWwucmVtb3ZlQXR0cignc3R5bGUnKTtcbiAgICAgIGlmIChzbGlkZXMgJiYgc2xpZGVzLmxlbmd0aCkge1xuICAgICAgICBzbGlkZXNcbiAgICAgICAgICAucmVtb3ZlQ2xhc3MoW1xuICAgICAgICAgICAgcGFyYW1zLnNsaWRlVmlzaWJsZUNsYXNzLFxuICAgICAgICAgICAgcGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3MsXG4gICAgICAgICAgICBwYXJhbXMuc2xpZGVOZXh0Q2xhc3MsXG4gICAgICAgICAgICBwYXJhbXMuc2xpZGVQcmV2Q2xhc3MsXG4gICAgICAgICAgXS5qb2luKCcgJykpXG4gICAgICAgICAgLnJlbW92ZUF0dHIoJ3N0eWxlJylcbiAgICAgICAgICAucmVtb3ZlQXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKVxuICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1jb2x1bW4nKVxuICAgICAgICAgIC5yZW1vdmVBdHRyKCdkYXRhLXN3aXBlci1yb3cnKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2lwZXIuZW1pdCgnZGVzdHJveScpO1xuXG4gICAgLy8gRGV0YWNoIGVtaXR0ZXIgZXZlbnRzXG4gICAgT2JqZWN0LmtleXMoc3dpcGVyLmV2ZW50c0xpc3RlbmVycykuZm9yRWFjaCgoZXZlbnROYW1lKSA9PiB7XG4gICAgICBzd2lwZXIub2ZmKGV2ZW50TmFtZSk7XG4gICAgfSk7XG5cbiAgICBpZiAoZGVsZXRlSW5zdGFuY2UgIT09IGZhbHNlKSB7XG4gICAgICBzd2lwZXIuJGVsWzBdLnN3aXBlciA9IG51bGw7XG4gICAgICBzd2lwZXIuJGVsLmRhdGEoJ3N3aXBlcicsIG51bGwpO1xuICAgICAgVXRpbHMuZGVsZXRlUHJvcHMoc3dpcGVyKTtcbiAgICB9XG4gICAgc3dpcGVyLmRlc3Ryb3llZCA9IHRydWU7XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHN0YXRpYyBleHRlbmREZWZhdWx0cyhuZXdEZWZhdWx0cykge1xuICAgIFV0aWxzLmV4dGVuZChleHRlbmRlZERlZmF1bHRzLCBuZXdEZWZhdWx0cyk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGV4dGVuZGVkRGVmYXVsdHMoKSB7XG4gICAgcmV0dXJuIGV4dGVuZGVkRGVmYXVsdHM7XG4gIH1cblxuICBzdGF0aWMgZ2V0IGRlZmF1bHRzKCkge1xuICAgIHJldHVybiBkZWZhdWx0cztcbiAgfVxuXG4gIHN0YXRpYyBnZXQgQ2xhc3MoKSB7XG4gICAgcmV0dXJuIFN3aXBlckNsYXNzO1xuICB9XG5cbiAgc3RhdGljIGdldCAkKCkge1xuICAgIHJldHVybiAkO1xuICB9XG59XG5cbnZhciBEZXZpY2UkMSA9IHtcbiAgbmFtZTogJ2RldmljZScsXG4gIHByb3RvOiB7XG4gICAgZGV2aWNlOiBEZXZpY2UsXG4gIH0sXG4gIHN0YXRpYzoge1xuICAgIGRldmljZTogRGV2aWNlLFxuICB9LFxufTtcblxudmFyIFN1cHBvcnQkMSA9IHtcbiAgbmFtZTogJ3N1cHBvcnQnLFxuICBwcm90bzoge1xuICAgIHN1cHBvcnQ6IFN1cHBvcnQsXG4gIH0sXG4gIHN0YXRpYzoge1xuICAgIHN1cHBvcnQ6IFN1cHBvcnQsXG4gIH0sXG59O1xuXG52YXIgQnJvd3NlciQxID0ge1xuICBuYW1lOiAnYnJvd3NlcicsXG4gIHByb3RvOiB7XG4gICAgYnJvd3NlcjogQnJvd3NlcixcbiAgfSxcbiAgc3RhdGljOiB7XG4gICAgYnJvd3NlcjogQnJvd3NlcixcbiAgfSxcbn07XG5cbnZhciBSZXNpemUgPSB7XG4gIG5hbWU6ICdyZXNpemUnLFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICByZXNpemU6IHtcbiAgICAgICAgcmVzaXplSGFuZGxlcigpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuaW5pdGlhbGl6ZWQpIHJldHVybjtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYmVmb3JlUmVzaXplJyk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3Jlc2l6ZScpO1xuICAgICAgICB9LFxuICAgICAgICBvcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIoKSB7XG4gICAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCB8fCAhc3dpcGVyLmluaXRpYWxpemVkKSByZXR1cm47XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ29yaWVudGF0aW9uY2hhbmdlJyk7XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgLy8gRW1pdCByZXNpemVcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzd2lwZXIucmVzaXplLnJlc2l6ZUhhbmRsZXIpO1xuXG4gICAgICAvLyBFbWl0IG9yaWVudGF0aW9uY2hhbmdlXG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignb3JpZW50YXRpb25jaGFuZ2UnLCBzd2lwZXIucmVzaXplLm9yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gICAgfSxcbiAgICBkZXN0cm95KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBzd2lwZXIucmVzaXplLnJlc2l6ZUhhbmRsZXIpO1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ29yaWVudGF0aW9uY2hhbmdlJywgc3dpcGVyLnJlc2l6ZS5vcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBPYnNlcnZlciA9IHtcbiAgZnVuYzogd2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIgfHwgd2luZG93LldlYmtpdE11dGF0aW9uT2JzZXJ2ZXIsXG4gIGF0dGFjaCh0YXJnZXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgICBjb25zdCBPYnNlcnZlckZ1bmMgPSBPYnNlcnZlci5mdW5jO1xuICAgIGNvbnN0IG9ic2VydmVyID0gbmV3IE9ic2VydmVyRnVuYygobXV0YXRpb25zKSA9PiB7XG4gICAgICAvLyBUaGUgb2JzZXJ2ZXJVcGRhdGUgZXZlbnQgc2hvdWxkIG9ubHkgYmUgdHJpZ2dlcmVkXG4gICAgICAvLyBvbmNlIGRlc3BpdGUgdGhlIG51bWJlciBvZiBtdXRhdGlvbnMuICBBZGRpdGlvbmFsXG4gICAgICAvLyB0cmlnZ2VycyBhcmUgcmVkdW5kYW50IGFuZCBhcmUgdmVyeSBjb3N0bHlcbiAgICAgIGlmIChtdXRhdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IG9ic2VydmVyVXBkYXRlID0gZnVuY3Rpb24gb2JzZXJ2ZXJVcGRhdGUoKSB7XG4gICAgICAgIHN3aXBlci5lbWl0KCdvYnNlcnZlclVwZGF0ZScsIG11dGF0aW9uc1swXSk7XG4gICAgICB9O1xuXG4gICAgICBpZiAod2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKG9ic2VydmVyVXBkYXRlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KG9ic2VydmVyVXBkYXRlLCAwKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIG9ic2VydmVyLm9ic2VydmUodGFyZ2V0LCB7XG4gICAgICBhdHRyaWJ1dGVzOiB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmF0dHJpYnV0ZXMsXG4gICAgICBjaGlsZExpc3Q6IHR5cGVvZiBvcHRpb25zLmNoaWxkTGlzdCA9PT0gJ3VuZGVmaW5lZCcgPyB0cnVlIDogb3B0aW9ucy5jaGlsZExpc3QsXG4gICAgICBjaGFyYWN0ZXJEYXRhOiB0eXBlb2Ygb3B0aW9ucy5jaGFyYWN0ZXJEYXRhID09PSAndW5kZWZpbmVkJyA/IHRydWUgOiBvcHRpb25zLmNoYXJhY3RlckRhdGEsXG4gICAgfSk7XG5cbiAgICBzd2lwZXIub2JzZXJ2ZXIub2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICB9LFxuICBpbml0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFTdXBwb3J0Lm9ic2VydmVyIHx8ICFzd2lwZXIucGFyYW1zLm9ic2VydmVyKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5wYXJhbXMub2JzZXJ2ZVBhcmVudHMpIHtcbiAgICAgIGNvbnN0IGNvbnRhaW5lclBhcmVudHMgPSBzd2lwZXIuJGVsLnBhcmVudHMoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29udGFpbmVyUGFyZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBzd2lwZXIub2JzZXJ2ZXIuYXR0YWNoKGNvbnRhaW5lclBhcmVudHNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBPYnNlcnZlIGNvbnRhaW5lclxuICAgIHN3aXBlci5vYnNlcnZlci5hdHRhY2goc3dpcGVyLiRlbFswXSwgeyBjaGlsZExpc3Q6IHN3aXBlci5wYXJhbXMub2JzZXJ2ZVNsaWRlQ2hpbGRyZW4gfSk7XG5cbiAgICAvLyBPYnNlcnZlIHdyYXBwZXJcbiAgICBzd2lwZXIub2JzZXJ2ZXIuYXR0YWNoKHN3aXBlci4kd3JhcHBlckVsWzBdLCB7IGF0dHJpYnV0ZXM6IGZhbHNlIH0pO1xuICB9LFxuICBkZXN0cm95KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLm9ic2VydmVyLm9ic2VydmVycy5mb3JFYWNoKChvYnNlcnZlcikgPT4ge1xuICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgIH0pO1xuICAgIHN3aXBlci5vYnNlcnZlci5vYnNlcnZlcnMgPSBbXTtcbiAgfSxcbn07XG5cbnZhciBPYnNlcnZlciQxID0ge1xuICBuYW1lOiAnb2JzZXJ2ZXInLFxuICBwYXJhbXM6IHtcbiAgICBvYnNlcnZlcjogZmFsc2UsXG4gICAgb2JzZXJ2ZVBhcmVudHM6IGZhbHNlLFxuICAgIG9ic2VydmVTbGlkZUNoaWxkcmVuOiBmYWxzZSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgb2JzZXJ2ZXI6IHtcbiAgICAgICAgaW5pdDogT2JzZXJ2ZXIuaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgIGF0dGFjaDogT2JzZXJ2ZXIuYXR0YWNoLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZGVzdHJveTogT2JzZXJ2ZXIuZGVzdHJveS5iaW5kKHN3aXBlciksXG4gICAgICAgIG9ic2VydmVyczogW10sXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLm9ic2VydmVyLmluaXQoKTtcbiAgICB9LFxuICAgIGRlc3Ryb3koKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLm9ic2VydmVyLmRlc3Ryb3koKTtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgVmlydHVhbCA9IHtcbiAgdXBkYXRlKGZvcmNlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNsaWRlc1BlclZpZXcsIHNsaWRlc1Blckdyb3VwLCBjZW50ZXJlZFNsaWRlcyB9ID0gc3dpcGVyLnBhcmFtcztcbiAgICBjb25zdCB7IGFkZFNsaWRlc0JlZm9yZSwgYWRkU2xpZGVzQWZ0ZXIgfSA9IHN3aXBlci5wYXJhbXMudmlydHVhbDtcbiAgICBjb25zdCB7XG4gICAgICBmcm9tOiBwcmV2aW91c0Zyb20sXG4gICAgICB0bzogcHJldmlvdXNUbyxcbiAgICAgIHNsaWRlcyxcbiAgICAgIHNsaWRlc0dyaWQ6IHByZXZpb3VzU2xpZGVzR3JpZCxcbiAgICAgIHJlbmRlclNsaWRlLFxuICAgICAgb2Zmc2V0OiBwcmV2aW91c09mZnNldCxcbiAgICB9ID0gc3dpcGVyLnZpcnR1YWw7XG4gICAgc3dpcGVyLnVwZGF0ZUFjdGl2ZUluZGV4KCk7XG4gICAgY29uc3QgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXggfHwgMDtcblxuICAgIGxldCBvZmZzZXRQcm9wO1xuICAgIGlmIChzd2lwZXIucnRsVHJhbnNsYXRlKSBvZmZzZXRQcm9wID0gJ3JpZ2h0JztcbiAgICBlbHNlIG9mZnNldFByb3AgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJztcblxuICAgIGxldCBzbGlkZXNBZnRlcjtcbiAgICBsZXQgc2xpZGVzQmVmb3JlO1xuICAgIGlmIChjZW50ZXJlZFNsaWRlcykge1xuICAgICAgc2xpZGVzQWZ0ZXIgPSBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSArIHNsaWRlc1Blckdyb3VwICsgYWRkU2xpZGVzQmVmb3JlO1xuICAgICAgc2xpZGVzQmVmb3JlID0gTWF0aC5mbG9vcihzbGlkZXNQZXJWaWV3IC8gMikgKyBzbGlkZXNQZXJHcm91cCArIGFkZFNsaWRlc0FmdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICBzbGlkZXNBZnRlciA9IHNsaWRlc1BlclZpZXcgKyAoc2xpZGVzUGVyR3JvdXAgLSAxKSArIGFkZFNsaWRlc0JlZm9yZTtcbiAgICAgIHNsaWRlc0JlZm9yZSA9IHNsaWRlc1Blckdyb3VwICsgYWRkU2xpZGVzQWZ0ZXI7XG4gICAgfVxuICAgIGNvbnN0IGZyb20gPSBNYXRoLm1heCgoYWN0aXZlSW5kZXggfHwgMCkgLSBzbGlkZXNCZWZvcmUsIDApO1xuICAgIGNvbnN0IHRvID0gTWF0aC5taW4oKGFjdGl2ZUluZGV4IHx8IDApICsgc2xpZGVzQWZ0ZXIsIHNsaWRlcy5sZW5ndGggLSAxKTtcbiAgICBjb25zdCBvZmZzZXQgPSAoc3dpcGVyLnNsaWRlc0dyaWRbZnJvbV0gfHwgMCkgLSAoc3dpcGVyLnNsaWRlc0dyaWRbMF0gfHwgMCk7XG5cbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLnZpcnR1YWwsIHtcbiAgICAgIGZyb20sXG4gICAgICB0byxcbiAgICAgIG9mZnNldCxcbiAgICAgIHNsaWRlc0dyaWQ6IHN3aXBlci5zbGlkZXNHcmlkLFxuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gb25SZW5kZXJlZCgpIHtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXMoKTtcbiAgICAgIHN3aXBlci51cGRhdGVQcm9ncmVzcygpO1xuICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIGlmIChzd2lwZXIubGF6eSAmJiBzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZpb3VzRnJvbSA9PT0gZnJvbSAmJiBwcmV2aW91c1RvID09PSB0byAmJiAhZm9yY2UpIHtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzR3JpZCAhPT0gcHJldmlvdXNTbGlkZXNHcmlkICYmIG9mZnNldCAhPT0gcHJldmlvdXNPZmZzZXQpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlcy5jc3Mob2Zmc2V0UHJvcCwgYCR7b2Zmc2V0fXB4YCk7XG4gICAgICB9XG4gICAgICBzd2lwZXIudXBkYXRlUHJvZ3Jlc3MoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5yZW5kZXJFeHRlcm5hbCkge1xuICAgICAgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLnJlbmRlckV4dGVybmFsLmNhbGwoc3dpcGVyLCB7XG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgZnJvbSxcbiAgICAgICAgdG8sXG4gICAgICAgIHNsaWRlczogKGZ1bmN0aW9uIGdldFNsaWRlcygpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZXNUb1JlbmRlciA9IFtdO1xuICAgICAgICAgIGZvciAobGV0IGkgPSBmcm9tOyBpIDw9IHRvOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHNsaWRlc1RvUmVuZGVyLnB1c2goc2xpZGVzW2ldKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHNsaWRlc1RvUmVuZGVyO1xuICAgICAgICB9KCkpLFxuICAgICAgfSk7XG4gICAgICBvblJlbmRlcmVkKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHByZXBlbmRJbmRleGVzID0gW107XG4gICAgY29uc3QgYXBwZW5kSW5kZXhlcyA9IFtdO1xuICAgIGlmIChmb3JjZSkge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuZmluZChgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApLnJlbW92ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gcHJldmlvdXNGcm9tOyBpIDw9IHByZXZpb3VzVG87IGkgKz0gMSkge1xuICAgICAgICBpZiAoaSA8IGZyb20gfHwgaSA+IHRvKSB7XG4gICAgICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuZmluZChgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7aX1cIl1gKS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGkgPj0gZnJvbSAmJiBpIDw9IHRvKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJldmlvdXNUbyA9PT0gJ3VuZGVmaW5lZCcgfHwgZm9yY2UpIHtcbiAgICAgICAgICBhcHBlbmRJbmRleGVzLnB1c2goaSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGkgPiBwcmV2aW91c1RvKSBhcHBlbmRJbmRleGVzLnB1c2goaSk7XG4gICAgICAgICAgaWYgKGkgPCBwcmV2aW91c0Zyb20pIHByZXBlbmRJbmRleGVzLnB1c2goaSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgYXBwZW5kSW5kZXhlcy5mb3JFYWNoKChpbmRleCkgPT4ge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwuYXBwZW5kKHJlbmRlclNsaWRlKHNsaWRlc1tpbmRleF0sIGluZGV4KSk7XG4gICAgfSk7XG4gICAgcHJlcGVuZEluZGV4ZXMuc29ydCgoYSwgYikgPT4gYiAtIGEpLmZvckVhY2goKGluZGV4KSA9PiB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5wcmVwZW5kKHJlbmRlclNsaWRlKHNsaWRlc1tpbmRleF0sIGluZGV4KSk7XG4gICAgfSk7XG4gICAgc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oJy5zd2lwZXItc2xpZGUnKS5jc3Mob2Zmc2V0UHJvcCwgYCR7b2Zmc2V0fXB4YCk7XG4gICAgb25SZW5kZXJlZCgpO1xuICB9LFxuICByZW5kZXJTbGlkZShzbGlkZSwgaW5kZXgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMudmlydHVhbDtcbiAgICBpZiAocGFyYW1zLmNhY2hlICYmIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XSkge1xuICAgICAgcmV0dXJuIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XTtcbiAgICB9XG4gICAgY29uc3QgJHNsaWRlRWwgPSBwYXJhbXMucmVuZGVyU2xpZGVcbiAgICAgID8gJChwYXJhbXMucmVuZGVyU2xpZGUuY2FsbChzd2lwZXIsIHNsaWRlLCBpbmRleCkpXG4gICAgICA6ICQoYDxkaXYgY2xhc3M9XCIke3N3aXBlci5wYXJhbXMuc2xpZGVDbGFzc31cIiBkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7aW5kZXh9XCI+JHtzbGlkZX08L2Rpdj5gKTtcbiAgICBpZiAoISRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JykpICRzbGlkZUVsLmF0dHIoJ2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4JywgaW5kZXgpO1xuICAgIGlmIChwYXJhbXMuY2FjaGUpIHN3aXBlci52aXJ0dWFsLmNhY2hlW2luZGV4XSA9ICRzbGlkZUVsO1xuICAgIHJldHVybiAkc2xpZGVFbDtcbiAgfSxcbiAgYXBwZW5kU2xpZGUoc2xpZGVzKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHNsaWRlcyA9PT0gJ29iamVjdCcgJiYgJ2xlbmd0aCcgaW4gc2xpZGVzKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVzW2ldKSBzd2lwZXIudmlydHVhbC5zbGlkZXMucHVzaChzbGlkZXNbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMucHVzaChzbGlkZXMpO1xuICAgIH1cbiAgICBzd2lwZXIudmlydHVhbC51cGRhdGUodHJ1ZSk7XG4gIH0sXG4gIHByZXBlbmRTbGlkZShzbGlkZXMpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IGFjdGl2ZUluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgIGxldCBuZXdBY3RpdmVJbmRleCA9IGFjdGl2ZUluZGV4ICsgMTtcbiAgICBsZXQgbnVtYmVyT2ZOZXdTbGlkZXMgPSAxO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xpZGVzKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHNsaWRlc1tpXSkgc3dpcGVyLnZpcnR1YWwuc2xpZGVzLnVuc2hpZnQoc2xpZGVzW2ldKTtcbiAgICAgIH1cbiAgICAgIG5ld0FjdGl2ZUluZGV4ID0gYWN0aXZlSW5kZXggKyBzbGlkZXMubGVuZ3RoO1xuICAgICAgbnVtYmVyT2ZOZXdTbGlkZXMgPSBzbGlkZXMubGVuZ3RoO1xuICAgIH0gZWxzZSB7XG4gICAgICBzd2lwZXIudmlydHVhbC5zbGlkZXMudW5zaGlmdChzbGlkZXMpO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICBjb25zdCBjYWNoZSA9IHN3aXBlci52aXJ0dWFsLmNhY2hlO1xuICAgICAgY29uc3QgbmV3Q2FjaGUgPSB7fTtcbiAgICAgIE9iamVjdC5rZXlzKGNhY2hlKS5mb3JFYWNoKChjYWNoZWRJbmRleCkgPT4ge1xuICAgICAgICBuZXdDYWNoZVtwYXJzZUludChjYWNoZWRJbmRleCwgMTApICsgbnVtYmVyT2ZOZXdTbGlkZXNdID0gY2FjaGVbY2FjaGVkSW5kZXhdO1xuICAgICAgfSk7XG4gICAgICBzd2lwZXIudmlydHVhbC5jYWNoZSA9IG5ld0NhY2hlO1xuICAgIH1cbiAgICBzd2lwZXIudmlydHVhbC51cGRhdGUodHJ1ZSk7XG4gICAgc3dpcGVyLnNsaWRlVG8obmV3QWN0aXZlSW5kZXgsIDApO1xuICB9LFxuICByZW1vdmVTbGlkZShzbGlkZXNJbmRleGVzKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHNsaWRlc0luZGV4ZXMgPT09ICd1bmRlZmluZWQnIHx8IHNsaWRlc0luZGV4ZXMgPT09IG51bGwpIHJldHVybjtcbiAgICBsZXQgYWN0aXZlSW5kZXggPSBzd2lwZXIuYWN0aXZlSW5kZXg7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xpZGVzSW5kZXhlcykpIHtcbiAgICAgIGZvciAobGV0IGkgPSBzbGlkZXNJbmRleGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlc1tpXSwgMSk7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWwuY2FjaGUpIHtcbiAgICAgICAgICBkZWxldGUgc3dpcGVyLnZpcnR1YWwuY2FjaGVbc2xpZGVzSW5kZXhlc1tpXV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNsaWRlc0luZGV4ZXNbaV0gPCBhY3RpdmVJbmRleCkgYWN0aXZlSW5kZXggLT0gMTtcbiAgICAgICAgYWN0aXZlSW5kZXggPSBNYXRoLm1heChhY3RpdmVJbmRleCwgMCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnNsaWRlcy5zcGxpY2Uoc2xpZGVzSW5kZXhlcywgMSk7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmNhY2hlKSB7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIudmlydHVhbC5jYWNoZVtzbGlkZXNJbmRleGVzXTtcbiAgICAgIH1cbiAgICAgIGlmIChzbGlkZXNJbmRleGVzIDwgYWN0aXZlSW5kZXgpIGFjdGl2ZUluZGV4IC09IDE7XG4gICAgICBhY3RpdmVJbmRleCA9IE1hdGgubWF4KGFjdGl2ZUluZGV4LCAwKTtcbiAgICB9XG4gICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKGFjdGl2ZUluZGV4LCAwKTtcbiAgfSxcbiAgcmVtb3ZlQWxsU2xpZGVzKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgc3dpcGVyLnZpcnR1YWwuc2xpZGVzID0gW107XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudmlydHVhbC5jYWNoZSkge1xuICAgICAgc3dpcGVyLnZpcnR1YWwuY2FjaGUgPSB7fTtcbiAgICB9XG4gICAgc3dpcGVyLnZpcnR1YWwudXBkYXRlKHRydWUpO1xuICAgIHN3aXBlci5zbGlkZVRvKDAsIDApO1xuICB9LFxufTtcblxudmFyIHZpcnR1YWwgPSB7XG4gIG5hbWU6ICd2aXJ0dWFsJyxcbiAgcGFyYW1zOiB7XG4gICAgdmlydHVhbDoge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBzbGlkZXM6IFtdLFxuICAgICAgY2FjaGU6IHRydWUsXG4gICAgICByZW5kZXJTbGlkZTogbnVsbCxcbiAgICAgIHJlbmRlckV4dGVybmFsOiBudWxsLFxuICAgICAgYWRkU2xpZGVzQmVmb3JlOiAwLFxuICAgICAgYWRkU2xpZGVzQWZ0ZXI6IDAsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgdmlydHVhbDoge1xuICAgICAgICB1cGRhdGU6IFZpcnR1YWwudXBkYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgYXBwZW5kU2xpZGU6IFZpcnR1YWwuYXBwZW5kU2xpZGUuYmluZChzd2lwZXIpLFxuICAgICAgICBwcmVwZW5kU2xpZGU6IFZpcnR1YWwucHJlcGVuZFNsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgcmVtb3ZlU2xpZGU6IFZpcnR1YWwucmVtb3ZlU2xpZGUuYmluZChzd2lwZXIpLFxuICAgICAgICByZW1vdmVBbGxTbGlkZXM6IFZpcnR1YWwucmVtb3ZlQWxsU2xpZGVzLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgcmVuZGVyU2xpZGU6IFZpcnR1YWwucmVuZGVyU2xpZGUuYmluZChzd2lwZXIpLFxuICAgICAgICBzbGlkZXM6IHN3aXBlci5wYXJhbXMudmlydHVhbC5zbGlkZXMsXG4gICAgICAgIGNhY2hlOiB7fSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc312aXJ0dWFsYCk7XG4gICAgICBjb25zdCBvdmVyd3JpdGVQYXJhbXMgPSB7XG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICB9O1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5wYXJhbXMsIG92ZXJ3cml0ZVBhcmFtcyk7XG4gICAgICBVdGlscy5leHRlbmQoc3dpcGVyLm9yaWdpbmFsUGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuXG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuaW5pdGlhbFNsaWRlKSB7XG4gICAgICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0VHJhbnNsYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci52aXJ0dWFsLnVwZGF0ZSgpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBLZXlib2FyZCA9IHtcbiAgaGFuZGxlKGV2ZW50KSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHJ0bFRyYW5zbGF0ZTogcnRsIH0gPSBzd2lwZXI7XG4gICAgbGV0IGUgPSBldmVudDtcbiAgICBpZiAoZS5vcmlnaW5hbEV2ZW50KSBlID0gZS5vcmlnaW5hbEV2ZW50OyAvLyBqcXVlcnkgZml4XG4gICAgY29uc3Qga2MgPSBlLmtleUNvZGUgfHwgZS5jaGFyQ29kZTtcbiAgICAvLyBEaXJlY3Rpb25zIGxvY2tzXG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZU5leHQgJiYgKChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYga2MgPT09IDM5KSB8fCAoc3dpcGVyLmlzVmVydGljYWwoKSAmJiBrYyA9PT0gNDApIHx8IGtjID09PSAzNCkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFzd2lwZXIuYWxsb3dTbGlkZVByZXYgJiYgKChzd2lwZXIuaXNIb3Jpem9udGFsKCkgJiYga2MgPT09IDM3KSB8fCAoc3dpcGVyLmlzVmVydGljYWwoKSAmJiBrYyA9PT0gMzgpIHx8IGtjID09PSAzMykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGUuc2hpZnRLZXkgfHwgZS5hbHRLZXkgfHwgZS5jdHJsS2V5IHx8IGUubWV0YUtleSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZSAmJiAoZG9jdW1lbnQuYWN0aXZlRWxlbWVudC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaW5wdXQnIHx8IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFyYW1zLmtleWJvYXJkLm9ubHlJblZpZXdwb3J0ICYmIChrYyA9PT0gMzMgfHwga2MgPT09IDM0IHx8IGtjID09PSAzNyB8fCBrYyA9PT0gMzkgfHwga2MgPT09IDM4IHx8IGtjID09PSA0MCkpIHtcbiAgICAgIGxldCBpblZpZXcgPSBmYWxzZTtcbiAgICAgIC8vIENoZWNrIHRoYXQgc3dpcGVyIHNob3VsZCBiZSBpbnNpZGUgb2YgdmlzaWJsZSBhcmVhIG9mIHdpbmRvd1xuICAgICAgaWYgKHN3aXBlci4kZWwucGFyZW50cyhgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfWApLmxlbmd0aCA+IDAgJiYgc3dpcGVyLiRlbC5wYXJlbnRzKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQWN0aXZlQ2xhc3N9YCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBjb25zdCB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgY29uc3Qgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgY29uc3Qgc3dpcGVyT2Zmc2V0ID0gc3dpcGVyLiRlbC5vZmZzZXQoKTtcbiAgICAgIGlmIChydGwpIHN3aXBlck9mZnNldC5sZWZ0IC09IHN3aXBlci4kZWxbMF0uc2Nyb2xsTGVmdDtcbiAgICAgIGNvbnN0IHN3aXBlckNvb3JkID0gW1xuICAgICAgICBbc3dpcGVyT2Zmc2V0LmxlZnQsIHN3aXBlck9mZnNldC50b3BdLFxuICAgICAgICBbc3dpcGVyT2Zmc2V0LmxlZnQgKyBzd2lwZXIud2lkdGgsIHN3aXBlck9mZnNldC50b3BdLFxuICAgICAgICBbc3dpcGVyT2Zmc2V0LmxlZnQsIHN3aXBlck9mZnNldC50b3AgKyBzd2lwZXIuaGVpZ2h0XSxcbiAgICAgICAgW3N3aXBlck9mZnNldC5sZWZ0ICsgc3dpcGVyLndpZHRoLCBzd2lwZXJPZmZzZXQudG9wICsgc3dpcGVyLmhlaWdodF0sXG4gICAgICBdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzd2lwZXJDb29yZC5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICBjb25zdCBwb2ludCA9IHN3aXBlckNvb3JkW2ldO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgcG9pbnRbMF0gPj0gMCAmJiBwb2ludFswXSA8PSB3aW5kb3dXaWR0aFxuICAgICAgICAgICYmIHBvaW50WzFdID49IDAgJiYgcG9pbnRbMV0gPD0gd2luZG93SGVpZ2h0XG4gICAgICAgICkge1xuICAgICAgICAgIGluVmlldyA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghaW5WaWV3KSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICBpZiAoa2MgPT09IDMzIHx8IGtjID09PSAzNCB8fCBrYyA9PT0gMzcgfHwga2MgPT09IDM5KSB7XG4gICAgICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGVsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKCgoa2MgPT09IDM0IHx8IGtjID09PSAzOSkgJiYgIXJ0bCkgfHwgKChrYyA9PT0gMzMgfHwga2MgPT09IDM3KSAmJiBydGwpKSBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICBpZiAoKChrYyA9PT0gMzMgfHwga2MgPT09IDM3KSAmJiAhcnRsKSB8fCAoKGtjID09PSAzNCB8fCBrYyA9PT0gMzkpICYmIHJ0bCkpIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGtjID09PSAzMyB8fCBrYyA9PT0gMzQgfHwga2MgPT09IDM4IHx8IGtjID09PSA0MCkge1xuICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBlbHNlIGUucmV0dXJuVmFsdWUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChrYyA9PT0gMzQgfHwga2MgPT09IDQwKSBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICBpZiAoa2MgPT09IDMzIHx8IGtjID09PSAzOCkgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgIH1cbiAgICBzd2lwZXIuZW1pdCgna2V5UHJlc3MnLCBrYyk7XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfSxcbiAgZW5hYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKHN3aXBlci5rZXlib2FyZC5lbmFibGVkKSByZXR1cm47XG4gICAgJChkb2N1bWVudCkub24oJ2tleWRvd24nLCBzd2lwZXIua2V5Ym9hcmQuaGFuZGxlKTtcbiAgICBzd2lwZXIua2V5Ym9hcmQuZW5hYmxlZCA9IHRydWU7XG4gIH0sXG4gIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5rZXlib2FyZC5lbmFibGVkKSByZXR1cm47XG4gICAgJChkb2N1bWVudCkub2ZmKCdrZXlkb3duJywgc3dpcGVyLmtleWJvYXJkLmhhbmRsZSk7XG4gICAgc3dpcGVyLmtleWJvYXJkLmVuYWJsZWQgPSBmYWxzZTtcbiAgfSxcbn07XG5cbnZhciBrZXlib2FyZCA9IHtcbiAgbmFtZTogJ2tleWJvYXJkJyxcbiAgcGFyYW1zOiB7XG4gICAga2V5Ym9hcmQ6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgb25seUluVmlld3BvcnQ6IHRydWUsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAga2V5Ym9hcmQ6IHtcbiAgICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICAgIGVuYWJsZTogS2V5Ym9hcmQuZW5hYmxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZGlzYWJsZTogS2V5Ym9hcmQuZGlzYWJsZS5iaW5kKHN3aXBlciksXG4gICAgICAgIGhhbmRsZTogS2V5Ym9hcmQuaGFuZGxlLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5rZXlib2FyZC5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5rZXlib2FyZC5lbmFibGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3koKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5rZXlib2FyZC5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci5rZXlib2FyZC5kaXNhYmxlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG5cbmZ1bmN0aW9uIGlzRXZlbnRTdXBwb3J0ZWQoKSB7XG4gIGNvbnN0IGV2ZW50TmFtZSA9ICdvbndoZWVsJztcbiAgbGV0IGlzU3VwcG9ydGVkID0gZXZlbnROYW1lIGluIGRvY3VtZW50O1xuXG4gIGlmICghaXNTdXBwb3J0ZWQpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoZXZlbnROYW1lLCAncmV0dXJuOycpO1xuICAgIGlzU3VwcG9ydGVkID0gdHlwZW9mIGVsZW1lbnRbZXZlbnROYW1lXSA9PT0gJ2Z1bmN0aW9uJztcbiAgfVxuXG4gIGlmICghaXNTdXBwb3J0ZWRcbiAgICAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvblxuICAgICYmIGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmhhc0ZlYXR1cmVcbiAgICAvLyBhbHdheXMgcmV0dXJucyB0cnVlIGluIG5ld2VyIGJyb3dzZXJzIGFzIHBlciB0aGUgc3RhbmRhcmQuXG4gICAgLy8gQHNlZSBodHRwOi8vZG9tLnNwZWMud2hhdHdnLm9yZy8jZG9tLWRvbWltcGxlbWVudGF0aW9uLWhhc2ZlYXR1cmVcbiAgICAmJiBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKCcnLCAnJykgIT09IHRydWVcbiAgKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgb25seSB3YXkgdG8gdGVzdCBzdXBwb3J0IGZvciB0aGUgYHdoZWVsYCBldmVudCBpbiBJRTkrLlxuICAgIGlzU3VwcG9ydGVkID0gZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZSgnRXZlbnRzLndoZWVsJywgJzMuMCcpO1xuICB9XG5cbiAgcmV0dXJuIGlzU3VwcG9ydGVkO1xufVxuY29uc3QgTW91c2V3aGVlbCA9IHtcbiAgbGFzdFNjcm9sbFRpbWU6IFV0aWxzLm5vdygpLFxuICBldmVudDogKGZ1bmN0aW9uIGdldEV2ZW50KCkge1xuICAgIGlmICh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdmaXJlZm94JykgPiAtMSkgcmV0dXJuICdET01Nb3VzZVNjcm9sbCc7XG4gICAgcmV0dXJuIGlzRXZlbnRTdXBwb3J0ZWQoKSA/ICd3aGVlbCcgOiAnbW91c2V3aGVlbCc7XG4gIH0oKSksXG4gIG5vcm1hbGl6ZShlKSB7XG4gICAgLy8gUmVhc29uYWJsZSBkZWZhdWx0c1xuICAgIGNvbnN0IFBJWEVMX1NURVAgPSAxMDtcbiAgICBjb25zdCBMSU5FX0hFSUdIVCA9IDQwO1xuICAgIGNvbnN0IFBBR0VfSEVJR0hUID0gODAwO1xuXG4gICAgbGV0IHNYID0gMDtcbiAgICBsZXQgc1kgPSAwOyAvLyBzcGluWCwgc3BpbllcbiAgICBsZXQgcFggPSAwO1xuICAgIGxldCBwWSA9IDA7IC8vIHBpeGVsWCwgcGl4ZWxZXG5cbiAgICAvLyBMZWdhY3lcbiAgICBpZiAoJ2RldGFpbCcgaW4gZSkge1xuICAgICAgc1kgPSBlLmRldGFpbDtcbiAgICB9XG4gICAgaWYgKCd3aGVlbERlbHRhJyBpbiBlKSB7XG4gICAgICBzWSA9IC1lLndoZWVsRGVsdGEgLyAxMjA7XG4gICAgfVxuICAgIGlmICgnd2hlZWxEZWx0YVknIGluIGUpIHtcbiAgICAgIHNZID0gLWUud2hlZWxEZWx0YVkgLyAxMjA7XG4gICAgfVxuICAgIGlmICgnd2hlZWxEZWx0YVgnIGluIGUpIHtcbiAgICAgIHNYID0gLWUud2hlZWxEZWx0YVggLyAxMjA7XG4gICAgfVxuXG4gICAgLy8gc2lkZSBzY3JvbGxpbmcgb24gRkYgd2l0aCBET01Nb3VzZVNjcm9sbFxuICAgIGlmICgnYXhpcycgaW4gZSAmJiBlLmF4aXMgPT09IGUuSE9SSVpPTlRBTF9BWElTKSB7XG4gICAgICBzWCA9IHNZO1xuICAgICAgc1kgPSAwO1xuICAgIH1cblxuICAgIHBYID0gc1ggKiBQSVhFTF9TVEVQO1xuICAgIHBZID0gc1kgKiBQSVhFTF9TVEVQO1xuXG4gICAgaWYgKCdkZWx0YVknIGluIGUpIHtcbiAgICAgIHBZID0gZS5kZWx0YVk7XG4gICAgfVxuICAgIGlmICgnZGVsdGFYJyBpbiBlKSB7XG4gICAgICBwWCA9IGUuZGVsdGFYO1xuICAgIH1cblxuICAgIGlmICgocFggfHwgcFkpICYmIGUuZGVsdGFNb2RlKSB7XG4gICAgICBpZiAoZS5kZWx0YU1vZGUgPT09IDEpIHsgLy8gZGVsdGEgaW4gTElORSB1bml0c1xuICAgICAgICBwWCAqPSBMSU5FX0hFSUdIVDtcbiAgICAgICAgcFkgKj0gTElORV9IRUlHSFQ7XG4gICAgICB9IGVsc2UgeyAvLyBkZWx0YSBpbiBQQUdFIHVuaXRzXG4gICAgICAgIHBYICo9IFBBR0VfSEVJR0hUO1xuICAgICAgICBwWSAqPSBQQUdFX0hFSUdIVDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGYWxsLWJhY2sgaWYgc3BpbiBjYW5ub3QgYmUgZGV0ZXJtaW5lZFxuICAgIGlmIChwWCAmJiAhc1gpIHtcbiAgICAgIHNYID0gKHBYIDwgMSkgPyAtMSA6IDE7XG4gICAgfVxuICAgIGlmIChwWSAmJiAhc1kpIHtcbiAgICAgIHNZID0gKHBZIDwgMSkgPyAtMSA6IDE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNwaW5YOiBzWCxcbiAgICAgIHNwaW5ZOiBzWSxcbiAgICAgIHBpeGVsWDogcFgsXG4gICAgICBwaXhlbFk6IHBZLFxuICAgIH07XG4gIH0sXG4gIGhhbmRsZU1vdXNlRW50ZXIoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIubW91c2VFbnRlcmVkID0gdHJ1ZTtcbiAgfSxcbiAgaGFuZGxlTW91c2VMZWF2ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5tb3VzZUVudGVyZWQgPSBmYWxzZTtcbiAgfSxcbiAgaGFuZGxlKGV2ZW50KSB7XG4gICAgbGV0IGUgPSBldmVudDtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubW91c2V3aGVlbDtcblxuICAgIGlmICghc3dpcGVyLm1vdXNlRW50ZXJlZCAmJiAhcGFyYW1zLnJlbGVhc2VPbkVkZ2VzKSByZXR1cm4gdHJ1ZTtcblxuICAgIGlmIChlLm9yaWdpbmFsRXZlbnQpIGUgPSBlLm9yaWdpbmFsRXZlbnQ7IC8vIGpxdWVyeSBmaXhcbiAgICBsZXQgZGVsdGEgPSAwO1xuICAgIGNvbnN0IHJ0bEZhY3RvciA9IHN3aXBlci5ydGxUcmFuc2xhdGUgPyAtMSA6IDE7XG5cbiAgICBjb25zdCBkYXRhID0gTW91c2V3aGVlbC5ub3JtYWxpemUoZSk7XG5cbiAgICBpZiAocGFyYW1zLmZvcmNlVG9BeGlzKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhkYXRhLnBpeGVsWCkgPiBNYXRoLmFicyhkYXRhLnBpeGVsWSkpIGRlbHRhID0gZGF0YS5waXhlbFggKiBydGxGYWN0b3I7XG4gICAgICAgIGVsc2UgcmV0dXJuIHRydWU7XG4gICAgICB9IGVsc2UgaWYgKE1hdGguYWJzKGRhdGEucGl4ZWxZKSA+IE1hdGguYWJzKGRhdGEucGl4ZWxYKSkgZGVsdGEgPSBkYXRhLnBpeGVsWTtcbiAgICAgIGVsc2UgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbHRhID0gTWF0aC5hYnMoZGF0YS5waXhlbFgpID4gTWF0aC5hYnMoZGF0YS5waXhlbFkpID8gLWRhdGEucGl4ZWxYICogcnRsRmFjdG9yIDogLWRhdGEucGl4ZWxZO1xuICAgIH1cblxuICAgIGlmIChkZWx0YSA9PT0gMCkgcmV0dXJuIHRydWU7XG5cbiAgICBpZiAocGFyYW1zLmludmVydCkgZGVsdGEgPSAtZGVsdGE7XG5cbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuZnJlZU1vZGUpIHtcbiAgICAgIGlmIChVdGlscy5ub3coKSAtIHN3aXBlci5tb3VzZXdoZWVsLmxhc3RTY3JvbGxUaW1lID4gNjApIHtcbiAgICAgICAgaWYgKGRlbHRhIDwgMCkge1xuICAgICAgICAgIGlmICgoIXN3aXBlci5pc0VuZCB8fCBzd2lwZXIucGFyYW1zLmxvb3ApICYmICFzd2lwZXIuYW5pbWF0aW5nKSB7XG4gICAgICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KCk7XG4gICAgICAgICAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsJywgZSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChwYXJhbXMucmVsZWFzZU9uRWRnZXMpIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKCghc3dpcGVyLmlzQmVnaW5uaW5nIHx8IHN3aXBlci5wYXJhbXMubG9vcCkgJiYgIXN3aXBlci5hbmltYXRpbmcpIHtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVQcmV2KCk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbCcsIGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHBhcmFtcy5yZWxlYXNlT25FZGdlcykgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBzd2lwZXIubW91c2V3aGVlbC5sYXN0U2Nyb2xsVGltZSA9IChuZXcgd2luZG93LkRhdGUoKSkuZ2V0VGltZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBGcmVlbW9kZSBvciBzY3JvbGxDb250YWluZXI6XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5sb29wRml4KCk7XG4gICAgICB9XG4gICAgICBsZXQgcG9zaXRpb24gPSBzd2lwZXIuZ2V0VHJhbnNsYXRlKCkgKyAoZGVsdGEgKiBwYXJhbXMuc2Vuc2l0aXZpdHkpO1xuICAgICAgY29uc3Qgd2FzQmVnaW5uaW5nID0gc3dpcGVyLmlzQmVnaW5uaW5nO1xuICAgICAgY29uc3Qgd2FzRW5kID0gc3dpcGVyLmlzRW5kO1xuXG4gICAgICBpZiAocG9zaXRpb24gPj0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKTtcbiAgICAgIGlmIChwb3NpdGlvbiA8PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHBvc2l0aW9uID0gc3dpcGVyLm1heFRyYW5zbGF0ZSgpO1xuXG4gICAgICBzd2lwZXIuc2V0VHJhbnNpdGlvbigwKTtcbiAgICAgIHN3aXBlci5zZXRUcmFuc2xhdGUocG9zaXRpb24pO1xuICAgICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKCk7XG4gICAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIHN3aXBlci51cGRhdGVTbGlkZXNDbGFzc2VzKCk7XG5cbiAgICAgIGlmICgoIXdhc0JlZ2lubmluZyAmJiBzd2lwZXIuaXNCZWdpbm5pbmcpIHx8ICghd2FzRW5kICYmIHN3aXBlci5pc0VuZCkpIHtcbiAgICAgICAgc3dpcGVyLnVwZGF0ZVNsaWRlc0NsYXNzZXMoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHN3aXBlci5tb3VzZXdoZWVsLnRpbWVvdXQpO1xuICAgICAgICBzd2lwZXIubW91c2V3aGVlbC50aW1lb3V0ID0gVXRpbHMubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgICAgICB9LCAzMDApO1xuICAgICAgfVxuICAgICAgLy8gRW1pdCBldmVudFxuICAgICAgc3dpcGVyLmVtaXQoJ3Njcm9sbCcsIGUpO1xuXG4gICAgICAvLyBTdG9wIGF1dG9wbGF5XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheSAmJiBzd2lwZXIucGFyYW1zLmF1dG9wbGF5RGlzYWJsZU9uSW50ZXJhY3Rpb24pIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAvLyBSZXR1cm4gcGFnZSBzY3JvbGwgb24gZWRnZSBwb3NpdGlvbnNcbiAgICAgIGlmIChwb3NpdGlvbiA9PT0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpIHx8IHBvc2l0aW9uID09PSBzd2lwZXIubWF4VHJhbnNsYXRlKCkpIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChlLnByZXZlbnREZWZhdWx0KSBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZWxzZSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9LFxuICBlbmFibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIU1vdXNld2hlZWwuZXZlbnQpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCkgcmV0dXJuIGZhbHNlO1xuICAgIGxldCB0YXJnZXQgPSBzd2lwZXIuJGVsO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2VkICE9PSAnY29udGFpbmVyJykge1xuICAgICAgdGFyZ2V0ID0gJChzd2lwZXIucGFyYW1zLm1vdXNld2hlZWwuZXZlbnRzVGFyZ2VkKTtcbiAgICB9XG4gICAgdGFyZ2V0Lm9uKCdtb3VzZWVudGVyJywgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlTW91c2VFbnRlcik7XG4gICAgdGFyZ2V0Lm9uKCdtb3VzZWxlYXZlJywgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlTW91c2VMZWF2ZSk7XG4gICAgdGFyZ2V0Lm9uKE1vdXNld2hlZWwuZXZlbnQsIHN3aXBlci5tb3VzZXdoZWVsLmhhbmRsZSk7XG4gICAgc3dpcGVyLm1vdXNld2hlZWwuZW5hYmxlZCA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIU1vdXNld2hlZWwuZXZlbnQpIHJldHVybiBmYWxzZTtcbiAgICBpZiAoIXN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHJldHVybiBmYWxzZTtcbiAgICBsZXQgdGFyZ2V0ID0gc3dpcGVyLiRlbDtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdlZCAhPT0gJ2NvbnRhaW5lcicpIHtcbiAgICAgIHRhcmdldCA9ICQoc3dpcGVyLnBhcmFtcy5tb3VzZXdoZWVsLmV2ZW50c1RhcmdlZCk7XG4gICAgfVxuICAgIHRhcmdldC5vZmYoTW91c2V3aGVlbC5ldmVudCwgc3dpcGVyLm1vdXNld2hlZWwuaGFuZGxlKTtcbiAgICBzd2lwZXIubW91c2V3aGVlbC5lbmFibGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG59O1xuXG52YXIgbW91c2V3aGVlbCA9IHtcbiAgbmFtZTogJ21vdXNld2hlZWwnLFxuICBwYXJhbXM6IHtcbiAgICBtb3VzZXdoZWVsOiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHJlbGVhc2VPbkVkZ2VzOiBmYWxzZSxcbiAgICAgIGludmVydDogZmFsc2UsXG4gICAgICBmb3JjZVRvQXhpczogZmFsc2UsXG4gICAgICBzZW5zaXRpdml0eTogMSxcbiAgICAgIGV2ZW50c1RhcmdlZDogJ2NvbnRhaW5lcicsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgbW91c2V3aGVlbDoge1xuICAgICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgICAgZW5hYmxlOiBNb3VzZXdoZWVsLmVuYWJsZS5iaW5kKHN3aXBlciksXG4gICAgICAgIGRpc2FibGU6IE1vdXNld2hlZWwuZGlzYWJsZS5iaW5kKHN3aXBlciksXG4gICAgICAgIGhhbmRsZTogTW91c2V3aGVlbC5oYW5kbGUuYmluZChzd2lwZXIpLFxuICAgICAgICBoYW5kbGVNb3VzZUVudGVyOiBNb3VzZXdoZWVsLmhhbmRsZU1vdXNlRW50ZXIuYmluZChzd2lwZXIpLFxuICAgICAgICBoYW5kbGVNb3VzZUxlYXZlOiBNb3VzZXdoZWVsLmhhbmRsZU1vdXNlTGVhdmUuYmluZChzd2lwZXIpLFxuICAgICAgICBsYXN0U2Nyb2xsVGltZTogVXRpbHMubm93KCksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubW91c2V3aGVlbC5lbmFibGVkKSBzd2lwZXIubW91c2V3aGVlbC5lbmFibGUoKTtcbiAgICB9LFxuICAgIGRlc3Ryb3koKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5tb3VzZXdoZWVsLmVuYWJsZWQpIHN3aXBlci5tb3VzZXdoZWVsLmRpc2FibGUoKTtcbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgTmF2aWdhdGlvbiA9IHtcbiAgdXBkYXRlKCkge1xuICAgIC8vIFVwZGF0ZSBOYXZpZ2F0aW9uIEJ1dHRvbnNcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcblxuICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHJldHVybjtcbiAgICBjb25zdCB7ICRuZXh0RWwsICRwcmV2RWwgfSA9IHN3aXBlci5uYXZpZ2F0aW9uO1xuXG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGggPiAwKSB7XG4gICAgICBpZiAoc3dpcGVyLmlzQmVnaW5uaW5nKSB7XG4gICAgICAgICRwcmV2RWwuYWRkQ2xhc3MocGFyYW1zLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJHByZXZFbC5yZW1vdmVDbGFzcyhwYXJhbXMuZGlzYWJsZWRDbGFzcyk7XG4gICAgICB9XG4gICAgICAkcHJldkVsW3N3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10ocGFyYW1zLmxvY2tDbGFzcyk7XG4gICAgfVxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICAkbmV4dEVsLmFkZENsYXNzKHBhcmFtcy5kaXNhYmxlZENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRuZXh0RWwucmVtb3ZlQ2xhc3MocGFyYW1zLmRpc2FibGVkQ2xhc3MpO1xuICAgICAgfVxuICAgICAgJG5leHRFbFtzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICAgIH1cbiAgfSxcbiAgb25QcmV2Q2xpY2soZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIHN3aXBlci5zbGlkZVByZXYoKTtcbiAgfSxcbiAgb25OZXh0Q2xpY2soZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGlmIChzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIHN3aXBlci5zbGlkZU5leHQoKTtcbiAgfSxcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbjtcbiAgICBpZiAoIShwYXJhbXMubmV4dEVsIHx8IHBhcmFtcy5wcmV2RWwpKSByZXR1cm47XG5cbiAgICBsZXQgJG5leHRFbDtcbiAgICBsZXQgJHByZXZFbDtcbiAgICBpZiAocGFyYW1zLm5leHRFbCkge1xuICAgICAgJG5leHRFbCA9ICQocGFyYW1zLm5leHRFbCk7XG4gICAgICBpZiAoXG4gICAgICAgIHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHNcbiAgICAgICAgJiYgdHlwZW9mIHBhcmFtcy5uZXh0RWwgPT09ICdzdHJpbmcnXG4gICAgICAgICYmICRuZXh0RWwubGVuZ3RoID4gMVxuICAgICAgICAmJiBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLm5leHRFbCkubGVuZ3RoID09PSAxXG4gICAgICApIHtcbiAgICAgICAgJG5leHRFbCA9IHN3aXBlci4kZWwuZmluZChwYXJhbXMubmV4dEVsKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcy5wcmV2RWwpIHtcbiAgICAgICRwcmV2RWwgPSAkKHBhcmFtcy5wcmV2RWwpO1xuICAgICAgaWYgKFxuICAgICAgICBzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzXG4gICAgICAgICYmIHR5cGVvZiBwYXJhbXMucHJldkVsID09PSAnc3RyaW5nJ1xuICAgICAgICAmJiAkcHJldkVsLmxlbmd0aCA+IDFcbiAgICAgICAgJiYgc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5wcmV2RWwpLmxlbmd0aCA9PT0gMVxuICAgICAgKSB7XG4gICAgICAgICRwcmV2RWwgPSBzd2lwZXIuJGVsLmZpbmQocGFyYW1zLnByZXZFbCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGggPiAwKSB7XG4gICAgICAkbmV4dEVsLm9uKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uTmV4dENsaWNrKTtcbiAgICB9XG4gICAgaWYgKCRwcmV2RWwgJiYgJHByZXZFbC5sZW5ndGggPiAwKSB7XG4gICAgICAkcHJldkVsLm9uKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uUHJldkNsaWNrKTtcbiAgICB9XG5cbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLm5hdmlnYXRpb24sIHtcbiAgICAgICRuZXh0RWwsXG4gICAgICBuZXh0RWw6ICRuZXh0RWwgJiYgJG5leHRFbFswXSxcbiAgICAgICRwcmV2RWwsXG4gICAgICBwcmV2RWw6ICRwcmV2RWwgJiYgJHByZXZFbFswXSxcbiAgICB9KTtcbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgJG5leHRFbCwgJHByZXZFbCB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgaWYgKCRuZXh0RWwgJiYgJG5leHRFbC5sZW5ndGgpIHtcbiAgICAgICRuZXh0RWwub2ZmKCdjbGljaycsIHN3aXBlci5uYXZpZ2F0aW9uLm9uTmV4dENsaWNrKTtcbiAgICAgICRuZXh0RWwucmVtb3ZlQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmRpc2FibGVkQ2xhc3MpO1xuICAgIH1cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCkge1xuICAgICAgJHByZXZFbC5vZmYoJ2NsaWNrJywgc3dpcGVyLm5hdmlnYXRpb24ub25QcmV2Q2xpY2spO1xuICAgICAgJHByZXZFbC5yZW1vdmVDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uZGlzYWJsZWRDbGFzcyk7XG4gICAgfVxuICB9LFxufTtcblxudmFyIG5hdmlnYXRpb24gPSB7XG4gIG5hbWU6ICduYXZpZ2F0aW9uJyxcbiAgcGFyYW1zOiB7XG4gICAgbmF2aWdhdGlvbjoge1xuICAgICAgbmV4dEVsOiBudWxsLFxuICAgICAgcHJldkVsOiBudWxsLFxuXG4gICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICBkaXNhYmxlZENsYXNzOiAnc3dpcGVyLWJ1dHRvbi1kaXNhYmxlZCcsXG4gICAgICBoaWRkZW5DbGFzczogJ3N3aXBlci1idXR0b24taGlkZGVuJyxcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1idXR0b24tbG9jaycsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgbmF2aWdhdGlvbjoge1xuICAgICAgICBpbml0OiBOYXZpZ2F0aW9uLmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICB1cGRhdGU6IE5hdmlnYXRpb24udXBkYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZGVzdHJveTogTmF2aWdhdGlvbi5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb25OZXh0Q2xpY2s6IE5hdmlnYXRpb24ub25OZXh0Q2xpY2suYmluZChzd2lwZXIpLFxuICAgICAgICBvblByZXZDbGljazogTmF2aWdhdGlvbi5vblByZXZDbGljay5iaW5kKHN3aXBlciksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24uaW5pdCgpO1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gICAgfSxcbiAgICB0b0VkZ2UoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24udXBkYXRlKCk7XG4gICAgfSxcbiAgICBmcm9tRWRnZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIubmF2aWdhdGlvbi51cGRhdGUoKTtcbiAgICB9LFxuICAgIGRlc3Ryb3koKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLm5hdmlnYXRpb24uZGVzdHJveSgpO1xuICAgIH0sXG4gICAgY2xpY2soZSkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGNvbnN0IHsgJG5leHRFbCwgJHByZXZFbCB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG4gICAgICBpZiAoXG4gICAgICAgIHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRlT25DbGlja1xuICAgICAgICAmJiAhJChlLnRhcmdldCkuaXMoJHByZXZFbClcbiAgICAgICAgJiYgISQoZS50YXJnZXQpLmlzKCRuZXh0RWwpXG4gICAgICApIHtcbiAgICAgICAgbGV0IGlzSGlkZGVuO1xuICAgICAgICBpZiAoJG5leHRFbCkge1xuICAgICAgICAgIGlzSGlkZGVuID0gJG5leHRFbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLm5hdmlnYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgICB9IGVsc2UgaWYgKCRwcmV2RWwpIHtcbiAgICAgICAgICBpc0hpZGRlbiA9ICRwcmV2RWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5uYXZpZ2F0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNIaWRkZW4gPT09IHRydWUpIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnbmF2aWdhdGlvblNob3cnLCBzd2lwZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN3aXBlci5lbWl0KCduYXZpZ2F0aW9uSGlkZScsIHN3aXBlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICAgICAkbmV4dEVsLnRvZ2dsZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCRwcmV2RWwpIHtcbiAgICAgICAgICAkcHJldkVsLnRvZ2dsZUNsYXNzKHN3aXBlci5wYXJhbXMubmF2aWdhdGlvbi5oaWRkZW5DbGFzcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgUGFnaW5hdGlvbiA9IHtcbiAgdXBkYXRlKCkge1xuICAgIC8vIFJlbmRlciB8fCBVcGRhdGUgUGFnaW5hdGlvbiBidWxsZXRzL2l0ZW1zXG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBydGwgPSBzd2lwZXIucnRsO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgY29uc3Qgc2xpZGVzTGVuZ3RoID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQgPyBzd2lwZXIudmlydHVhbC5zbGlkZXMubGVuZ3RoIDogc3dpcGVyLnNsaWRlcy5sZW5ndGg7XG4gICAgY29uc3QgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsO1xuICAgIC8vIEN1cnJlbnQvVG90YWxcbiAgICBsZXQgY3VycmVudDtcbiAgICBjb25zdCB0b3RhbCA9IHN3aXBlci5wYXJhbXMubG9vcCA/IE1hdGguY2VpbCgoc2xpZGVzTGVuZ3RoIC0gKHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSkgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKSA6IHN3aXBlci5zbmFwR3JpZC5sZW5ndGg7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgY3VycmVudCA9IE1hdGguY2VpbCgoc3dpcGVyLmFjdGl2ZUluZGV4IC0gc3dpcGVyLmxvb3BlZFNsaWRlcykgLyBzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwKTtcbiAgICAgIGlmIChjdXJyZW50ID4gc2xpZGVzTGVuZ3RoIC0gMSAtIChzd2lwZXIubG9vcGVkU2xpZGVzICogMikpIHtcbiAgICAgICAgY3VycmVudCAtPSAoc2xpZGVzTGVuZ3RoIC0gKHN3aXBlci5sb29wZWRTbGlkZXMgKiAyKSk7XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudCA+IHRvdGFsIC0gMSkgY3VycmVudCAtPSB0b3RhbDtcbiAgICAgIGlmIChjdXJyZW50IDwgMCAmJiBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb25UeXBlICE9PSAnYnVsbGV0cycpIGN1cnJlbnQgPSB0b3RhbCArIGN1cnJlbnQ7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc3dpcGVyLnNuYXBJbmRleCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGN1cnJlbnQgPSBzd2lwZXIuc25hcEluZGV4O1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50ID0gc3dpcGVyLmFjdGl2ZUluZGV4IHx8IDA7XG4gICAgfVxuICAgIC8vIFR5cGVzXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGJ1bGxldHMgPSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzO1xuICAgICAgbGV0IGZpcnN0SW5kZXg7XG4gICAgICBsZXQgbGFzdEluZGV4O1xuICAgICAgbGV0IG1pZEluZGV4O1xuICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplID0gYnVsbGV0cy5lcSgwKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnb3V0ZXJXaWR0aCcgOiAnb3V0ZXJIZWlnaHQnXSh0cnVlKTtcbiAgICAgICAgJGVsLmNzcyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnd2lkdGgnIDogJ2hlaWdodCcsIGAke3N3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUgKiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyArIDQpfXB4YCk7XG4gICAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID4gMSAmJiBzd2lwZXIucHJldmlvdXNJbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ICs9IChjdXJyZW50IC0gc3dpcGVyLnByZXZpb3VzSW5kZXgpO1xuICAgICAgICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPiAocGFyYW1zLmR5bmFtaWNNYWluQnVsbGV0cyAtIDEpKSB7XG4gICAgICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi5keW5hbWljQnVsbGV0SW5kZXggPSBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIC0gMTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA8IDApIHtcbiAgICAgICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmR5bmFtaWNCdWxsZXRJbmRleCA9IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZpcnN0SW5kZXggPSBjdXJyZW50IC0gc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4O1xuICAgICAgICBsYXN0SW5kZXggPSBmaXJzdEluZGV4ICsgKE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzKSAtIDEpO1xuICAgICAgICBtaWRJbmRleCA9IChsYXN0SW5kZXggKyBmaXJzdEluZGV4KSAvIDI7XG4gICAgICB9XG4gICAgICBidWxsZXRzLnJlbW92ZUNsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30gJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW5leHQgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW5leHQtbmV4dCAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tcHJldiAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tcHJldi1wcmV2ICR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYCk7XG4gICAgICBpZiAoJGVsLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgYnVsbGV0cy5lYWNoKChpbmRleCwgYnVsbGV0KSA9PiB7XG4gICAgICAgICAgY29uc3QgJGJ1bGxldCA9ICQoYnVsbGV0KTtcbiAgICAgICAgICBjb25zdCBidWxsZXRJbmRleCA9ICRidWxsZXQuaW5kZXgoKTtcbiAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGN1cnJlbnQpIHtcbiAgICAgICAgICAgICRidWxsZXQuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgICAgaWYgKGJ1bGxldEluZGV4ID49IGZpcnN0SW5kZXggJiYgYnVsbGV0SW5kZXggPD0gbGFzdEluZGV4KSB7XG4gICAgICAgICAgICAgICRidWxsZXQuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGZpcnN0SW5kZXgpIHtcbiAgICAgICAgICAgICAgJGJ1bGxldFxuICAgICAgICAgICAgICAgIC5wcmV2KClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2YClcbiAgICAgICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tcHJldi1wcmV2YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoYnVsbGV0SW5kZXggPT09IGxhc3RJbmRleCkge1xuICAgICAgICAgICAgICAkYnVsbGV0XG4gICAgICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgICAgIC5hZGRDbGFzcyhgJHtwYXJhbXMuYnVsbGV0QWN0aXZlQ2xhc3N9LW5leHRgKVxuICAgICAgICAgICAgICAgIC5uZXh0KClcbiAgICAgICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1uZXh0LW5leHRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgJGJ1bGxldCA9IGJ1bGxldHMuZXEoY3VycmVudCk7XG4gICAgICAgICRidWxsZXQuYWRkQ2xhc3MocGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzKTtcbiAgICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICAgIGNvbnN0ICRmaXJzdERpc3BsYXllZEJ1bGxldCA9IGJ1bGxldHMuZXEoZmlyc3RJbmRleCk7XG4gICAgICAgICAgY29uc3QgJGxhc3REaXNwbGF5ZWRCdWxsZXQgPSBidWxsZXRzLmVxKGxhc3RJbmRleCk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGZpcnN0SW5kZXg7IGkgPD0gbGFzdEluZGV4OyBpICs9IDEpIHtcbiAgICAgICAgICAgIGJ1bGxldHMuZXEoaSkuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1tYWluYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgICRmaXJzdERpc3BsYXllZEJ1bGxldFxuICAgICAgICAgICAgLnByZXYoKVxuICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tcHJldmApXG4gICAgICAgICAgICAucHJldigpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1wcmV2LXByZXZgKTtcbiAgICAgICAgICAkbGFzdERpc3BsYXllZEJ1bGxldFxuICAgICAgICAgICAgLm5leHQoKVxuICAgICAgICAgICAgLmFkZENsYXNzKGAke3BhcmFtcy5idWxsZXRBY3RpdmVDbGFzc30tbmV4dGApXG4gICAgICAgICAgICAubmV4dCgpXG4gICAgICAgICAgICAuYWRkQ2xhc3MoYCR7cGFyYW1zLmJ1bGxldEFjdGl2ZUNsYXNzfS1uZXh0LW5leHRgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHBhcmFtcy5keW5hbWljQnVsbGV0cykge1xuICAgICAgICBjb25zdCBkeW5hbWljQnVsbGV0c0xlbmd0aCA9IE1hdGgubWluKGJ1bGxldHMubGVuZ3RoLCBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzICsgNCk7XG4gICAgICAgIGNvbnN0IGJ1bGxldHNPZmZzZXQgPSAoKChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRTaXplICogZHluYW1pY0J1bGxldHNMZW5ndGgpIC0gKHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldFNpemUpKSAvIDIpIC0gKG1pZEluZGV4ICogc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0U2l6ZSk7XG4gICAgICAgIGNvbnN0IG9mZnNldFByb3AgPSBydGwgPyAncmlnaHQnIDogJ2xlZnQnO1xuICAgICAgICBidWxsZXRzLmNzcyhzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyBvZmZzZXRQcm9wIDogJ3RvcCcsIGAke2J1bGxldHNPZmZzZXR9cHhgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnZnJhY3Rpb24nKSB7XG4gICAgICAkZWwuZmluZChgLiR7cGFyYW1zLmN1cnJlbnRDbGFzc31gKS50ZXh0KHBhcmFtcy5mb3JtYXRGcmFjdGlvbkN1cnJlbnQoY3VycmVudCArIDEpKTtcbiAgICAgICRlbC5maW5kKGAuJHtwYXJhbXMudG90YWxDbGFzc31gKS50ZXh0KHBhcmFtcy5mb3JtYXRGcmFjdGlvblRvdGFsKHRvdGFsKSk7XG4gICAgfVxuICAgIGlmIChwYXJhbXMudHlwZSA9PT0gJ3Byb2dyZXNzYmFyJykge1xuICAgICAgbGV0IHByb2dyZXNzYmFyRGlyZWN0aW9uO1xuICAgICAgaWYgKHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7XG4gICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ3ZlcnRpY2FsJyA6ICdob3Jpem9udGFsJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2dyZXNzYmFyRGlyZWN0aW9uID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2hvcml6b250YWwnIDogJ3ZlcnRpY2FsJztcbiAgICAgIH1cbiAgICAgIGNvbnN0IHNjYWxlID0gKGN1cnJlbnQgKyAxKSAvIHRvdGFsO1xuICAgICAgbGV0IHNjYWxlWCA9IDE7XG4gICAgICBsZXQgc2NhbGVZID0gMTtcbiAgICAgIGlmIChwcm9ncmVzc2JhckRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnKSB7XG4gICAgICAgIHNjYWxlWCA9IHNjYWxlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2NhbGVZID0gc2NhbGU7XG4gICAgICB9XG4gICAgICAkZWwuZmluZChgLiR7cGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzfWApLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlWCgke3NjYWxlWH0pIHNjYWxlWSgke3NjYWxlWX0pYCkudHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnY3VzdG9tJyAmJiBwYXJhbXMucmVuZGVyQ3VzdG9tKSB7XG4gICAgICAkZWwuaHRtbChwYXJhbXMucmVuZGVyQ3VzdG9tKHN3aXBlciwgY3VycmVudCArIDEsIHRvdGFsKSk7XG4gICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIHN3aXBlciwgJGVsWzBdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25VcGRhdGUnLCBzd2lwZXIsICRlbFswXSk7XG4gICAgfVxuICAgICRlbFtzd2lwZXIucGFyYW1zLndhdGNoT3ZlcmZsb3cgJiYgc3dpcGVyLmlzTG9ja2VkID8gJ2FkZENsYXNzJyA6ICdyZW1vdmVDbGFzcyddKHBhcmFtcy5sb2NrQ2xhc3MpO1xuICB9LFxuICByZW5kZXIoKSB7XG4gICAgLy8gUmVuZGVyIENvbnRhaW5lclxuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsIHx8ICFzd2lwZXIucGFnaW5hdGlvbi5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uJGVsIHx8IHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBjb25zdCBzbGlkZXNMZW5ndGggPSBzd2lwZXIudmlydHVhbCAmJiBzd2lwZXIucGFyYW1zLnZpcnR1YWwuZW5hYmxlZCA/IHN3aXBlci52aXJ0dWFsLnNsaWRlcy5sZW5ndGggOiBzd2lwZXIuc2xpZGVzLmxlbmd0aDtcblxuICAgIGNvbnN0ICRlbCA9IHN3aXBlci5wYWdpbmF0aW9uLiRlbDtcbiAgICBsZXQgcGFnaW5hdGlvbkhUTUwgPSAnJztcbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdidWxsZXRzJykge1xuICAgICAgY29uc3QgbnVtYmVyT2ZCdWxsZXRzID0gc3dpcGVyLnBhcmFtcy5sb29wID8gTWF0aC5jZWlsKChzbGlkZXNMZW5ndGggLSAoc3dpcGVyLmxvb3BlZFNsaWRlcyAqIDIpKSAvIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXApIDogc3dpcGVyLnNuYXBHcmlkLmxlbmd0aDtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtYmVyT2ZCdWxsZXRzOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5yZW5kZXJCdWxsZXQpIHtcbiAgICAgICAgICBwYWdpbmF0aW9uSFRNTCArPSBwYXJhbXMucmVuZGVyQnVsbGV0LmNhbGwoc3dpcGVyLCBpLCBwYXJhbXMuYnVsbGV0Q2xhc3MpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBhZ2luYXRpb25IVE1MICs9IGA8JHtwYXJhbXMuYnVsbGV0RWxlbWVudH0gY2xhc3M9XCIke3BhcmFtcy5idWxsZXRDbGFzc31cIj48LyR7cGFyYW1zLmJ1bGxldEVsZW1lbnR9PmA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgICRlbC5odG1sKHBhZ2luYXRpb25IVE1MKTtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMgPSAkZWwuZmluZChgLiR7cGFyYW1zLmJ1bGxldENsYXNzfWApO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdmcmFjdGlvbicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyRnJhY3Rpb24pIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyRnJhY3Rpb24uY2FsbChzd2lwZXIsIHBhcmFtcy5jdXJyZW50Q2xhc3MsIHBhcmFtcy50b3RhbENsYXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZ2luYXRpb25IVE1MID0gYDxzcGFuIGNsYXNzPVwiJHtwYXJhbXMuY3VycmVudENsYXNzfVwiPjwvc3Bhbj5gXG4gICAgICAgICsgJyAvICdcbiAgICAgICAgKyBgPHNwYW4gY2xhc3M9XCIke3BhcmFtcy50b3RhbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgPT09ICdwcm9ncmVzc2JhcicpIHtcbiAgICAgIGlmIChwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIpIHtcbiAgICAgICAgcGFnaW5hdGlvbkhUTUwgPSBwYXJhbXMucmVuZGVyUHJvZ3Jlc3NiYXIuY2FsbChzd2lwZXIsIHBhcmFtcy5wcm9ncmVzc2JhckZpbGxDbGFzcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYWdpbmF0aW9uSFRNTCA9IGA8c3BhbiBjbGFzcz1cIiR7cGFyYW1zLnByb2dyZXNzYmFyRmlsbENsYXNzfVwiPjwvc3Bhbj5gO1xuICAgICAgfVxuICAgICAgJGVsLmh0bWwocGFnaW5hdGlvbkhUTUwpO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLnR5cGUgIT09ICdjdXN0b20nKSB7XG4gICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvblJlbmRlcicsIHN3aXBlci5wYWdpbmF0aW9uLiRlbFswXSk7XG4gICAgfVxuICB9LFxuICBpbml0KCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uO1xuICAgIGlmICghcGFyYW1zLmVsKSByZXR1cm47XG5cbiAgICBsZXQgJGVsID0gJChwYXJhbXMuZWwpO1xuICAgIGlmICgkZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICBpZiAoXG4gICAgICBzd2lwZXIucGFyYW1zLnVuaXF1ZU5hdkVsZW1lbnRzXG4gICAgICAmJiB0eXBlb2YgcGFyYW1zLmVsID09PSAnc3RyaW5nJ1xuICAgICAgJiYgJGVsLmxlbmd0aCA+IDFcbiAgICAgICYmIHN3aXBlci4kZWwuZmluZChwYXJhbXMuZWwpLmxlbmd0aCA9PT0gMVxuICAgICkge1xuICAgICAgJGVsID0gc3dpcGVyLiRlbC5maW5kKHBhcmFtcy5lbCk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmNsaWNrYWJsZSkge1xuICAgICAgJGVsLmFkZENsYXNzKHBhcmFtcy5jbGlja2FibGVDbGFzcyk7XG4gICAgfVxuXG4gICAgJGVsLmFkZENsYXNzKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuXG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAnYnVsbGV0cycgJiYgcGFyYW1zLmR5bmFtaWNCdWxsZXRzKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MoYCR7cGFyYW1zLm1vZGlmaWVyQ2xhc3N9JHtwYXJhbXMudHlwZX0tZHluYW1pY2ApO1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uZHluYW1pY0J1bGxldEluZGV4ID0gMDtcbiAgICAgIGlmIChwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzIDwgMSkge1xuICAgICAgICBwYXJhbXMuZHluYW1pY01haW5CdWxsZXRzID0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHBhcmFtcy50eXBlID09PSAncHJvZ3Jlc3NiYXInICYmIHBhcmFtcy5wcm9ncmVzc2Jhck9wcG9zaXRlKSB7XG4gICAgICAkZWwuYWRkQ2xhc3MocGFyYW1zLnByb2dyZXNzYmFyT3Bwb3NpdGVDbGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICRlbC5vbignY2xpY2snLCBgLiR7cGFyYW1zLmJ1bGxldENsYXNzfWAsIGZ1bmN0aW9uIG9uQ2xpY2soZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGxldCBpbmRleCA9ICQodGhpcykuaW5kZXgoKSAqIHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyR3JvdXA7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIGluZGV4ICs9IHN3aXBlci5sb29wZWRTbGlkZXM7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKGluZGV4KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFnaW5hdGlvbiwge1xuICAgICAgJGVsLFxuICAgICAgZWw6ICRlbFswXSxcbiAgICB9KTtcbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbjtcbiAgICBpZiAoIXBhcmFtcy5lbCB8fCAhc3dpcGVyLnBhZ2luYXRpb24uZWwgfHwgIXN3aXBlci5wYWdpbmF0aW9uLiRlbCB8fCBzd2lwZXIucGFnaW5hdGlvbi4kZWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgY29uc3QgJGVsID0gc3dpcGVyLnBhZ2luYXRpb24uJGVsO1xuXG4gICAgJGVsLnJlbW92ZUNsYXNzKHBhcmFtcy5oaWRkZW5DbGFzcyk7XG4gICAgJGVsLnJlbW92ZUNsYXNzKHBhcmFtcy5tb2RpZmllckNsYXNzICsgcGFyYW1zLnR5cGUpO1xuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzKSBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLnJlbW92ZUNsYXNzKHBhcmFtcy5idWxsZXRBY3RpdmVDbGFzcyk7XG4gICAgaWYgKHBhcmFtcy5jbGlja2FibGUpIHtcbiAgICAgICRlbC5vZmYoJ2NsaWNrJywgYC4ke3BhcmFtcy5idWxsZXRDbGFzc31gKTtcbiAgICB9XG4gIH0sXG59O1xuXG52YXIgcGFnaW5hdGlvbiA9IHtcbiAgbmFtZTogJ3BhZ2luYXRpb24nLFxuICBwYXJhbXM6IHtcbiAgICBwYWdpbmF0aW9uOiB7XG4gICAgICBlbDogbnVsbCxcbiAgICAgIGJ1bGxldEVsZW1lbnQ6ICdzcGFuJyxcbiAgICAgIGNsaWNrYWJsZTogZmFsc2UsXG4gICAgICBoaWRlT25DbGljazogZmFsc2UsXG4gICAgICByZW5kZXJCdWxsZXQ6IG51bGwsXG4gICAgICByZW5kZXJQcm9ncmVzc2JhcjogbnVsbCxcbiAgICAgIHJlbmRlckZyYWN0aW9uOiBudWxsLFxuICAgICAgcmVuZGVyQ3VzdG9tOiBudWxsLFxuICAgICAgcHJvZ3Jlc3NiYXJPcHBvc2l0ZTogZmFsc2UsXG4gICAgICB0eXBlOiAnYnVsbGV0cycsIC8vICdidWxsZXRzJyBvciAncHJvZ3Jlc3NiYXInIG9yICdmcmFjdGlvbicgb3IgJ2N1c3RvbSdcbiAgICAgIGR5bmFtaWNCdWxsZXRzOiBmYWxzZSxcbiAgICAgIGR5bmFtaWNNYWluQnVsbGV0czogMSxcbiAgICAgIGZvcm1hdEZyYWN0aW9uQ3VycmVudDogKG51bWJlcikgPT4gbnVtYmVyLFxuICAgICAgZm9ybWF0RnJhY3Rpb25Ub3RhbDogKG51bWJlcikgPT4gbnVtYmVyLFxuICAgICAgYnVsbGV0Q2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1idWxsZXQnLFxuICAgICAgYnVsbGV0QWN0aXZlQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1idWxsZXQtYWN0aXZlJyxcbiAgICAgIG1vZGlmaWVyQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi0nLCAvLyBORVdcbiAgICAgIGN1cnJlbnRDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWN1cnJlbnQnLFxuICAgICAgdG90YWxDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLXRvdGFsJyxcbiAgICAgIGhpZGRlbkNsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24taGlkZGVuJyxcbiAgICAgIHByb2dyZXNzYmFyRmlsbENsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tcHJvZ3Jlc3NiYXItZmlsbCcsXG4gICAgICBwcm9ncmVzc2Jhck9wcG9zaXRlQ2xhc3M6ICdzd2lwZXItcGFnaW5hdGlvbi1wcm9ncmVzc2Jhci1vcHBvc2l0ZScsXG4gICAgICBjbGlja2FibGVDbGFzczogJ3N3aXBlci1wYWdpbmF0aW9uLWNsaWNrYWJsZScsIC8vIE5FV1xuICAgICAgbG9ja0NsYXNzOiAnc3dpcGVyLXBhZ2luYXRpb24tbG9jaycsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgcGFnaW5hdGlvbjoge1xuICAgICAgICBpbml0OiBQYWdpbmF0aW9uLmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICByZW5kZXI6IFBhZ2luYXRpb24ucmVuZGVyLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgdXBkYXRlOiBQYWdpbmF0aW9uLnVwZGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgIGRlc3Ryb3k6IFBhZ2luYXRpb24uZGVzdHJveS5iaW5kKHN3aXBlciksXG4gICAgICAgIGR5bmFtaWNCdWxsZXRJbmRleDogMCxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5pbml0KCk7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5yZW5kZXIoKTtcbiAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgYWN0aXZlSW5kZXhDaGFuZ2UoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIucGFnaW5hdGlvbi51cGRhdGUoKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHN3aXBlci5zbmFwSW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc25hcEluZGV4Q2hhbmdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5sb29wKSB7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2xpZGVzTGVuZ3RoQ2hhbmdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24ucmVuZGVyKCk7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgc25hcEdyaWRMZW5ndGhDaGFuZ2UoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgc3dpcGVyLnBhZ2luYXRpb24ucmVuZGVyKCk7XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLnVwZGF0ZSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi5kZXN0cm95KCk7XG4gICAgfSxcbiAgICBjbGljayhlKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKFxuICAgICAgICBzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uZWxcbiAgICAgICAgJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGVPbkNsaWNrXG4gICAgICAgICYmIHN3aXBlci5wYWdpbmF0aW9uLiRlbC5sZW5ndGggPiAwXG4gICAgICAgICYmICEkKGUudGFyZ2V0KS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uYnVsbGV0Q2xhc3MpXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgaXNIaWRkZW4gPSBzd2lwZXIucGFnaW5hdGlvbi4kZWwuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmhpZGRlbkNsYXNzKTtcbiAgICAgICAgaWYgKGlzSGlkZGVuID09PSB0cnVlKSB7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3BhZ2luYXRpb25TaG93Jywgc3dpcGVyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgncGFnaW5hdGlvbkhpZGUnLCBzd2lwZXIpO1xuICAgICAgICB9XG4gICAgICAgIHN3aXBlci5wYWdpbmF0aW9uLiRlbC50b2dnbGVDbGFzcyhzd2lwZXIucGFyYW1zLnBhZ2luYXRpb24uaGlkZGVuQ2xhc3MpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBTY3JvbGxiYXIgPSB7XG4gIHNldFRyYW5zbGF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB7IHNjcm9sbGJhciwgcnRsVHJhbnNsYXRlOiBydGwsIHByb2dyZXNzIH0gPSBzd2lwZXI7XG4gICAgY29uc3Qge1xuICAgICAgZHJhZ1NpemUsIHRyYWNrU2l6ZSwgJGRyYWdFbCwgJGVsLFxuICAgIH0gPSBzY3JvbGxiYXI7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG5cbiAgICBsZXQgbmV3U2l6ZSA9IGRyYWdTaXplO1xuICAgIGxldCBuZXdQb3MgPSAodHJhY2tTaXplIC0gZHJhZ1NpemUpICogcHJvZ3Jlc3M7XG4gICAgaWYgKHJ0bCkge1xuICAgICAgbmV3UG9zID0gLW5ld1BvcztcbiAgICAgIGlmIChuZXdQb3MgPiAwKSB7XG4gICAgICAgIG5ld1NpemUgPSBkcmFnU2l6ZSAtIG5ld1BvcztcbiAgICAgICAgbmV3UG9zID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoLW5ld1BvcyArIGRyYWdTaXplID4gdHJhY2tTaXplKSB7XG4gICAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgKyBuZXdQb3M7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChuZXdQb3MgPCAwKSB7XG4gICAgICBuZXdTaXplID0gZHJhZ1NpemUgKyBuZXdQb3M7XG4gICAgICBuZXdQb3MgPSAwO1xuICAgIH0gZWxzZSBpZiAobmV3UG9zICsgZHJhZ1NpemUgPiB0cmFja1NpemUpIHtcbiAgICAgIG5ld1NpemUgPSB0cmFja1NpemUgLSBuZXdQb3M7XG4gICAgfVxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIGlmIChTdXBwb3J0LnRyYW5zZm9ybXMzZCkge1xuICAgICAgICAkZHJhZ0VsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHtuZXdQb3N9cHgsIDAsIDApYCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkZHJhZ0VsLnRyYW5zZm9ybShgdHJhbnNsYXRlWCgke25ld1Bvc31weClgKTtcbiAgICAgIH1cbiAgICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSBgJHtuZXdTaXplfXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKFN1cHBvcnQudHJhbnNmb3JtczNkKSB7XG4gICAgICAgICRkcmFnRWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwcHgsICR7bmV3UG9zfXB4LCAwKWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgJGRyYWdFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZVkoJHtuZXdQb3N9cHgpYCk7XG4gICAgICB9XG4gICAgICAkZHJhZ0VsWzBdLnN0eWxlLmhlaWdodCA9IGAke25ld1NpemV9cHhgO1xuICAgIH1cbiAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgIGNsZWFyVGltZW91dChzd2lwZXIuc2Nyb2xsYmFyLnRpbWVvdXQpO1xuICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAxO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci50aW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICRlbFswXS5zdHlsZS5vcGFjaXR5ID0gMDtcbiAgICAgICAgJGVsLnRyYW5zaXRpb24oNDAwKTtcbiAgICAgIH0sIDEwMDApO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCB8fCAhc3dpcGVyLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuJGRyYWdFbC50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgfSxcbiAgdXBkYXRlU2l6ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwgfHwgIXN3aXBlci5zY3JvbGxiYXIuZWwpIHJldHVybjtcblxuICAgIGNvbnN0IHsgc2Nyb2xsYmFyIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgeyAkZHJhZ0VsLCAkZWwgfSA9IHNjcm9sbGJhcjtcblxuICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSAnJztcbiAgICAkZHJhZ0VsWzBdLnN0eWxlLmhlaWdodCA9ICcnO1xuICAgIGNvbnN0IHRyYWNrU2l6ZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICRlbFswXS5vZmZzZXRXaWR0aCA6ICRlbFswXS5vZmZzZXRIZWlnaHQ7XG5cbiAgICBjb25zdCBkaXZpZGVyID0gc3dpcGVyLnNpemUgLyBzd2lwZXIudmlydHVhbFNpemU7XG4gICAgY29uc3QgbW92ZURpdmlkZXIgPSBkaXZpZGVyICogKHRyYWNrU2l6ZSAvIHN3aXBlci5zaXplKTtcbiAgICBsZXQgZHJhZ1NpemU7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdTaXplID09PSAnYXV0bycpIHtcbiAgICAgIGRyYWdTaXplID0gdHJhY2tTaXplICogZGl2aWRlcjtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJhZ1NpemUgPSBwYXJzZUludChzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5kcmFnU2l6ZSwgMTApO1xuICAgIH1cblxuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUud2lkdGggPSBgJHtkcmFnU2l6ZX1weGA7XG4gICAgfSBlbHNlIHtcbiAgICAgICRkcmFnRWxbMF0uc3R5bGUuaGVpZ2h0ID0gYCR7ZHJhZ1NpemV9cHhgO1xuICAgIH1cblxuICAgIGlmIChkaXZpZGVyID49IDEpIHtcbiAgICAgICRlbFswXS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH0gZWxzZSB7XG4gICAgICAkZWxbMF0uc3R5bGUuZGlzcGxheSA9ICcnO1xuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuaGlkZSkge1xuICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSAwO1xuICAgIH1cbiAgICBVdGlscy5leHRlbmQoc2Nyb2xsYmFyLCB7XG4gICAgICB0cmFja1NpemUsXG4gICAgICBkaXZpZGVyLFxuICAgICAgbW92ZURpdmlkZXIsXG4gICAgICBkcmFnU2l6ZSxcbiAgICB9KTtcbiAgICBzY3JvbGxiYXIuJGVsW3N3aXBlci5wYXJhbXMud2F0Y2hPdmVyZmxvdyAmJiBzd2lwZXIuaXNMb2NrZWQgPyAnYWRkQ2xhc3MnIDogJ3JlbW92ZUNsYXNzJ10oc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIubG9ja0NsYXNzKTtcbiAgfSxcbiAgZ2V0UG9pbnRlclBvc2l0aW9uKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgIHJldHVybiAoKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IGUudHlwZSA9PT0gJ3RvdWNobW92ZScpID8gZS50YXJnZXRUb3VjaGVzWzBdLnBhZ2VYIDogZS5wYWdlWCB8fCBlLmNsaWVudFgpO1xuICAgIH1cbiAgICByZXR1cm4gKChlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyB8fCBlLnR5cGUgPT09ICd0b3VjaG1vdmUnKSA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVkgfHwgZS5jbGllbnRZKTtcbiAgfSxcbiAgc2V0RHJhZ1Bvc2l0aW9uKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgc2Nyb2xsYmFyLCBydGxUcmFuc2xhdGU6IHJ0bCB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHtcbiAgICAgICRlbCxcbiAgICAgIGRyYWdTaXplLFxuICAgICAgdHJhY2tTaXplLFxuICAgICAgZHJhZ1N0YXJ0UG9zLFxuICAgIH0gPSBzY3JvbGxiYXI7XG5cbiAgICBsZXQgcG9zaXRpb25SYXRpbztcbiAgICBwb3NpdGlvblJhdGlvID0gKChzY3JvbGxiYXIuZ2V0UG9pbnRlclBvc2l0aW9uKGUpKSAtICRlbC5vZmZzZXQoKVtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJ11cbiAgICAgIC0gKGRyYWdTdGFydFBvcyAhPT0gbnVsbCA/IGRyYWdTdGFydFBvcyA6IGRyYWdTaXplIC8gMikpIC8gKHRyYWNrU2l6ZSAtIGRyYWdTaXplKTtcbiAgICBwb3NpdGlvblJhdGlvID0gTWF0aC5tYXgoTWF0aC5taW4ocG9zaXRpb25SYXRpbywgMSksIDApO1xuICAgIGlmIChydGwpIHtcbiAgICAgIHBvc2l0aW9uUmF0aW8gPSAxIC0gcG9zaXRpb25SYXRpbztcbiAgICB9XG5cbiAgICBjb25zdCBwb3NpdGlvbiA9IHN3aXBlci5taW5UcmFuc2xhdGUoKSArICgoc3dpcGVyLm1heFRyYW5zbGF0ZSgpIC0gc3dpcGVyLm1pblRyYW5zbGF0ZSgpKSAqIHBvc2l0aW9uUmF0aW8pO1xuXG4gICAgc3dpcGVyLnVwZGF0ZVByb2dyZXNzKHBvc2l0aW9uKTtcbiAgICBzd2lwZXIuc2V0VHJhbnNsYXRlKHBvc2l0aW9uKTtcbiAgICBzd2lwZXIudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICBzd2lwZXIudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICB9LFxuICBvbkRyYWdTdGFydChlKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcbiAgICBjb25zdCB7IHNjcm9sbGJhciwgJHdyYXBwZXJFbCB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IHsgJGVsLCAkZHJhZ0VsIH0gPSBzY3JvbGxiYXI7XG4gICAgc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQgPSB0cnVlO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuZHJhZ1N0YXJ0UG9zID0gKGUudGFyZ2V0ID09PSAkZHJhZ0VsWzBdIHx8IGUudGFyZ2V0ID09PSAkZHJhZ0VsKVxuICAgICAgPyBzY3JvbGxiYXIuZ2V0UG9pbnRlclBvc2l0aW9uKGUpIC0gZS50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClbc3dpcGVyLmlzSG9yaXpvbnRhbCgpID8gJ2xlZnQnIDogJ3RvcCddIDogbnVsbDtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcblxuICAgICR3cmFwcGVyRWwudHJhbnNpdGlvbigxMDApO1xuICAgICRkcmFnRWwudHJhbnNpdGlvbigxMDApO1xuICAgIHNjcm9sbGJhci5zZXREcmFnUG9zaXRpb24oZSk7XG5cbiAgICBjbGVhclRpbWVvdXQoc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCk7XG5cbiAgICAkZWwudHJhbnNpdGlvbigwKTtcbiAgICBpZiAocGFyYW1zLmhpZGUpIHtcbiAgICAgICRlbC5jc3MoJ29wYWNpdHknLCAxKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3Njcm9sbGJhckRyYWdTdGFydCcsIGUpO1xuICB9LFxuICBvbkRyYWdNb3ZlKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgc2Nyb2xsYmFyLCAkd3JhcHBlckVsIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgeyAkZWwsICRkcmFnRWwgfSA9IHNjcm9sbGJhcjtcblxuICAgIGlmICghc3dpcGVyLnNjcm9sbGJhci5pc1RvdWNoZWQpIHJldHVybjtcbiAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGVsc2UgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xuICAgIHNjcm9sbGJhci5zZXREcmFnUG9zaXRpb24oZSk7XG4gICAgJHdyYXBwZXJFbC50cmFuc2l0aW9uKDApO1xuICAgICRlbC50cmFuc2l0aW9uKDApO1xuICAgICRkcmFnRWwudHJhbnNpdGlvbigwKTtcbiAgICBzd2lwZXIuZW1pdCgnc2Nyb2xsYmFyRHJhZ01vdmUnLCBlKTtcbiAgfSxcbiAgb25EcmFnRW5kKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXI7XG4gICAgY29uc3QgeyBzY3JvbGxiYXIgfSA9IHN3aXBlcjtcbiAgICBjb25zdCB7ICRlbCB9ID0gc2Nyb2xsYmFyO1xuXG4gICAgaWYgKCFzd2lwZXIuc2Nyb2xsYmFyLmlzVG91Y2hlZCkgcmV0dXJuO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgaWYgKHBhcmFtcy5oaWRlKSB7XG4gICAgICBjbGVhclRpbWVvdXQoc3dpcGVyLnNjcm9sbGJhci5kcmFnVGltZW91dCk7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLmRyYWdUaW1lb3V0ID0gVXRpbHMubmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAkZWwuY3NzKCdvcGFjaXR5JywgMCk7XG4gICAgICAgICRlbC50cmFuc2l0aW9uKDQwMCk7XG4gICAgICB9LCAxMDAwKTtcbiAgICB9XG4gICAgc3dpcGVyLmVtaXQoJ3Njcm9sbGJhckRyYWdFbmQnLCBlKTtcbiAgICBpZiAocGFyYW1zLnNuYXBPblJlbGVhc2UpIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvQ2xvc2VzdCgpO1xuICAgIH1cbiAgfSxcbiAgZW5hYmxlRHJhZ2dhYmxlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLnNjcm9sbGJhci5lbCkgcmV0dXJuO1xuICAgIGNvbnN0IHtcbiAgICAgIHNjcm9sbGJhciwgdG91Y2hFdmVudHNUb3VjaCwgdG91Y2hFdmVudHNEZXNrdG9wLCBwYXJhbXMsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCAkZWwgPSBzY3JvbGxiYXIuJGVsO1xuICAgIGNvbnN0IHRhcmdldCA9ICRlbFswXTtcbiAgICBjb25zdCBhY3RpdmVMaXN0ZW5lciA9IFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiBmYWxzZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHBhcmFtcy5wYXNzaXZlTGlzdGVuZXJzID8geyBwYXNzaXZlOiB0cnVlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgaWYgKCFTdXBwb3J0LnRvdWNoKSB7XG4gICAgICB0YXJnZXQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3Auc3RhcnQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnU3RhcnQsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNEZXNrdG9wLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3AuZW5kLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ0VuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5zdGFydCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5tb3ZlLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ01vdmUsIGFjdGl2ZUxpc3RlbmVyKTtcbiAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzVG91Y2guZW5kLCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ0VuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9XG4gIH0sXG4gIGRpc2FibGVEcmFnZ2FibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmVsKSByZXR1cm47XG4gICAgY29uc3Qge1xuICAgICAgc2Nyb2xsYmFyLCB0b3VjaEV2ZW50c1RvdWNoLCB0b3VjaEV2ZW50c0Rlc2t0b3AsIHBhcmFtcyxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0ICRlbCA9IHNjcm9sbGJhci4kZWw7XG4gICAgY29uc3QgdGFyZ2V0ID0gJGVsWzBdO1xuICAgIGNvbnN0IGFjdGl2ZUxpc3RlbmVyID0gU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7IHBhc3NpdmU6IGZhbHNlLCBjYXB0dXJlOiBmYWxzZSB9IDogZmFsc2U7XG4gICAgY29uc3QgcGFzc2l2ZUxpc3RlbmVyID0gU3VwcG9ydC5wYXNzaXZlTGlzdGVuZXIgJiYgcGFyYW1zLnBhc3NpdmVMaXN0ZW5lcnMgPyB7IHBhc3NpdmU6IHRydWUsIGNhcHR1cmU6IGZhbHNlIH0gOiBmYWxzZTtcbiAgICBpZiAoIVN1cHBvcnQudG91Y2gpIHtcbiAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5zdGFydCwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdTdGFydCwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c0Rlc2t0b3AubW92ZSwgc3dpcGVyLnNjcm9sbGJhci5vbkRyYWdNb3ZlLCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRvdWNoRXZlbnRzRGVza3RvcC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLnN0YXJ0LCBzd2lwZXIuc2Nyb2xsYmFyLm9uRHJhZ1N0YXJ0LCBhY3RpdmVMaXN0ZW5lcik7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0b3VjaEV2ZW50c1RvdWNoLm1vdmUsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnTW92ZSwgYWN0aXZlTGlzdGVuZXIpO1xuICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodG91Y2hFdmVudHNUb3VjaC5lbmQsIHN3aXBlci5zY3JvbGxiYXIub25EcmFnRW5kLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgIH1cbiAgfSxcbiAgaW5pdCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZWwpIHJldHVybjtcbiAgICBjb25zdCB7IHNjcm9sbGJhciwgJGVsOiAkc3dpcGVyRWwgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLnNjcm9sbGJhcjtcblxuICAgIGxldCAkZWwgPSAkKHBhcmFtcy5lbCk7XG4gICAgaWYgKHN3aXBlci5wYXJhbXMudW5pcXVlTmF2RWxlbWVudHMgJiYgdHlwZW9mIHBhcmFtcy5lbCA9PT0gJ3N0cmluZycgJiYgJGVsLmxlbmd0aCA+IDEgJiYgJHN3aXBlckVsLmZpbmQocGFyYW1zLmVsKS5sZW5ndGggPT09IDEpIHtcbiAgICAgICRlbCA9ICRzd2lwZXJFbC5maW5kKHBhcmFtcy5lbCk7XG4gICAgfVxuXG4gICAgbGV0ICRkcmFnRWwgPSAkZWwuZmluZChgLiR7c3dpcGVyLnBhcmFtcy5zY3JvbGxiYXIuZHJhZ0NsYXNzfWApO1xuICAgIGlmICgkZHJhZ0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgJGRyYWdFbCA9ICQoYDxkaXYgY2xhc3M9XCIke3N3aXBlci5wYXJhbXMuc2Nyb2xsYmFyLmRyYWdDbGFzc31cIj48L2Rpdj5gKTtcbiAgICAgICRlbC5hcHBlbmQoJGRyYWdFbCk7XG4gICAgfVxuXG4gICAgVXRpbHMuZXh0ZW5kKHNjcm9sbGJhciwge1xuICAgICAgJGVsLFxuICAgICAgZWw6ICRlbFswXSxcbiAgICAgICRkcmFnRWwsXG4gICAgICBkcmFnRWw6ICRkcmFnRWxbMF0sXG4gICAgfSk7XG5cbiAgICBpZiAocGFyYW1zLmRyYWdnYWJsZSkge1xuICAgICAgc2Nyb2xsYmFyLmVuYWJsZURyYWdnYWJsZSgpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5zY3JvbGxiYXIuZGlzYWJsZURyYWdnYWJsZSgpO1xuICB9LFxufTtcblxudmFyIHNjcm9sbGJhciA9IHtcbiAgbmFtZTogJ3Njcm9sbGJhcicsXG4gIHBhcmFtczoge1xuICAgIHNjcm9sbGJhcjoge1xuICAgICAgZWw6IG51bGwsXG4gICAgICBkcmFnU2l6ZTogJ2F1dG8nLFxuICAgICAgaGlkZTogZmFsc2UsXG4gICAgICBkcmFnZ2FibGU6IGZhbHNlLFxuICAgICAgc25hcE9uUmVsZWFzZTogdHJ1ZSxcbiAgICAgIGxvY2tDbGFzczogJ3N3aXBlci1zY3JvbGxiYXItbG9jaycsXG4gICAgICBkcmFnQ2xhc3M6ICdzd2lwZXItc2Nyb2xsYmFyLWRyYWcnLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIHNjcm9sbGJhcjoge1xuICAgICAgICBpbml0OiBTY3JvbGxiYXIuaW5pdC5iaW5kKHN3aXBlciksXG4gICAgICAgIGRlc3Ryb3k6IFNjcm9sbGJhci5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgdXBkYXRlU2l6ZTogU2Nyb2xsYmFyLnVwZGF0ZVNpemUuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IFNjcm9sbGJhci5zZXRUcmFuc2xhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2l0aW9uOiBTY3JvbGxiYXIuc2V0VHJhbnNpdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICAgIGVuYWJsZURyYWdnYWJsZTogU2Nyb2xsYmFyLmVuYWJsZURyYWdnYWJsZS5iaW5kKHN3aXBlciksXG4gICAgICAgIGRpc2FibGVEcmFnZ2FibGU6IFNjcm9sbGJhci5kaXNhYmxlRHJhZ2dhYmxlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0RHJhZ1Bvc2l0aW9uOiBTY3JvbGxiYXIuc2V0RHJhZ1Bvc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZ2V0UG9pbnRlclBvc2l0aW9uOiBTY3JvbGxiYXIuZ2V0UG9pbnRlclBvc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb25EcmFnU3RhcnQ6IFNjcm9sbGJhci5vbkRyYWdTdGFydC5iaW5kKHN3aXBlciksXG4gICAgICAgIG9uRHJhZ01vdmU6IFNjcm9sbGJhci5vbkRyYWdNb3ZlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb25EcmFnRW5kOiBTY3JvbGxiYXIub25EcmFnRW5kLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgaXNUb3VjaGVkOiBmYWxzZSxcbiAgICAgICAgdGltZW91dDogbnVsbCxcbiAgICAgICAgZHJhZ1RpbWVvdXQ6IG51bGwsXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci5pbml0KCk7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICB1cGRhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci51cGRhdGVTaXplKCk7XG4gICAgfSxcbiAgICByZXNpemUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgc3dpcGVyLnNjcm9sbGJhci51cGRhdGVTaXplKCk7XG4gICAgfSxcbiAgICBvYnNlcnZlclVwZGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnVwZGF0ZVNpemUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBzd2lwZXIuc2Nyb2xsYmFyLnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgICBkZXN0cm95KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci5zY3JvbGxiYXIuZGVzdHJveSgpO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBQYXJhbGxheCA9IHtcbiAgc2V0VHJhbnNmb3JtKGVsLCBwcm9ncmVzcykge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyBydGwgfSA9IHN3aXBlcjtcblxuICAgIGNvbnN0ICRlbCA9ICQoZWwpO1xuICAgIGNvbnN0IHJ0bEZhY3RvciA9IHJ0bCA/IC0xIDogMTtcblxuICAgIGNvbnN0IHAgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgnKSB8fCAnMCc7XG4gICAgbGV0IHggPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgteCcpO1xuICAgIGxldCB5ID0gJGVsLmF0dHIoJ2RhdGEtc3dpcGVyLXBhcmFsbGF4LXknKTtcbiAgICBjb25zdCBzY2FsZSA9ICRlbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZScpO1xuICAgIGNvbnN0IG9wYWNpdHkgPSAkZWwuYXR0cignZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eScpO1xuXG4gICAgaWYgKHggfHwgeSkge1xuICAgICAgeCA9IHggfHwgJzAnO1xuICAgICAgeSA9IHkgfHwgJzAnO1xuICAgIH0gZWxzZSBpZiAoc3dpcGVyLmlzSG9yaXpvbnRhbCgpKSB7XG4gICAgICB4ID0gcDtcbiAgICAgIHkgPSAnMCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgPSBwO1xuICAgICAgeCA9ICcwJztcbiAgICB9XG5cbiAgICBpZiAoKHgpLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICB4ID0gYCR7cGFyc2VJbnQoeCwgMTApICogcHJvZ3Jlc3MgKiBydGxGYWN0b3J9JWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHggPSBgJHt4ICogcHJvZ3Jlc3MgKiBydGxGYWN0b3J9cHhgO1xuICAgIH1cbiAgICBpZiAoKHkpLmluZGV4T2YoJyUnKSA+PSAwKSB7XG4gICAgICB5ID0gYCR7cGFyc2VJbnQoeSwgMTApICogcHJvZ3Jlc3N9JWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHkgPSBgJHt5ICogcHJvZ3Jlc3N9cHhgO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3BhY2l0eSAhPT0gJ3VuZGVmaW5lZCcgJiYgb3BhY2l0eSAhPT0gbnVsbCkge1xuICAgICAgY29uc3QgY3VycmVudE9wYWNpdHkgPSBvcGFjaXR5IC0gKChvcGFjaXR5IC0gMSkgKiAoMSAtIE1hdGguYWJzKHByb2dyZXNzKSkpO1xuICAgICAgJGVsWzBdLnN0eWxlLm9wYWNpdHkgPSBjdXJyZW50T3BhY2l0eTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzY2FsZSA9PT0gJ3VuZGVmaW5lZCcgfHwgc2NhbGUgPT09IG51bGwpIHtcbiAgICAgICRlbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7eH0sICR7eX0sIDBweClgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY3VycmVudFNjYWxlID0gc2NhbGUgLSAoKHNjYWxlIC0gMSkgKiAoMSAtIE1hdGguYWJzKHByb2dyZXNzKSkpO1xuICAgICAgJGVsLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHt4fSwgJHt5fSwgMHB4KSBzY2FsZSgke2N1cnJlbnRTY2FsZX0pYCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICAkZWwsIHNsaWRlcywgcHJvZ3Jlc3MsIHNuYXBHcmlkLFxuICAgIH0gPSBzd2lwZXI7XG4gICAgJGVsLmNoaWxkcmVuKCdbZGF0YS1zd2lwZXItcGFyYWxsYXhdLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgteF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC15XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LW9wYWNpdHldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtc2NhbGVdJylcbiAgICAgIC5lYWNoKChpbmRleCwgZWwpID0+IHtcbiAgICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zZm9ybShlbCwgcHJvZ3Jlc3MpO1xuICAgICAgfSk7XG4gICAgc2xpZGVzLmVhY2goKHNsaWRlSW5kZXgsIHNsaWRlRWwpID0+IHtcbiAgICAgIGxldCBzbGlkZVByb2dyZXNzID0gc2xpZGVFbC5wcm9ncmVzcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLnNsaWRlc1Blckdyb3VwID4gMSAmJiBzd2lwZXIucGFyYW1zLnNsaWRlc1BlclZpZXcgIT09ICdhdXRvJykge1xuICAgICAgICBzbGlkZVByb2dyZXNzICs9IE1hdGguY2VpbChzbGlkZUluZGV4IC8gMikgLSAocHJvZ3Jlc3MgKiAoc25hcEdyaWQubGVuZ3RoIC0gMSkpO1xuICAgICAgfVxuICAgICAgc2xpZGVQcm9ncmVzcyA9IE1hdGgubWluKE1hdGgubWF4KHNsaWRlUHJvZ3Jlc3MsIC0xKSwgMSk7XG4gICAgICAkKHNsaWRlRWwpLmZpbmQoJ1tkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV0nKVxuICAgICAgICAuZWFjaCgoaW5kZXgsIGVsKSA9PiB7XG4gICAgICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zZm9ybShlbCwgc2xpZGVQcm9ncmVzcyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uID0gdGhpcy5wYXJhbXMuc3BlZWQpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHsgJGVsIH0gPSBzd2lwZXI7XG4gICAgJGVsLmZpbmQoJ1tkYXRhLXN3aXBlci1wYXJhbGxheF0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC14XSwgW2RhdGEtc3dpcGVyLXBhcmFsbGF4LXldLCBbZGF0YS1zd2lwZXItcGFyYWxsYXgtb3BhY2l0eV0sIFtkYXRhLXN3aXBlci1wYXJhbGxheC1zY2FsZV0nKVxuICAgICAgLmVhY2goKGluZGV4LCBwYXJhbGxheEVsKSA9PiB7XG4gICAgICAgIGNvbnN0ICRwYXJhbGxheEVsID0gJChwYXJhbGxheEVsKTtcbiAgICAgICAgbGV0IHBhcmFsbGF4RHVyYXRpb24gPSBwYXJzZUludCgkcGFyYWxsYXhFbC5hdHRyKCdkYXRhLXN3aXBlci1wYXJhbGxheC1kdXJhdGlvbicpLCAxMCkgfHwgZHVyYXRpb247XG4gICAgICAgIGlmIChkdXJhdGlvbiA9PT0gMCkgcGFyYWxsYXhEdXJhdGlvbiA9IDA7XG4gICAgICAgICRwYXJhbGxheEVsLnRyYW5zaXRpb24ocGFyYWxsYXhEdXJhdGlvbik7XG4gICAgICB9KTtcbiAgfSxcbn07XG5cbnZhciBwYXJhbGxheCA9IHtcbiAgbmFtZTogJ3BhcmFsbGF4JyxcbiAgcGFyYW1zOiB7XG4gICAgcGFyYWxsYXg6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIHBhcmFsbGF4OiB7XG4gICAgICAgIHNldFRyYW5zZm9ybTogUGFyYWxsYXguc2V0VHJhbnNmb3JtLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0VHJhbnNsYXRlOiBQYXJhbGxheC5zZXRUcmFuc2xhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2l0aW9uOiBQYXJhbGxheC5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICAgIHN3aXBlci5vcmlnaW5hbFBhcmFtcy53YXRjaFNsaWRlc1Byb2dyZXNzID0gdHJ1ZTtcbiAgICB9LFxuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnBhcmFsbGF4LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5wYXJhbGxheC5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMucGFyYWxsYXguZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnBhcmFsbGF4LnNldFRyYW5zbGF0ZSgpO1xuICAgIH0sXG4gICAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5wYXJhbGxheC5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIucGFyYWxsYXguc2V0VHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IFpvb20gPSB7XG4gIC8vIENhbGMgU2NhbGUgRnJvbSBNdWx0aS10b3VjaGVzXG4gIGdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoZSkge1xuICAgIGlmIChlLnRhcmdldFRvdWNoZXMubGVuZ3RoIDwgMikgcmV0dXJuIDE7XG4gICAgY29uc3QgeDEgPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVg7XG4gICAgY29uc3QgeTEgPSBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVk7XG4gICAgY29uc3QgeDIgPSBlLnRhcmdldFRvdWNoZXNbMV0ucGFnZVg7XG4gICAgY29uc3QgeTIgPSBlLnRhcmdldFRvdWNoZXNbMV0ucGFnZVk7XG4gICAgY29uc3QgZGlzdGFuY2UgPSBNYXRoLnNxcnQoKCh4MiAtIHgxKSAqKiAyKSArICgoeTIgLSB5MSkgKiogMikpO1xuICAgIHJldHVybiBkaXN0YW5jZTtcbiAgfSxcbiAgLy8gRXZlbnRzXG4gIG9uR2VzdHVyZVN0YXJ0KGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgeyBnZXN0dXJlIH0gPSB6b29tO1xuICAgIHpvb20uZmFrZUdlc3R1cmVUb3VjaGVkID0gZmFsc2U7XG4gICAgem9vbS5mYWtlR2VzdHVyZU1vdmVkID0gZmFsc2U7XG4gICAgaWYgKCFTdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICBpZiAoZS50eXBlICE9PSAndG91Y2hzdGFydCcgfHwgKGUudHlwZSA9PT0gJ3RvdWNoc3RhcnQnICYmIGUudGFyZ2V0VG91Y2hlcy5sZW5ndGggPCAyKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB6b29tLmZha2VHZXN0dXJlVG91Y2hlZCA9IHRydWU7XG4gICAgICBnZXN0dXJlLnNjYWxlU3RhcnQgPSBab29tLmdldERpc3RhbmNlQmV0d2VlblRvdWNoZXMoZSk7XG4gICAgfVxuICAgIGlmICghZ2VzdHVyZS4kc2xpZGVFbCB8fCAhZ2VzdHVyZS4kc2xpZGVFbC5sZW5ndGgpIHtcbiAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSAkKGUudGFyZ2V0KS5jbG9zZXN0KCcuc3dpcGVyLXNsaWRlJyk7XG4gICAgICBpZiAoZ2VzdHVyZS4kc2xpZGVFbC5sZW5ndGggPT09IDApIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICBnZXN0dXJlLiRpbWFnZUVsID0gZ2VzdHVyZS4kc2xpZGVFbC5maW5kKCdpbWcsIHN2ZywgY2FudmFzJyk7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbCA9IGdlc3R1cmUuJGltYWdlRWwucGFyZW50KGAuJHtwYXJhbXMuY29udGFpbmVyQ2xhc3N9YCk7XG4gICAgICBnZXN0dXJlLm1heFJhdGlvID0gZ2VzdHVyZS4kaW1hZ2VXcmFwRWwuYXR0cignZGF0YS1zd2lwZXItem9vbScpIHx8IHBhcmFtcy5tYXhSYXRpbztcbiAgICAgIGlmIChnZXN0dXJlLiRpbWFnZVdyYXBFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICBnZXN0dXJlLiRpbWFnZUVsLnRyYW5zaXRpb24oMCk7XG4gICAgc3dpcGVyLnpvb20uaXNTY2FsaW5nID0gdHJ1ZTtcbiAgfSxcbiAgb25HZXN0dXJlQ2hhbmdlKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgeyBnZXN0dXJlIH0gPSB6b29tO1xuICAgIGlmICghU3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNobW92ZScgfHwgKGUudHlwZSA9PT0gJ3RvdWNobW92ZScgJiYgZS50YXJnZXRUb3VjaGVzLmxlbmd0aCA8IDIpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHpvb20uZmFrZUdlc3R1cmVNb3ZlZCA9IHRydWU7XG4gICAgICBnZXN0dXJlLnNjYWxlTW92ZSA9IFpvb20uZ2V0RGlzdGFuY2VCZXR3ZWVuVG91Y2hlcyhlKTtcbiAgICB9XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaWYgKFN1cHBvcnQuZ2VzdHVyZXMpIHtcbiAgICAgIHpvb20uc2NhbGUgPSBlLnNjYWxlICogem9vbS5jdXJyZW50U2NhbGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHpvb20uc2NhbGUgPSAoZ2VzdHVyZS5zY2FsZU1vdmUgLyBnZXN0dXJlLnNjYWxlU3RhcnQpICogem9vbS5jdXJyZW50U2NhbGU7XG4gICAgfVxuICAgIGlmICh6b29tLnNjYWxlID4gZ2VzdHVyZS5tYXhSYXRpbykge1xuICAgICAgem9vbS5zY2FsZSA9IChnZXN0dXJlLm1heFJhdGlvIC0gMSkgKyAoKCh6b29tLnNjYWxlIC0gZ2VzdHVyZS5tYXhSYXRpbykgKyAxKSAqKiAwLjUpO1xuICAgIH1cbiAgICBpZiAoem9vbS5zY2FsZSA8IHBhcmFtcy5taW5SYXRpbykge1xuICAgICAgem9vbS5zY2FsZSA9IChwYXJhbXMubWluUmF0aW8gKyAxKSAtICgoKHBhcmFtcy5taW5SYXRpbyAtIHpvb20uc2NhbGUpICsgMSkgKiogMC41KTtcbiAgICB9XG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgke3pvb20uc2NhbGV9KWApO1xuICB9LFxuICBvbkdlc3R1cmVFbmQoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCB7IGdlc3R1cmUgfSA9IHpvb207XG4gICAgaWYgKCFTdXBwb3J0Lmdlc3R1cmVzKSB7XG4gICAgICBpZiAoIXpvb20uZmFrZUdlc3R1cmVUb3VjaGVkIHx8ICF6b29tLmZha2VHZXN0dXJlTW92ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaWYgKGUudHlwZSAhPT0gJ3RvdWNoZW5kJyB8fCAoZS50eXBlID09PSAndG91Y2hlbmQnICYmIGUuY2hhbmdlZFRvdWNoZXMubGVuZ3RoIDwgMiAmJiAhRGV2aWNlLmFuZHJvaWQpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHpvb20uZmFrZUdlc3R1cmVUb3VjaGVkID0gZmFsc2U7XG4gICAgICB6b29tLmZha2VHZXN0dXJlTW92ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgem9vbS5zY2FsZSA9IE1hdGgubWF4KE1hdGgubWluKHpvb20uc2NhbGUsIGdlc3R1cmUubWF4UmF0aW8pLCBwYXJhbXMubWluUmF0aW8pO1xuICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbihzd2lwZXIucGFyYW1zLnNwZWVkKS50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKDAsMCwwKSBzY2FsZSgke3pvb20uc2NhbGV9KWApO1xuICAgIHpvb20uY3VycmVudFNjYWxlID0gem9vbS5zY2FsZTtcbiAgICB6b29tLmlzU2NhbGluZyA9IGZhbHNlO1xuICAgIGlmICh6b29tLnNjYWxlID09PSAxKSBnZXN0dXJlLiRzbGlkZUVsID0gdW5kZWZpbmVkO1xuICB9LFxuICBvblRvdWNoU3RhcnQoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSwgaW1hZ2UgfSA9IHpvb207XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgaWYgKGltYWdlLmlzVG91Y2hlZCkgcmV0dXJuO1xuICAgIGlmIChEZXZpY2UuYW5kcm9pZCkgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIGltYWdlLmlzVG91Y2hlZCA9IHRydWU7XG4gICAgaW1hZ2UudG91Y2hlc1N0YXJ0LnggPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgaW1hZ2UudG91Y2hlc1N0YXJ0LnkgPSBlLnR5cGUgPT09ICd0b3VjaHN0YXJ0JyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gIH0sXG4gIG9uVG91Y2hNb3ZlKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCB7IGdlc3R1cmUsIGltYWdlLCB2ZWxvY2l0eSB9ID0gem9vbTtcbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBzd2lwZXIuYWxsb3dDbGljayA9IGZhbHNlO1xuICAgIGlmICghaW1hZ2UuaXNUb3VjaGVkIHx8ICFnZXN0dXJlLiRzbGlkZUVsKSByZXR1cm47XG5cbiAgICBpZiAoIWltYWdlLmlzTW92ZWQpIHtcbiAgICAgIGltYWdlLndpZHRoID0gZ2VzdHVyZS4kaW1hZ2VFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIGltYWdlLmhlaWdodCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgaW1hZ2Uuc3RhcnRYID0gVXRpbHMuZ2V0VHJhbnNsYXRlKGdlc3R1cmUuJGltYWdlV3JhcEVsWzBdLCAneCcpIHx8IDA7XG4gICAgICBpbWFnZS5zdGFydFkgPSBVdGlscy5nZXRUcmFuc2xhdGUoZ2VzdHVyZS4kaW1hZ2VXcmFwRWxbMF0sICd5JykgfHwgMDtcbiAgICAgIGdlc3R1cmUuc2xpZGVXaWR0aCA9IGdlc3R1cmUuJHNsaWRlRWxbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICBnZXN0dXJlLnNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKDApO1xuICAgICAgaWYgKHN3aXBlci5ydGwpIHtcbiAgICAgICAgaW1hZ2Uuc3RhcnRYID0gLWltYWdlLnN0YXJ0WDtcbiAgICAgICAgaW1hZ2Uuc3RhcnRZID0gLWltYWdlLnN0YXJ0WTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gRGVmaW5lIGlmIHdlIG5lZWQgaW1hZ2UgZHJhZ1xuICAgIGNvbnN0IHNjYWxlZFdpZHRoID0gaW1hZ2Uud2lkdGggKiB6b29tLnNjYWxlO1xuICAgIGNvbnN0IHNjYWxlZEhlaWdodCA9IGltYWdlLmhlaWdodCAqIHpvb20uc2NhbGU7XG5cbiAgICBpZiAoc2NhbGVkV2lkdGggPCBnZXN0dXJlLnNsaWRlV2lkdGggJiYgc2NhbGVkSGVpZ2h0IDwgZ2VzdHVyZS5zbGlkZUhlaWdodCkgcmV0dXJuO1xuXG4gICAgaW1hZ2UubWluWCA9IE1hdGgubWluKCgoZ2VzdHVyZS5zbGlkZVdpZHRoIC8gMikgLSAoc2NhbGVkV2lkdGggLyAyKSksIDApO1xuICAgIGltYWdlLm1heFggPSAtaW1hZ2UubWluWDtcbiAgICBpbWFnZS5taW5ZID0gTWF0aC5taW4oKChnZXN0dXJlLnNsaWRlSGVpZ2h0IC8gMikgLSAoc2NhbGVkSGVpZ2h0IC8gMikpLCAwKTtcbiAgICBpbWFnZS5tYXhZID0gLWltYWdlLm1pblk7XG5cbiAgICBpbWFnZS50b3VjaGVzQ3VycmVudC54ID0gZS50eXBlID09PSAndG91Y2htb3ZlJyA/IGUudGFyZ2V0VG91Y2hlc1swXS5wYWdlWCA6IGUucGFnZVg7XG4gICAgaW1hZ2UudG91Y2hlc0N1cnJlbnQueSA9IGUudHlwZSA9PT0gJ3RvdWNobW92ZScgPyBlLnRhcmdldFRvdWNoZXNbMF0ucGFnZVkgOiBlLnBhZ2VZO1xuXG4gICAgaWYgKCFpbWFnZS5pc01vdmVkICYmICF6b29tLmlzU2NhbGluZykge1xuICAgICAgaWYgKFxuICAgICAgICBzd2lwZXIuaXNIb3Jpem9udGFsKClcbiAgICAgICAgJiYgKFxuICAgICAgICAgIChNYXRoLmZsb29yKGltYWdlLm1pblgpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WCkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA8IGltYWdlLnRvdWNoZXNTdGFydC54KVxuICAgICAgICAgIHx8IChNYXRoLmZsb29yKGltYWdlLm1heFgpID09PSBNYXRoLmZsb29yKGltYWdlLnN0YXJ0WCkgJiYgaW1hZ2UudG91Y2hlc0N1cnJlbnQueCA+IGltYWdlLnRvdWNoZXNTdGFydC54KVxuICAgICAgICApXG4gICAgICApIHtcbiAgICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH0gaWYgKFxuICAgICAgICAhc3dpcGVyLmlzSG9yaXpvbnRhbCgpXG4gICAgICAgICYmIChcbiAgICAgICAgICAoTWF0aC5mbG9vcihpbWFnZS5taW5ZKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFkpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPCBpbWFnZS50b3VjaGVzU3RhcnQueSlcbiAgICAgICAgICB8fCAoTWF0aC5mbG9vcihpbWFnZS5tYXhZKSA9PT0gTWF0aC5mbG9vcihpbWFnZS5zdGFydFkpICYmIGltYWdlLnRvdWNoZXNDdXJyZW50LnkgPiBpbWFnZS50b3VjaGVzU3RhcnQueSlcbiAgICAgICAgKVxuICAgICAgKSB7XG4gICAgICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgaW1hZ2UuaXNNb3ZlZCA9IHRydWU7XG4gICAgaW1hZ2UuY3VycmVudFggPSAoaW1hZ2UudG91Y2hlc0N1cnJlbnQueCAtIGltYWdlLnRvdWNoZXNTdGFydC54KSArIGltYWdlLnN0YXJ0WDtcbiAgICBpbWFnZS5jdXJyZW50WSA9IChpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gaW1hZ2UudG91Y2hlc1N0YXJ0LnkpICsgaW1hZ2Uuc3RhcnRZO1xuXG4gICAgaWYgKGltYWdlLmN1cnJlbnRYIDwgaW1hZ2UubWluWCkge1xuICAgICAgaW1hZ2UuY3VycmVudFggPSAoaW1hZ2UubWluWCArIDEpIC0gKCgoaW1hZ2UubWluWCAtIGltYWdlLmN1cnJlbnRYKSArIDEpICoqIDAuOCk7XG4gICAgfVxuICAgIGlmIChpbWFnZS5jdXJyZW50WCA+IGltYWdlLm1heFgpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRYID0gKGltYWdlLm1heFggLSAxKSArICgoKGltYWdlLmN1cnJlbnRYIC0gaW1hZ2UubWF4WCkgKyAxKSAqKiAwLjgpO1xuICAgIH1cblxuICAgIGlmIChpbWFnZS5jdXJyZW50WSA8IGltYWdlLm1pblkpIHtcbiAgICAgIGltYWdlLmN1cnJlbnRZID0gKGltYWdlLm1pblkgKyAxKSAtICgoKGltYWdlLm1pblkgLSBpbWFnZS5jdXJyZW50WSkgKyAxKSAqKiAwLjgpO1xuICAgIH1cbiAgICBpZiAoaW1hZ2UuY3VycmVudFkgPiBpbWFnZS5tYXhZKSB7XG4gICAgICBpbWFnZS5jdXJyZW50WSA9IChpbWFnZS5tYXhZIC0gMSkgKyAoKChpbWFnZS5jdXJyZW50WSAtIGltYWdlLm1heFkpICsgMSkgKiogMC44KTtcbiAgICB9XG5cbiAgICAvLyBWZWxvY2l0eVxuICAgIGlmICghdmVsb2NpdHkucHJldlBvc2l0aW9uWCkgdmVsb2NpdHkucHJldlBvc2l0aW9uWCA9IGltYWdlLnRvdWNoZXNDdXJyZW50Lng7XG4gICAgaWYgKCF2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZKSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueTtcbiAgICBpZiAoIXZlbG9jaXR5LnByZXZUaW1lKSB2ZWxvY2l0eS5wcmV2VGltZSA9IERhdGUubm93KCk7XG4gICAgdmVsb2NpdHkueCA9IChpbWFnZS50b3VjaGVzQ3VycmVudC54IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWCkgLyAoRGF0ZS5ub3coKSAtIHZlbG9jaXR5LnByZXZUaW1lKSAvIDI7XG4gICAgdmVsb2NpdHkueSA9IChpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgLyAoRGF0ZS5ub3coKSAtIHZlbG9jaXR5LnByZXZUaW1lKSAvIDI7XG4gICAgaWYgKE1hdGguYWJzKGltYWdlLnRvdWNoZXNDdXJyZW50LnggLSB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YKSA8IDIpIHZlbG9jaXR5LnggPSAwO1xuICAgIGlmIChNYXRoLmFicyhpbWFnZS50b3VjaGVzQ3VycmVudC55IC0gdmVsb2NpdHkucHJldlBvc2l0aW9uWSkgPCAyKSB2ZWxvY2l0eS55ID0gMDtcbiAgICB2ZWxvY2l0eS5wcmV2UG9zaXRpb25YID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueDtcbiAgICB2ZWxvY2l0eS5wcmV2UG9zaXRpb25ZID0gaW1hZ2UudG91Y2hlc0N1cnJlbnQueTtcbiAgICB2ZWxvY2l0eS5wcmV2VGltZSA9IERhdGUubm93KCk7XG5cbiAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2Zvcm0oYHRyYW5zbGF0ZTNkKCR7aW1hZ2UuY3VycmVudFh9cHgsICR7aW1hZ2UuY3VycmVudFl9cHgsMClgKTtcbiAgfSxcbiAgb25Ub3VjaEVuZCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBjb25zdCB7IGdlc3R1cmUsIGltYWdlLCB2ZWxvY2l0eSB9ID0gem9vbTtcbiAgICBpZiAoIWdlc3R1cmUuJGltYWdlRWwgfHwgZ2VzdHVyZS4kaW1hZ2VFbC5sZW5ndGggPT09IDApIHJldHVybjtcbiAgICBpZiAoIWltYWdlLmlzVG91Y2hlZCB8fCAhaW1hZ2UuaXNNb3ZlZCkge1xuICAgICAgaW1hZ2UuaXNUb3VjaGVkID0gZmFsc2U7XG4gICAgICBpbWFnZS5pc01vdmVkID0gZmFsc2U7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGltYWdlLmlzVG91Y2hlZCA9IGZhbHNlO1xuICAgIGltYWdlLmlzTW92ZWQgPSBmYWxzZTtcbiAgICBsZXQgbW9tZW50dW1EdXJhdGlvblggPSAzMDA7XG4gICAgbGV0IG1vbWVudHVtRHVyYXRpb25ZID0gMzAwO1xuICAgIGNvbnN0IG1vbWVudHVtRGlzdGFuY2VYID0gdmVsb2NpdHkueCAqIG1vbWVudHVtRHVyYXRpb25YO1xuICAgIGNvbnN0IG5ld1Bvc2l0aW9uWCA9IGltYWdlLmN1cnJlbnRYICsgbW9tZW50dW1EaXN0YW5jZVg7XG4gICAgY29uc3QgbW9tZW50dW1EaXN0YW5jZVkgPSB2ZWxvY2l0eS55ICogbW9tZW50dW1EdXJhdGlvblk7XG4gICAgY29uc3QgbmV3UG9zaXRpb25ZID0gaW1hZ2UuY3VycmVudFkgKyBtb21lbnR1bURpc3RhbmNlWTtcblxuICAgIC8vIEZpeCBkdXJhdGlvblxuICAgIGlmICh2ZWxvY2l0eS54ICE9PSAwKSBtb21lbnR1bUR1cmF0aW9uWCA9IE1hdGguYWJzKChuZXdQb3NpdGlvblggLSBpbWFnZS5jdXJyZW50WCkgLyB2ZWxvY2l0eS54KTtcbiAgICBpZiAodmVsb2NpdHkueSAhPT0gMCkgbW9tZW50dW1EdXJhdGlvblkgPSBNYXRoLmFicygobmV3UG9zaXRpb25ZIC0gaW1hZ2UuY3VycmVudFkpIC8gdmVsb2NpdHkueSk7XG4gICAgY29uc3QgbW9tZW50dW1EdXJhdGlvbiA9IE1hdGgubWF4KG1vbWVudHVtRHVyYXRpb25YLCBtb21lbnR1bUR1cmF0aW9uWSk7XG5cbiAgICBpbWFnZS5jdXJyZW50WCA9IG5ld1Bvc2l0aW9uWDtcbiAgICBpbWFnZS5jdXJyZW50WSA9IG5ld1Bvc2l0aW9uWTtcblxuICAgIC8vIERlZmluZSBpZiB3ZSBuZWVkIGltYWdlIGRyYWdcbiAgICBjb25zdCBzY2FsZWRXaWR0aCA9IGltYWdlLndpZHRoICogem9vbS5zY2FsZTtcbiAgICBjb25zdCBzY2FsZWRIZWlnaHQgPSBpbWFnZS5oZWlnaHQgKiB6b29tLnNjYWxlO1xuICAgIGltYWdlLm1pblggPSBNYXRoLm1pbigoKGdlc3R1cmUuc2xpZGVXaWR0aCAvIDIpIC0gKHNjYWxlZFdpZHRoIC8gMikpLCAwKTtcbiAgICBpbWFnZS5tYXhYID0gLWltYWdlLm1pblg7XG4gICAgaW1hZ2UubWluWSA9IE1hdGgubWluKCgoZ2VzdHVyZS5zbGlkZUhlaWdodCAvIDIpIC0gKHNjYWxlZEhlaWdodCAvIDIpKSwgMCk7XG4gICAgaW1hZ2UubWF4WSA9IC1pbWFnZS5taW5ZO1xuICAgIGltYWdlLmN1cnJlbnRYID0gTWF0aC5tYXgoTWF0aC5taW4oaW1hZ2UuY3VycmVudFgsIGltYWdlLm1heFgpLCBpbWFnZS5taW5YKTtcbiAgICBpbWFnZS5jdXJyZW50WSA9IE1hdGgubWF4KE1hdGgubWluKGltYWdlLmN1cnJlbnRZLCBpbWFnZS5tYXhZKSwgaW1hZ2UubWluWSk7XG5cbiAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKG1vbWVudHVtRHVyYXRpb24pLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoJHtpbWFnZS5jdXJyZW50WH1weCwgJHtpbWFnZS5jdXJyZW50WX1weCwwKWApO1xuICB9LFxuICBvblRyYW5zaXRpb25FbmQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgeyBnZXN0dXJlIH0gPSB6b29tO1xuICAgIGlmIChnZXN0dXJlLiRzbGlkZUVsICYmIHN3aXBlci5wcmV2aW91c0luZGV4ICE9PSBzd2lwZXIuYWN0aXZlSW5kZXgpIHtcbiAgICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknKTtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApJyk7XG5cbiAgICAgIHpvb20uc2NhbGUgPSAxO1xuICAgICAgem9vbS5jdXJyZW50U2NhbGUgPSAxO1xuXG4gICAgICBnZXN0dXJlLiRzbGlkZUVsID0gdW5kZWZpbmVkO1xuICAgICAgZ2VzdHVyZS4kaW1hZ2VFbCA9IHVuZGVmaW5lZDtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfSxcbiAgLy8gVG9nZ2xlIFpvb21cbiAgdG9nZ2xlKGUpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcblxuICAgIGlmICh6b29tLnNjYWxlICYmIHpvb20uc2NhbGUgIT09IDEpIHtcbiAgICAgIC8vIFpvb20gT3V0XG4gICAgICB6b29tLm91dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBab29tIEluXG4gICAgICB6b29tLmluKGUpO1xuICAgIH1cbiAgfSxcbiAgaW4oZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG5cbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy56b29tO1xuICAgIGNvbnN0IHsgZ2VzdHVyZSwgaW1hZ2UgfSA9IHpvb207XG5cbiAgICBpZiAoIWdlc3R1cmUuJHNsaWRlRWwpIHtcbiAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuY2xpY2tlZFNsaWRlID8gJChzd2lwZXIuY2xpY2tlZFNsaWRlKSA6IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSBnZXN0dXJlLiRzbGlkZUVsLmZpbmQoJ2ltZywgc3ZnLCBjYW52YXMnKTtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gZ2VzdHVyZS4kaW1hZ2VFbC5wYXJlbnQoYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKTtcbiAgICB9XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICBnZXN0dXJlLiRzbGlkZUVsLmFkZENsYXNzKGAke3BhcmFtcy56b29tZWRTbGlkZUNsYXNzfWApO1xuXG4gICAgbGV0IHRvdWNoWDtcbiAgICBsZXQgdG91Y2hZO1xuICAgIGxldCBvZmZzZXRYO1xuICAgIGxldCBvZmZzZXRZO1xuICAgIGxldCBkaWZmWDtcbiAgICBsZXQgZGlmZlk7XG4gICAgbGV0IHRyYW5zbGF0ZVg7XG4gICAgbGV0IHRyYW5zbGF0ZVk7XG4gICAgbGV0IGltYWdlV2lkdGg7XG4gICAgbGV0IGltYWdlSGVpZ2h0O1xuICAgIGxldCBzY2FsZWRXaWR0aDtcbiAgICBsZXQgc2NhbGVkSGVpZ2h0O1xuICAgIGxldCB0cmFuc2xhdGVNaW5YO1xuICAgIGxldCB0cmFuc2xhdGVNaW5ZO1xuICAgIGxldCB0cmFuc2xhdGVNYXhYO1xuICAgIGxldCB0cmFuc2xhdGVNYXhZO1xuICAgIGxldCBzbGlkZVdpZHRoO1xuICAgIGxldCBzbGlkZUhlaWdodDtcblxuICAgIGlmICh0eXBlb2YgaW1hZ2UudG91Y2hlc1N0YXJ0LnggPT09ICd1bmRlZmluZWQnICYmIGUpIHtcbiAgICAgIHRvdWNoWCA9IGUudHlwZSA9PT0gJ3RvdWNoZW5kJyA/IGUuY2hhbmdlZFRvdWNoZXNbMF0ucGFnZVggOiBlLnBhZ2VYO1xuICAgICAgdG91Y2hZID0gZS50eXBlID09PSAndG91Y2hlbmQnID8gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWSA6IGUucGFnZVk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRvdWNoWCA9IGltYWdlLnRvdWNoZXNTdGFydC54O1xuICAgICAgdG91Y2hZID0gaW1hZ2UudG91Y2hlc1N0YXJ0Lnk7XG4gICAgfVxuXG4gICAgem9vbS5zY2FsZSA9IGdlc3R1cmUuJGltYWdlV3JhcEVsLmF0dHIoJ2RhdGEtc3dpcGVyLXpvb20nKSB8fCBwYXJhbXMubWF4UmF0aW87XG4gICAgem9vbS5jdXJyZW50U2NhbGUgPSBnZXN0dXJlLiRpbWFnZVdyYXBFbC5hdHRyKCdkYXRhLXN3aXBlci16b29tJykgfHwgcGFyYW1zLm1heFJhdGlvO1xuICAgIGlmIChlKSB7XG4gICAgICBzbGlkZVdpZHRoID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRXaWR0aDtcbiAgICAgIHNsaWRlSGVpZ2h0ID0gZ2VzdHVyZS4kc2xpZGVFbFswXS5vZmZzZXRIZWlnaHQ7XG4gICAgICBvZmZzZXRYID0gZ2VzdHVyZS4kc2xpZGVFbC5vZmZzZXQoKS5sZWZ0O1xuICAgICAgb2Zmc2V0WSA9IGdlc3R1cmUuJHNsaWRlRWwub2Zmc2V0KCkudG9wO1xuICAgICAgZGlmZlggPSAob2Zmc2V0WCArIChzbGlkZVdpZHRoIC8gMikpIC0gdG91Y2hYO1xuICAgICAgZGlmZlkgPSAob2Zmc2V0WSArIChzbGlkZUhlaWdodCAvIDIpKSAtIHRvdWNoWTtcblxuICAgICAgaW1hZ2VXaWR0aCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0V2lkdGg7XG4gICAgICBpbWFnZUhlaWdodCA9IGdlc3R1cmUuJGltYWdlRWxbMF0ub2Zmc2V0SGVpZ2h0O1xuICAgICAgc2NhbGVkV2lkdGggPSBpbWFnZVdpZHRoICogem9vbS5zY2FsZTtcbiAgICAgIHNjYWxlZEhlaWdodCA9IGltYWdlSGVpZ2h0ICogem9vbS5zY2FsZTtcblxuICAgICAgdHJhbnNsYXRlTWluWCA9IE1hdGgubWluKCgoc2xpZGVXaWR0aCAvIDIpIC0gKHNjYWxlZFdpZHRoIC8gMikpLCAwKTtcbiAgICAgIHRyYW5zbGF0ZU1pblkgPSBNYXRoLm1pbigoKHNsaWRlSGVpZ2h0IC8gMikgLSAoc2NhbGVkSGVpZ2h0IC8gMikpLCAwKTtcbiAgICAgIHRyYW5zbGF0ZU1heFggPSAtdHJhbnNsYXRlTWluWDtcbiAgICAgIHRyYW5zbGF0ZU1heFkgPSAtdHJhbnNsYXRlTWluWTtcblxuICAgICAgdHJhbnNsYXRlWCA9IGRpZmZYICogem9vbS5zY2FsZTtcbiAgICAgIHRyYW5zbGF0ZVkgPSBkaWZmWSAqIHpvb20uc2NhbGU7XG5cbiAgICAgIGlmICh0cmFuc2xhdGVYIDwgdHJhbnNsYXRlTWluWCkge1xuICAgICAgICB0cmFuc2xhdGVYID0gdHJhbnNsYXRlTWluWDtcbiAgICAgIH1cbiAgICAgIGlmICh0cmFuc2xhdGVYID4gdHJhbnNsYXRlTWF4WCkge1xuICAgICAgICB0cmFuc2xhdGVYID0gdHJhbnNsYXRlTWF4WDtcbiAgICAgIH1cblxuICAgICAgaWYgKHRyYW5zbGF0ZVkgPCB0cmFuc2xhdGVNaW5ZKSB7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVNaW5ZO1xuICAgICAgfVxuICAgICAgaWYgKHRyYW5zbGF0ZVkgPiB0cmFuc2xhdGVNYXhZKSB7XG4gICAgICAgIHRyYW5zbGF0ZVkgPSB0cmFuc2xhdGVNYXhZO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0cmFuc2xhdGVYID0gMDtcbiAgICAgIHRyYW5zbGF0ZVkgPSAwO1xuICAgIH1cbiAgICBnZXN0dXJlLiRpbWFnZVdyYXBFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVh9cHgsICR7dHJhbnNsYXRlWX1weCwwKWApO1xuICAgIGdlc3R1cmUuJGltYWdlRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybShgdHJhbnNsYXRlM2QoMCwwLDApIHNjYWxlKCR7em9vbS5zY2FsZX0pYCk7XG4gIH0sXG4gIG91dCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gICAgY29uc3Qgem9vbSA9IHN3aXBlci56b29tO1xuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuem9vbTtcbiAgICBjb25zdCB7IGdlc3R1cmUgfSA9IHpvb207XG5cbiAgICBpZiAoIWdlc3R1cmUuJHNsaWRlRWwpIHtcbiAgICAgIGdlc3R1cmUuJHNsaWRlRWwgPSBzd2lwZXIuY2xpY2tlZFNsaWRlID8gJChzd2lwZXIuY2xpY2tlZFNsaWRlKSA6IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KTtcbiAgICAgIGdlc3R1cmUuJGltYWdlRWwgPSBnZXN0dXJlLiRzbGlkZUVsLmZpbmQoJ2ltZywgc3ZnLCBjYW52YXMnKTtcbiAgICAgIGdlc3R1cmUuJGltYWdlV3JhcEVsID0gZ2VzdHVyZS4kaW1hZ2VFbC5wYXJlbnQoYC4ke3BhcmFtcy5jb250YWluZXJDbGFzc31gKTtcbiAgICB9XG4gICAgaWYgKCFnZXN0dXJlLiRpbWFnZUVsIHx8IGdlc3R1cmUuJGltYWdlRWwubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICB6b29tLnNjYWxlID0gMTtcbiAgICB6b29tLmN1cnJlbnRTY2FsZSA9IDE7XG4gICAgZ2VzdHVyZS4kaW1hZ2VXcmFwRWwudHJhbnNpdGlvbigzMDApLnRyYW5zZm9ybSgndHJhbnNsYXRlM2QoMCwwLDApJyk7XG4gICAgZ2VzdHVyZS4kaW1hZ2VFbC50cmFuc2l0aW9uKDMwMCkudHJhbnNmb3JtKCd0cmFuc2xhdGUzZCgwLDAsMCkgc2NhbGUoMSknKTtcbiAgICBnZXN0dXJlLiRzbGlkZUVsLnJlbW92ZUNsYXNzKGAke3BhcmFtcy56b29tZWRTbGlkZUNsYXNzfWApO1xuICAgIGdlc3R1cmUuJHNsaWRlRWwgPSB1bmRlZmluZWQ7XG4gIH0sXG4gIC8vIEF0dGFjaC9EZXRhY2ggRXZlbnRzXG4gIGVuYWJsZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHpvb20gPSBzd2lwZXIuem9vbTtcbiAgICBpZiAoem9vbS5lbmFibGVkKSByZXR1cm47XG4gICAgem9vbS5lbmFibGVkID0gdHJ1ZTtcblxuICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHN3aXBlci5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuXG4gICAgLy8gU2NhbGUgaW1hZ2VcbiAgICBpZiAoU3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oJ2dlc3R1cmVzdGFydCcsICcuc3dpcGVyLXNsaWRlJywgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKCdnZXN0dXJlY2hhbmdlJywgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZUNoYW5nZSwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKCdnZXN0dXJlZW5kJywgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9IGVsc2UgaWYgKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vbihzd2lwZXIudG91Y2hFdmVudHMuc3RhcnQsICcuc3dpcGVyLXNsaWRlJywgem9vbS5vbkdlc3R1cmVTdGFydCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsLm9uKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlQ2hhbmdlLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLmVuZCwgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBNb3ZlIGltYWdlXG4gICAgc3dpcGVyLiR3cmFwcGVyRWwub24oc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsIGAuJHtzd2lwZXIucGFyYW1zLnpvb20uY29udGFpbmVyQ2xhc3N9YCwgem9vbS5vblRvdWNoTW92ZSk7XG4gIH0sXG4gIGRpc2FibGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB6b29tID0gc3dpcGVyLnpvb207XG4gICAgaWYgKCF6b29tLmVuYWJsZWQpIHJldHVybjtcblxuICAgIHN3aXBlci56b29tLmVuYWJsZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0IHBhc3NpdmVMaXN0ZW5lciA9IHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnICYmIFN1cHBvcnQucGFzc2l2ZUxpc3RlbmVyICYmIHN3aXBlci5wYXJhbXMucGFzc2l2ZUxpc3RlbmVycyA/IHsgcGFzc2l2ZTogdHJ1ZSwgY2FwdHVyZTogZmFsc2UgfSA6IGZhbHNlO1xuXG4gICAgLy8gU2NhbGUgaW1hZ2VcbiAgICBpZiAoU3VwcG9ydC5nZXN0dXJlcykge1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKCdnZXN0dXJlc3RhcnQnLCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoJ2dlc3R1cmVjaGFuZ2UnLCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlQ2hhbmdlLCBwYXNzaXZlTGlzdGVuZXIpO1xuICAgICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKCdnZXN0dXJlZW5kJywgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9IGVsc2UgaWYgKHN3aXBlci50b3VjaEV2ZW50cy5zdGFydCA9PT0gJ3RvdWNoc3RhcnQnKSB7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLnN0YXJ0LCAnLnN3aXBlci1zbGlkZScsIHpvb20ub25HZXN0dXJlU3RhcnQsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLm1vdmUsICcuc3dpcGVyLXNsaWRlJywgem9vbS5vbkdlc3R1cmVDaGFuZ2UsIHBhc3NpdmVMaXN0ZW5lcik7XG4gICAgICBzd2lwZXIuJHdyYXBwZXJFbC5vZmYoc3dpcGVyLnRvdWNoRXZlbnRzLmVuZCwgJy5zd2lwZXItc2xpZGUnLCB6b29tLm9uR2VzdHVyZUVuZCwgcGFzc2l2ZUxpc3RlbmVyKTtcbiAgICB9XG5cbiAgICAvLyBNb3ZlIGltYWdlXG4gICAgc3dpcGVyLiR3cmFwcGVyRWwub2ZmKHN3aXBlci50b3VjaEV2ZW50cy5tb3ZlLCBgLiR7c3dpcGVyLnBhcmFtcy56b29tLmNvbnRhaW5lckNsYXNzfWAsIHpvb20ub25Ub3VjaE1vdmUpO1xuICB9LFxufTtcblxudmFyIHpvb20gPSB7XG4gIG5hbWU6ICd6b29tJyxcbiAgcGFyYW1zOiB7XG4gICAgem9vbToge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICBtYXhSYXRpbzogMyxcbiAgICAgIG1pblJhdGlvOiAxLFxuICAgICAgdG9nZ2xlOiB0cnVlLFxuICAgICAgY29udGFpbmVyQ2xhc3M6ICdzd2lwZXItem9vbS1jb250YWluZXInLFxuICAgICAgem9vbWVkU2xpZGVDbGFzczogJ3N3aXBlci1zbGlkZS16b29tZWQnLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHpvb20gPSB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIHNjYWxlOiAxLFxuICAgICAgY3VycmVudFNjYWxlOiAxLFxuICAgICAgaXNTY2FsaW5nOiBmYWxzZSxcbiAgICAgIGdlc3R1cmU6IHtcbiAgICAgICAgJHNsaWRlRWw6IHVuZGVmaW5lZCxcbiAgICAgICAgc2xpZGVXaWR0aDogdW5kZWZpbmVkLFxuICAgICAgICBzbGlkZUhlaWdodDogdW5kZWZpbmVkLFxuICAgICAgICAkaW1hZ2VFbDogdW5kZWZpbmVkLFxuICAgICAgICAkaW1hZ2VXcmFwRWw6IHVuZGVmaW5lZCxcbiAgICAgICAgbWF4UmF0aW86IDMsXG4gICAgICB9LFxuICAgICAgaW1hZ2U6IHtcbiAgICAgICAgaXNUb3VjaGVkOiB1bmRlZmluZWQsXG4gICAgICAgIGlzTW92ZWQ6IHVuZGVmaW5lZCxcbiAgICAgICAgY3VycmVudFg6IHVuZGVmaW5lZCxcbiAgICAgICAgY3VycmVudFk6IHVuZGVmaW5lZCxcbiAgICAgICAgbWluWDogdW5kZWZpbmVkLFxuICAgICAgICBtaW5ZOiB1bmRlZmluZWQsXG4gICAgICAgIG1heFg6IHVuZGVmaW5lZCxcbiAgICAgICAgbWF4WTogdW5kZWZpbmVkLFxuICAgICAgICB3aWR0aDogdW5kZWZpbmVkLFxuICAgICAgICBoZWlnaHQ6IHVuZGVmaW5lZCxcbiAgICAgICAgc3RhcnRYOiB1bmRlZmluZWQsXG4gICAgICAgIHN0YXJ0WTogdW5kZWZpbmVkLFxuICAgICAgICB0b3VjaGVzU3RhcnQ6IHt9LFxuICAgICAgICB0b3VjaGVzQ3VycmVudDoge30sXG4gICAgICB9LFxuICAgICAgdmVsb2NpdHk6IHtcbiAgICAgICAgeDogdW5kZWZpbmVkLFxuICAgICAgICB5OiB1bmRlZmluZWQsXG4gICAgICAgIHByZXZQb3NpdGlvblg6IHVuZGVmaW5lZCxcbiAgICAgICAgcHJldlBvc2l0aW9uWTogdW5kZWZpbmVkLFxuICAgICAgICBwcmV2VGltZTogdW5kZWZpbmVkLFxuICAgICAgfSxcbiAgICB9O1xuXG4gICAgKCdvbkdlc3R1cmVTdGFydCBvbkdlc3R1cmVDaGFuZ2Ugb25HZXN0dXJlRW5kIG9uVG91Y2hTdGFydCBvblRvdWNoTW92ZSBvblRvdWNoRW5kIG9uVHJhbnNpdGlvbkVuZCB0b2dnbGUgZW5hYmxlIGRpc2FibGUgaW4gb3V0Jykuc3BsaXQoJyAnKS5mb3JFYWNoKChtZXRob2ROYW1lKSA9PiB7XG4gICAgICB6b29tW21ldGhvZE5hbWVdID0gWm9vbVttZXRob2ROYW1lXS5iaW5kKHN3aXBlcik7XG4gICAgfSk7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgem9vbSxcbiAgICB9KTtcblxuICAgIGxldCBzY2FsZSA9IDE7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHN3aXBlci56b29tLCAnc2NhbGUnLCB7XG4gICAgICBnZXQoKSB7XG4gICAgICAgIHJldHVybiBzY2FsZTtcbiAgICAgIH0sXG4gICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgaWYgKHNjYWxlICE9PSB2YWx1ZSkge1xuICAgICAgICAgIGNvbnN0IGltYWdlRWwgPSBzd2lwZXIuem9vbS5nZXN0dXJlLiRpbWFnZUVsID8gc3dpcGVyLnpvb20uZ2VzdHVyZS4kaW1hZ2VFbFswXSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBjb25zdCBzbGlkZUVsID0gc3dpcGVyLnpvb20uZ2VzdHVyZS4kc2xpZGVFbCA/IHN3aXBlci56b29tLmdlc3R1cmUuJHNsaWRlRWxbMF0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ3pvb21DaGFuZ2UnLCB2YWx1ZSwgaW1hZ2VFbCwgc2xpZGVFbCk7XG4gICAgICAgIH1cbiAgICAgICAgc2NhbGUgPSB2YWx1ZTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy56b29tLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLnpvb20uZW5hYmxlKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXN0cm95KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIHN3aXBlci56b29tLmRpc2FibGUoKTtcbiAgICB9LFxuICAgIHRvdWNoU3RhcnQoZSkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnpvb20ub25Ub3VjaFN0YXJ0KGUpO1xuICAgIH0sXG4gICAgdG91Y2hFbmQoZSkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnpvb20uZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLnpvb20ub25Ub3VjaEVuZChlKTtcbiAgICB9LFxuICAgIGRvdWJsZVRhcChlKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkICYmIHN3aXBlci56b29tLmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy56b29tLnRvZ2dsZSkge1xuICAgICAgICBzd2lwZXIuem9vbS50b2dnbGUoZSk7XG4gICAgICB9XG4gICAgfSxcbiAgICB0cmFuc2l0aW9uRW5kKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIuem9vbS5lbmFibGVkICYmIHN3aXBlci5wYXJhbXMuem9vbS5lbmFibGVkKSB7XG4gICAgICAgIHN3aXBlci56b29tLm9uVHJhbnNpdGlvbkVuZCgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBMYXp5ID0ge1xuICBsb2FkSW5TbGlkZShpbmRleCwgbG9hZEluRHVwbGljYXRlID0gdHJ1ZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5sYXp5O1xuICAgIGlmICh0eXBlb2YgaW5kZXggPT09ICd1bmRlZmluZWQnKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5zbGlkZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gICAgY29uc3QgaXNWaXJ0dWFsID0gc3dpcGVyLnZpcnR1YWwgJiYgc3dpcGVyLnBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG5cbiAgICBjb25zdCAkc2xpZGVFbCA9IGlzVmlydHVhbFxuICAgICAgPyBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7aW5kZXh9XCJdYClcbiAgICAgIDogc3dpcGVyLnNsaWRlcy5lcShpbmRleCk7XG5cbiAgICBsZXQgJGltYWdlcyA9ICRzbGlkZUVsLmZpbmQoYC4ke3BhcmFtcy5lbGVtZW50Q2xhc3N9Om5vdCguJHtwYXJhbXMubG9hZGVkQ2xhc3N9KTpub3QoLiR7cGFyYW1zLmxvYWRpbmdDbGFzc30pYCk7XG4gICAgaWYgKCRzbGlkZUVsLmhhc0NsYXNzKHBhcmFtcy5lbGVtZW50Q2xhc3MpICYmICEkc2xpZGVFbC5oYXNDbGFzcyhwYXJhbXMubG9hZGVkQ2xhc3MpICYmICEkc2xpZGVFbC5oYXNDbGFzcyhwYXJhbXMubG9hZGluZ0NsYXNzKSkge1xuICAgICAgJGltYWdlcyA9ICRpbWFnZXMuYWRkKCRzbGlkZUVsWzBdKTtcbiAgICB9XG4gICAgaWYgKCRpbWFnZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgICAkaW1hZ2VzLmVhY2goKGltYWdlSW5kZXgsIGltYWdlRWwpID0+IHtcbiAgICAgIGNvbnN0ICRpbWFnZUVsID0gJChpbWFnZUVsKTtcbiAgICAgICRpbWFnZUVsLmFkZENsYXNzKHBhcmFtcy5sb2FkaW5nQ2xhc3MpO1xuXG4gICAgICBjb25zdCBiYWNrZ3JvdW5kID0gJGltYWdlRWwuYXR0cignZGF0YS1iYWNrZ3JvdW5kJyk7XG4gICAgICBjb25zdCBzcmMgPSAkaW1hZ2VFbC5hdHRyKCdkYXRhLXNyYycpO1xuICAgICAgY29uc3Qgc3Jjc2V0ID0gJGltYWdlRWwuYXR0cignZGF0YS1zcmNzZXQnKTtcbiAgICAgIGNvbnN0IHNpemVzID0gJGltYWdlRWwuYXR0cignZGF0YS1zaXplcycpO1xuXG4gICAgICBzd2lwZXIubG9hZEltYWdlKCRpbWFnZUVsWzBdLCAoc3JjIHx8IGJhY2tncm91bmQpLCBzcmNzZXQsIHNpemVzLCBmYWxzZSwgKCkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHN3aXBlciA9PT0gJ3VuZGVmaW5lZCcgfHwgc3dpcGVyID09PSBudWxsIHx8ICFzd2lwZXIgfHwgKHN3aXBlciAmJiAhc3dpcGVyLnBhcmFtcykgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICBpZiAoYmFja2dyb3VuZCkge1xuICAgICAgICAgICRpbWFnZUVsLmNzcygnYmFja2dyb3VuZC1pbWFnZScsIGB1cmwoXCIke2JhY2tncm91bmR9XCIpYCk7XG4gICAgICAgICAgJGltYWdlRWwucmVtb3ZlQXR0cignZGF0YS1iYWNrZ3JvdW5kJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHNyY3NldCkge1xuICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc3Jjc2V0Jywgc3Jjc2V0KTtcbiAgICAgICAgICAgICRpbWFnZUVsLnJlbW92ZUF0dHIoJ2RhdGEtc3Jjc2V0Jyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaXplcykge1xuICAgICAgICAgICAgJGltYWdlRWwuYXR0cignc2l6ZXMnLCBzaXplcyk7XG4gICAgICAgICAgICAkaW1hZ2VFbC5yZW1vdmVBdHRyKCdkYXRhLXNpemVzJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzcmMpIHtcbiAgICAgICAgICAgICRpbWFnZUVsLmF0dHIoJ3NyYycsIHNyYyk7XG4gICAgICAgICAgICAkaW1hZ2VFbC5yZW1vdmVBdHRyKCdkYXRhLXNyYycpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgICRpbWFnZUVsLmFkZENsYXNzKHBhcmFtcy5sb2FkZWRDbGFzcykucmVtb3ZlQ2xhc3MocGFyYW1zLmxvYWRpbmdDbGFzcyk7XG4gICAgICAgICRzbGlkZUVsLmZpbmQoYC4ke3BhcmFtcy5wcmVsb2FkZXJDbGFzc31gKS5yZW1vdmUoKTtcbiAgICAgICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCAmJiBsb2FkSW5EdXBsaWNhdGUpIHtcbiAgICAgICAgICBjb25zdCBzbGlkZU9yaWdpbmFsSW5kZXggPSAkc2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgICAgICAgIGlmICgkc2xpZGVFbC5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnNsaWRlRHVwbGljYXRlQ2xhc3MpKSB7XG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbFNsaWRlID0gc3dpcGVyLiR3cmFwcGVyRWwuY2hpbGRyZW4oYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c2xpZGVPcmlnaW5hbEluZGV4fVwiXTpub3QoLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfSlgKTtcbiAgICAgICAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKG9yaWdpbmFsU2xpZGUuaW5kZXgoKSwgZmFsc2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkdXBsaWNhdGVkU2xpZGUgPSBzd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihgLiR7c3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c2xpZGVPcmlnaW5hbEluZGV4fVwiXWApO1xuICAgICAgICAgICAgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoZHVwbGljYXRlZFNsaWRlLmluZGV4KCksIGZhbHNlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3dpcGVyLmVtaXQoJ2xhenlJbWFnZVJlYWR5JywgJHNsaWRlRWxbMF0sICRpbWFnZUVsWzBdKTtcbiAgICAgIH0pO1xuXG4gICAgICBzd2lwZXIuZW1pdCgnbGF6eUltYWdlTG9hZCcsICRzbGlkZUVsWzBdLCAkaW1hZ2VFbFswXSk7XG4gICAgfSk7XG4gIH0sXG4gIGxvYWQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICAkd3JhcHBlckVsLCBwYXJhbXM6IHN3aXBlclBhcmFtcywgc2xpZGVzLCBhY3RpdmVJbmRleCxcbiAgICB9ID0gc3dpcGVyO1xuICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlclBhcmFtcy52aXJ0dWFsLmVuYWJsZWQ7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyUGFyYW1zLmxhenk7XG5cbiAgICBsZXQgc2xpZGVzUGVyVmlldyA9IHN3aXBlclBhcmFtcy5zbGlkZXNQZXJWaWV3O1xuICAgIGlmIChzbGlkZXNQZXJWaWV3ID09PSAnYXV0bycpIHtcbiAgICAgIHNsaWRlc1BlclZpZXcgPSAwO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNsaWRlRXhpc3QoaW5kZXgpIHtcbiAgICAgIGlmIChpc1ZpcnR1YWwpIHtcbiAgICAgICAgaWYgKCR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlclBhcmFtcy5zbGlkZUNsYXNzfVtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7aW5kZXh9XCJdYCkubGVuZ3RoKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc2xpZGVzW2luZGV4XSkgcmV0dXJuIHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHNsaWRlSW5kZXgoc2xpZGVFbCkge1xuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICByZXR1cm4gJChzbGlkZUVsKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpO1xuICAgICAgfVxuICAgICAgcmV0dXJuICQoc2xpZGVFbCkuaW5kZXgoKTtcbiAgICB9XG5cbiAgICBpZiAoIXN3aXBlci5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCkgc3dpcGVyLmxhenkuaW5pdGlhbEltYWdlTG9hZGVkID0gdHJ1ZTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy53YXRjaFNsaWRlc1Zpc2liaWxpdHkpIHtcbiAgICAgICR3cmFwcGVyRWwuY2hpbGRyZW4oYC4ke3N3aXBlclBhcmFtcy5zbGlkZVZpc2libGVDbGFzc31gKS5lYWNoKChlbEluZGV4LCBzbGlkZUVsKSA9PiB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gaXNWaXJ0dWFsID8gJChzbGlkZUVsKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpIDogJChzbGlkZUVsKS5pbmRleCgpO1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShpbmRleCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKHNsaWRlc1BlclZpZXcgPiAxKSB7XG4gICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXg7IGkgPCBhY3RpdmVJbmRleCArIHNsaWRlc1BlclZpZXc7IGkgKz0gMSkge1xuICAgICAgICBpZiAoc2xpZGVFeGlzdChpKSkgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGFjdGl2ZUluZGV4KTtcbiAgICB9XG4gICAgaWYgKHBhcmFtcy5sb2FkUHJldk5leHQpIHtcbiAgICAgIGlmIChzbGlkZXNQZXJWaWV3ID4gMSB8fCAocGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudCAmJiBwYXJhbXMubG9hZFByZXZOZXh0QW1vdW50ID4gMSkpIHtcbiAgICAgICAgY29uc3QgYW1vdW50ID0gcGFyYW1zLmxvYWRQcmV2TmV4dEFtb3VudDtcbiAgICAgICAgY29uc3Qgc3B2ID0gc2xpZGVzUGVyVmlldztcbiAgICAgICAgY29uc3QgbWF4SW5kZXggPSBNYXRoLm1pbihhY3RpdmVJbmRleCArIHNwdiArIE1hdGgubWF4KGFtb3VudCwgc3B2KSwgc2xpZGVzLmxlbmd0aCk7XG4gICAgICAgIGNvbnN0IG1pbkluZGV4ID0gTWF0aC5tYXgoYWN0aXZlSW5kZXggLSBNYXRoLm1heChzcHYsIGFtb3VudCksIDApO1xuICAgICAgICAvLyBOZXh0IFNsaWRlc1xuICAgICAgICBmb3IgKGxldCBpID0gYWN0aXZlSW5kZXggKyBzbGlkZXNQZXJWaWV3OyBpIDwgbWF4SW5kZXg7IGkgKz0gMSkge1xuICAgICAgICAgIGlmIChzbGlkZUV4aXN0KGkpKSBzd2lwZXIubGF6eS5sb2FkSW5TbGlkZShpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBQcmV2IFNsaWRlc1xuICAgICAgICBmb3IgKGxldCBpID0gbWluSW5kZXg7IGkgPCBhY3RpdmVJbmRleDsgaSArPSAxKSB7XG4gICAgICAgICAgaWYgKHNsaWRlRXhpc3QoaSkpIHN3aXBlci5sYXp5LmxvYWRJblNsaWRlKGkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBuZXh0U2xpZGUgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXJQYXJhbXMuc2xpZGVOZXh0Q2xhc3N9YCk7XG4gICAgICAgIGlmIChuZXh0U2xpZGUubGVuZ3RoID4gMCkgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoc2xpZGVJbmRleChuZXh0U2xpZGUpKTtcblxuICAgICAgICBjb25zdCBwcmV2U2xpZGUgPSAkd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXJQYXJhbXMuc2xpZGVQcmV2Q2xhc3N9YCk7XG4gICAgICAgIGlmIChwcmV2U2xpZGUubGVuZ3RoID4gMCkgc3dpcGVyLmxhenkubG9hZEluU2xpZGUoc2xpZGVJbmRleChwcmV2U2xpZGUpKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG59O1xuXG52YXIgbGF6eSA9IHtcbiAgbmFtZTogJ2xhenknLFxuICBwYXJhbXM6IHtcbiAgICBsYXp5OiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIGxvYWRQcmV2TmV4dDogZmFsc2UsXG4gICAgICBsb2FkUHJldk5leHRBbW91bnQ6IDEsXG4gICAgICBsb2FkT25UcmFuc2l0aW9uU3RhcnQ6IGZhbHNlLFxuXG4gICAgICBlbGVtZW50Q2xhc3M6ICdzd2lwZXItbGF6eScsXG4gICAgICBsb2FkaW5nQ2xhc3M6ICdzd2lwZXItbGF6eS1sb2FkaW5nJyxcbiAgICAgIGxvYWRlZENsYXNzOiAnc3dpcGVyLWxhenktbG9hZGVkJyxcbiAgICAgIHByZWxvYWRlckNsYXNzOiAnc3dpcGVyLWxhenktcHJlbG9hZGVyJyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBsYXp5OiB7XG4gICAgICAgIGluaXRpYWxJbWFnZUxvYWRlZDogZmFsc2UsXG4gICAgICAgIGxvYWQ6IExhenkubG9hZC5iaW5kKHN3aXBlciksXG4gICAgICAgIGxvYWRJblNsaWRlOiBMYXp5LmxvYWRJblNsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgc3dpcGVyLnBhcmFtcy5wcmVsb2FkSW1hZ2VzKSB7XG4gICAgICAgIHN3aXBlci5wYXJhbXMucHJlbG9hZEltYWdlcyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCAmJiBzd2lwZXIucGFyYW1zLmluaXRpYWxTbGlkZSA9PT0gMCkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzY3JvbGwoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZnJlZU1vZGUgJiYgIXN3aXBlci5wYXJhbXMuZnJlZU1vZGVTdGlja3kpIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgcmVzaXplKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzY3JvbGxiYXJEcmFnTW92ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmxhenkubG9hZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNpdGlvblN0YXJ0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxhenkuZW5hYmxlZCkge1xuICAgICAgICBpZiAoc3dpcGVyLnBhcmFtcy5sYXp5LmxvYWRPblRyYW5zaXRpb25TdGFydCB8fCAoIXN3aXBlci5wYXJhbXMubGF6eS5sb2FkT25UcmFuc2l0aW9uU3RhcnQgJiYgIXN3aXBlci5sYXp5LmluaXRpYWxJbWFnZUxvYWRlZCkpIHtcbiAgICAgICAgICBzd2lwZXIubGF6eS5sb2FkKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHRyYW5zaXRpb25FbmQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMubGF6eS5lbmFibGVkICYmICFzd2lwZXIucGFyYW1zLmxhenkubG9hZE9uVHJhbnNpdGlvblN0YXJ0KSB7XG4gICAgICAgIHN3aXBlci5sYXp5LmxvYWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcblxuLyogZXNsaW50IG5vLWJpdHdpc2U6IFtcImVycm9yXCIsIHsgXCJhbGxvd1wiOiBbXCI+PlwiXSB9XSAqL1xuXG5jb25zdCBDb250cm9sbGVyID0ge1xuICBMaW5lYXJTcGxpbmU6IGZ1bmN0aW9uIExpbmVhclNwbGluZSh4LCB5KSB7XG4gICAgY29uc3QgYmluYXJ5U2VhcmNoID0gKGZ1bmN0aW9uIHNlYXJjaCgpIHtcbiAgICAgIGxldCBtYXhJbmRleDtcbiAgICAgIGxldCBtaW5JbmRleDtcbiAgICAgIGxldCBndWVzcztcbiAgICAgIHJldHVybiAoYXJyYXksIHZhbCkgPT4ge1xuICAgICAgICBtaW5JbmRleCA9IC0xO1xuICAgICAgICBtYXhJbmRleCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgICAgd2hpbGUgKG1heEluZGV4IC0gbWluSW5kZXggPiAxKSB7XG4gICAgICAgICAgZ3Vlc3MgPSBtYXhJbmRleCArIG1pbkluZGV4ID4+IDE7XG4gICAgICAgICAgaWYgKGFycmF5W2d1ZXNzXSA8PSB2YWwpIHtcbiAgICAgICAgICAgIG1pbkluZGV4ID0gZ3Vlc3M7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1heEluZGV4ID0gZ3Vlc3M7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXhJbmRleDtcbiAgICAgIH07XG4gICAgfSgpKTtcbiAgICB0aGlzLnggPSB4O1xuICAgIHRoaXMueSA9IHk7XG4gICAgdGhpcy5sYXN0SW5kZXggPSB4Lmxlbmd0aCAtIDE7XG4gICAgLy8gR2l2ZW4gYW4geCB2YWx1ZSAoeDIpLCByZXR1cm4gdGhlIGV4cGVjdGVkIHkyIHZhbHVlOlxuICAgIC8vICh4MSx5MSkgaXMgdGhlIGtub3duIHBvaW50IGJlZm9yZSBnaXZlbiB2YWx1ZSxcbiAgICAvLyAoeDMseTMpIGlzIHRoZSBrbm93biBwb2ludCBhZnRlciBnaXZlbiB2YWx1ZS5cbiAgICBsZXQgaTE7XG4gICAgbGV0IGkzO1xuXG4gICAgdGhpcy5pbnRlcnBvbGF0ZSA9IGZ1bmN0aW9uIGludGVycG9sYXRlKHgyKSB7XG4gICAgICBpZiAoIXgyKSByZXR1cm4gMDtcblxuICAgICAgLy8gR2V0IHRoZSBpbmRleGVzIG9mIHgxIGFuZCB4MyAodGhlIGFycmF5IGluZGV4ZXMgYmVmb3JlIGFuZCBhZnRlciBnaXZlbiB4Mik6XG4gICAgICBpMyA9IGJpbmFyeVNlYXJjaCh0aGlzLngsIHgyKTtcbiAgICAgIGkxID0gaTMgLSAxO1xuXG4gICAgICAvLyBXZSBoYXZlIG91ciBpbmRleGVzIGkxICYgaTMsIHNvIHdlIGNhbiBjYWxjdWxhdGUgYWxyZWFkeTpcbiAgICAgIC8vIHkyIDo9ICgoeDLiiJJ4MSkgw5cgKHkz4oiSeTEpKSDDtyAoeDPiiJJ4MSkgKyB5MVxuICAgICAgcmV0dXJuICgoKHgyIC0gdGhpcy54W2kxXSkgKiAodGhpcy55W2kzXSAtIHRoaXMueVtpMV0pKSAvICh0aGlzLnhbaTNdIC0gdGhpcy54W2kxXSkpICsgdGhpcy55W2kxXTtcbiAgICB9O1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuICAvLyB4eHg6IGZvciBub3cgaSB3aWxsIGp1c3Qgc2F2ZSBvbmUgc3BsaW5lIGZ1bmN0aW9uIHRvIHRvXG4gIGdldEludGVycG9sYXRlRnVuY3Rpb24oYykge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5zcGxpbmUpIHtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHN3aXBlci5wYXJhbXMubG9vcFxuICAgICAgICA/IG5ldyBDb250cm9sbGVyLkxpbmVhclNwbGluZShzd2lwZXIuc2xpZGVzR3JpZCwgYy5zbGlkZXNHcmlkKVxuICAgICAgICA6IG5ldyBDb250cm9sbGVyLkxpbmVhclNwbGluZShzd2lwZXIuc25hcEdyaWQsIGMuc25hcEdyaWQpO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNsYXRlKHNldFRyYW5zbGF0ZSwgYnlDb250cm9sbGVyKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBjb250cm9sbGVkID0gc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbDtcbiAgICBsZXQgbXVsdGlwbGllcjtcbiAgICBsZXQgY29udHJvbGxlZFRyYW5zbGF0ZTtcbiAgICBmdW5jdGlvbiBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGMpIHtcbiAgICAgIC8vIHRoaXMgd2lsbCBjcmVhdGUgYW4gSW50ZXJwb2xhdGUgZnVuY3Rpb24gYmFzZWQgb24gdGhlIHNuYXBHcmlkc1xuICAgICAgLy8geCBpcyB0aGUgR3JpZCBvZiB0aGUgc2Nyb2xsZWQgc2Nyb2xsZXIgYW5kIHkgd2lsbCBiZSB0aGUgY29udHJvbGxlZCBzY3JvbGxlclxuICAgICAgLy8gaXQgbWFrZXMgc2Vuc2UgdG8gY3JlYXRlIHRoaXMgb25seSBvbmNlIGFuZCByZWNhbGwgaXQgZm9yIHRoZSBpbnRlcnBvbGF0aW9uXG4gICAgICAvLyB0aGUgZnVuY3Rpb24gZG9lcyBhIGxvdCBvZiB2YWx1ZSBjYWNoaW5nIGZvciBwZXJmb3JtYW5jZVxuICAgICAgY29uc3QgdHJhbnNsYXRlID0gc3dpcGVyLnJ0bFRyYW5zbGF0ZSA/IC1zd2lwZXIudHJhbnNsYXRlIDogc3dpcGVyLnRyYW5zbGF0ZTtcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdzbGlkZScpIHtcbiAgICAgICAgc3dpcGVyLmNvbnRyb2xsZXIuZ2V0SW50ZXJwb2xhdGVGdW5jdGlvbihjKTtcbiAgICAgICAgLy8gaSBhbSBub3Qgc3VyZSB3aHkgdGhlIHZhbHVlcyBoYXZlIHRvIGJlIG11bHRpcGxpY2F0ZWQgdGhpcyB3YXksIHRyaWVkIHRvIGludmVydCB0aGUgc25hcEdyaWRcbiAgICAgICAgLy8gYnV0IGl0IGRpZCBub3Qgd29yayBvdXRcbiAgICAgICAgY29udHJvbGxlZFRyYW5zbGF0ZSA9IC1zd2lwZXIuY29udHJvbGxlci5zcGxpbmUuaW50ZXJwb2xhdGUoLXRyYW5zbGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghY29udHJvbGxlZFRyYW5zbGF0ZSB8fCBzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuYnkgPT09ICdjb250YWluZXInKSB7XG4gICAgICAgIG11bHRpcGxpZXIgPSAoYy5tYXhUcmFuc2xhdGUoKSAtIGMubWluVHJhbnNsYXRlKCkpIC8gKHN3aXBlci5tYXhUcmFuc2xhdGUoKSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSk7XG4gICAgICAgIGNvbnRyb2xsZWRUcmFuc2xhdGUgPSAoKHRyYW5zbGF0ZSAtIHN3aXBlci5taW5UcmFuc2xhdGUoKSkgKiBtdWx0aXBsaWVyKSArIGMubWluVHJhbnNsYXRlKCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmNvbnRyb2xsZXIuaW52ZXJzZSkge1xuICAgICAgICBjb250cm9sbGVkVHJhbnNsYXRlID0gYy5tYXhUcmFuc2xhdGUoKSAtIGNvbnRyb2xsZWRUcmFuc2xhdGU7XG4gICAgICB9XG4gICAgICBjLnVwZGF0ZVByb2dyZXNzKGNvbnRyb2xsZWRUcmFuc2xhdGUpO1xuICAgICAgYy5zZXRUcmFuc2xhdGUoY29udHJvbGxlZFRyYW5zbGF0ZSwgc3dpcGVyKTtcbiAgICAgIGMudXBkYXRlQWN0aXZlSW5kZXgoKTtcbiAgICAgIGMudXBkYXRlU2xpZGVzQ2xhc3NlcygpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250cm9sbGVkLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGlmIChjb250cm9sbGVkW2ldICE9PSBieUNvbnRyb2xsZXIgJiYgY29udHJvbGxlZFtpXSBpbnN0YW5jZW9mIFN3aXBlcikge1xuICAgICAgICAgIHNldENvbnRyb2xsZWRUcmFuc2xhdGUoY29udHJvbGxlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICBzZXRDb250cm9sbGVkVHJhbnNsYXRlKGNvbnRyb2xsZWQpO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbiwgYnlDb250cm9sbGVyKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBjb250cm9sbGVkID0gc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbDtcbiAgICBsZXQgaTtcbiAgICBmdW5jdGlvbiBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjKSB7XG4gICAgICBjLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIHN3aXBlcik7XG4gICAgICBpZiAoZHVyYXRpb24gIT09IDApIHtcbiAgICAgICAgYy50cmFuc2l0aW9uU3RhcnQoKTtcbiAgICAgICAgaWYgKGMucGFyYW1zLmF1dG9IZWlnaHQpIHtcbiAgICAgICAgICBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICAgICAgICBjLnVwZGF0ZUF1dG9IZWlnaHQoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjLiR3cmFwcGVyRWwudHJhbnNpdGlvbkVuZCgoKSA9PiB7XG4gICAgICAgICAgaWYgKCFjb250cm9sbGVkKSByZXR1cm47XG4gICAgICAgICAgaWYgKGMucGFyYW1zLmxvb3AgJiYgc3dpcGVyLnBhcmFtcy5jb250cm9sbGVyLmJ5ID09PSAnc2xpZGUnKSB7XG4gICAgICAgICAgICBjLmxvb3BGaXgoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYy50cmFuc2l0aW9uRW5kKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb250cm9sbGVkKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNvbnRyb2xsZWQubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgaWYgKGNvbnRyb2xsZWRbaV0gIT09IGJ5Q29udHJvbGxlciAmJiBjb250cm9sbGVkW2ldIGluc3RhbmNlb2YgU3dpcGVyKSB7XG4gICAgICAgICAgc2V0Q29udHJvbGxlZFRyYW5zaXRpb24oY29udHJvbGxlZFtpXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNvbnRyb2xsZWQgaW5zdGFuY2VvZiBTd2lwZXIgJiYgYnlDb250cm9sbGVyICE9PSBjb250cm9sbGVkKSB7XG4gICAgICBzZXRDb250cm9sbGVkVHJhbnNpdGlvbihjb250cm9sbGVkKTtcbiAgICB9XG4gIH0sXG59O1xudmFyIGNvbnRyb2xsZXIgPSB7XG4gIG5hbWU6ICdjb250cm9sbGVyJyxcbiAgcGFyYW1zOiB7XG4gICAgY29udHJvbGxlcjoge1xuICAgICAgY29udHJvbDogdW5kZWZpbmVkLFxuICAgICAgaW52ZXJzZTogZmFsc2UsXG4gICAgICBieTogJ3NsaWRlJywgLy8gb3IgJ2NvbnRhaW5lcidcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBjb250cm9sbGVyOiB7XG4gICAgICAgIGNvbnRyb2w6IHN3aXBlci5wYXJhbXMuY29udHJvbGxlci5jb250cm9sLFxuICAgICAgICBnZXRJbnRlcnBvbGF0ZUZ1bmN0aW9uOiBDb250cm9sbGVyLmdldEludGVycG9sYXRlRnVuY3Rpb24uYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2xhdGU6IENvbnRyb2xsZXIuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogQ29udHJvbGxlci5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgdXBkYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXNpemUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIuY29udHJvbGxlci5jb250cm9sKSByZXR1cm47XG4gICAgICBpZiAoc3dpcGVyLmNvbnRyb2xsZXIuc3BsaW5lKSB7XG4gICAgICAgIHN3aXBlci5jb250cm9sbGVyLnNwbGluZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgZGVsZXRlIHN3aXBlci5jb250cm9sbGVyLnNwbGluZTtcbiAgICAgIH1cbiAgICB9LFxuICAgIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLmNvbnRyb2xsZXIuY29udHJvbCkgcmV0dXJuO1xuICAgICAgaWYgKHN3aXBlci5jb250cm9sbGVyLnNwbGluZSkge1xuICAgICAgICBzd2lwZXIuY29udHJvbGxlci5zcGxpbmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIGRlbGV0ZSBzd2lwZXIuY29udHJvbGxlci5zcGxpbmU7XG4gICAgICB9XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGUodHJhbnNsYXRlLCBieUNvbnRyb2xsZXIpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLnNldFRyYW5zbGF0ZSh0cmFuc2xhdGUsIGJ5Q29udHJvbGxlcik7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uLCBieUNvbnRyb2xsZXIpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5jb250cm9sbGVyLmNvbnRyb2wpIHJldHVybjtcbiAgICAgIHN3aXBlci5jb250cm9sbGVyLnNldFRyYW5zaXRpb24oZHVyYXRpb24sIGJ5Q29udHJvbGxlcik7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IGExMXkgPSB7XG4gIG1ha2VFbEZvY3VzYWJsZSgkZWwpIHtcbiAgICAkZWwuYXR0cigndGFiSW5kZXgnLCAnMCcpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIGFkZEVsUm9sZSgkZWwsIHJvbGUpIHtcbiAgICAkZWwuYXR0cigncm9sZScsIHJvbGUpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIGFkZEVsTGFiZWwoJGVsLCBsYWJlbCkge1xuICAgICRlbC5hdHRyKCdhcmlhLWxhYmVsJywgbGFiZWwpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIGRpc2FibGVFbCgkZWwpIHtcbiAgICAkZWwuYXR0cignYXJpYS1kaXNhYmxlZCcsIHRydWUpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIGVuYWJsZUVsKCRlbCkge1xuICAgICRlbC5hdHRyKCdhcmlhLWRpc2FibGVkJywgZmFsc2UpO1xuICAgIHJldHVybiAkZWw7XG4gIH0sXG4gIG9uRW50ZXJLZXkoZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5hMTF5O1xuICAgIGlmIChlLmtleUNvZGUgIT09IDEzKSByZXR1cm47XG4gICAgY29uc3QgJHRhcmdldEVsID0gJChlLnRhcmdldCk7XG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwgJiYgJHRhcmdldEVsLmlzKHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWwpKSB7XG4gICAgICBpZiAoIShzd2lwZXIuaXNFbmQgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlTmV4dCgpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLmxhc3RTbGlkZU1lc3NhZ2UpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmExMXkubm90aWZ5KHBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHN3aXBlci5uYXZpZ2F0aW9uICYmIHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwgJiYgJHRhcmdldEVsLmlzKHN3aXBlci5uYXZpZ2F0aW9uLiRwcmV2RWwpKSB7XG4gICAgICBpZiAoIShzd2lwZXIuaXNCZWdpbm5pbmcgJiYgIXN3aXBlci5wYXJhbXMubG9vcCkpIHtcbiAgICAgICAgc3dpcGVyLnNsaWRlUHJldigpO1xuICAgICAgfVxuICAgICAgaWYgKHN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICBzd2lwZXIuYTExeS5ub3RpZnkocGFyYW1zLmZpcnN0U2xpZGVNZXNzYWdlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hMTF5Lm5vdGlmeShwYXJhbXMucHJldlNsaWRlTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzd2lwZXIucGFnaW5hdGlvbiAmJiAkdGFyZ2V0RWwuaXMoYC4ke3N3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzc31gKSkge1xuICAgICAgJHRhcmdldEVsWzBdLmNsaWNrKCk7XG4gICAgfVxuICB9LFxuICBub3RpZnkobWVzc2FnZSkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3Qgbm90aWZpY2F0aW9uID0gc3dpcGVyLmExMXkubGl2ZVJlZ2lvbjtcbiAgICBpZiAobm90aWZpY2F0aW9uLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuICAgIG5vdGlmaWNhdGlvbi5odG1sKCcnKTtcbiAgICBub3RpZmljYXRpb24uaHRtbChtZXNzYWdlKTtcbiAgfSxcbiAgdXBkYXRlTmF2aWdhdGlvbigpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuXG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkgcmV0dXJuO1xuICAgIGNvbnN0IHsgJG5leHRFbCwgJHByZXZFbCB9ID0gc3dpcGVyLm5hdmlnYXRpb247XG5cbiAgICBpZiAoJHByZXZFbCAmJiAkcHJldkVsLmxlbmd0aCA+IDApIHtcbiAgICAgIGlmIChzd2lwZXIuaXNCZWdpbm5pbmcpIHtcbiAgICAgICAgc3dpcGVyLmExMXkuZGlzYWJsZUVsKCRwcmV2RWwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpcGVyLmExMXkuZW5hYmxlRWwoJHByZXZFbCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICgkbmV4dEVsICYmICRuZXh0RWwubGVuZ3RoID4gMCkge1xuICAgICAgaWYgKHN3aXBlci5pc0VuZCkge1xuICAgICAgICBzd2lwZXIuYTExeS5kaXNhYmxlRWwoJG5leHRFbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2lwZXIuYTExeS5lbmFibGVFbCgkbmV4dEVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHVwZGF0ZVBhZ2luYXRpb24oKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmExMXk7XG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCkge1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cy5lYWNoKChidWxsZXRJbmRleCwgYnVsbGV0RWwpID0+IHtcbiAgICAgICAgY29uc3QgJGJ1bGxldEVsID0gJChidWxsZXRFbCk7XG4gICAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkYnVsbGV0RWwpO1xuICAgICAgICBzd2lwZXIuYTExeS5hZGRFbFJvbGUoJGJ1bGxldEVsLCAnYnV0dG9uJyk7XG4gICAgICAgIHN3aXBlci5hMTF5LmFkZEVsTGFiZWwoJGJ1bGxldEVsLCBwYXJhbXMucGFnaW5hdGlvbkJ1bGxldE1lc3NhZ2UucmVwbGFjZSgve3tpbmRleH19LywgJGJ1bGxldEVsLmluZGV4KCkgKyAxKSk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIGluaXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcblxuICAgIHN3aXBlci4kZWwuYXBwZW5kKHN3aXBlci5hMTF5LmxpdmVSZWdpb24pO1xuXG4gICAgLy8gTmF2aWdhdGlvblxuICAgIGNvbnN0IHBhcmFtcyA9IHN3aXBlci5wYXJhbXMuYTExeTtcbiAgICBsZXQgJG5leHRFbDtcbiAgICBsZXQgJHByZXZFbDtcbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCkge1xuICAgICAgJG5leHRFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWw7XG4gICAgfVxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSB7XG4gICAgICAkcHJldkVsID0gc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbDtcbiAgICB9XG4gICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkbmV4dEVsKTtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkbmV4dEVsLCAnYnV0dG9uJyk7XG4gICAgICBzd2lwZXIuYTExeS5hZGRFbExhYmVsKCRuZXh0RWwsIHBhcmFtcy5uZXh0U2xpZGVNZXNzYWdlKTtcbiAgICAgICRuZXh0RWwub24oJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG4gICAgaWYgKCRwcmV2RWwpIHtcbiAgICAgIHN3aXBlci5hMTF5Lm1ha2VFbEZvY3VzYWJsZSgkcHJldkVsKTtcbiAgICAgIHN3aXBlci5hMTF5LmFkZEVsUm9sZSgkcHJldkVsLCAnYnV0dG9uJyk7XG4gICAgICBzd2lwZXIuYTExeS5hZGRFbExhYmVsKCRwcmV2RWwsIHBhcmFtcy5wcmV2U2xpZGVNZXNzYWdlKTtcbiAgICAgICRwcmV2RWwub24oJ2tleWRvd24nLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG5cbiAgICAvLyBQYWdpbmF0aW9uXG4gICAgaWYgKHN3aXBlci5wYWdpbmF0aW9uICYmIHN3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5jbGlja2FibGUgJiYgc3dpcGVyLnBhZ2luYXRpb24uYnVsbGV0cyAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzLmxlbmd0aCkge1xuICAgICAgc3dpcGVyLnBhZ2luYXRpb24uJGVsLm9uKCdrZXlkb3duJywgYC4ke3N3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzc31gLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG4gIH0sXG4gIGRlc3Ryb3koKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoc3dpcGVyLmExMXkubGl2ZVJlZ2lvbiAmJiBzd2lwZXIuYTExeS5saXZlUmVnaW9uLmxlbmd0aCA+IDApIHN3aXBlci5hMTF5LmxpdmVSZWdpb24ucmVtb3ZlKCk7XG5cbiAgICBsZXQgJG5leHRFbDtcbiAgICBsZXQgJHByZXZFbDtcbiAgICBpZiAoc3dpcGVyLm5hdmlnYXRpb24gJiYgc3dpcGVyLm5hdmlnYXRpb24uJG5leHRFbCkge1xuICAgICAgJG5leHRFbCA9IHN3aXBlci5uYXZpZ2F0aW9uLiRuZXh0RWw7XG4gICAgfVxuICAgIGlmIChzd2lwZXIubmF2aWdhdGlvbiAmJiBzd2lwZXIubmF2aWdhdGlvbi4kcHJldkVsKSB7XG4gICAgICAkcHJldkVsID0gc3dpcGVyLm5hdmlnYXRpb24uJHByZXZFbDtcbiAgICB9XG4gICAgaWYgKCRuZXh0RWwpIHtcbiAgICAgICRuZXh0RWwub2ZmKCdrZXlkb3duJywgc3dpcGVyLmExMXkub25FbnRlcktleSk7XG4gICAgfVxuICAgIGlmICgkcHJldkVsKSB7XG4gICAgICAkcHJldkVsLm9mZigna2V5ZG93bicsIHN3aXBlci5hMTF5Lm9uRW50ZXJLZXkpO1xuICAgIH1cblxuICAgIC8vIFBhZ2luYXRpb25cbiAgICBpZiAoc3dpcGVyLnBhZ2luYXRpb24gJiYgc3dpcGVyLnBhcmFtcy5wYWdpbmF0aW9uLmNsaWNrYWJsZSAmJiBzd2lwZXIucGFnaW5hdGlvbi5idWxsZXRzICYmIHN3aXBlci5wYWdpbmF0aW9uLmJ1bGxldHMubGVuZ3RoKSB7XG4gICAgICBzd2lwZXIucGFnaW5hdGlvbi4kZWwub2ZmKCdrZXlkb3duJywgYC4ke3N3aXBlci5wYXJhbXMucGFnaW5hdGlvbi5idWxsZXRDbGFzc31gLCBzd2lwZXIuYTExeS5vbkVudGVyS2V5KTtcbiAgICB9XG4gIH0sXG59O1xudmFyIGExMXkkMSA9IHtcbiAgbmFtZTogJ2ExMXknLFxuICBwYXJhbXM6IHtcbiAgICBhMTF5OiB7XG4gICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgbm90aWZpY2F0aW9uQ2xhc3M6ICdzd2lwZXItbm90aWZpY2F0aW9uJyxcbiAgICAgIHByZXZTbGlkZU1lc3NhZ2U6ICdQcmV2aW91cyBzbGlkZScsXG4gICAgICBuZXh0U2xpZGVNZXNzYWdlOiAnTmV4dCBzbGlkZScsXG4gICAgICBmaXJzdFNsaWRlTWVzc2FnZTogJ1RoaXMgaXMgdGhlIGZpcnN0IHNsaWRlJyxcbiAgICAgIGxhc3RTbGlkZU1lc3NhZ2U6ICdUaGlzIGlzIHRoZSBsYXN0IHNsaWRlJyxcbiAgICAgIHBhZ2luYXRpb25CdWxsZXRNZXNzYWdlOiAnR28gdG8gc2xpZGUge3tpbmRleH19JyxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBhMTF5OiB7XG4gICAgICAgIGxpdmVSZWdpb246ICQoYDxzcGFuIGNsYXNzPVwiJHtzd2lwZXIucGFyYW1zLmExMXkubm90aWZpY2F0aW9uQ2xhc3N9XCIgYXJpYS1saXZlPVwiYXNzZXJ0aXZlXCIgYXJpYS1hdG9taWM9XCJ0cnVlXCI+PC9zcGFuPmApLFxuICAgICAgfSxcbiAgICB9KTtcbiAgICBPYmplY3Qua2V5cyhhMTF5KS5mb3JFYWNoKChtZXRob2ROYW1lKSA9PiB7XG4gICAgICBzd2lwZXIuYTExeVttZXRob2ROYW1lXSA9IGExMXlbbWV0aG9kTmFtZV0uYmluZChzd2lwZXIpO1xuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmExMXkuaW5pdCgpO1xuICAgICAgc3dpcGVyLmExMXkudXBkYXRlTmF2aWdhdGlvbigpO1xuICAgIH0sXG4gICAgdG9FZGdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZU5hdmlnYXRpb24oKTtcbiAgICB9LFxuICAgIGZyb21FZGdlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnBhcmFtcy5hMTF5LmVuYWJsZWQpIHJldHVybjtcbiAgICAgIHN3aXBlci5hMTF5LnVwZGF0ZU5hdmlnYXRpb24oKTtcbiAgICB9LFxuICAgIHBhZ2luYXRpb25VcGRhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLmExMXkuZW5hYmxlZCkgcmV0dXJuO1xuICAgICAgc3dpcGVyLmExMXkudXBkYXRlUGFnaW5hdGlvbigpO1xuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci5wYXJhbXMuYTExeS5lbmFibGVkKSByZXR1cm47XG4gICAgICBzd2lwZXIuYTExeS5kZXN0cm95KCk7XG4gICAgfSxcbiAgfSxcbn07XG5cbmNvbnN0IEhpc3RvcnkgPSB7XG4gIGluaXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGlzdG9yeSkgcmV0dXJuO1xuICAgIGlmICghd2luZG93Lmhpc3RvcnkgfHwgIXdpbmRvdy5oaXN0b3J5LnB1c2hTdGF0ZSkge1xuICAgICAgc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQgPSBmYWxzZTtcbiAgICAgIHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGhpc3RvcnkgPSBzd2lwZXIuaGlzdG9yeTtcbiAgICBoaXN0b3J5LmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICBoaXN0b3J5LnBhdGhzID0gSGlzdG9yeS5nZXRQYXRoVmFsdWVzKCk7XG4gICAgaWYgKCFoaXN0b3J5LnBhdGhzLmtleSAmJiAhaGlzdG9yeS5wYXRocy52YWx1ZSkgcmV0dXJuO1xuICAgIGhpc3Rvcnkuc2Nyb2xsVG9TbGlkZSgwLCBoaXN0b3J5LnBhdGhzLnZhbHVlLCBzd2lwZXIucGFyYW1zLnJ1bkNhbGxiYWNrc09uSW5pdCk7XG4gICAgaWYgKCFzd2lwZXIucGFyYW1zLmhpc3RvcnkucmVwbGFjZVN0YXRlKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCBzd2lwZXIuaGlzdG9yeS5zZXRIaXN0b3J5UG9wU3RhdGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICghc3dpcGVyLnBhcmFtcy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlKTtcbiAgICB9XG4gIH0sXG4gIHNldEhpc3RvcnlQb3BTdGF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIHN3aXBlci5oaXN0b3J5LnBhdGhzID0gSGlzdG9yeS5nZXRQYXRoVmFsdWVzKCk7XG4gICAgc3dpcGVyLmhpc3Rvcnkuc2Nyb2xsVG9TbGlkZShzd2lwZXIucGFyYW1zLnNwZWVkLCBzd2lwZXIuaGlzdG9yeS5wYXRocy52YWx1ZSwgZmFsc2UpO1xuICB9LFxuICBnZXRQYXRoVmFsdWVzKCkge1xuICAgIGNvbnN0IHBhdGhBcnJheSA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zbGljZSgxKS5zcGxpdCgnLycpLmZpbHRlcigocGFydCkgPT4gcGFydCAhPT0gJycpO1xuICAgIGNvbnN0IHRvdGFsID0gcGF0aEFycmF5Lmxlbmd0aDtcbiAgICBjb25zdCBrZXkgPSBwYXRoQXJyYXlbdG90YWwgLSAyXTtcbiAgICBjb25zdCB2YWx1ZSA9IHBhdGhBcnJheVt0b3RhbCAtIDFdO1xuICAgIHJldHVybiB7IGtleSwgdmFsdWUgfTtcbiAgfSxcbiAgc2V0SGlzdG9yeShrZXksIGluZGV4KSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5oaXN0b3J5LmluaXRpYWxpemVkIHx8ICFzd2lwZXIucGFyYW1zLmhpc3RvcnkuZW5hYmxlZCkgcmV0dXJuO1xuICAgIGNvbnN0IHNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShpbmRleCk7XG4gICAgbGV0IHZhbHVlID0gSGlzdG9yeS5zbHVnaWZ5KHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpKTtcbiAgICBpZiAoIXdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICB2YWx1ZSA9IGAke2tleX0vJHt2YWx1ZX1gO1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50U3RhdGUgPSB3aW5kb3cuaGlzdG9yeS5zdGF0ZTtcbiAgICBpZiAoY3VycmVudFN0YXRlICYmIGN1cnJlbnRTdGF0ZS52YWx1ZSA9PT0gdmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGlzdG9yeS5yZXBsYWNlU3RhdGUpIHtcbiAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IHZhbHVlIH0sIG51bGwsIHZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93Lmhpc3RvcnkucHVzaFN0YXRlKHsgdmFsdWUgfSwgbnVsbCwgdmFsdWUpO1xuICAgIH1cbiAgfSxcbiAgc2x1Z2lmeSh0ZXh0KSB7XG4gICAgcmV0dXJuIHRleHQudG9TdHJpbmcoKVxuICAgICAgLnJlcGxhY2UoL1xccysvZywgJy0nKVxuICAgICAgLnJlcGxhY2UoL1teXFx3LV0rL2csICcnKVxuICAgICAgLnJlcGxhY2UoLy0tKy9nLCAnLScpXG4gICAgICAucmVwbGFjZSgvXi0rLywgJycpXG4gICAgICAucmVwbGFjZSgvLSskLywgJycpO1xuICB9LFxuICBzY3JvbGxUb1NsaWRlKHNwZWVkLCB2YWx1ZSwgcnVuQ2FsbGJhY2tzKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsZW5ndGggPSBzd2lwZXIuc2xpZGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgIGNvbnN0IHNsaWRlID0gc3dpcGVyLnNsaWRlcy5lcShpKTtcbiAgICAgICAgY29uc3Qgc2xpZGVIaXN0b3J5ID0gSGlzdG9yeS5zbHVnaWZ5KHNsaWRlLmF0dHIoJ2RhdGEtaGlzdG9yeScpKTtcbiAgICAgICAgaWYgKHNsaWRlSGlzdG9yeSA9PT0gdmFsdWUgJiYgIXNsaWRlLmhhc0NsYXNzKHN3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgICBjb25zdCBpbmRleCA9IHNsaWRlLmluZGV4KCk7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oaW5kZXgsIHNwZWVkLCBydW5DYWxsYmFja3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci5zbGlkZVRvKDAsIHNwZWVkLCBydW5DYWxsYmFja3MpO1xuICAgIH1cbiAgfSxcbn07XG5cbnZhciBoaXN0b3J5ID0ge1xuICBuYW1lOiAnaGlzdG9yeScsXG4gIHBhcmFtczoge1xuICAgIGhpc3Rvcnk6IHtcbiAgICAgIGVuYWJsZWQ6IGZhbHNlLFxuICAgICAgcmVwbGFjZVN0YXRlOiBmYWxzZSxcbiAgICAgIGtleTogJ3NsaWRlcycsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgaGlzdG9yeToge1xuICAgICAgICBpbml0OiBIaXN0b3J5LmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRIaXN0b3J5OiBIaXN0b3J5LnNldEhpc3RvcnkuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRIaXN0b3J5UG9wU3RhdGU6IEhpc3Rvcnkuc2V0SGlzdG9yeVBvcFN0YXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2Nyb2xsVG9TbGlkZTogSGlzdG9yeS5zY3JvbGxUb1NsaWRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZGVzdHJveTogSGlzdG9yeS5kZXN0cm95LmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgaW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmhpc3RvcnkuaW5pdCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5LmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmhpc3RvcnkuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLmhpc3RvcnkuaW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgc3dpcGVyLmhpc3Rvcnkuc2V0SGlzdG9yeShzd2lwZXIucGFyYW1zLmhpc3Rvcnkua2V5LCBzd2lwZXIuYWN0aXZlSW5kZXgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBIYXNoTmF2aWdhdGlvbiA9IHtcbiAgb25IYXNoQ2FuZ2UoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCBuZXdIYXNoID0gZG9jdW1lbnQubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpO1xuICAgIGNvbnN0IGFjdGl2ZVNsaWRlSGFzaCA9IHN3aXBlci5zbGlkZXMuZXEoc3dpcGVyLmFjdGl2ZUluZGV4KS5hdHRyKCdkYXRhLWhhc2gnKTtcbiAgICBpZiAobmV3SGFzaCAhPT0gYWN0aXZlU2xpZGVIYXNoKSB7XG4gICAgICBjb25zdCBuZXdJbmRleCA9IHN3aXBlci4kd3JhcHBlckVsLmNoaWxkcmVuKGAuJHtzd2lwZXIucGFyYW1zLnNsaWRlQ2xhc3N9W2RhdGEtaGFzaD1cIiR7bmV3SGFzaH1cIl1gKS5pbmRleCgpO1xuICAgICAgaWYgKHR5cGVvZiBuZXdJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybjtcbiAgICAgIHN3aXBlci5zbGlkZVRvKG5ld0luZGV4KTtcbiAgICB9XG4gIH0sXG4gIHNldEhhc2goKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCB8fCAhc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi5lbmFibGVkKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24ucmVwbGFjZVN0YXRlICYmIHdpbmRvdy5oaXN0b3J5ICYmIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuICAgICAgd2luZG93Lmhpc3RvcnkucmVwbGFjZVN0YXRlKG51bGwsIG51bGwsIChgIyR7c3dpcGVyLnNsaWRlcy5lcShzd2lwZXIuYWN0aXZlSW5kZXgpLmF0dHIoJ2RhdGEtaGFzaCcpfWAgfHwgJycpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgICBjb25zdCBoYXNoID0gc2xpZGUuYXR0cignZGF0YS1oYXNoJykgfHwgc2xpZGUuYXR0cignZGF0YS1oaXN0b3J5Jyk7XG4gICAgICBkb2N1bWVudC5sb2NhdGlvbi5oYXNoID0gaGFzaCB8fCAnJztcbiAgICB9XG4gIH0sXG4gIGluaXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCB8fCAoc3dpcGVyLnBhcmFtcy5oaXN0b3J5ICYmIHN3aXBlci5wYXJhbXMuaGlzdG9yeS5lbmFibGVkKSkgcmV0dXJuO1xuICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5pbml0aWFsaXplZCA9IHRydWU7XG4gICAgY29uc3QgaGFzaCA9IGRvY3VtZW50LmxvY2F0aW9uLmhhc2gucmVwbGFjZSgnIycsICcnKTtcbiAgICBpZiAoaGFzaCkge1xuICAgICAgY29uc3Qgc3BlZWQgPSAwO1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHN3aXBlci5zbGlkZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgY29uc3Qgc2xpZGUgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgICBjb25zdCBzbGlkZUhhc2ggPSBzbGlkZS5hdHRyKCdkYXRhLWhhc2gnKSB8fCBzbGlkZS5hdHRyKCdkYXRhLWhpc3RvcnknKTtcbiAgICAgICAgaWYgKHNsaWRlSGFzaCA9PT0gaGFzaCAmJiAhc2xpZGUuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICAgIGNvbnN0IGluZGV4ID0gc2xpZGUuaW5kZXgoKTtcbiAgICAgICAgICBzd2lwZXIuc2xpZGVUbyhpbmRleCwgc3BlZWQsIHN3aXBlci5wYXJhbXMucnVuQ2FsbGJhY2tzT25Jbml0LCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5oYXNoTmF2aWdhdGlvbi53YXRjaFN0YXRlKSB7XG4gICAgICAkKHdpbmRvdykub24oJ2hhc2hjaGFuZ2UnLCBzd2lwZXIuaGFzaE5hdmlnYXRpb24ub25IYXNoQ2FuZ2UpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLndhdGNoU3RhdGUpIHtcbiAgICAgICQod2luZG93KS5vZmYoJ2hhc2hjaGFuZ2UnLCBzd2lwZXIuaGFzaE5hdmlnYXRpb24ub25IYXNoQ2FuZ2UpO1xuICAgIH1cbiAgfSxcbn07XG52YXIgaGFzaE5hdmlnYXRpb24gPSB7XG4gIG5hbWU6ICdoYXNoLW5hdmlnYXRpb24nLFxuICBwYXJhbXM6IHtcbiAgICBoYXNoTmF2aWdhdGlvbjoge1xuICAgICAgZW5hYmxlZDogZmFsc2UsXG4gICAgICByZXBsYWNlU3RhdGU6IGZhbHNlLFxuICAgICAgd2F0Y2hTdGF0ZTogZmFsc2UsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgaGFzaE5hdmlnYXRpb246IHtcbiAgICAgICAgaW5pdGlhbGl6ZWQ6IGZhbHNlLFxuICAgICAgICBpbml0OiBIYXNoTmF2aWdhdGlvbi5pbml0LmJpbmQoc3dpcGVyKSxcbiAgICAgICAgZGVzdHJveTogSGFzaE5hdmlnYXRpb24uZGVzdHJveS5iaW5kKHN3aXBlciksXG4gICAgICAgIHNldEhhc2g6IEhhc2hOYXZpZ2F0aW9uLnNldEhhc2guYmluZChzd2lwZXIpLFxuICAgICAgICBvbkhhc2hDYW5nZTogSGFzaE5hdmlnYXRpb24ub25IYXNoQ2FuZ2UuYmluZChzd2lwZXIpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBpbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmhhc2hOYXZpZ2F0aW9uLmVuYWJsZWQpIHtcbiAgICAgICAgc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLmluaXQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGRlc3Ryb3koKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuaGFzaE5hdmlnYXRpb24uZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuaGFzaE5hdmlnYXRpb24uZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdHJhbnNpdGlvbkVuZCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLmhhc2hOYXZpZ2F0aW9uLmluaXRpYWxpemVkKSB7XG4gICAgICAgIHN3aXBlci5oYXNoTmF2aWdhdGlvbi5zZXRIYXNoKCk7XG4gICAgICB9XG4gICAgfSxcbiAgfSxcbn07XG5cbi8qIGVzbGludCBuby11bmRlcnNjb3JlLWRhbmdsZTogXCJvZmZcIiAqL1xuXG5jb25zdCBBdXRvcGxheSA9IHtcbiAgcnVuKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgJGFjdGl2ZVNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKHN3aXBlci5hY3RpdmVJbmRleCk7XG4gICAgbGV0IGRlbGF5ID0gc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5kZWxheTtcbiAgICBpZiAoJGFjdGl2ZVNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItYXV0b3BsYXknKSkge1xuICAgICAgZGVsYXkgPSAkYWN0aXZlU2xpZGVFbC5hdHRyKCdkYXRhLXN3aXBlci1hdXRvcGxheScpIHx8IHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZGVsYXk7XG4gICAgfVxuICAgIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkudGltZW91dCk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgPSBVdGlscy5uZXh0VGljaygoKSA9PiB7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5hdXRvcGxheS5yZXZlcnNlRGlyZWN0aW9uKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmxvb3ApIHtcbiAgICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAgIHN3aXBlci5zbGlkZVByZXYoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5pc0JlZ2lubmluZykge1xuICAgICAgICAgIHN3aXBlci5zbGlkZVByZXYoc3dpcGVyLnBhcmFtcy5zcGVlZCwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgc3dpcGVyLmVtaXQoJ2F1dG9wbGF5Jyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgICAgc3dpcGVyLnNsaWRlVG8oc3dpcGVyLnNsaWRlcy5sZW5ndGggLSAxLCBzd2lwZXIucGFyYW1zLnNwZWVkLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5pc0VuZCkge1xuICAgICAgICBzd2lwZXIuc2xpZGVOZXh0KHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgIH0gZWxzZSBpZiAoIXN3aXBlci5wYXJhbXMuYXV0b3BsYXkuc3RvcE9uTGFzdFNsaWRlKSB7XG4gICAgICAgIHN3aXBlci5zbGlkZVRvKDAsIHN3aXBlci5wYXJhbXMuc3BlZWQsIHRydWUsIHRydWUpO1xuICAgICAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXknKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICB9XG4gICAgfSwgZGVsYXkpO1xuICB9LFxuICBzdGFydCgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm4gZmFsc2U7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSB0cnVlO1xuICAgIHN3aXBlci5lbWl0KCdhdXRvcGxheVN0YXJ0Jyk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bigpO1xuICAgIHJldHVybiB0cnVlO1xuICB9LFxuICBzdG9wKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgaWYgKCFzd2lwZXIuYXV0b3BsYXkucnVubmluZykgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh0eXBlb2Ygc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG5cbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpIHtcbiAgICAgIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkudGltZW91dCk7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkudGltZW91dCA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcgPSBmYWxzZTtcbiAgICBzd2lwZXIuZW1pdCgnYXV0b3BsYXlTdG9wJyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIHBhdXNlKHNwZWVkKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBpZiAoIXN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSByZXR1cm47XG4gICAgaWYgKHN3aXBlci5hdXRvcGxheS5wYXVzZWQpIHJldHVybjtcbiAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnRpbWVvdXQpIGNsZWFyVGltZW91dChzd2lwZXIuYXV0b3BsYXkudGltZW91dCk7XG4gICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IHRydWU7XG4gICAgaWYgKHNwZWVkID09PSAwIHx8ICFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LndhaXRGb3JUcmFuc2l0aW9uKSB7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2VkID0gZmFsc2U7XG4gICAgICBzd2lwZXIuYXV0b3BsYXkucnVuKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICB9XG4gIH0sXG59O1xuXG52YXIgYXV0b3BsYXkgPSB7XG4gIG5hbWU6ICdhdXRvcGxheScsXG4gIHBhcmFtczoge1xuICAgIGF1dG9wbGF5OiB7XG4gICAgICBlbmFibGVkOiBmYWxzZSxcbiAgICAgIGRlbGF5OiAzMDAwLFxuICAgICAgd2FpdEZvclRyYW5zaXRpb246IHRydWUsXG4gICAgICBkaXNhYmxlT25JbnRlcmFjdGlvbjogdHJ1ZSxcbiAgICAgIHN0b3BPbkxhc3RTbGlkZTogZmFsc2UsXG4gICAgICByZXZlcnNlRGlyZWN0aW9uOiBmYWxzZSxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBhdXRvcGxheToge1xuICAgICAgICBydW5uaW5nOiBmYWxzZSxcbiAgICAgICAgcGF1c2VkOiBmYWxzZSxcbiAgICAgICAgcnVuOiBBdXRvcGxheS5ydW4uYmluZChzd2lwZXIpLFxuICAgICAgICBzdGFydDogQXV0b3BsYXkuc3RhcnQuYmluZChzd2lwZXIpLFxuICAgICAgICBzdG9wOiBBdXRvcGxheS5zdG9wLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgcGF1c2U6IEF1dG9wbGF5LnBhdXNlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgb25UcmFuc2l0aW9uRW5kKGUpIHtcbiAgICAgICAgICBpZiAoIXN3aXBlciB8fCBzd2lwZXIuZGVzdHJveWVkIHx8ICFzd2lwZXIuJHdyYXBwZXJFbCkgcmV0dXJuO1xuICAgICAgICAgIGlmIChlLnRhcmdldCAhPT0gdGhpcykgcmV0dXJuO1xuICAgICAgICAgIHN3aXBlci4kd3JhcHBlckVsWzBdLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQnLCBzd2lwZXIuYXV0b3BsYXkub25UcmFuc2l0aW9uRW5kKTtcbiAgICAgICAgICBzd2lwZXIuJHdyYXBwZXJFbFswXS5yZW1vdmVFdmVudExpc3RlbmVyKCd3ZWJraXRUcmFuc2l0aW9uRW5kJywgc3dpcGVyLmF1dG9wbGF5Lm9uVHJhbnNpdGlvbkVuZCk7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICAgIGlmICghc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5zdG9wKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN3aXBlci5hdXRvcGxheS5ydW4oKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuYXV0b3BsYXkuZW5hYmxlZCkge1xuICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RhcnQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZVRyYW5zaXRpb25TdGFydChzcGVlZCwgaW50ZXJuYWwpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgaWYgKGludGVybmFsIHx8ICFzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnBhdXNlKHNwZWVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkuc3RvcCgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzbGlkZXJGaXJzdE1vdmUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5hdXRvcGxheS5ydW5uaW5nKSB7XG4gICAgICAgIGlmIChzd2lwZXIucGFyYW1zLmF1dG9wbGF5LmRpc2FibGVPbkludGVyYWN0aW9uKSB7XG4gICAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzd2lwZXIuYXV0b3BsYXkucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLmF1dG9wbGF5LnJ1bm5pbmcpIHtcbiAgICAgICAgc3dpcGVyLmF1dG9wbGF5LnN0b3AoKTtcbiAgICAgIH1cbiAgICB9LFxuICB9LFxufTtcblxuY29uc3QgRmFkZSA9IHtcbiAgc2V0VHJhbnNsYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyBzbGlkZXMgfSA9IHN3aXBlcjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgJHNsaWRlRWwgPSBzd2lwZXIuc2xpZGVzLmVxKGkpO1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICBsZXQgdHggPSAtb2Zmc2V0O1xuICAgICAgaWYgKCFzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUpIHR4IC09IHN3aXBlci50cmFuc2xhdGU7XG4gICAgICBsZXQgdHkgPSAwO1xuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgdHggPSAwO1xuICAgICAgfVxuICAgICAgY29uc3Qgc2xpZGVPcGFjaXR5ID0gc3dpcGVyLnBhcmFtcy5mYWRlRWZmZWN0LmNyb3NzRmFkZVxuICAgICAgICA/IE1hdGgubWF4KDEgLSBNYXRoLmFicygkc2xpZGVFbFswXS5wcm9ncmVzcyksIDApXG4gICAgICAgIDogMSArIE1hdGgubWluKE1hdGgubWF4KCRzbGlkZUVsWzBdLnByb2dyZXNzLCAtMSksIDApO1xuICAgICAgJHNsaWRlRWxcbiAgICAgICAgLmNzcyh7XG4gICAgICAgICAgb3BhY2l0eTogc2xpZGVPcGFjaXR5LFxuICAgICAgICB9KVxuICAgICAgICAudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke3R4fXB4LCAke3R5fXB4LCAwcHgpYCk7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNsaWRlcywgJHdyYXBwZXJFbCB9ID0gc3dpcGVyO1xuICAgIHNsaWRlcy50cmFuc2l0aW9uKGR1cmF0aW9uKTtcbiAgICBpZiAoc3dpcGVyLnBhcmFtcy52aXJ0dWFsVHJhbnNsYXRlICYmIGR1cmF0aW9uICE9PSAwKSB7XG4gICAgICBsZXQgZXZlbnRUcmlnZ2VyZWQgPSBmYWxzZTtcbiAgICAgIHNsaWRlcy50cmFuc2l0aW9uRW5kKCgpID0+IHtcbiAgICAgICAgaWYgKGV2ZW50VHJpZ2dlcmVkKSByZXR1cm47XG4gICAgICAgIGlmICghc3dpcGVyIHx8IHN3aXBlci5kZXN0cm95ZWQpIHJldHVybjtcbiAgICAgICAgZXZlbnRUcmlnZ2VyZWQgPSB0cnVlO1xuICAgICAgICBzd2lwZXIuYW5pbWF0aW5nID0gZmFsc2U7XG4gICAgICAgIGNvbnN0IHRyaWdnZXJFdmVudHMgPSBbJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCAndHJhbnNpdGlvbmVuZCddO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyaWdnZXJFdmVudHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAkd3JhcHBlckVsLnRyaWdnZXIodHJpZ2dlckV2ZW50c1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfSxcbn07XG5cbnZhciBlZmZlY3RGYWRlID0ge1xuICBuYW1lOiAnZWZmZWN0LWZhZGUnLFxuICBwYXJhbXM6IHtcbiAgICBmYWRlRWZmZWN0OiB7XG4gICAgICBjcm9zc0ZhZGU6IGZhbHNlLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGZhZGVFZmZlY3Q6IHtcbiAgICAgICAgc2V0VHJhbnNsYXRlOiBGYWRlLnNldFRyYW5zbGF0ZS5iaW5kKHN3aXBlciksXG4gICAgICAgIHNldFRyYW5zaXRpb246IEZhZGUuc2V0VHJhbnNpdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmFkZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfWZhZGVgKTtcbiAgICAgIGNvbnN0IG92ZXJ3cml0ZVBhcmFtcyA9IHtcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiB0cnVlLFxuICAgICAgfTtcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmYWRlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmZhZGVFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmFkZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5mYWRlRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBDdWJlID0ge1xuICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7XG4gICAgICAkZWwsICR3cmFwcGVyRWwsIHNsaWRlcywgd2lkdGg6IHN3aXBlcldpZHRoLCBoZWlnaHQ6IHN3aXBlckhlaWdodCwgcnRsVHJhbnNsYXRlOiBydGwsIHNpemU6IHN3aXBlclNpemUsXG4gICAgfSA9IHN3aXBlcjtcbiAgICBjb25zdCBwYXJhbXMgPSBzd2lwZXIucGFyYW1zLmN1YmVFZmZlY3Q7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IGlzVmlydHVhbCA9IHN3aXBlci52aXJ0dWFsICYmIHN3aXBlci5wYXJhbXMudmlydHVhbC5lbmFibGVkO1xuICAgIGxldCB3cmFwcGVyUm90YXRlID0gMDtcbiAgICBsZXQgJGN1YmVTaGFkb3dFbDtcbiAgICBpZiAocGFyYW1zLnNoYWRvdykge1xuICAgICAgaWYgKGlzSG9yaXpvbnRhbCkge1xuICAgICAgICAkY3ViZVNoYWRvd0VsID0gJHdyYXBwZXJFbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93Jyk7XG4gICAgICAgIGlmICgkY3ViZVNoYWRvd0VsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICRjdWJlU2hhZG93RWwgPSAkKCc8ZGl2IGNsYXNzPVwic3dpcGVyLWN1YmUtc2hhZG93XCI+PC9kaXY+Jyk7XG4gICAgICAgICAgJHdyYXBwZXJFbC5hcHBlbmQoJGN1YmVTaGFkb3dFbCk7XG4gICAgICAgIH1cbiAgICAgICAgJGN1YmVTaGFkb3dFbC5jc3MoeyBoZWlnaHQ6IGAke3N3aXBlcldpZHRofXB4YCB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRjdWJlU2hhZG93RWwgPSAkZWwuZmluZCgnLnN3aXBlci1jdWJlLXNoYWRvdycpO1xuICAgICAgICBpZiAoJGN1YmVTaGFkb3dFbC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAkY3ViZVNoYWRvd0VsID0gJCgnPGRpdiBjbGFzcz1cInN3aXBlci1jdWJlLXNoYWRvd1wiPjwvZGl2PicpO1xuICAgICAgICAgICRlbC5hcHBlbmQoJGN1YmVTaGFkb3dFbCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzbGlkZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGNvbnN0ICRzbGlkZUVsID0gc2xpZGVzLmVxKGkpO1xuICAgICAgbGV0IHNsaWRlSW5kZXggPSBpO1xuICAgICAgaWYgKGlzVmlydHVhbCkge1xuICAgICAgICBzbGlkZUluZGV4ID0gcGFyc2VJbnQoJHNsaWRlRWwuYXR0cignZGF0YS1zd2lwZXItc2xpZGUtaW5kZXgnKSwgMTApO1xuICAgICAgfVxuICAgICAgbGV0IHNsaWRlQW5nbGUgPSBzbGlkZUluZGV4ICogOTA7XG4gICAgICBsZXQgcm91bmQgPSBNYXRoLmZsb29yKHNsaWRlQW5nbGUgLyAzNjApO1xuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICBzbGlkZUFuZ2xlID0gLXNsaWRlQW5nbGU7XG4gICAgICAgIHJvdW5kID0gTWF0aC5mbG9vcigtc2xpZGVBbmdsZSAvIDM2MCk7XG4gICAgICB9XG4gICAgICBjb25zdCBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCRzbGlkZUVsWzBdLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgbGV0IHR4ID0gMDtcbiAgICAgIGxldCB0eSA9IDA7XG4gICAgICBsZXQgdHogPSAwO1xuICAgICAgaWYgKHNsaWRlSW5kZXggJSA0ID09PSAwKSB7XG4gICAgICAgIHR4ID0gLXJvdW5kICogNCAqIHN3aXBlclNpemU7XG4gICAgICAgIHR6ID0gMDtcbiAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAxKSAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAwO1xuICAgICAgICB0eiA9IC1yb3VuZCAqIDQgKiBzd2lwZXJTaXplO1xuICAgICAgfSBlbHNlIGlmICgoc2xpZGVJbmRleCAtIDIpICUgNCA9PT0gMCkge1xuICAgICAgICB0eCA9IHN3aXBlclNpemUgKyAocm91bmQgKiA0ICogc3dpcGVyU2l6ZSk7XG4gICAgICAgIHR6ID0gc3dpcGVyU2l6ZTtcbiAgICAgIH0gZWxzZSBpZiAoKHNsaWRlSW5kZXggLSAzKSAlIDQgPT09IDApIHtcbiAgICAgICAgdHggPSAtc3dpcGVyU2l6ZTtcbiAgICAgICAgdHogPSAoMyAqIHN3aXBlclNpemUpICsgKHN3aXBlclNpemUgKiA0ICogcm91bmQpO1xuICAgICAgfVxuICAgICAgaWYgKHJ0bCkge1xuICAgICAgICB0eCA9IC10eDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc0hvcml6b250YWwpIHtcbiAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgdHggPSAwO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0cmFuc2Zvcm0gPSBgcm90YXRlWCgke2lzSG9yaXpvbnRhbCA/IDAgOiAtc2xpZGVBbmdsZX1kZWcpIHJvdGF0ZVkoJHtpc0hvcml6b250YWwgPyBzbGlkZUFuZ2xlIDogMH1kZWcpIHRyYW5zbGF0ZTNkKCR7dHh9cHgsICR7dHl9cHgsICR7dHp9cHgpYDtcbiAgICAgIGlmIChwcm9ncmVzcyA8PSAxICYmIHByb2dyZXNzID4gLTEpIHtcbiAgICAgICAgd3JhcHBlclJvdGF0ZSA9IChzbGlkZUluZGV4ICogOTApICsgKHByb2dyZXNzICogOTApO1xuICAgICAgICBpZiAocnRsKSB3cmFwcGVyUm90YXRlID0gKC1zbGlkZUluZGV4ICogOTApIC0gKHByb2dyZXNzICogOTApO1xuICAgICAgfVxuICAgICAgJHNsaWRlRWwudHJhbnNmb3JtKHRyYW5zZm9ybSk7XG4gICAgICBpZiAocGFyYW1zLnNsaWRlU2hhZG93cykge1xuICAgICAgICAvLyBTZXQgc2hhZG93c1xuICAgICAgICBsZXQgc2hhZG93QmVmb3JlID0gaXNIb3Jpem9udGFsID8gJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctbGVmdCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctdG9wJyk7XG4gICAgICAgIGxldCBzaGFkb3dBZnRlciA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0JykgOiAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20nKTtcbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBzaGFkb3dCZWZvcmUgPSAkKGA8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0ke2lzSG9yaXpvbnRhbCA/ICdsZWZ0JyA6ICd0b3AnfVwiPjwvZGl2PmApO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZChzaGFkb3dCZWZvcmUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBzaGFkb3dBZnRlciA9ICQoYDxkaXYgY2xhc3M9XCJzd2lwZXItc2xpZGUtc2hhZG93LSR7aXNIb3Jpem9udGFsID8gJ3JpZ2h0JyA6ICdib3R0b20nfVwiPjwvZGl2PmApO1xuICAgICAgICAgICRzbGlkZUVsLmFwcGVuZChzaGFkb3dBZnRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNoYWRvd0JlZm9yZS5sZW5ndGgpIHNoYWRvd0JlZm9yZVswXS5zdHlsZS5vcGFjaXR5ID0gTWF0aC5tYXgoLXByb2dyZXNzLCAwKTtcbiAgICAgICAgaWYgKHNoYWRvd0FmdGVyLmxlbmd0aCkgc2hhZG93QWZ0ZXJbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KHByb2dyZXNzLCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgJHdyYXBwZXJFbC5jc3Moe1xuICAgICAgJy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbic6IGA1MCUgNTAlIC0ke3N3aXBlclNpemUgLyAyfXB4YCxcbiAgICAgICctbW96LXRyYW5zZm9ybS1vcmlnaW4nOiBgNTAlIDUwJSAtJHtzd2lwZXJTaXplIC8gMn1weGAsXG4gICAgICAnLW1zLXRyYW5zZm9ybS1vcmlnaW4nOiBgNTAlIDUwJSAtJHtzd2lwZXJTaXplIC8gMn1weGAsXG4gICAgICAndHJhbnNmb3JtLW9yaWdpbic6IGA1MCUgNTAlIC0ke3N3aXBlclNpemUgLyAyfXB4YCxcbiAgICB9KTtcblxuICAgIGlmIChwYXJhbXMuc2hhZG93KSB7XG4gICAgICBpZiAoaXNIb3Jpem9udGFsKSB7XG4gICAgICAgICRjdWJlU2hhZG93RWwudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwcHgsICR7KHN3aXBlcldpZHRoIC8gMikgKyBwYXJhbXMuc2hhZG93T2Zmc2V0fXB4LCAkey1zd2lwZXJXaWR0aCAvIDJ9cHgpIHJvdGF0ZVgoOTBkZWcpIHJvdGF0ZVooMGRlZykgc2NhbGUoJHtwYXJhbXMuc2hhZG93U2NhbGV9KWApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2hhZG93QW5nbGUgPSBNYXRoLmFicyh3cmFwcGVyUm90YXRlKSAtIChNYXRoLmZsb29yKE1hdGguYWJzKHdyYXBwZXJSb3RhdGUpIC8gOTApICogOTApO1xuICAgICAgICBjb25zdCBtdWx0aXBsaWVyID0gMS41IC0gKFxuICAgICAgICAgIChNYXRoLnNpbigoc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSkgLyAzNjApIC8gMilcbiAgICAgICAgICArIChNYXRoLmNvcygoc2hhZG93QW5nbGUgKiAyICogTWF0aC5QSSkgLyAzNjApIC8gMilcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3Qgc2NhbGUxID0gcGFyYW1zLnNoYWRvd1NjYWxlO1xuICAgICAgICBjb25zdCBzY2FsZTIgPSBwYXJhbXMuc2hhZG93U2NhbGUgLyBtdWx0aXBsaWVyO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBwYXJhbXMuc2hhZG93T2Zmc2V0O1xuICAgICAgICAkY3ViZVNoYWRvd0VsLnRyYW5zZm9ybShgc2NhbGUzZCgke3NjYWxlMX0sIDEsICR7c2NhbGUyfSkgdHJhbnNsYXRlM2QoMHB4LCAkeyhzd2lwZXJIZWlnaHQgLyAyKSArIG9mZnNldH1weCwgJHstc3dpcGVySGVpZ2h0IC8gMiAvIHNjYWxlMn1weCkgcm90YXRlWCgtOTBkZWcpYCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHpGYWN0b3IgPSAoQnJvd3Nlci5pc1NhZmFyaSB8fCBCcm93c2VyLmlzVWlXZWJWaWV3KSA/ICgtc3dpcGVyU2l6ZSAvIDIpIDogMDtcbiAgICAkd3JhcHBlckVsXG4gICAgICAudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgwcHgsMCwke3pGYWN0b3J9cHgpIHJvdGF0ZVgoJHtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAwIDogd3JhcHBlclJvdGF0ZX1kZWcpIHJvdGF0ZVkoJHtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAtd3JhcHBlclJvdGF0ZSA6IDB9ZGVnKWApO1xuICB9LFxuICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7ICRlbCwgc2xpZGVzIH0gPSBzd2lwZXI7XG4gICAgc2xpZGVzXG4gICAgICAudHJhbnNpdGlvbihkdXJhdGlvbilcbiAgICAgIC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKVxuICAgICAgLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLmN1YmVFZmZlY3Quc2hhZG93ICYmICFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICRlbC5maW5kKCcuc3dpcGVyLWN1YmUtc2hhZG93JykudHJhbnNpdGlvbihkdXJhdGlvbik7XG4gICAgfVxuICB9LFxufTtcblxudmFyIGVmZmVjdEN1YmUgPSB7XG4gIG5hbWU6ICdlZmZlY3QtY3ViZScsXG4gIHBhcmFtczoge1xuICAgIGN1YmVFZmZlY3Q6IHtcbiAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcbiAgICAgIHNoYWRvdzogdHJ1ZSxcbiAgICAgIHNoYWRvd09mZnNldDogMjAsXG4gICAgICBzaGFkb3dTY2FsZTogMC45NCxcbiAgICB9LFxuICB9LFxuICBjcmVhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBVdGlscy5leHRlbmQoc3dpcGVyLCB7XG4gICAgICBjdWJlRWZmZWN0OiB7XG4gICAgICAgIHNldFRyYW5zbGF0ZTogQ3ViZS5zZXRUcmFuc2xhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2l0aW9uOiBDdWJlLnNldFRyYW5zaXRpb24uYmluZChzd2lwZXIpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmVmZmVjdCAhPT0gJ2N1YmUnKSByZXR1cm47XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31jdWJlYCk7XG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc30zZGApO1xuICAgICAgY29uc3Qgb3ZlcndyaXRlUGFyYW1zID0ge1xuICAgICAgICBzbGlkZXNQZXJWaWV3OiAxLFxuICAgICAgICBzbGlkZXNQZXJDb2x1bW46IDEsXG4gICAgICAgIHNsaWRlc1Blckdyb3VwOiAxLFxuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICByZXNpc3RhbmNlUmF0aW86IDAsXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMCxcbiAgICAgICAgY2VudGVyZWRTbGlkZXM6IGZhbHNlLFxuICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiB0cnVlLFxuICAgICAgfTtcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjdWJlJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmN1YmVFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY3ViZScpIHJldHVybjtcbiAgICAgIHN3aXBlci5jdWJlRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBGbGlwID0ge1xuICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHNsaWRlcywgcnRsVHJhbnNsYXRlOiBydGwgfSA9IHN3aXBlcjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNsaWRlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICBsZXQgcHJvZ3Jlc3MgPSAkc2xpZGVFbFswXS5wcm9ncmVzcztcbiAgICAgIGlmIChzd2lwZXIucGFyYW1zLmZsaXBFZmZlY3QubGltaXRSb3RhdGlvbikge1xuICAgICAgICBwcm9ncmVzcyA9IE1hdGgubWF4KE1hdGgubWluKCRzbGlkZUVsWzBdLnByb2dyZXNzLCAxKSwgLTEpO1xuICAgICAgfVxuICAgICAgY29uc3Qgb2Zmc2V0ID0gJHNsaWRlRWxbMF0uc3dpcGVyU2xpZGVPZmZzZXQ7XG4gICAgICBjb25zdCByb3RhdGUgPSAtMTgwICogcHJvZ3Jlc3M7XG4gICAgICBsZXQgcm90YXRlWSA9IHJvdGF0ZTtcbiAgICAgIGxldCByb3RhdGVYID0gMDtcbiAgICAgIGxldCB0eCA9IC1vZmZzZXQ7XG4gICAgICBsZXQgdHkgPSAwO1xuICAgICAgaWYgKCFzd2lwZXIuaXNIb3Jpem9udGFsKCkpIHtcbiAgICAgICAgdHkgPSB0eDtcbiAgICAgICAgdHggPSAwO1xuICAgICAgICByb3RhdGVYID0gLXJvdGF0ZVk7XG4gICAgICAgIHJvdGF0ZVkgPSAwO1xuICAgICAgfSBlbHNlIGlmIChydGwpIHtcbiAgICAgICAgcm90YXRlWSA9IC1yb3RhdGVZO1xuICAgICAgfVxuXG4gICAgICAkc2xpZGVFbFswXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChwcm9ncmVzcykpICsgc2xpZGVzLmxlbmd0aDtcblxuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZmxpcEVmZmVjdC5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgbGV0IHNoYWRvd0JlZm9yZSA9IHN3aXBlci5pc0hvcml6b250YWwoKSA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICBsZXQgc2hhZG93QWZ0ZXIgPSBzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hhZG93QmVmb3JlID0gJChgPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3ctJHtzd2lwZXIuaXNIb3Jpem9udGFsKCkgPyAnbGVmdCcgOiAndG9wJ31cIj48L2Rpdj5gKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QmVmb3JlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hhZG93QWZ0ZXIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgc2hhZG93QWZ0ZXIgPSAkKGA8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0ke3N3aXBlci5pc0hvcml6b250YWwoKSA/ICdyaWdodCcgOiAnYm90dG9tJ31cIj48L2Rpdj5gKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoc2hhZG93QWZ0ZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzaGFkb3dCZWZvcmUubGVuZ3RoKSBzaGFkb3dCZWZvcmVbMF0uc3R5bGUub3BhY2l0eSA9IE1hdGgubWF4KC1wcm9ncmVzcywgMCk7XG4gICAgICAgIGlmIChzaGFkb3dBZnRlci5sZW5ndGgpIHNoYWRvd0FmdGVyWzBdLnN0eWxlLm9wYWNpdHkgPSBNYXRoLm1heChwcm9ncmVzcywgMCk7XG4gICAgICB9XG4gICAgICAkc2xpZGVFbFxuICAgICAgICAudHJhbnNmb3JtKGB0cmFuc2xhdGUzZCgke3R4fXB4LCAke3R5fXB4LCAwcHgpIHJvdGF0ZVgoJHtyb3RhdGVYfWRlZykgcm90YXRlWSgke3JvdGF0ZVl9ZGVnKWApO1xuICAgIH1cbiAgfSxcbiAgc2V0VHJhbnNpdGlvbihkdXJhdGlvbikge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgY29uc3QgeyBzbGlkZXMsIGFjdGl2ZUluZGV4LCAkd3JhcHBlckVsIH0gPSBzd2lwZXI7XG4gICAgc2xpZGVzXG4gICAgICAudHJhbnNpdGlvbihkdXJhdGlvbilcbiAgICAgIC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKVxuICAgICAgLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIGlmIChzd2lwZXIucGFyYW1zLnZpcnR1YWxUcmFuc2xhdGUgJiYgZHVyYXRpb24gIT09IDApIHtcbiAgICAgIGxldCBldmVudFRyaWdnZXJlZCA9IGZhbHNlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICBzbGlkZXMuZXEoYWN0aXZlSW5kZXgpLnRyYW5zaXRpb25FbmQoZnVuY3Rpb24gb25UcmFuc2l0aW9uRW5kKCkge1xuICAgICAgICBpZiAoZXZlbnRUcmlnZ2VyZWQpIHJldHVybjtcbiAgICAgICAgaWYgKCFzd2lwZXIgfHwgc3dpcGVyLmRlc3Ryb3llZCkgcmV0dXJuO1xuICAgICAgICAvLyBpZiAoISQodGhpcykuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUFjdGl2ZUNsYXNzKSkgcmV0dXJuO1xuICAgICAgICBldmVudFRyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgIHN3aXBlci5hbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgdHJpZ2dlckV2ZW50cyA9IFsnd2Via2l0VHJhbnNpdGlvbkVuZCcsICd0cmFuc2l0aW9uZW5kJ107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJpZ2dlckV2ZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICR3cmFwcGVyRWwudHJpZ2dlcih0cmlnZ2VyRXZlbnRzW2ldKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LFxufTtcblxudmFyIGVmZmVjdEZsaXAgPSB7XG4gIG5hbWU6ICdlZmZlY3QtZmxpcCcsXG4gIHBhcmFtczoge1xuICAgIGZsaXBFZmZlY3Q6IHtcbiAgICAgIHNsaWRlU2hhZG93czogdHJ1ZSxcbiAgICAgIGxpbWl0Um90YXRpb246IHRydWUsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgZmxpcEVmZmVjdDoge1xuICAgICAgICBzZXRUcmFuc2xhdGU6IEZsaXAuc2V0VHJhbnNsYXRlLmJpbmQoc3dpcGVyKSxcbiAgICAgICAgc2V0VHJhbnNpdGlvbjogRmxpcC5zZXRUcmFuc2l0aW9uLmJpbmQoc3dpcGVyKSxcbiAgICAgIH0sXG4gICAgfSk7XG4gIH0sXG4gIG9uOiB7XG4gICAgYmVmb3JlSW5pdCgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmbGlwJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9ZmxpcGApO1xuICAgICAgc3dpcGVyLmNsYXNzTmFtZXMucHVzaChgJHtzd2lwZXIucGFyYW1zLmNvbnRhaW5lck1vZGlmaWVyQ2xhc3N9M2RgKTtcbiAgICAgIGNvbnN0IG92ZXJ3cml0ZVBhcmFtcyA9IHtcbiAgICAgICAgc2xpZGVzUGVyVmlldzogMSxcbiAgICAgICAgc2xpZGVzUGVyQ29sdW1uOiAxLFxuICAgICAgICBzbGlkZXNQZXJHcm91cDogMSxcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcbiAgICAgICAgc3BhY2VCZXR3ZWVuOiAwLFxuICAgICAgICB2aXJ0dWFsVHJhbnNsYXRlOiB0cnVlLFxuICAgICAgfTtcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIucGFyYW1zLCBvdmVyd3JpdGVQYXJhbXMpO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci5vcmlnaW5hbFBhcmFtcywgb3ZlcndyaXRlUGFyYW1zKTtcbiAgICB9LFxuICAgIHNldFRyYW5zbGF0ZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdmbGlwJykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmZsaXBFZmZlY3Quc2V0VHJhbnNsYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnZmxpcCcpIHJldHVybjtcbiAgICAgIHN3aXBlci5mbGlwRWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBDb3ZlcmZsb3cgPSB7XG4gIHNldFRyYW5zbGF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIGNvbnN0IHtcbiAgICAgIHdpZHRoOiBzd2lwZXJXaWR0aCwgaGVpZ2h0OiBzd2lwZXJIZWlnaHQsIHNsaWRlcywgJHdyYXBwZXJFbCwgc2xpZGVzU2l6ZXNHcmlkLFxuICAgIH0gPSBzd2lwZXI7XG4gICAgY29uc3QgcGFyYW1zID0gc3dpcGVyLnBhcmFtcy5jb3ZlcmZsb3dFZmZlY3Q7XG4gICAgY29uc3QgaXNIb3Jpem9udGFsID0gc3dpcGVyLmlzSG9yaXpvbnRhbCgpO1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IHN3aXBlci50cmFuc2xhdGU7XG4gICAgY29uc3QgY2VudGVyID0gaXNIb3Jpem9udGFsID8gLXRyYW5zZm9ybSArIChzd2lwZXJXaWR0aCAvIDIpIDogLXRyYW5zZm9ybSArIChzd2lwZXJIZWlnaHQgLyAyKTtcbiAgICBjb25zdCByb3RhdGUgPSBpc0hvcml6b250YWwgPyBwYXJhbXMucm90YXRlIDogLXBhcmFtcy5yb3RhdGU7XG4gICAgY29uc3QgdHJhbnNsYXRlID0gcGFyYW1zLmRlcHRoO1xuICAgIC8vIEVhY2ggc2xpZGUgb2Zmc2V0IGZyb20gY2VudGVyXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbmd0aCA9IHNsaWRlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgICAgY29uc3QgJHNsaWRlRWwgPSBzbGlkZXMuZXEoaSk7XG4gICAgICBjb25zdCBzbGlkZVNpemUgPSBzbGlkZXNTaXplc0dyaWRbaV07XG4gICAgICBjb25zdCBzbGlkZU9mZnNldCA9ICRzbGlkZUVsWzBdLnN3aXBlclNsaWRlT2Zmc2V0O1xuICAgICAgY29uc3Qgb2Zmc2V0TXVsdGlwbGllciA9ICgoY2VudGVyIC0gc2xpZGVPZmZzZXQgLSAoc2xpZGVTaXplIC8gMikpIC8gc2xpZGVTaXplKSAqIHBhcmFtcy5tb2RpZmllcjtcblxuICAgICAgbGV0IHJvdGF0ZVkgPSBpc0hvcml6b250YWwgPyByb3RhdGUgKiBvZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgIGxldCByb3RhdGVYID0gaXNIb3Jpem9udGFsID8gMCA6IHJvdGF0ZSAqIG9mZnNldE11bHRpcGxpZXI7XG4gICAgICAvLyB2YXIgcm90YXRlWiA9IDBcbiAgICAgIGxldCB0cmFuc2xhdGVaID0gLXRyYW5zbGF0ZSAqIE1hdGguYWJzKG9mZnNldE11bHRpcGxpZXIpO1xuXG4gICAgICBsZXQgdHJhbnNsYXRlWSA9IGlzSG9yaXpvbnRhbCA/IDAgOiBwYXJhbXMuc3RyZXRjaCAqIChvZmZzZXRNdWx0aXBsaWVyKTtcbiAgICAgIGxldCB0cmFuc2xhdGVYID0gaXNIb3Jpem9udGFsID8gcGFyYW1zLnN0cmV0Y2ggKiAob2Zmc2V0TXVsdGlwbGllcikgOiAwO1xuXG4gICAgICAvLyBGaXggZm9yIHVsdHJhIHNtYWxsIHZhbHVlc1xuICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVgpIDwgMC4wMDEpIHRyYW5zbGF0ZVggPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVkpIDwgMC4wMDEpIHRyYW5zbGF0ZVkgPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHRyYW5zbGF0ZVopIDwgMC4wMDEpIHRyYW5zbGF0ZVogPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVkpIDwgMC4wMDEpIHJvdGF0ZVkgPSAwO1xuICAgICAgaWYgKE1hdGguYWJzKHJvdGF0ZVgpIDwgMC4wMDEpIHJvdGF0ZVggPSAwO1xuXG4gICAgICBjb25zdCBzbGlkZVRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgke3RyYW5zbGF0ZVh9cHgsJHt0cmFuc2xhdGVZfXB4LCR7dHJhbnNsYXRlWn1weCkgIHJvdGF0ZVgoJHtyb3RhdGVYfWRlZykgcm90YXRlWSgke3JvdGF0ZVl9ZGVnKWA7XG5cbiAgICAgICRzbGlkZUVsLnRyYW5zZm9ybShzbGlkZVRyYW5zZm9ybSk7XG4gICAgICAkc2xpZGVFbFswXS5zdHlsZS56SW5kZXggPSAtTWF0aC5hYnMoTWF0aC5yb3VuZChvZmZzZXRNdWx0aXBsaWVyKSkgKyAxO1xuICAgICAgaWYgKHBhcmFtcy5zbGlkZVNoYWRvd3MpIHtcbiAgICAgICAgLy8gU2V0IHNoYWRvd3NcbiAgICAgICAgbGV0ICRzaGFkb3dCZWZvcmVFbCA9IGlzSG9yaXpvbnRhbCA/ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKSA6ICRzbGlkZUVsLmZpbmQoJy5zd2lwZXItc2xpZGUtc2hhZG93LXRvcCcpO1xuICAgICAgICBsZXQgJHNoYWRvd0FmdGVyRWwgPSBpc0hvcml6b250YWwgPyAkc2xpZGVFbC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy1yaWdodCcpIDogJHNsaWRlRWwuZmluZCgnLnN3aXBlci1zbGlkZS1zaGFkb3ctYm90dG9tJyk7XG4gICAgICAgIGlmICgkc2hhZG93QmVmb3JlRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJHNoYWRvd0JlZm9yZUVsID0gJChgPGRpdiBjbGFzcz1cInN3aXBlci1zbGlkZS1zaGFkb3ctJHtpc0hvcml6b250YWwgPyAnbGVmdCcgOiAndG9wJ31cIj48L2Rpdj5gKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoJHNoYWRvd0JlZm9yZUVsKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoJHNoYWRvd0FmdGVyRWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgJHNoYWRvd0FmdGVyRWwgPSAkKGA8ZGl2IGNsYXNzPVwic3dpcGVyLXNsaWRlLXNoYWRvdy0ke2lzSG9yaXpvbnRhbCA/ICdyaWdodCcgOiAnYm90dG9tJ31cIj48L2Rpdj5gKTtcbiAgICAgICAgICAkc2xpZGVFbC5hcHBlbmQoJHNoYWRvd0FmdGVyRWwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICgkc2hhZG93QmVmb3JlRWwubGVuZ3RoKSAkc2hhZG93QmVmb3JlRWxbMF0uc3R5bGUub3BhY2l0eSA9IG9mZnNldE11bHRpcGxpZXIgPiAwID8gb2Zmc2V0TXVsdGlwbGllciA6IDA7XG4gICAgICAgIGlmICgkc2hhZG93QWZ0ZXJFbC5sZW5ndGgpICRzaGFkb3dBZnRlckVsWzBdLnN0eWxlLm9wYWNpdHkgPSAoLW9mZnNldE11bHRpcGxpZXIpID4gMCA/IC1vZmZzZXRNdWx0aXBsaWVyIDogMDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBTZXQgY29ycmVjdCBwZXJzcGVjdGl2ZSBmb3IgSUUxMFxuICAgIGlmIChTdXBwb3J0LnBvaW50ZXJFdmVudHMgfHwgU3VwcG9ydC5wcmVmaXhlZFBvaW50ZXJFdmVudHMpIHtcbiAgICAgIGNvbnN0IHdzID0gJHdyYXBwZXJFbFswXS5zdHlsZTtcbiAgICAgIHdzLnBlcnNwZWN0aXZlT3JpZ2luID0gYCR7Y2VudGVyfXB4IDUwJWA7XG4gICAgfVxuICB9LFxuICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBzd2lwZXIuc2xpZGVzXG4gICAgICAudHJhbnNpdGlvbihkdXJhdGlvbilcbiAgICAgIC5maW5kKCcuc3dpcGVyLXNsaWRlLXNoYWRvdy10b3AsIC5zd2lwZXItc2xpZGUtc2hhZG93LXJpZ2h0LCAuc3dpcGVyLXNsaWRlLXNoYWRvdy1ib3R0b20sIC5zd2lwZXItc2xpZGUtc2hhZG93LWxlZnQnKVxuICAgICAgLnRyYW5zaXRpb24oZHVyYXRpb24pO1xuICB9LFxufTtcblxudmFyIGVmZmVjdENvdmVyZmxvdyA9IHtcbiAgbmFtZTogJ2VmZmVjdC1jb3ZlcmZsb3cnLFxuICBwYXJhbXM6IHtcbiAgICBjb3ZlcmZsb3dFZmZlY3Q6IHtcbiAgICAgIHJvdGF0ZTogNTAsXG4gICAgICBzdHJldGNoOiAwLFxuICAgICAgZGVwdGg6IDEwMCxcbiAgICAgIG1vZGlmaWVyOiAxLFxuICAgICAgc2xpZGVTaGFkb3dzOiB0cnVlLFxuICAgIH0sXG4gIH0sXG4gIGNyZWF0ZSgpIHtcbiAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgIFV0aWxzLmV4dGVuZChzd2lwZXIsIHtcbiAgICAgIGNvdmVyZmxvd0VmZmVjdDoge1xuICAgICAgICBzZXRUcmFuc2xhdGU6IENvdmVyZmxvdy5zZXRUcmFuc2xhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICBzZXRUcmFuc2l0aW9uOiBDb3ZlcmZsb3cuc2V0VHJhbnNpdGlvbi5iaW5kKHN3aXBlciksXG4gICAgICB9LFxuICAgIH0pO1xuICB9LFxuICBvbjoge1xuICAgIGJlZm9yZUluaXQoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY292ZXJmbG93JykgcmV0dXJuO1xuXG4gICAgICBzd2lwZXIuY2xhc3NOYW1lcy5wdXNoKGAke3N3aXBlci5wYXJhbXMuY29udGFpbmVyTW9kaWZpZXJDbGFzc31jb3ZlcmZsb3dgKTtcbiAgICAgIHN3aXBlci5jbGFzc05hbWVzLnB1c2goYCR7c3dpcGVyLnBhcmFtcy5jb250YWluZXJNb2RpZmllckNsYXNzfTNkYCk7XG5cbiAgICAgIHN3aXBlci5wYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgICBzd2lwZXIub3JpZ2luYWxQYXJhbXMud2F0Y2hTbGlkZXNQcm9ncmVzcyA9IHRydWU7XG4gICAgfSxcbiAgICBzZXRUcmFuc2xhdGUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKHN3aXBlci5wYXJhbXMuZWZmZWN0ICE9PSAnY292ZXJmbG93JykgcmV0dXJuO1xuICAgICAgc3dpcGVyLmNvdmVyZmxvd0VmZmVjdC5zZXRUcmFuc2xhdGUoKTtcbiAgICB9LFxuICAgIHNldFRyYW5zaXRpb24oZHVyYXRpb24pIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoc3dpcGVyLnBhcmFtcy5lZmZlY3QgIT09ICdjb3ZlcmZsb3cnKSByZXR1cm47XG4gICAgICBzd2lwZXIuY292ZXJmbG93RWZmZWN0LnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gIH0sXG59O1xuXG5jb25zdCBUaHVtYnMgPSB7XG4gIGluaXQoKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB7IHRodW1iczogdGh1bWJzUGFyYW1zIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgIGNvbnN0IFN3aXBlckNsYXNzID0gc3dpcGVyLmNvbnN0cnVjdG9yO1xuICAgIGlmICh0aHVtYnNQYXJhbXMuc3dpcGVyIGluc3RhbmNlb2YgU3dpcGVyQ2xhc3MpIHtcbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyID0gdGh1bWJzUGFyYW1zLnN3aXBlcjtcbiAgICAgIFV0aWxzLmV4dGVuZChzd2lwZXIudGh1bWJzLnN3aXBlci5vcmlnaW5hbFBhcmFtcywge1xuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgICAgIH0pO1xuICAgICAgVXRpbHMuZXh0ZW5kKHN3aXBlci50aHVtYnMuc3dpcGVyLnBhcmFtcywge1xuICAgICAgICB3YXRjaFNsaWRlc1Byb2dyZXNzOiB0cnVlLFxuICAgICAgICBzbGlkZVRvQ2xpY2tlZFNsaWRlOiBmYWxzZSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoVXRpbHMuaXNPYmplY3QodGh1bWJzUGFyYW1zLnN3aXBlcikpIHtcbiAgICAgIHN3aXBlci50aHVtYnMuc3dpcGVyID0gbmV3IFN3aXBlckNsYXNzKFV0aWxzLmV4dGVuZCh7fSwgdGh1bWJzUGFyYW1zLnN3aXBlciwge1xuICAgICAgICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6IHRydWUsXG4gICAgICAgIHdhdGNoU2xpZGVzUHJvZ3Jlc3M6IHRydWUsXG4gICAgICAgIHNsaWRlVG9DbGlja2VkU2xpZGU6IGZhbHNlLFxuICAgICAgfSkpO1xuICAgICAgc3dpcGVyLnRodW1icy5zd2lwZXJDcmVhdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgc3dpcGVyLnRodW1icy5zd2lwZXIuJGVsLmFkZENsYXNzKHN3aXBlci5wYXJhbXMudGh1bWJzLnRodW1ic0NvbnRhaW5lckNsYXNzKTtcbiAgICBzd2lwZXIudGh1bWJzLnN3aXBlci5vbigndGFwJywgc3dpcGVyLnRodW1icy5vblRodW1iQ2xpY2spO1xuICB9LFxuICBvblRodW1iQ2xpY2soKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICBpZiAoIXRodW1ic1N3aXBlcikgcmV0dXJuO1xuICAgIGNvbnN0IGNsaWNrZWRJbmRleCA9IHRodW1ic1N3aXBlci5jbGlja2VkSW5kZXg7XG4gICAgY29uc3QgY2xpY2tlZFNsaWRlID0gdGh1bWJzU3dpcGVyLmNsaWNrZWRTbGlkZTtcbiAgICBpZiAoY2xpY2tlZFNsaWRlICYmICQoY2xpY2tlZFNsaWRlKS5oYXNDbGFzcyhzd2lwZXIucGFyYW1zLnRodW1icy5zbGlkZVRodW1iQWN0aXZlQ2xhc3MpKSByZXR1cm47XG4gICAgaWYgKHR5cGVvZiBjbGlja2VkSW5kZXggPT09ICd1bmRlZmluZWQnIHx8IGNsaWNrZWRJbmRleCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgIGxldCBzbGlkZVRvSW5kZXg7XG4gICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgc2xpZGVUb0luZGV4ID0gcGFyc2VJbnQoJCh0aHVtYnNTd2lwZXIuY2xpY2tlZFNsaWRlKS5hdHRyKCdkYXRhLXN3aXBlci1zbGlkZS1pbmRleCcpLCAxMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNsaWRlVG9JbmRleCA9IGNsaWNrZWRJbmRleDtcbiAgICB9XG4gICAgaWYgKHN3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgbGV0IGN1cnJlbnRJbmRleCA9IHN3aXBlci5hY3RpdmVJbmRleDtcbiAgICAgIGlmIChzd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRJbmRleCkuaGFzQ2xhc3Moc3dpcGVyLnBhcmFtcy5zbGlkZUR1cGxpY2F0ZUNsYXNzKSkge1xuICAgICAgICBzd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICAgICAgc3dpcGVyLl9jbGllbnRMZWZ0ID0gc3dpcGVyLiR3cmFwcGVyRWxbMF0uY2xpZW50TGVmdDtcbiAgICAgICAgY3VycmVudEluZGV4ID0gc3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgfVxuICAgICAgY29uc3QgcHJldkluZGV4ID0gc3dpcGVyLnNsaWRlcy5lcShjdXJyZW50SW5kZXgpLnByZXZBbGwoYFtkYXRhLXN3aXBlci1zbGlkZS1pbmRleD1cIiR7c2xpZGVUb0luZGV4fVwiXWApLmVxKDApLmluZGV4KCk7XG4gICAgICBjb25zdCBuZXh0SW5kZXggPSBzd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRJbmRleCkubmV4dEFsbChgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzbGlkZVRvSW5kZXh9XCJdYCkuZXEoMCkuaW5kZXgoKTtcbiAgICAgIGlmICh0eXBlb2YgcHJldkluZGV4ID09PSAndW5kZWZpbmVkJykgc2xpZGVUb0luZGV4ID0gbmV4dEluZGV4O1xuICAgICAgZWxzZSBpZiAodHlwZW9mIG5leHRJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHNsaWRlVG9JbmRleCA9IHByZXZJbmRleDtcbiAgICAgIGVsc2UgaWYgKG5leHRJbmRleCAtIGN1cnJlbnRJbmRleCA8IGN1cnJlbnRJbmRleCAtIHByZXZJbmRleCkgc2xpZGVUb0luZGV4ID0gbmV4dEluZGV4O1xuICAgICAgZWxzZSBzbGlkZVRvSW5kZXggPSBwcmV2SW5kZXg7XG4gICAgfVxuICAgIHN3aXBlci5zbGlkZVRvKHNsaWRlVG9JbmRleCk7XG4gIH0sXG4gIHVwZGF0ZShpbml0aWFsKSB7XG4gICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICBpZiAoIXRodW1ic1N3aXBlcikgcmV0dXJuO1xuXG4gICAgY29uc3Qgc2xpZGVzUGVyVmlldyA9IHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldyA9PT0gJ2F1dG8nXG4gICAgICA/IHRodW1ic1N3aXBlci5zbGlkZXNQZXJWaWV3RHluYW1pYygpXG4gICAgICA6IHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldztcblxuICAgIGlmIChzd2lwZXIucmVhbEluZGV4ICE9PSB0aHVtYnNTd2lwZXIucmVhbEluZGV4KSB7XG4gICAgICBsZXQgY3VycmVudFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgbGV0IG5ld1RodW1ic0luZGV4O1xuICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMubG9vcCkge1xuICAgICAgICBpZiAodGh1bWJzU3dpcGVyLnNsaWRlcy5lcShjdXJyZW50VGh1bWJzSW5kZXgpLmhhc0NsYXNzKHRodW1ic1N3aXBlci5wYXJhbXMuc2xpZGVEdXBsaWNhdGVDbGFzcykpIHtcbiAgICAgICAgICB0aHVtYnNTd2lwZXIubG9vcEZpeCgpO1xuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgICAgICAgIHRodW1ic1N3aXBlci5fY2xpZW50TGVmdCA9IHRodW1ic1N3aXBlci4kd3JhcHBlckVsWzBdLmNsaWVudExlZnQ7XG4gICAgICAgICAgY3VycmVudFRodW1ic0luZGV4ID0gdGh1bWJzU3dpcGVyLmFjdGl2ZUluZGV4O1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpbmQgYWN0dWFsIHRodW1icyBpbmRleCB0byBzbGlkZSB0b1xuICAgICAgICBjb25zdCBwcmV2VGh1bWJzSW5kZXggPSB0aHVtYnNTd2lwZXIuc2xpZGVzLmVxKGN1cnJlbnRUaHVtYnNJbmRleCkucHJldkFsbChgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzd2lwZXIucmVhbEluZGV4fVwiXWApLmVxKDApLmluZGV4KCk7XG4gICAgICAgIGNvbnN0IG5leHRUaHVtYnNJbmRleCA9IHRodW1ic1N3aXBlci5zbGlkZXMuZXEoY3VycmVudFRodW1ic0luZGV4KS5uZXh0QWxsKGBbZGF0YS1zd2lwZXItc2xpZGUtaW5kZXg9XCIke3N3aXBlci5yZWFsSW5kZXh9XCJdYCkuZXEoMCkuaW5kZXgoKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwcmV2VGh1bWJzSW5kZXggPT09ICd1bmRlZmluZWQnKSBuZXdUaHVtYnNJbmRleCA9IG5leHRUaHVtYnNJbmRleDtcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIG5leHRUaHVtYnNJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIG5ld1RodW1ic0luZGV4ID0gcHJldlRodW1ic0luZGV4O1xuICAgICAgICBlbHNlIGlmIChuZXh0VGh1bWJzSW5kZXggLSBjdXJyZW50VGh1bWJzSW5kZXggPT09IGN1cnJlbnRUaHVtYnNJbmRleCAtIHByZXZUaHVtYnNJbmRleCkgbmV3VGh1bWJzSW5kZXggPSBjdXJyZW50VGh1bWJzSW5kZXg7XG4gICAgICAgIGVsc2UgaWYgKG5leHRUaHVtYnNJbmRleCAtIGN1cnJlbnRUaHVtYnNJbmRleCA8IGN1cnJlbnRUaHVtYnNJbmRleCAtIHByZXZUaHVtYnNJbmRleCkgbmV3VGh1bWJzSW5kZXggPSBuZXh0VGh1bWJzSW5kZXg7XG4gICAgICAgIGVsc2UgbmV3VGh1bWJzSW5kZXggPSBwcmV2VGh1bWJzSW5kZXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdUaHVtYnNJbmRleCA9IHN3aXBlci5yZWFsSW5kZXg7XG4gICAgICB9XG4gICAgICBpZiAodGh1bWJzU3dpcGVyLnZpc2libGVTbGlkZXNJbmRleGVzICYmIHRodW1ic1N3aXBlci52aXNpYmxlU2xpZGVzSW5kZXhlcy5pbmRleE9mKG5ld1RodW1ic0luZGV4KSA8IDApIHtcbiAgICAgICAgaWYgKHRodW1ic1N3aXBlci5wYXJhbXMuY2VudGVyZWRTbGlkZXMpIHtcbiAgICAgICAgICBpZiAobmV3VGh1bWJzSW5kZXggPiBjdXJyZW50VGh1bWJzSW5kZXgpIHtcbiAgICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gbmV3VGh1bWJzSW5kZXggLSBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSArIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1RodW1ic0luZGV4ID0gbmV3VGh1bWJzSW5kZXggKyBNYXRoLmZsb29yKHNsaWRlc1BlclZpZXcgLyAyKSAtIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG5ld1RodW1ic0luZGV4ID4gY3VycmVudFRodW1ic0luZGV4KSB7XG4gICAgICAgICAgbmV3VGh1bWJzSW5kZXggPSBuZXdUaHVtYnNJbmRleCAtIHNsaWRlc1BlclZpZXcgKyAxO1xuICAgICAgICB9XG4gICAgICAgIHRodW1ic1N3aXBlci5zbGlkZVRvKG5ld1RodW1ic0luZGV4LCBpbml0aWFsID8gMCA6IHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWN0aXZhdGUgdGh1bWJzXG4gICAgbGV0IHRodW1ic1RvQWN0aXZhdGUgPSAxO1xuICAgIGNvbnN0IHRodW1iQWN0aXZlQ2xhc3MgPSBzd2lwZXIucGFyYW1zLnRodW1icy5zbGlkZVRodW1iQWN0aXZlQ2xhc3M7XG5cbiAgICBpZiAoc3dpcGVyLnBhcmFtcy5zbGlkZXNQZXJWaWV3ID4gMSAmJiAhc3dpcGVyLnBhcmFtcy5jZW50ZXJlZFNsaWRlcykge1xuICAgICAgdGh1bWJzVG9BY3RpdmF0ZSA9IHN3aXBlci5wYXJhbXMuc2xpZGVzUGVyVmlldztcbiAgICB9XG5cbiAgICB0aHVtYnNTd2lwZXIuc2xpZGVzLnJlbW92ZUNsYXNzKHRodW1iQWN0aXZlQ2xhc3MpO1xuICAgIGlmICh0aHVtYnNTd2lwZXIucGFyYW1zLmxvb3AgfHwgdGh1bWJzU3dpcGVyLnBhcmFtcy52aXJ0dWFsKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRodW1ic1RvQWN0aXZhdGU7IGkgKz0gMSkge1xuICAgICAgICB0aHVtYnNTd2lwZXIuJHdyYXBwZXJFbC5jaGlsZHJlbihgW2RhdGEtc3dpcGVyLXNsaWRlLWluZGV4PVwiJHtzd2lwZXIucmVhbEluZGV4ICsgaX1cIl1gKS5hZGRDbGFzcyh0aHVtYkFjdGl2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aHVtYnNUb0FjdGl2YXRlOyBpICs9IDEpIHtcbiAgICAgICAgdGh1bWJzU3dpcGVyLnNsaWRlcy5lcShzd2lwZXIucmVhbEluZGV4ICsgaSkuYWRkQ2xhc3ModGh1bWJBY3RpdmVDbGFzcyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxufTtcbnZhciB0aHVtYnMgPSB7XG4gIG5hbWU6ICd0aHVtYnMnLFxuICBwYXJhbXM6IHtcbiAgICB0aHVtYnM6IHtcbiAgICAgIHN3aXBlcjogbnVsbCxcbiAgICAgIHNsaWRlVGh1bWJBY3RpdmVDbGFzczogJ3N3aXBlci1zbGlkZS10aHVtYi1hY3RpdmUnLFxuICAgICAgdGh1bWJzQ29udGFpbmVyQ2xhc3M6ICdzd2lwZXItY29udGFpbmVyLXRodW1icycsXG4gICAgfSxcbiAgfSxcbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgVXRpbHMuZXh0ZW5kKHN3aXBlciwge1xuICAgICAgdGh1bWJzOiB7XG4gICAgICAgIHN3aXBlcjogbnVsbCxcbiAgICAgICAgaW5pdDogVGh1bWJzLmluaXQuYmluZChzd2lwZXIpLFxuICAgICAgICB1cGRhdGU6IFRodW1icy51cGRhdGUuYmluZChzd2lwZXIpLFxuICAgICAgICBvblRodW1iQ2xpY2s6IFRodW1icy5vblRodW1iQ2xpY2suYmluZChzd2lwZXIpLFxuICAgICAgfSxcbiAgICB9KTtcbiAgfSxcbiAgb246IHtcbiAgICBiZWZvcmVJbml0KCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGNvbnN0IHsgdGh1bWJzIH0gPSBzd2lwZXIucGFyYW1zO1xuICAgICAgaWYgKCF0aHVtYnMgfHwgIXRodW1icy5zd2lwZXIpIHJldHVybjtcbiAgICAgIHN3aXBlci50aHVtYnMuaW5pdCgpO1xuICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUodHJ1ZSk7XG4gICAgfSxcbiAgICBzbGlkZUNoYW5nZSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBpZiAoIXN3aXBlci50aHVtYnMuc3dpcGVyKSByZXR1cm47XG4gICAgICBzd2lwZXIudGh1bWJzLnVwZGF0ZSgpO1xuICAgIH0sXG4gICAgdXBkYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnRodW1icy5zd2lwZXIpIHJldHVybjtcbiAgICAgIHN3aXBlci50aHVtYnMudXBkYXRlKCk7XG4gICAgfSxcbiAgICByZXNpemUoKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgaWYgKCFzd2lwZXIudGh1bWJzLnN3aXBlcikgcmV0dXJuO1xuICAgICAgc3dpcGVyLnRodW1icy51cGRhdGUoKTtcbiAgICB9LFxuICAgIG9ic2VydmVyVXBkYXRlKCkge1xuICAgICAgY29uc3Qgc3dpcGVyID0gdGhpcztcbiAgICAgIGlmICghc3dpcGVyLnRodW1icy5zd2lwZXIpIHJldHVybjtcbiAgICAgIHN3aXBlci50aHVtYnMudXBkYXRlKCk7XG4gICAgfSxcbiAgICBzZXRUcmFuc2l0aW9uKGR1cmF0aW9uKSB7XG4gICAgICBjb25zdCBzd2lwZXIgPSB0aGlzO1xuICAgICAgY29uc3QgdGh1bWJzU3dpcGVyID0gc3dpcGVyLnRodW1icy5zd2lwZXI7XG4gICAgICBpZiAoIXRodW1ic1N3aXBlcikgcmV0dXJuO1xuICAgICAgdGh1bWJzU3dpcGVyLnNldFRyYW5zaXRpb24oZHVyYXRpb24pO1xuICAgIH0sXG4gICAgYmVmb3JlRGVzdHJveSgpIHtcbiAgICAgIGNvbnN0IHN3aXBlciA9IHRoaXM7XG4gICAgICBjb25zdCB0aHVtYnNTd2lwZXIgPSBzd2lwZXIudGh1bWJzLnN3aXBlcjtcbiAgICAgIGlmICghdGh1bWJzU3dpcGVyKSByZXR1cm47XG4gICAgICBpZiAoc3dpcGVyLnRodW1icy5zd2lwZXJDcmVhdGVkICYmIHRodW1ic1N3aXBlcikge1xuICAgICAgICB0aHVtYnNTd2lwZXIuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH0sXG4gIH0sXG59O1xuXG4vLyBTd2lwZXIgQ2xhc3NcblxuY29uc3QgY29tcG9uZW50cyA9IFtcbiAgRGV2aWNlJDEsXG4gIFN1cHBvcnQkMSxcbiAgQnJvd3NlciQxLFxuICBSZXNpemUsXG4gIE9ic2VydmVyJDEsXG4gIFxuXTtcblxuaWYgKHR5cGVvZiBTd2lwZXIudXNlID09PSAndW5kZWZpbmVkJykge1xuICBTd2lwZXIudXNlID0gU3dpcGVyLkNsYXNzLnVzZTtcbiAgU3dpcGVyLmluc3RhbGxNb2R1bGUgPSBTd2lwZXIuQ2xhc3MuaW5zdGFsbE1vZHVsZTtcbn1cblxuU3dpcGVyLnVzZShjb21wb25lbnRzKTtcblxuZXhwb3J0IHsgYTExeSQxIGFzIEExMXksIGF1dG9wbGF5IGFzIEF1dG9wbGF5LCBjb250cm9sbGVyIGFzIENvbnRyb2xsZXIsIGVmZmVjdENvdmVyZmxvdyBhcyBFZmZlY3RDb3ZlcmZsb3csIGVmZmVjdEN1YmUgYXMgRWZmZWN0Q3ViZSwgZWZmZWN0RmFkZSBhcyBFZmZlY3RGYWRlLCBlZmZlY3RGbGlwIGFzIEVmZmVjdEZsaXAsIGhhc2hOYXZpZ2F0aW9uIGFzIEhhc2hOYXZpZ2F0aW9uLCBoaXN0b3J5IGFzIEhpc3RvcnksIGtleWJvYXJkIGFzIEtleWJvYXJkLCBsYXp5IGFzIExhenksIG1vdXNld2hlZWwgYXMgTW91c2V3aGVlbCwgbmF2aWdhdGlvbiBhcyBOYXZpZ2F0aW9uLCBwYWdpbmF0aW9uIGFzIFBhZ2luYXRpb24sIHBhcmFsbGF4IGFzIFBhcmFsbGF4LCBzY3JvbGxiYXIgYXMgU2Nyb2xsYmFyLCBTd2lwZXIsIHRodW1icyBhcyBUaHVtYnMsIHZpcnR1YWwgYXMgVmlydHVhbCwgem9vbSBhcyBab29tIH07XG4iLCJpbXBvcnQgJ3N3aXBlci9kaXN0L2Nzcy9zd2lwZXIubWluLmNzcyc7XHJcbmltcG9ydCB7XHJcbiAgU3dpcGVyLFxyXG4gIE5hdmlnYXRpb24sXHJcbiAgUGFnaW5hdGlvbixcclxufSBmcm9tICdzd2lwZXIvZGlzdC9qcy9zd2lwZXIuZXNtLmpzJztcclxuaW1wb3J0IHsgZm9yRWFjaEVsZW1lbnQgfSBmcm9tICcuLi91dGlscy9lbGVtZW50cyc7XHJcblxyXG5Td2lwZXIudXNlKFtOYXZpZ2F0aW9uLCBQYWdpbmF0aW9uXSk7XHJcblxyXG5pbnRlcmZhY2UgSVNsaWRlciBleHRlbmRzIEhUTUxFbGVtZW50IHtcclxuICBzbGlkZXI6IFN3aXBlclxyXG59XHJcbmludGVyZmFjZSBJU2xpZGVyQnRuIGV4dGVuZHMgSFRNTEVsZW1lbnQge1xyXG4gIHNsaWRlcjogU3dpcGVyXHJcbn1cclxuY29uc3QgaW5pdFNsaWRlciA9IChlbDogSVNsaWRlciwgYXJncykgPT4ge1xyXG4gIGNvbnN0IG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcclxuICAgIHNsaWRlc1BlclZpZXc6IDEsXHJcbiAgICBicmVha3BvaW50c0ludmVyc2U6IHRydWUsXHJcbiAgICBzcGFjZUJldHdlZW46IGVsLmRhdGFzZXQuc3BhY2ViZXR3ZWVuID8gcGFyc2VJbnQoZWwuZGF0YXNldC5zcGFjZWJldHdlZW4sIDEwKSA6IDAsXHJcbiAgICBwYWdpbmF0aW9uOiB7XHJcbiAgICAgIGVsOiBlbC5xdWVyeVNlbGVjdG9yKCcuanMtcGFnaW5hdGlvbicpID8gZWwucXVlcnlTZWxlY3RvcignLmpzLXBhZ2luYXRpb24nKSA6IG51bGwsXHJcbiAgICAgIC8vIHR5cGU6ICdmcmFjdGlvbicsXHJcbiAgICB9LFxyXG4gICAgbmF2aWdhdGlvbjoge1xyXG4gICAgICBuZXh0RWw6IGVsLnF1ZXJ5U2VsZWN0b3IoJy5qcy1uZXh0JykgPyBlbC5xdWVyeVNlbGVjdG9yKCcuanMtbmV4dCcpIDogbnVsbCxcclxuICAgICAgcHJldkVsOiBlbC5xdWVyeVNlbGVjdG9yKCcuanMtcHJldicpID8gZWwucXVlcnlTZWxlY3RvcignLmpzLXByZXYnKSA6IG51bGwsXHJcbiAgICB9LFxyXG4gIH0sIGFyZ3MpO1xyXG5cclxuICBpZiAoZWwuZGF0YXNldC5wYWdpbmF0aW9uKSB7XHJcbiAgICBvcHRpb25zLnBhZ2luYXRpb24uZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsLmRhdGFzZXQucGFnaW5hdGlvbik7XHJcbiAgfVxyXG5cclxuICBpZiAoZWwuZGF0YXNldC5uZXh0KSB7XHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBvcHRpb25zLm5hdmlnYXRpb24ubmV4dEVsID0gZWwuZGF0YXNldC5uZXh0O1xyXG4gIH1cclxuXHJcbiAgaWYgKGVsLmRhdGFzZXQucHJldikge1xyXG4gICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgb3B0aW9ucy5uYXZpZ2F0aW9uLnByZXZFbCA9IGVsLmRhdGFzZXQucHJldjtcclxuICB9XHJcblxyXG4gIGVsLnNsaWRlciA9IG5ldyBTd2lwZXIoZWwsIG9wdGlvbnMpO1xyXG59O1xyXG5cclxuZm9yRWFjaEVsZW1lbnQoJy5qcy1jYXJvdXNlbC00JywgKGVsOiBJU2xpZGVyKSA9PiB7XHJcbiAgY29uc3QgYXJncyA9IHtcclxuICAgIGJyZWFrcG9pbnRzOiB7XHJcbiAgICAgIDk5Mjoge1xyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDQsXHJcbiAgICAgIH0sXHJcbiAgICAgIDc2ODoge1xyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDMsXHJcbiAgICAgIH0sXHJcbiAgICAgIDU3Njoge1xyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDIsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIH07XHJcblxyXG4gIGluaXRTbGlkZXIoZWwsIGFyZ3MpO1xyXG59KTtcclxuXHJcbmZvckVhY2hFbGVtZW50KCcuanMtc2VsZWN0LXNsaWRlcicsIChlbDogSVNsaWRlcikgPT4ge1xyXG4gIGNvbnN0IGFyZ3MgPSB7XHJcbiAgICBhdXRvSGVpZ2h0OiB0cnVlLFxyXG4gICAgYnJlYWtwb2ludHM6IHtcclxuICAgICAgMTE3MDoge1xyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDMsXHJcbiAgICAgIH0sXHJcbiAgICAgIDk5Mjoge1xyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDIsXHJcbiAgICAgIH0sXHJcbiAgICAgIDc2ODoge1xyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIH07XHJcbiAgaW5pdFNsaWRlcihlbCwgYXJncyk7XHJcbn0pO1xyXG5cclxuXHJcbmZvckVhY2hFbGVtZW50KCcuanMtY2xpZW50LXNsaWRlcicsIChlbDogSVNsaWRlcikgPT4ge1xyXG4gIGNvbnN0IGFyZ3MgPSB7XHJcbiAgICBsb29wOiB0cnVlLFxyXG4gICAgYnJlYWtwb2ludHM6IHtcclxuICAgICAgMTE3MDoge1xyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDQsXHJcbiAgICAgIH0sXHJcbiAgICAgIDk5Mjoge1xyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDMsXHJcbiAgICAgIH0sXHJcbiAgICAgIDc2ODoge1xyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDIsXHJcbiAgICAgIH0sXHJcbiAgICAgIDU3Njoge1xyXG4gICAgICAgIHNsaWRlc1BlclZpZXc6IDEsXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIH07XHJcbiAgaW5pdFNsaWRlcihlbCwgYXJncyk7XHJcbn0pO1xyXG5cclxuXHJcbmZvckVhY2hFbGVtZW50KCcuanMtcmV3aWV2cy1zbGlkZXInLCAoZWw6IElTbGlkZXIpID0+IHtcclxuICBpbml0U2xpZGVyKGVsLCB7XHJcbiAgICBhdXRvSGVpZ2h0OiB0cnVlLFxyXG4gIH0pO1xyXG59KTtcclxuXHJcbmZvckVhY2hFbGVtZW50KCcuanMtdGFyZ2V0LW5leHQnLCAoZWw6IElTbGlkZXJCdG4pID0+IHtcclxuICBpZiAoIWVsLmRhdGFzZXQudGFyZ2V0KSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGNvbnN0IHNsaWRlciA9IDxJU2xpZGVyPiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsLmRhdGFzZXQudGFyZ2V0KTtcclxuICBlbC5zbGlkZXIgPSBzbGlkZXIuc2xpZGVyO1xyXG4gIGVsLm9uY2xpY2sgPSAoZTogRXZlbnQpID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGVsLnNsaWRlci5zbGlkZU5leHQoKTtcclxuICB9O1xyXG59KTtcclxuXHJcbmZvckVhY2hFbGVtZW50KCcuanMtdGFyZ2V0LXByZXYnLCAoZWw6IElTbGlkZXJCdG4pID0+IHtcclxuICBpZiAoIWVsLmRhdGFzZXQudGFyZ2V0KSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGNvbnN0IHNsaWRlciA9IDxJU2xpZGVyPiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsLmRhdGFzZXQudGFyZ2V0KTtcclxuICBlbC5zbGlkZXIgPSBzbGlkZXIuc2xpZGVyO1xyXG4gIGVsLm9uY2xpY2sgPSAoZTogRXZlbnQpID0+IHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgIGVsLnNsaWRlci5zbGlkZVByZXYoKTtcclxuICB9O1xyXG59KTtcclxuXHJcbmZvckVhY2hFbGVtZW50KCcuZ2FsbGVyeS10b3AnLCAoZWw6IElTbGlkZXIpID0+IHtcclxuICBjb25zdCB0aHVtYkVsID0gPElTbGlkZXI+IGVsLm5leHRFbGVtZW50U2libGluZztcclxuICBlbC5zbGlkZXIgPSBuZXcgU3dpcGVyKGVsLCB7XHJcbiAgICBzcGFjZUJldHdlZW46IDEwLFxyXG4gICAgbmF2aWdhdGlvbjoge1xyXG4gICAgICBuZXh0RWw6ICcuanMtY2FyZC1uZXh0JyxcclxuICAgICAgcHJldkVsOiAnLmpzLWNhcmQtcHJldicsXHJcbiAgICB9LFxyXG4gICAgdGh1bWJzOiB7XHJcbiAgICAgIHN3aXBlcjoge1xyXG4gICAgICAgIGVsOiB0aHVtYkVsLFxyXG4gICAgICAgIHNwYWNlQmV0d2VlbjogMTAsXHJcbiAgICAgICAgc2xpZGVzUGVyVmlldzogNSxcclxuICAgICAgICBmcmVlTW9kZTogdHJ1ZSxcclxuICAgICAgICB3YXRjaFNsaWRlc1Zpc2liaWxpdHk6IHRydWUsXHJcbiAgICAgICAgd2F0Y2hTbGlkZXNQcm9ncmVzczogdHJ1ZSxcclxuICAgICAgICBuYXZpZ2F0aW9uOiB7XHJcbiAgICAgICAgICBuZXh0RWw6ICcuanMtY2FyZHRodW1icy1uZXh0JyxcclxuICAgICAgICAgIHByZXZFbDogJy5qcy1jYXJkdGh1bWJzLXByZXYnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICB9LFxyXG4gIH0pO1xyXG59KTtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==